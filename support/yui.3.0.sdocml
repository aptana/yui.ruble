<?xml version="1.0" encoding="utf-8"?>
<javascript>
	<class type="Console" superclass="Widget">
		<description>Console creates a visualization for messages logged through calls to a YUI
instance's &lt;code&gt;Y.log( message, category, source )&lt;/code&gt; method.  The
debug versions of YUI modules will include logging statements to offer some
insight into the steps executed during that module's operation.  Including
log statements in your code will cause those messages to also appear in the
Console.  Use Console to aid in developing your page or application.
Entry categories &amp;quot;info&amp;quot;, &amp;quot;warn&amp;quot;, and &amp;quot;error&amp;quot;
are also referred to as the log level, and entries are filtered against the
configured logLevel.</description>
		<constructors>
		<constructor scope="instance">
			<description>Console creates a visualization for messages logged through calls to a YUI
instance's &lt;code&gt;Y.log( message, category, source )&lt;/code&gt; method.  The
debug versions of YUI modules will include logging statements to offer some
insight into the steps executed during that module's operation.  Including
log statements in your code will cause those messages to also appear in the
Console.  Use Console to aid in developing your page or application.
Entry categories &amp;quot;info&amp;quot;, &amp;quot;warn&amp;quot;, and &amp;quot;error&amp;quot;
are also referred to as the log level, and entries are filtered against the
configured logLevel.</description>
			<return-types>
				<return-type type="Console" />
			</return-types>
			<parameters>
			<parameter name="conf" type="Object" usage="required">
				<description>  Configuration object (see Configuration attributes)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_printLoop" type="Object" scope="instance">
			<description>Holds the object API returned from &lt;code&gt;Y.later&lt;/code&gt; for the print loop interval.</description>
		</property>
		<property name="Console.LOG_LEVEL_INFO" type="String" scope="static">
			<description>Static identifier for logLevel configuration setting to allow all incoming messages to generate Console entries.</description>
		</property>
		<property name="Console.BODY_TEMPLATE" type="String" scope="static">
			<description>Markup template used to generate the DOM structure for the Console body (where the messages are inserted) when it is rendered. The template includes only the {placeholder} &amp;quot;console_bd_class&amp;quot;, which is constributed by Console.CHROME_CLASSES.</description>
		</property>
		<property name="Console.HEADER_TEMPLATE" type="String" scope="static">
			<description>Markup template used to generate the DOM structure for the header section of the Console when it is rendered. The template includes these {placeholder}s: &lt;ul&gt; &lt;li&gt;console_button_class - contributed by Console.CHROME_CLASSES&lt;/li&gt; &lt;li&gt;console_collapse_class - contributed by Console.CHROME_CLASSES&lt;/li&gt; &lt;li&gt;console_hd_class - contributed by Console.CHROME_CLASSES&lt;/li&gt; &lt;li&gt;console_title_class - contributed by Console.CHROME_CLASSES&lt;/li&gt; &lt;li&gt;str_collapse - pulled from attribute strings.collapse&lt;/li&gt; &lt;li&gt;str_title - pulled from attribute strings.title&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="buffer" type="Array" scope="instance">
			<description>Array of normalized message objects awaiting printing.</description>
		</property>
		<property name="Console.ENTRY_TEMPLATE" type="String" scope="static">
			<description>Default markup template used to create the DOM structure for Console entries. The markup contains {placeholder}s for content and classes that are replaced via Y.substitute. The default template contains the {placeholder}s identified in Console.ENTRY_CLASSES as well as the following placeholders that will be populated by the log entry data: &lt;ul&gt; &lt;li&gt;cat_class&lt;/li&gt; &lt;li&gt;src_class&lt;/li&gt; &lt;li&gt;totalTime&lt;/li&gt; &lt;li&gt;elapsedTime&lt;/li&gt; &lt;li&gt;localTime&lt;/li&gt; &lt;li&gt;sourceAndDetail&lt;/li&gt; &lt;li&gt;message&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="_body" type="Node" scope="instance">
			<description>Reference to the Node instance that will house the console messages.</description>
		</property>
		<property name="_head" type="Node" scope="instance">
			<description>Reference to the Node instance containing the header contents.</description>
		</property>
		<property name="Console.LOG_LEVEL_WARN" type="String" scope="static">
			<description>Static identifier for logLevel configuration setting to allow only incoming messages of logLevel &amp;quot;warn&amp;quot; or &amp;quot;error&amp;quot; to generate Console entries.</description>
		</property>
		<property name="_foot" type="Node" scope="instance">
			<description>Reference to the Node instance containing the footer contents.</description>
		</property>
		<property name="Console.ENTRY_CLASSES" type="Object" scope="static">
			<description>Map (object) of classNames used to populate the placeholders in the Console.ENTRY_TEMPLATE markup when rendering a new Console entry. &lt;p&gt;By default, the keys contained in the object are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;entry_class&lt;/li&gt; &lt;li&gt;entry_meta_class&lt;/li&gt; &lt;li&gt;entry_cat_class&lt;/li&gt; &lt;li&gt;entry_src_class&lt;/li&gt; &lt;li&gt;entry_time_class&lt;/li&gt; &lt;li&gt;entry_content_class&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="Console.FOOTER_TEMPLATE" type="String" scope="static">
			<description>Markup template used to generate the DOM structure for the footer section of the Console when it is rendered. The template includes many of the {placeholder}s from Console.CHROME_CLASSES as well as: &lt;ul&gt; &lt;li&gt;id_guid - generated unique id, relates the label and checkbox&lt;/li&gt; &lt;li&gt;str_pause - pulled from attribute strings.pause&lt;/li&gt; &lt;li&gt;str_clear - pulled from attribute strings.clear&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="Console.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration of the Widget.</description>
		</property>
		<property name="Console.NAME" type="String" scope="static">
			<description>The identity of the widget.</description>
		</property>
		<property name="Console.LOG_LEVEL_ERROR" type="String" scope="static">
			<description>Static identifier for logLevel configuration setting to allow only incoming messages of logLevel &amp;quot;error&amp;quot; to generate Console entries.</description>
		</property>
		<property name="_evtCat" type="string" scope="instance">
			<description>Category to prefix all event subscriptions to allow for ease of detach during destroy.</description>
		</property>
		<property name="Console.CHROME_CLASSES" type="Object" scope="static">
			<description>Map (object) of classNames used to populate the placeholders in the Console.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and Console.FOOTER_TEMPLATE markup when rendering the Console UI. &lt;p&gt;By default, the keys contained in the object are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;console_hd_class&lt;/li&gt; &lt;li&gt;console_bd_class&lt;/li&gt; &lt;li&gt;console_ft_class&lt;/li&gt; &lt;li&gt;console_controls_class&lt;/li&gt; &lt;li&gt;console_checkbox_class&lt;/li&gt; &lt;li&gt;console_pause_class&lt;/li&gt; &lt;li&gt;console_pause_label_class&lt;/li&gt; &lt;li&gt;console_button_class&lt;/li&gt; &lt;li&gt;console_clear_class&lt;/li&gt; &lt;li&gt;console_collapse_class&lt;/li&gt; &lt;li&gt;console_title_class&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="_normalizeMessage" scope="instance">
			<description>Create a log entry message from the inputs including the following keys: &lt;ul&gt; &lt;li&gt;time - this moment&lt;/li&gt; &lt;li&gt;message - leg message&lt;/li&gt; &lt;li&gt;category - logLevel or custom category for the message&lt;/li&gt; &lt;li&gt;source - when provided, the widget or util calling Y.log&lt;/li&gt; &lt;li&gt;sourceAndDetail - same as source but can include instance info&lt;/li&gt; &lt;li&gt;localTime - readable version of time&lt;/li&gt; &lt;li&gt;elapsedTime - ms since last entry&lt;/li&gt; &lt;li&gt;totalTime - ms since Console was instantiated or reset&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> custom event containing the log message</description>
			</parameter>
			</parameters>
			<return-description>Object the message object</return-description>
		</method>
		<method name="_uiUpdateCollapsed" scope="instance">
			<description>Updates the UI to reflect the new Collapsed state</description>
			<parameters>
			<parameter name="v" type="Boolean" usage="required">
				<description> true for collapsed, false for expanded</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterStringsChange" scope="instance">
			<description>Updates the UI if changes are made to any of the strings in the strings attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Custom event for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="initializer" scope="instance">
			<description>Constructor code. Set up the buffer and entry template, publish internal events, and subscribe to the configured logEvent.</description>
		</method>
		<method name="_cancelPrintLoop" scope="instance">
			<description>Clears the timeout for printing buffered messages.</description>
		</method>
		<method name="_trimOldEntries" scope="instance">
			<description>Removes the oldest message entries from the UI to maintain the limit specified in the consoleLimit configuration.</description>
		</method>
		<method name="_defResetFn" scope="instance">
			<description>Clears the console, resets the startTime attribute, enables and unpauses the widget.</description>
		</method>
		<method name="_encodeHTML" scope="instance">
			<description>Returns the input string with ampersands (&amp;amp;), &amp;lt, and &amp;gt; encoded as HTML entities.</description>
			<parameters>
			<parameter name="s" type="String" usage="required">
				<description> the raw string</description>
			</parameter>
			</parameters>
			<return-description>String the encoded string</return-description>
		</method>
		<method name="_uiSetHeight" scope="instance">
			<description>Set the height of the Console container. Set the body height to the difference between the configured height and the calculated heights of the header and footer. Overrides Widget.prototype._uiSetHeight.</description>
			<parameters>
			<parameter name="v" type="String|Number" usage="required">
				<description> the new height</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onCollapseClick" scope="instance">
			<description>Event handler for clicking on the Collapse/Expand button. Sets the &amp;quot;collapsed&amp;quot; attribute accordingly.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> DOM event facade for the click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="log" scope="instance">
			<description>Wrapper for &lt;code&gt;Y.log&lt;/code&gt;.</description>
			<parameters>
			<parameter name="arg*" type="MIXED" usage="required">
				<description> (all arguments passed through to &lt;code&gt;Y.log&lt;/code&gt;)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initBody" scope="instance">
			<description>Create the DOM structure for the console body&amp;#8212;where messages are rendered.</description>
		</method>
		<method name="_onLogEvent" scope="instance">
			<description>Responds to log events by normalizing qualifying messages and passing them along through the entry event for buffering etc.</description>
			<parameters>
			<parameter name="msg" type="String" usage="required">
				<description> the log message</description>
			</parameter>
			<parameter name="cat" type="String" usage="required">
				<description> OPTIONAL the category or logLevel of the message</description>
			</parameter>
			<parameter name="src" type="String" usage="required">
				<description> OPTIONAL the source of the message (e.g. widget name)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterPausedChange" scope="instance">
			<description>Updates the UI and schedules or cancels the print loop.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Custom event for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateStyle" scope="instance">
			<description>Validates input value for style attribute. Accepts only values 'inline', 'block', and 'separate'.</description>
			<parameters>
			<parameter name="style" type="String" usage="required">
				<description> the proposed value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>pass/fail</return-description>
		</method>
		<method name="destructor" scope="instance">
			<description>Tears down the instance, flushing event subscriptions and purging the UI.</description>
		</method>
		<method name="_initHead" scope="instance">
			<description>Create the DOM structure for the header elements.</description>
		</method>
		<method name="_afterConsoleLimitChange" scope="instance">
			<description>Calls this._trimOldEntries() in response to changes in the configured consoleLimit attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Custom event for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="bindUI" scope="instance">
			<description>Set up event listeners to wire up the UI to the internal state.</description>
		</method>
		<method name="_defEntryFn" scope="instance">
			<description>Buffers incoming message objects and schedules the printing.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The Custom event carrying the message in its payload</description>
			</parameter>
			</parameters>
		</method>
		<method name="_htmlEscapeMessage" scope="instance">
			<description>Performs HTML escaping on strings in the message object.</description>
			<parameters>
			<parameter name="m" type="Object" usage="required">
				<description> the normalized message object</description>
			</parameter>
			</parameters>
			<return-description>Object the message object with proper escapement</return-description>
		</method>
		<method name="collapse" scope="instance">
			<description>Collapses the body and footer.</description>
		</method>
		<method name="_onPauseClick" scope="instance">
			<description>Event handler for clicking on the Pause checkbox to update the paused attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> DOM event facade for the click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterVisibleChange" scope="instance">
			<description>Makes adjustments to the UI if needed when the Console is hidden or shown</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the visibleChange event</description>
			</parameter>
			</parameters>
		</method>
		<method name="scrollToLatest" scope="instance">
			<description>Scrolls to the most recent entry</description>
		</method>
		<method name="_onClearClick" scope="instance">
			<description>Event handler for clicking on the Clear button. Pass-through to &lt;code&gt;this.clearConsole()&lt;/code&gt;.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> DOM event facade for the click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_schedulePrint" scope="instance">
			<description>Sets an interval for buffered messages to be output to the console.</description>
		</method>
		<method name="_uiUpdateFromHideShow" scope="instance">
			<description>Recalculates dimensions and updates appropriately when shown</description>
			<parameters>
			<parameter name="v" type="Boolean" usage="required">
				<description> true for visible, false for hidden</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createEntryHTML" scope="instance">
			<description>Translates message meta into the markup for a console entry.</description>
			<parameters>
			<parameter name="m" type="Object" usage="required">
				<description> object literal containing normalized message metadata</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="expand" scope="instance">
			<description>Expands the body and footer if collapsed.</description>
		</method>
		<method name="_uiUpdatePaused" scope="instance">
			<description>Checks or unchecks the paused checkbox</description>
			<parameters>
			<parameter name="on" type="Boolean" usage="required">
				<description> the new checked state</description>
			</parameter>
			</parameters>
		</method>
		<method name="reset" scope="instance">
			<description>Clears the console and resets internal timers.</description>
		</method>
		<method name="syncUI" scope="instance">
			<description>Sync the UI state to the current attribute state.</description>
		</method>
		<method name="_afterCollapsedChange" scope="instance">
			<description>Updates the className of the contentBox, which should trigger CSS to hide or show the body and footer sections depending on the new value.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Custom event for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initFoot" scope="instance">
			<description>Create the DOM structure for the footer elements.</description>
		</method>
		<method name="printBuffer" scope="instance">
			<description>Outputs buffered messages to the console UI. This is typically called from a scheduled interval until the buffer is empty (referred to as the print loop). The number of buffered messages output to the Console is limited to the number provided as an argument. If no limit is passed, all buffered messages are rendered.</description>
			<parameters>
			<parameter name="limit" type="Number" usage="optional">
				<description> (optional) max number of buffered entries to write</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setLogLevel" scope="instance">
			<description>Setter method for logLevel attribute. Acceptable values are &amp;quot;error&amp;quot, &amp;quot;warn&amp;quot, and &amp;quot;info&amp;quot (case insensitive). Other values are treated as &amp;quot;info&amp;quot;.</description>
			<parameters>
			<parameter name="v" type="String" usage="required">
				<description> the desired log level</description>
			</parameter>
			</parameters>
			<return-description>String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR</return-description>
		</method>
		<method name="clearConsole" scope="instance">
			<description>Clear the console of messages and flush the buffer of pending messages.</description>
		</method>
		<method name="_isInLogLevel" scope="instance">
			<description>Determine if incoming log messages are within the configured logLevel to be buffered for printing.</description>
		</method>
		<method name="renderUI" scope="instance">
			<description>Generate the Console UI.</description>
		</method>
		</methods>
	</class>
	<class type="DOMEventFacade">
		<description>Wraps a DOM event, properties requiring browser abstraction are
fixed here.  Provids a security layer when required.</description>
		<properties>
		<property name="webkitKeymap" type="undefined" scope="instance" visibility="private">
			<description>webkit key remapping required for Safari &lt; 3.1</description>
		</property>
		<property name="which" type="int" scope="instance">
			<description>The button that was pushed. Same as button.</description>
		</property>
		<property name="relatedTarget" type="Node" scope="instance">
			<description>Node reference to the relatedTarget</description>
		</property>
		<property name="button" type="int" scope="instance">
			<description>The button that was pushed.</description>
		</property>
		<property name="_event" type="undefined" scope="instance">
			<description>The native event</description>
		</property>
		<property name="wheelDelta" type="int" scope="instance">
			<description>Number representing the direction and velocity of the movement of the mousewheel. Negative is down, the higher the number, the faster. Applies to the mousewheel event.</description>
		</property>
		<property name="currentTarget" type="Node" scope="instance">
			<description>Node reference for the element that the listener was attached to.</description>
		</property>
		<property name="pageX" type="int" scope="instance">
			<description>The X location of the event on the page (including scroll)</description>
		</property>
		<property name="pageY" type="int" scope="instance">
			<description>The Y location of the event on the page (including scroll)</description>
		</property>
		<property name="charCode" type="int" scope="instance">
			<description>The charCode for key events. Same as keyCode</description>
		</property>
		<property name="keyCode" type="int" scope="instance">
			<description>The keyCode for key events. Uses charCode if keyCode is not available</description>
		</property>
		<property name="target" type="Node" scope="instance">
			<description>Node reference for the targeted element</description>
		</property>
		</properties>
		<methods>
		<method name="resolve" scope="instance" visibility="private">
			<description>Returns a wrapped node. Intended to be used on event targets, so it will return the node's parent if the target is a text node. If accessing a property of the node throws an error, this is probably the anonymous div wrapper Gecko adds inside text nodes. This likely will only occur when attempting to access the relatedTarget. In this case, we now return null because the anonymous div is completely useless and we do not know what the related target was because we can't even get to the element's parent node.</description>
		</method>
		<method name="preventDefault" scope="instance">
			<description>Prevents the event's default behavior</description>
			<parameters>
			<parameter name="returnValue" type="string" usage="required">
				<description> sets the returnValue of the event to this value (rather than the default false value). This can be used to add a customized confirmation query to the beforeunload event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="stopPropagation" scope="instance">
			<description>Stops the propagation to the next bubble target</description>
		</method>
		<method name="stopImmediatePropagation" scope="instance">
			<description>Stops the propagation to the next bubble target and prevents any additional listeners from being exectued on the current target.</description>
		</method>
		<method name="halt" scope="instance">
			<description>Stops the event propagation and prevents the default event behavior.</description>
			<parameters>
			<parameter name="immediate" type="boolean" usage="required">
				<description> if true additional listeners on the current target will not be executed</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Plugin.DragConstrained" superclass="Base">
		<description>This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a renodenode or viewport. It anode* supports tick based moves and XY axis constraints.</description>
		<constructors>
		<constructor scope="instance">
			<description>This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a renodenode or viewport. It anode* supports tick based moves and XY axis constraints.</description>
			<return-types>
				<return-type type="Plugin.DragConstrained" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_regionCache" type="Object" scope="instance" visibility="private">
			<description>Store a cache of the region that we are constraining to</description>
		</property>
		<property name="con" type="{String}" scope="instance">
			<description>The Constrained instance will be placed on the Drag instance under the con namespace.</description>
		</property>
		</properties>
		<methods>
		<method name="_checkRegion" scope="instance" visibility="private">
			<description>Check if xy is inside a given region, if not change to it be inside.</description>
			<parameters>
			<parameter name="_xy" type="Array" usage="required">
				<description> The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The new XY that is inside the region</return-description>
		</method>
		<method name="_checkTicks" scope="instance" visibility="private">
			<description>This method delegates the proper helper method for tick calculations</description>
			<parameters>
			<parameter name="xy" type="Array" usage="required">
				<description> The XY coords for the Drag</description>
			</parameter>
			<parameter name="r" type="Object" usage="required">
				<description> The optional region that we are bound to.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The calced XY coords</return-description>
		</method>
		<method name="getRegion" scope="instance">
			<description>Get the active region: viewport, node, custom region</description>
			<parameters>
			<parameter name="inc" type="Boolean" usage="required">
				<description> Include the node's height and width</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="align" scope="instance">
			<description>Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.</description>
		</method>
		<method name="_handleStart" scope="instance" visibility="private">
			<description>Fires on drag:start and clears the _regionCache</description>
		</method>
		<method name="inRegion" scope="instance">
			<description>Checks if the XY passed or the dragNode is inside the active region.</description>
			<parameters>
			<parameter name="xy" type="Array" usage="required">
				<description> Optional XY to check, if not supplied this.get('dragNode').getXY() is used.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the XY is inside the region, false otherwise.</return-description>
		</method>
		<method name="_cacheRegion" scope="instance" visibility="private">
			<description>Get's the region and caches it, called from window.resize and when the cache is null</description>
		</method>
		</methods>
	</class>
	<class type="YUI">
		<description>The YUI global namespace object.  If YUI is already defined, the
existing YUI object will not be overwritten so that defined
namespaces are preserved.</description>
		<constructors>
		<constructor scope="instance">
			<description>The YUI global namespace object.  If YUI is already defined, the
existing YUI object will not be overwritten so that defined
namespaces are preserved.</description>
			<return-types>
				<return-type type="YUI" />
			</return-types>
			<parameters>
			<parameter name="o*" type="" usage="required">
				<description> Up to five optional configuration objects.  This object is stored
in YUI.config.  See config for the list of supported properties.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Global" type="EventTarget" scope="instance">
			<description>Hosts YUI page level events. This is where events bubble to when the broadcast config is set to 2. This property is only available if the custom event module is loaded.</description>
		</property>
		</properties>
		<methods>
		<method name="mix" scope="instance">
			<description>Applies the supplier's properties to the receiver. By default all prototype and static propertes on the supplier are applied to the corresponding spot on the receiver. By default all properties are applied, and a property that is already on the reciever will not be overwritten. The default behavior can be modified by supplying the appropriate parameters.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="ov" type="boolean" usage="required">
				<description> if true, properties already on the receiver will be overwritten if found on the supplier.</description>
			</parameter>
			<parameter name="wl" type="string[]" usage="required">
				<description> a whitelist. If supplied, only properties in this list will be applied to the receiver.</description>
			</parameter>
			<parameter name="mode" type="int" usage="required">
				<description> what should be copies, and to where default(0): object to object 1: prototype to prototype (old augment) 2: prototype to prototype and object props (new augment) 3: prototype to object 4: object to prototype</description>
			</parameter>
			<parameter name="merge" type="boolean" usage="required">
				<description> merge objects instead of overwriting/ignoring Used by Y.aggregate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the augmented object</return-description>
		</method>
		<method name="use" scope="instance">
			<description>Bind a module to a YUI instance</description>
			<parameters>
			<parameter name="modules*" type="string" usage="required">
				<description> 1-n modules to bind (uses arguments array)</description>
			</parameter>
			<parameter name="*callback" type="function" usage="required">
				<description> callback function executed when the instance has the required functionality. If included, it must be the last parameter.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="on" scope="instance">
			<description>&lt;code&gt;YUI&lt;/code&gt;'s &lt;code&gt;on&lt;/code&gt; method is a unified interface for subscribing to most events exposed by YUI. This includes custom events, DOM events, and function events. &lt;code&gt;detach&lt;/code&gt; is also provided to remove listeners serviced by this function. The signature that &lt;code&gt;on&lt;/code&gt; accepts varies depending on the type of event being consumed. Refer to the specific methods that will service a specific request for additional information about subscribing to that type of event. &lt;ul&gt; &lt;li&gt;Custom events. These events are defined by various modules in the library. This type of event is delegated to &lt;code&gt;EventTarget&lt;/code&gt;'s &lt;code&gt;on&lt;/code&gt; method. &lt;ul&gt; &lt;li&gt;The type of the event&lt;/li&gt; &lt;li&gt;The callback to execute&lt;/li&gt; &lt;li&gt;An optional context object&lt;/li&gt; &lt;li&gt;0..n additional arguments to supply the callback.&lt;/li&gt; &lt;/ul&gt; Example: &lt;code&gt;Y.on('domready', function() { // start work });&lt;/code&gt; &lt;/li&gt; &lt;li&gt;DOM events. These are moments reported by the browser related to browser functionality and user interaction. This type of event is delegated to &lt;code&gt;Event&lt;/code&gt;'s &lt;code&gt;attach&lt;/code&gt; method. &lt;ul&gt; &lt;li&gt;The type of the event&lt;/li&gt; &lt;li&gt;The callback to execute&lt;/li&gt; &lt;li&gt;The specification for the Node(s) to attach the listener to. This can be a selector, collections, or Node/Element refereces.&lt;/li&gt; &lt;li&gt;An optional context object&lt;/li&gt; &lt;li&gt;0..n additional arguments to supply the callback.&lt;/li&gt; &lt;/ul&gt; Example: &lt;code&gt;Y.on('click', function(e) { // something was clicked }, '#someelement');&lt;/code&gt; &lt;/li&gt; &lt;li&gt;Function events. These events can be used to react before or after a function is executed. This type of event is delegated to &lt;code&gt;Event.Do&lt;/code&gt;'s &lt;code&gt;before&lt;/code&gt; method. &lt;ul&gt; &lt;li&gt;The callback to execute&lt;/li&gt; &lt;li&gt;The object that has the function that will be listened for.&lt;/li&gt; &lt;li&gt;The name of the function to listen for.&lt;/li&gt; &lt;li&gt;An optional context object&lt;/li&gt; &lt;li&gt;0..n additional arguments to supply the callback.&lt;/li&gt; &lt;/ul&gt; Example &lt;code&gt;Y.on(function(arg1, arg2, etc) { // obj.methodname was executed }, obj 'methodname');&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt; &lt;code&gt;on&lt;/code&gt; corresponds to the moment before any default behavior of the event. &lt;code&gt;after&lt;/code&gt; works the same way, but these listeners execute after the event's default behavior. &lt;code&gt;before&lt;/code&gt; is an alias for &lt;code&gt;on&lt;/code&gt;.</description>
			<parameters>
			<parameter name="type**" type="" usage="required">
				<description> event type (this parameter does not apply for function events)</description>
			</parameter>
			<parameter name="fn" type="" usage="required">
				<description> the callback</description>
			</parameter>
			<parameter name="target**" type="" usage="required">
				<description> a descriptor for the target (applies to custom events only). For function events, this is the object that contains the function to execute.</description>
			</parameter>
			<parameter name="extra**" type="" usage="required">
				<description> 0..n Extra information a particular event may need. These will be documented with the event. In the case of function events, this is the name of the function to execute on the host. In the case of delegate listeners, this is the event delegation specification.</description>
			</parameter>
			<parameter name="context" type="" usage="required">
				<description> optionally change the value of 'this' in the callback</description>
			</parameter>
			<parameter name="args*" type="" usage="required">
				<description> 0..n additional arguments to pass to the callback.</description>
			</parameter>
			</parameters>
			<return-description>the event target or a detach handle per 'chain' config</return-description>
		</method>
		<method name="log" scope="instance">
			<description>If the 'debug' config is true, a 'yui:log' event will be dispatched, which the Console widget and anything else can consume. If the 'useBrowserConsole' config is true, it will write to the browser console if available. YUI-specific log messages will only be present in the -debug versions of the JS files. The build system is supposed to remove log statements from the raw and minified versions of the files.</description>
			<parameters>
			<parameter name="msg" type="String" usage="required">
				<description> The message to log.</description>
			</parameter>
			<parameter name="cat" type="String" usage="required">
				<description> The log category for the message. Default categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;. Custom categories can be used as well. (opt)</description>
			</parameter>
			<parameter name="src" type="String" usage="required">
				<description> The source of the the message (opt)</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> If true, the log event won't fire</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>YUI instance</return-description>
		</method>
		<method name="merge" scope="instance">
			<description>Returns a new object containing all of the properties of all the supplied objects. The properties from later objects will overwrite those in earlier objects. Passing in a single object will create a shallow copy of it. For a deep copy, use clone.</description>
			<parameters>
			<parameter name="arguments" type="Object*" usage="required">
				<description> the objects to merge</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the new merged object</return-description>
		</method>
		<method name="applyTo" scope="instance">
			<description>Executes a method on a YUI instance with the specified id if the specified method is whitelisted.</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the YUI instance id</description>
			</parameter>
			<parameter name="method" type="string" usage="required">
				<description> the name of the method to exectute. Ex: 'Object.keys'</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> the arguments to apply to the method</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the return value from the applied method or null</return-description>
		</method>
		<method name="namespace" scope="instance">
			<description>Returns the namespace specified and creates it if it doesn't exist &lt;pre&gt; YUI.namespace(&quot;property.package&quot;); YUI.namespace(&quot;YAHOO.property.package&quot;); &lt;/pre&gt; Either of the above would create YUI.property, then YUI.property.package (YAHOO is scrubbed out, this is to remain compatible with YUI2) Be careful when naming packages. Reserved words may work in some browsers and not others. For instance, the following will fail in Safari: &lt;pre&gt; YUI.namespace(&quot;really.long.nested.namespace&quot;); &lt;/pre&gt; This fails because &quot;long&quot; is a future reserved word in ECMAScript</description>
			<parameters>
			<parameter name="arguments" type="string*" usage="required">
				<description> 1-n namespaces to create</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>A reference to the last namespace object created</return-description>
		</method>
		<method name="later" scope="instance">
			<description>Executes the supplied function in the context of the supplied object 'when' milliseconds later. Executes the function a single time unless periodic is set to true.</description>
			<parameters>
			<parameter name="when" type="int" usage="required">
				<description> the number of milliseconds to wait until the fn is executed.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> the context object.</description>
			</parameter>
			<parameter name="fn" type="Function|String" usage="required">
				<description> the function to execute or the name of the method in the 'o' object to execute.</description>
			</parameter>
			<parameter name="data" type="" usage="required">
				<description> [Array] data that is provided to the function. This accepts either a single item or an array. If an array is provided, the function is executed with one parameter for each array item. If you need to pass a single array parameter, it needs to be wrapped in an array [myarray].</description>
			</parameter>
			<parameter name="periodic" type="boolean" usage="required">
				<description> if true, executes continuously at supplied interval until canceled.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>a timer object. Call the cancel() method on this object to 
stop the timer.</return-description>
		</method>
		<method name="_setup" scope="instance" visibility="private">
			<description>Finishes the instance setup. Attaches whatever modules were defined when the yui modules was registered.</description>
		</method>
		<method name="stamp" scope="instance">
			<description>Returns a guid associated with an object. If the object does not have one, a new one is created unless readOnly is specified.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to stamp</description>
			</parameter>
			<parameter name="readOnly" type="boolean" usage="required">
				<description> if true, a valid guid will only be returned if the object has one assigned to it.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The object's guid or null</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Register a module</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> module name</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> entry point into the module that is used to bind module to the YUI instance</description>
			</parameter>
			<parameter name="version" type="string" usage="required">
				<description> version string</description>
			</parameter>
			<parameter name="details" type="" usage="required">
				<description> optional config data: requires  - features that should be present before loading optional  - optional features that should be present if load optional defined use - features that should be attached automatically skinnable - rollup omit - features that should not be loaded if this module is present</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="Node.plug" scope="static">
			<description>Registers plugins to be instantiated at the class level (plugins which should be plugged into every instance of Node by default).</description>
			<parameters>
			<parameter name="plugin" type="Function | Array" usage="required">
				<description> Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)</description>
			</parameter>
			<parameter name="config" type="Object" usage="optional">
				<description> (Optional) If plugin is the plugin class, the configuration for the plugin</description>
			</parameter>
			</parameters>
		</method>
		<method name="Node.unplug" scope="static">
			<description>Unregisters any class level plugins which have been registered by the Node</description>
			<parameters>
			<parameter name="plugin" type="Function | Array" usage="required">
				<description> The plugin class, or an array of plugin classes</description>
			</parameter>
			</parameters>
		</method>
		<method name="delegate" scope="instance">
			<description>Sets up event delegation on a container element. The delegated event will use a supplied selector to test if the target or one of the descendants of the target match it. The supplied callback function will only be executed if a match was encountered, and, in fact, will be executed for each element that matches if you supply an ambiguous selector. The event object for the delegated event is supplied to the callback function. It is modified slightly in order to support all properties that may be needed for event delegation. 'currentTarget' is set to the element that matched the delegation specifcation. 'container' is set to the element that the listener is bound to (this normally would be the 'currentTarget').</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the event type to delegate</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description> the callback function to execute. This function will be provided the event object for the delegated event.</description>
			</parameter>
			<parameter name="el" type="string|node" usage="required">
				<description> the element that is the delegation container</description>
			</parameter>
			<parameter name="spec" type="string" usage="required">
				<description> a selector that must match the target of the event.</description>
			</parameter>
			<parameter name="context" type="" usage="required">
				<description> optional argument that specifies what 'this' refers to.</description>
			</parameter>
			<parameter name="args*" type="" usage="required">
				<description> 0..n additional arguments to pass on to the callback function. These arguments will be added after the event object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle" />
			</return-types>
			<return-description>the detach handle</return-description>
		</method>
		<method name="simulate" scope="static">
			<description>Simulates the event with the given name on a target.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The DOM element that's the target of the event.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to simulate (i.e., &quot;click&quot;).</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) Extra options to copy onto the event object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="error" scope="instance">
			<description>Report an error. The reporting mechanism is controled by the 'throwFail' configuration attribute. If throwFail is not specified, the message is written to the Logger, otherwise a JS error is thrown</description>
			<parameters>
			<parameter name="msg" type="string" usage="required">
				<description> the error message</description>
			</parameter>
			<parameter name="e" type="Error" usage="required">
				<description> Optional JS error that was caught. If supplied and throwFail is specified, this error will be re-thrown.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>this YUI instance</return-description>
		</method>
		<method name="cached" scope="instance">
			<description>Returns a wrapper for a function which caches the return value of that function, keyed off of the combined argument values.</description>
			<parameters>
			<parameter name="source" type="function" usage="required">
				<description> the function to memoize</description>
			</parameter>
			<parameter name="cache" type="" usage="required">
				<description> an optional cache seed</description>
			</parameter>
			<parameter name="refetch" type="" usage="required">
				<description> if supplied, this value is tested against the cached value. If the values are equal, the wrapped function is executed again.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>the wrapped function</return-description>
		</method>
		<method name="message" scope="instance">
			<description>Write a system message. This message will be preserved in the minified and raw versions of the YUI files, unlike log statements.</description>
			<parameters>
			<parameter name="msg" type="String" usage="required">
				<description> The message to log.</description>
			</parameter>
			<parameter name="cat" type="String" usage="required">
				<description> The log category for the message. Default categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;. Custom categories can be used as well. (opt)</description>
			</parameter>
			<parameter name="src" type="String" usage="required">
				<description> The source of the the message (opt)</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> If true, the log event won't fire</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>YUI instance</return-description>
		</method>
		<method name="guid" scope="instance">
			<description>Generate an id that is unique among all YUI instances</description>
			<parameters>
			<parameter name="pre" type="string" usage="required">
				<description> optional guid prefix</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the guid</return-description>
		</method>
		<method name="_init" scope="instance" visibility="private">
			<description>Initialize this YUI instance</description>
		</method>
		<method name="after" scope="instance">
			<description>after() is a unified interface for subscribing to most events exposed by YUI. This includes custom events, DOM events, and AOP events. This works the same way as the on() function, only it operates after any default behavior for the event has executed. @see &lt;code&gt;on&lt;/code&gt; for more information.</description>
			<parameters>
			<parameter name="type" type="" usage="required">
				<description> event type (this parameter does not apply for function events)</description>
			</parameter>
			<parameter name="fn" type="" usage="required">
				<description> the callback</description>
			</parameter>
			<parameter name="target" type="" usage="required">
				<description> a descriptor for the target (applies to custom events only). For function events, this is the object that contains the function to execute.</description>
			</parameter>
			<parameter name="extra" type="" usage="required">
				<description> 0..n Extra information a particular event may need. These will be documented with the event. In the case of function events, this is the name of the function to execute on the host. In the case of delegate listeners, this is the event delegation specification.</description>
			</parameter>
			<parameter name="context" type="" usage="required">
				<description> optionally change the value of 'this' in the callback</description>
			</parameter>
			<parameter name="args*" type="" usage="required">
				<description> 0..n additional arguments to pass to the callback.</description>
			</parameter>
			</parameters>
			<return-description>the event target or a detach handle per 'chain' config</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSource.Local" superclass="Base">
		<description>Base class for the DataSource Utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>Base class for the DataSource Utility.</description>
			<return-types>
				<return-type type="DataSource.Local" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="DataSource._tId" type="Number" scope="static" visibility="private">
			<description>Global transaction counter.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_initEvents" scope="instance" visibility="private">
			<description>This method creates all the events for this module.</description>
		</method>
		<method name="_defResponseFn" scope="instance">
			<description>Sends data as a normalized response to callback.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;dt&gt;data (Object)&lt;/dt&gt; &lt;dd&gt;Raw data.&lt;/dd&gt; &lt;dt&gt;response (Object)&lt;/dt&gt; &lt;dd&gt;Normalized response object with the following properties: &lt;dl&gt; &lt;dt&gt;results (Object)&lt;/dt&gt; &lt;dd&gt;Parsed results.&lt;/dd&gt; &lt;dt&gt;meta (Object)&lt;/dt&gt; &lt;dd&gt;Parsed meta data.&lt;/dd&gt; &lt;dt&gt;error (Boolean)&lt;/dt&gt; &lt;dd&gt;Error flag.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defRequestFn" scope="instance">
			<description>Manages request/response transaction. Must fire &lt;code&gt;response&lt;/code&gt; event when response is received. This method should be implemented by subclasses to achieve more complex behavior such as accessing remote data.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facadewith the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataSource.issueCallback" scope="static">
			<description>Executes a given callback. The third param determines whether to execute</description>
			<parameters>
			<parameter name="callback" type="Object" usage="required">
				<description> The callback object.</description>
			</parameter>
			<parameter name="params" type="Array" usage="required">
				<description> params to be passed to the callback method</description>
			</parameter>
			<parameter name="error" type="Boolean" usage="required">
				<description> whether an error occurred</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defDataFn" scope="instance">
			<description>Normalizes raw data into a response that includes results and meta properties.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;dt&gt;data (Object)&lt;/dt&gt; &lt;dd&gt;Raw data.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="sendRequest" scope="instance">
			<description>Generates a unique transaction ID and fires &lt;code&gt;request&lt;/code&gt; event.</description>
			<parameters>
			<parameter name="request" type="Object" usage="required">
				<description> Request.</description>
			</parameter>
			<parameter name="callback" type="Object" usage="required">
				<description> An object literal with the following properties: &lt;dl&gt; &lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Arbitrary data payload that will be passed back to the success and failure handlers.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			<parameter name="cfg" type="Object" usage="required">
				<description> Configuration object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID.</return-description>
		</method>
		</methods>
	</class>
	<class type="NodeList">
		<description>The NodeList class provides a wrapper for manipulating DOM NodeLists.
NodeList properties can be accessed via the set/get methods.
Use Y.all() to retrieve NodeList instances.</description>
		<constructors>
		<constructor scope="instance">
			<description>The NodeList class provides a wrapper for manipulating DOM NodeLists.
NodeList properties can be accessed via the set/get methods.
Use Y.all() to retrieve NodeList instances.</description>
			<return-types>
				<return-type type="NodeList" />
			</return-types>
		</constructor>
		</constructors>
		<methods>
		<method name="set" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="getAttribute" scope="instance">
			<description>Allows getting attributes on DOM nodes, normalizing in some cases. This passes through to the DOM node, allowing for custom attributes.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The attribute name</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The attribute value</return-description>
		</method>
		<method name="replaceClass" scope="instance">
			<description>Replace a class with another class for each node. If no oldClassName is present, the newClassName is simply added.</description>
			<parameters>
			<parameter name="oldClassName" type="String" usage="required">
				<description> the class name to be replaced</description>
			</parameter>
			<parameter name="newClassName" type="String" usage="required">
				<description> the class name that will be replacing the old class name</description>
			</parameter>
			</parameters>
		</method>
		<method name="some" scope="instance">
			<description>Executes the function once for each node until a true value is returned.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to apply. It receives 3 arguments: the current node instance, the node's index, and the NodeList instance</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> optional An optional context to execute the function from. Default context is the current Node instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the function returned true for any node.</return-description>
		</method>
		<method name="setStyle" scope="instance">
			<description>Sets a style property on each node.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to set.</description>
			</parameter>
			<parameter name="val" type="String|Number" usage="required">
				<description> The value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="remove" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="setStyles" scope="instance">
			<description>Sets multiple style properties on each node.</description>
			<parameters>
			<parameter name="hash" type="Object" usage="required">
				<description> An object literal of property:value pairs.</description>
			</parameter>
			</parameters>
		</method>
		<method name="odd" scope="instance">
			<description>Creates a new NodeList containing all nodes at odd indices (zero-based index).</description>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>NodeList containing the updated collection</return-description>
		</method>
		<method name="setContent" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="append" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="size" scope="instance">
			<description>Returns the current number of items in the NodeList.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The number of items in the NodeList.</return-description>
		</method>
		<method name="even" scope="instance">
			<description>Creates a new NodeList containing all nodes at even indices (zero-based index), including zero.</description>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>NodeList containing the updated collection</return-description>
		</method>
		<method name="NodeList.getDOMNodes" scope="static">
			<description>Retrieves the DOM nodes bound to a NodeList instance</description>
			<parameters>
			<parameter name="node" type="Y.NodeList" usage="required">
				<description> The NodeList instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The array of DOM nodes bound to the NodeList</return-description>
		</method>
		<method name="get" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="getComputedStyle" scope="instance">
			<description>Returns an array of the computed value for each node.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The computed values for each node.</return-description>
		</method>
		<method name="prepend" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="toDocFrag" scope="instance">
			<description>Creates a documenFragment from the nodes bound to the NodeList instance</description>
			<return-description>Node a Node instance bound to the documentFragment</return-description>
		</method>
		<method name="toggleClass" scope="instance">
			<description>If the className exists on the node it is removed, if it doesn't exist it is added.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to be toggled</description>
			</parameter>
			</parameters>
		</method>
		<method name="modulus" scope="instance">
			<description>Creates a new NodeList containing all nodes at every n indices, where remainder n % index equals r. (zero-based index).</description>
			<parameters>
			<parameter name="n" type="Int" usage="required">
				<description> The offset to use (return every nth node)</description>
			</parameter>
			<parameter name="r" type="Int" usage="required">
				<description> An optional remainder to use with the modulus operation (defaults to zero)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>NodeList containing the updated collection</return-description>
		</method>
		<method name="addClass" scope="instance">
			<description>Adds a class name to each node.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to add to the node's class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeClass" scope="instance">
			<description>Removes a class name from each node.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to remove from the node's class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="insert" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="indexOf" scope="instance">
			<description>Returns the index of the node in the NodeList instance or -1 if the node isn't found.</description>
			<parameters>
			<parameter name="node" type="Y.Node || DOMNode" usage="required">
				<description> the node to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>the index of the node value or -1 if not found</return-description>
		</method>
		<method name="after" scope="instance">
			<description>Applies an event listener to each Node bound to the NodeList. The handler is called only after all on() handlers are called and the event is not prevented.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The event being listened for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler to call when the event fires</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> The context to call the handler with. Default is the NodeList instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Returns an event handle that can later be use to detach().</return-description>
		</method>
		<method name="getStyle" scope="instance">
			<description>Returns an array of values for each node.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The current values of the style property for the element.</return-description>
		</method>
		<method name="detach" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="on" scope="instance">
			<description>Applies an event listener to each Node bound to the NodeList.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The event being listened for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler to call when the event fires</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> The context to call the handler with. Default is the NodeList instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Returns an event handle that can later be use to detach().</return-description>
		</method>
		<method name="setAttribute" scope="instance">
			<description>Allows setting attributes on DOM nodes, normalizing in some cases. This passes through to the DOM node, allowing for custom attributes.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The attribute name</description>
			</parameter>
			<parameter name="value" type="string" usage="required">
				<description> The value to set</description>
			</parameter>
			</parameters>
		</method>
		<method name="refresh" scope="instance">
			<description>Reruns the initial query, when created using a selector query</description>
		</method>
		<method name="detachAll" scope="instance">
			<description>Called on each Node instance</description>
		</method>
		<method name="filter" scope="instance">
			<description>Filters the NodeList instance down to only nodes matching the given selector.</description>
			<parameters>
			<parameter name="selector" type="String" usage="required">
				<description> The selector to filter against</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>NodeList containing the updated collection</return-description>
		</method>
		<method name="item" scope="instance">
			<description>Retrieves the Node instance at the given index.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the target Node.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The Node instance at the given index.</return-description>
		</method>
		<method name="each" scope="instance">
			<description>Applies the given function to each Node in the NodeList.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to apply. It receives 3 arguments: the current node instance, the node's index, and the NodeList instance</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> optional An optional context to apply the function with Default context is the current Node instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="hasClass" scope="instance">
			<description>Determines whether each node has the given className.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of booleans for each node bound to the NodeList.</return-description>
		</method>
		</methods>
	</class>
	<class type="Widget" superclass="Base">
		<description>A base class for widgets, providing:
&lt;ul&gt;
&lt;li&gt;The render lifecycle method, in addition to the init and destroy 
lifecycle methods provide by Base&lt;/li&gt;
&lt;li&gt;Abstract methods to support consistent MVC structure across 
widgets: renderer, renderUI, bindUI, syncUI&lt;/li&gt;
&lt;li&gt;Support for common widget attributes, such as boundingBox, contentBox, visible, 
disabled, focused, strings&lt;/li&gt;
&lt;/ul&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>A base class for widgets, providing:
&lt;ul&gt;
&lt;li&gt;The render lifecycle method, in addition to the init and destroy 
lifecycle methods provide by Base&lt;/li&gt;
&lt;li&gt;Abstract methods to support consistent MVC structure across 
widgets: renderer, renderUI, bindUI, syncUI&lt;/li&gt;
&lt;li&gt;Support for common widget attributes, such as boundingBox, contentBox, visible, 
disabled, focused, strings&lt;/li&gt;
&lt;/ul&gt;</description>
			<return-types>
				<return-type type="Widget" />
			</return-types>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description>  Object literal specifying widget configuration 
properties.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CONTENT_TEMPLATE" type="String" scope="instance">
			<description>Static property defining the markup template for content box.</description>
		</property>
		<property name="_strings" type="Object" scope="instance" visibility="private">
			<description>Private stings hash, used to store strings in locale specific buckets.</description>
		</property>
		<property name="Widget._NAME_LOWERCASE" type="undefined" scope="static" visibility="private">
			<description>Cached lowercase version of Widget.NAME</description>
		</property>
		<property name="DEF_UNIT" type="undefined" scope="instance">
			<description>Default unit to use for dimension values</description>
		</property>
		<property name="Widget.HTML_PARSER" type="Object" scope="static">
			<description>Object hash, defining how attribute values are to be parsed from markup contained in the widget's content box. e.g.: &lt;pre&gt; { // Set single Node references using selector syntax // (selector is run through node.query) titleNode: &quot;span.yui-title&quot;, // Set NodeList references using selector syntax // (array indicates selector is to be run through node.queryAll) listNodes: [&quot;li.yui-item&quot;], // Set other attribute types, using a parse function. // Context is set to the widget instance. label: function(contentBox) { return contentBox.query(&quot;span.title&quot;).get(&quot;innerHTML&quot;); } } &lt;/pre&gt;</description>
		</property>
		<property name="BOUNDING_TEMPLATE" type="String" scope="instance">
			<description>Static property defining the markup template for bounding box.</description>
		</property>
		<property name="_buildCfg" type="Object" scope="static" visibility="private">
			<description>The build configuration for the Widget class. &lt;p&gt; Defines the static fields which need to be aggregated, when this class is used as the main class passed to the Base.build method. &lt;/p&gt;</description>
		</property>
		<property name="Widget.UI_SRC" type="String" scope="static">
			<description>Constant used to identify state changes originating from the DOM (as opposed to the JavaScript model).</description>
		</property>
		<property name="Widget.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration for the Widget.</description>
		</property>
		<property name="Widget.NAME" type="String" scope="static">
			<description>Static property provides a string to identify the class. &lt;p&gt; Currently used to apply class identifiers to the bounding box and to classify events fired by the widget. &lt;/p&gt;</description>
		</property>
		<property name="WRAP_STYLES" type="Object" scope="instance">
			<description>Static property listing the styles that are mimiced on the bounding box from the content box.</description>
		</property>
		</properties>
		<methods>
		<method name="_uiSetVisible" scope="instance">
			<description>Sets the visible state for the UI</description>
			<parameters>
			<parameter name="val" type="boolean" usage="required"/>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Establishes the initial DOM for the widget. Invoking this method will lead to the creating of all DOM elements for the widget (or the manipulation of existing DOM elements for the progressive enhancement use case). &lt;p&gt; This method should only be invoked once for an initialized widget. &lt;/p&gt; &lt;p&gt; It delegates to the widget specific renderer method to do the actual work. &lt;/p&gt;</description>
			<parameters>
			<parameter name="parentNode" type="Object | String" usage="optional">
				<description> Optional. The Node under which the Widget is to be rendered. This can be a Node instance or a CSS selector string. &lt;p&gt; If the selector string returns more than one Node, the first node will be used as the parentNode. NOTE: This argument is required if both the boundingBox and contentBox are not currently in the document. If it's not provided, the Widget will be rendered to the body of the current document in this case. &lt;/p&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="show" scope="instance">
			<description>Shows the Module element by setting the &quot;visible&quot; attribute to &quot;true&quot;.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Causes the Widget to receive the focus by setting the &quot;focused&quot; attribute to &quot;true&quot;.</description>
		</method>
		<method name="initializer" scope="instance">
			<description>Initializer lifecycle implementation for the Widget class. Registers the widget instance, and runs through the Widget's HTML_PARSER definition.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Configuration object literal for the widget</description>
			</parameter>
			</parameters>
		</method>
		<method name="disabled" scope="instance">
			<description>Set the Widget's &quot;disabled&quot; attribute to &quot;true&quot;.</description>
		</method>
		<method name="_uiSetDisabled" scope="instance">
			<description>Sets the disabled state for the UI</description>
			<parameters>
			<parameter name="val" type="boolean" usage="required"/>
			</parameters>
		</method>
		<method name="_setBox" scope="instance" visibility="private">
			<description>Helper method to set the bounding/content box, or create it from the provided template if not found.</description>
			<parameters>
			<parameter name="node" type="Node|String" usage="required">
				<description> The node reference</description>
			</parameter>
			<parameter name="template" type="String" usage="required">
				<description> HTML string template for the node</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The node</return-description>
		</method>
		<method name="_afterHeightChange" scope="instance">
			<description>Default height attribute state change handler</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderer" scope="instance">
			<description>Creates DOM (or manipulates DOM for progressive enhancement) This method is invoked by render() and is not chained automatically for the class hierarchy (like initializer, destructor) so it should be chained manually for subclasses if required.</description>
		</method>
		<method name="_syncUI" scope="instance">
			<description>Updates the widget UI to reflect the attribute state.</description>
		</method>
		<method name="_uiSetHeight" scope="instance">
			<description>Sets the height on the widget's bounding box element</description>
			<parameters>
			<parameter name="val" type="String | Number" usage="required"/>
			</parameters>
		</method>
		<method name="hide" scope="instance">
			<description>Shows the Module element by setting the &quot;visible&quot; attribute to &quot;false&quot;.</description>
		</method>
		<method name="getString" scope="instance">
			<description>Gets the string for a particular key, for a particular locale, performing locale lookup. &lt;p&gt; If no values if defined for the key, for the given locale, the value for the default locale (in initial locale set for the class) is returned. &lt;/p&gt;</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The key.</description>
			</parameter>
			<parameter name="locale" type="String" usage="optional">
				<description> (optional) The locale for which the string value is required. Defaults to the current locale, if not provided.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_bindUI" scope="instance">
			<description>Sets up DOM and CustomEvent listeners for the widget.</description>
		</method>
		<method name="Widget.getByNode" scope="static">
			<description>Returns the widget instance whose bounding box contains, or is, the given node. &lt;p&gt; In the case of nested widgets, the nearest bounding box ancestor is used to return the widget instance. &lt;/p&gt;</description>
			<parameters>
			<parameter name="node" type="Node | String" usage="required">
				<description> The node for which to return a Widget instance. If a selector string is passed in, which selects more than one node, the first node found is used.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Widget" />
			</return-types>
			<return-description>Widget instance, or null if not found.</return-description>
		</method>
		<method name="destructor" scope="instance">
			<description>Descructor lifecycle implementation for the Widget class. Purges events attached to the bounding box (and all child nodes) and removes the Widget from the list of registered widgets.</description>
		</method>
		<method name="getDefaultLocale" scope="instance">
			<description>Returns the default locale for the widget (the locale value defined by the widget class, or provided by the user during construction).</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The default locale for the widget</return-description>
		</method>
		<method name="_getStrings" scope="instance">
			<description>Returns the strings key/value hash for a paricular locale, without locale lookup applied.</description>
			<parameters>
			<parameter name="locale" type="Object" usage="required"/>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Generic toString implementation for all widgets.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The default string value for the widget [ displays the NAME of the instance, and the unique id ]</return-description>
		</method>
		<method name="blur" scope="instance">
			<description>Causes the Widget to lose focus by setting the &quot;focused&quot; attribute to &quot;false&quot;</description>
		</method>
		<method name="bindUI" scope="instance">
			<description>Configures/Sets up listeners to bind Widget State to UI/DOM This method is not called by framework and is not chained automatically for the class hierarchy.</description>
		</method>
		<method name="_renderBox" scope="instance" visibility="private">
			<description>Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not already a child. The owner document of the boundingBox, or the owner document of the contentBox will be used as the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and the contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered to the current document's body.</description>
			<parameters>
			<parameter name="parentNode" type="Node" usage="required">
				<description> The parentNode to render the widget to. If not provided, and both the boundingBox and the contentBox are not currently in the document, the widget will be rendered to the current document's body.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocMouseDown" scope="instance">
			<description>&quot;mousedown&quot; event handler for the owner document of the widget's bounding box.</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the DOM focus event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_parseHTML" scope="instance" visibility="private">
			<description>Utilitity method used to apply the &lt;code&gt;HTML_PARSER&lt;/code&gt; configuration for the instance, to retrieve config data values.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> Root node to use to parse markup for configuration data</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>config  configuration object, with values found in the HTML, populated</return-description>
		</method>
		<method name="_uiSetTabIndex" scope="instance">
			<description>Set the tabIndex on the widget's rendered UI</description>
			<parameters>
			<parameter name="Number" type="" usage="required"/>
			</parameters>
		</method>
		<method name="enable" scope="instance">
			<description>Set the Widget's &quot;disabled&quot; attribute to &quot;false&quot;.</description>
		</method>
		<method name="getStrings" scope="instance">
			<description>Gets the entire strings hash for a particular locale, performing locale lookup. &lt;p&gt; If no values of the key are defined for a particular locale the value for the default locale (in initial locale set for the class) is returned. &lt;/p&gt;</description>
			<parameters>
			<parameter name="locale" type="String" usage="optional">
				<description> (optional) The locale for which the string value is required. Defaults to the current locale, if not provided.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetFocused" scope="instance">
			<description>Sets the focused state for the UI</description>
			<parameters>
			<parameter name="val" type="boolean" usage="required"/>
			<parameter name="src" type="string" usage="required">
				<description> String representing the source that triggered an update to the UI.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onFocus" scope="instance">
			<description>DOM focus event handler, used to sync the state of the Widget with the DOM</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the DOM focus event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterWidthChange" scope="instance">
			<description>Default widget attribute state change handler</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderBoxClassNames" scope="instance">
			<description>Applies standard class names to the boundingBox and contentBox</description>
		</method>
		<method name="_afterFocusedChange" scope="instance">
			<description>Default focused attribute state change handler</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterVisibleChange" scope="instance">
			<description>Default visible attribute state change handler</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderUI" scope="instance">
			<description>Initializes the UI state for the Widget's bounding/content boxes.</description>
			<parameters>
			<parameter name="The" type="Node" usage="required">
				<description> parent node to rendering the widget into</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetWidth" scope="instance">
			<description>Sets the width on the widget's bounding box element</description>
			<parameters>
			<parameter name="val" type="String | Number" usage="required"/>
			</parameters>
		</method>
		<method name="_getHtmlParser" scope="instance">
			<description>Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER definitions across the class hierarchy.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTML_PARSER definition for this instance</return-description>
		</method>
		<method name="syncUI" scope="instance">
			<description>Refreshes the rendered UI, based on Widget State This method is not called by framework and is not chained automatically for the class hierarchy.</description>
		</method>
		<method name="_setContentBox" scope="instance" visibility="private">
			<description>Setter for the contentBox attribute</description>
			<parameters>
			<parameter name="node" type="Node|String" usage="required"/>
			</parameters>
			<return-description>Node</return-description>
		</method>
		<method name="_bindDOMListeners" scope="instance">
			<description>Sets up DOM listeners, on elements rendered by the widget.</description>
		</method>
		<method name="_defRenderFn" scope="instance">
			<description>Default render handler</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The Event object</description>
			</parameter>
			<parameter name="parentNode" type="Node" usage="required">
				<description> The parent node to render to, if passed in to the &lt;code&gt;render&lt;/code&gt; method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setStrings" scope="instance">
			<description>Sets strings for a particular locale, merging with any existing strings which may already be defined for the locale.</description>
			<parameters>
			<parameter name="strings" type="Object" usage="required">
				<description> The hash of string key/values to set</description>
			</parameter>
			<parameter name="locale" type="Object" usage="required">
				<description> The locale for the string values being set</description>
			</parameter>
			</parameters>
		</method>
		<method name="_moveStyles" scope="instance" visibility="private">
			<description>Moves a pre-defined set of style rules (WRAP_STYLES) from one node to another.</description>
			<parameters>
			<parameter name="nodeFrom" type="Node" usage="required">
				<description> The node to gather the styles from</description>
			</parameter>
			<parameter name="nodeTo" type="Node" usage="required">
				<description> The node to apply the styles to</description>
			</parameter>
			</parameters>
		</method>
		<method name="getClassName" scope="instance">
			<description>Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined by the &lt;code&gt;Y.config.classNamePrefix&lt;/code&gt; attribute used by &lt;code&gt;ClassNameManager&lt;/code&gt; and &lt;code&gt;Widget.NAME.toLowerCase()&lt;/code&gt; (e.g. &quot;yui-widget-xxxxx-yyyyy&quot;, based on default values for the prefix and widget class name). &lt;p&gt; The instance based version of this method can be used to generate standard prefixed classnames, based on the instances NAME, as opposed to Widget.NAME. This method should be used when you need to use a constant class name across different types instances. &lt;/p&gt;</description>
			<parameters>
			<parameter name="args*" type="String*" usage="required">
				<description> 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterDisabledChange" scope="instance">
			<description>Default disabled attribute state change handler</description>
			<parameters>
			<parameter name="evt" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderUI" scope="instance">
			<description>Adds nodes to the DOM This method is not called by framework and is not chained automatically for the class hierarchy.</description>
		</method>
		<method name="_setBoundingBox" scope="instance" visibility="private">
			<description>Setter for the boundingBox attribute</description>
			<parameters>
			<parameter name="Node/String" type="" usage="required"/>
			</parameters>
			<return-description>Node</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSource.Function" superclass="DataSource.Local">
		<description>Function subclass for the DataSource Utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>Function subclass for the DataSource Utility.</description>
			<return-types>
				<return-type type="DataSource.Function" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_defRequestFn" scope="instance">
			<description>Passes query string to IO. Fires &lt;code&gt;response&lt;/code&gt; event when response is received asynchronously.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Object">
		<description>Adds the following Object utilities to the YUI instance</description>
		<methods>
		<method name="setValue" scope="instance">
			<description>Sets the sub-attribute value at the provided path on the value object. Returns the modified value object, or undefined if the path is invalid.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description>       The object on which to set the sub value.</description>
			</parameter>
			<parameter name="path" type="Array" usage="required">
				<description>  A path array, specifying the object traversal path at which to set the sub value.</description>
			</parameter>
			<parameter name="val" type="Any" usage="required">
				<description>   The new value for the sub-attribute.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The modified object, with the new sub value set, or 
undefined, if the path was invalid.</return-description>
		</method>
		<method name="keys" scope="static">
			<description>Returns an array containing the object's keys</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> an object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string[]" />
			</return-types>
			<return-description>the keys</return-description>
		</method>
		<method name="_extract" scope="static" visibility="private">
			<description>Extracts the keys, values, or size from an object</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the object</description>
			</parameter>
			<parameter name="what" type="" usage="required">
				<description> what to extract (0: keys, 1: values, 2: size)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean|Array" />
			</return-types>
			<return-description>the extracted info</return-description>
		</method>
		<method name="hasValue" scope="static">
			<description>Returns true if the object contains a given value</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> an object</description>
			</parameter>
			<parameter name="v" type="" usage="required">
				<description> the value to query</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the object contains the value</return-description>
		</method>
		<method name="getValue" scope="instance">
			<description>Retrieves the sub value at the provided path, from the value object provided.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object from which to extract the property value</description>
			</parameter>
			<parameter name="path" type="Array" usage="required">
				<description> A path array, specifying the object traversal path from which to obtain the sub value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The value stored in the path, undefined if not found.
Returns the source object if an empty path is provided.</return-description>
		</method>
		<method name="each" scope="static">
			<description>Executes a function on each item. The function receives the value, the key, and the object as paramters (in that order).</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the object to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item. The function receives three arguments: the value, the the key, the full object.</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> the execution context</description>
			</parameter>
			<parameter name="proto" type="boolean" usage="required">
				<description> include proto</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="()" scope="static">
			<description>Y.Object(o) returns a new object based upon the supplied object.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the supplier object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>the new object</return-description>
		</method>
		<method name="values" scope="static">
			<description>Returns an array containing the object's values</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> an object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>the values</return-description>
		</method>
		<method name="owns" scope="static">
			<description>Determines whether or not the property was added to the object instance. Returns false if the property is not present in the object, or was inherited from the prototype.</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			<parameter name="p" type="string" usage="required">
				<description> the property to look for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the object has the property on the instance</return-description>
		</method>
		<method name="hasKey" scope="static">
			<description>Returns true if the object contains a given key</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> an object</description>
			</parameter>
			<parameter name="k" type="" usage="required">
				<description> the key to query</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the object contains the key</return-description>
		</method>
		<method name="size" scope="static">
			<description>Returns the size of an object</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> an object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the size</return-description>
		</method>
		</methods>
	</class>
	<class type="YUI~array~extras">
		<description>Adds the following array utilities to the YUI instance
(Y.Array).  This is in addition to the methods provided
in the core.</description>
		<properties>
		<property name="lastIndexOf" type="undefined" scope="static">
			<description>Returns the index of the last item in the array that contains the specified value, -1 if the value isn't found. method Array.lastIndexOf</description>
		</property>
		</properties>
		<methods>
		<method name="Array.every" scope="static">
			<description>Executes the supplied function on each item in the array.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if every item in the array returns true
from the supplied function.</return-description>
		</method>
		<method name="Array.filter" scope="static">
			<description>Executes the supplied function on each item in the array. Returns a new array containing the items that the supplied function returned true for.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The items on which the supplied function
returned true. If no items matched an empty array is 
returned.</return-description>
		</method>
		<method name="Array.partition" scope="static">
			<description>Partitions an array into two new arrays, one with the items that match the supplied function, and one with the items that do not.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> a collection to iterate over</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional execution context of f.</description>
			</parameter>
			</parameters>
			<return-description>An object with two members, 'matches' and 'rejects',
that are arrays containing the items that were selected or 
rejected by the test function (or an empty array).</return-description>
		</method>
		<method name="Array.reject" scope="static">
			<description>The inverse of filter. Executes the supplied function on each item. Returns a new array containing the items that the supplied function returned *false* for.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The items on which the supplied function
returned false.</return-description>
		</method>
		<method name="Array.grep" scope="static">
			<description>Iterates over an array, returning a new array of all the elements that match the supplied regular expression</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> a collection to iterate over</description>
			</parameter>
			<parameter name="pattern" type="RegExp" usage="required">
				<description> The regular expression to test against each item</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>All the items in the collection that 
produce a match against the supplied regular expression. 
If no items match, an empty array is returned.</return-description>
		</method>
		<method name="Array.map" scope="static">
			<description>Executes the supplied function on each item in the array.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>A new array containing the return value
of the supplied function for each item in the original
array.</return-description>
		</method>
		<method name="Array.unique" scope="static">
			<description>Returns a copy of the array with the duplicate entries removed</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to find the subset of uniques for</description>
			</parameter>
			<parameter name="sort" type="bool" usage="required">
				<description> flag to denote if the array is sorted or not. Defaults to false, the more general operation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>a copy of the array with duplicate entries removed</return-description>
		</method>
		<method name="Array.find" scope="static">
			<description>Executes the supplied function on each item in the array, searching for the first item that matches the supplied function.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to search</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item. Iteration is stopped as soon as this function returns true on an item.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the first item that the supplied function
returns true for, or null if it never returns true</return-description>
		</method>
		<method name="Array.zip" scope="static">
			<description>Creates an array of arrays by pairing the corresponding elements of two arrays together into a new array.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> a collection to iterate over</description>
			</parameter>
			<parameter name="a2" type="Array" usage="required">
				<description> another collection whose members will be paired with members of the first parameter</description>
			</parameter>
			</parameters>
			<return-description>An array of arrays formed by pairing each element 
of the first collection with an item in the second collection 
having the corresponding index.</return-description>
		</method>
		<method name="Array.reduce" scope="static">
			<description>Executes the supplied function on each item in the array. Reduce &quot;folds&quot; the array into a single value.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="init" type="" usage="required">
				<description> The initial value to start from</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item. It is responsible for returning the updated value of the computation.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-description>A value that results from iteratively applying the
supplied function to each element in the array.</return-description>
		</method>
		</methods>
	</class>
	<class type="Base">
		<description>&lt;p&gt;
A base class which objects requiring attributes and custom event support can 
extend. Base also handles the chaining of initializer and destructor methods across 
the hierarchy as part of object construction and destruction. Additionally, attributes configured 
through the static &lt;a href=&quot;#property_Base.ATTRS&quot;&gt;ATTRS&lt;/a&gt; property for each class 
in the hierarchy will be initialized by Base.
&lt;/p&gt;
&lt;p&gt;
The static &lt;a href=&quot;#property_Base.NAME&quot;&gt;NAME&lt;/a&gt; property of each class extending 
from Base will be used as the identifier for the class, and is used by Base to prefix 
all events fired by instances of that class.
&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;
A base class which objects requiring attributes and custom event support can 
extend. Base also handles the chaining of initializer and destructor methods across 
the hierarchy as part of object construction and destruction. Additionally, attributes configured 
through the static &lt;a href=&quot;#property_Base.ATTRS&quot;&gt;ATTRS&lt;/a&gt; property for each class 
in the hierarchy will be initialized by Base.
&lt;/p&gt;
&lt;p&gt;
The static &lt;a href=&quot;#property_Base.NAME&quot;&gt;NAME&lt;/a&gt; property of each class extending 
from Base will be used as the identifier for the class, and is used by Base to prefix 
all events fired by instances of that class.
&lt;/p&gt;</description>
			<return-types>
				<return-type type="Base" />
			</return-types>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Object with configuration property name/value pairs</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Base._buildCfg" type="Object" scope="static" visibility="private">
			<description>The build configuration for the Base class. Defines the static fields which need to be aggregated when the Base class is used as the main class passed to the Base.build method.</description>
		</property>
		<property name="Base.ATTRS" type="Object" scope="static">
			<description>The default set of attributes which will be available for instances of this class, and their configuration. In addition to the configuration properties listed by Attribute's addAttr method, the attribute can also be configured with a &quot;cloneDefaultValue&quot; property, which defines how the statically defined value field should be protected (&quot;shallow&quot;, &quot;deep&quot; and false are supported values). By default if the value is an object literal or an array it will be &quot;shallow&quot; cloned, to protect the default value.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The string used to identify the class of this object.</description>
		</property>
		<property name="Base._ATTR_CFG" type="Array" scope="static" visibility="private">
			<description>The list of properties which can be configured for each attribute (e.g. setter, getter, writeOnce, readOnly etc.)</description>
		</property>
		<property name="Base.NAME" type="String" scope="static">
			<description>&lt;p&gt; The string to be used to identify instances of this class, for example in prefixing events. &lt;/p&gt; &lt;p&gt; Classes extending Base, should define their own static NAME property, which should be camelCase by convention (e.g. MyClass.NAME = &quot;myClass&quot;;). &lt;/p&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="Base.unplug" scope="static">
			<description>Alias for Plugin.Host.unplug. See the aliased method for argument and return value details.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Default toString implementation. Provides the constructor NAME and the instance ID.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>String representation for this object</return-description>
		</method>
		<method name="_defInitFn" scope="instance">
			<description>Default init event handler</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> Event object, with a cfg property which refers to the configuration object passed to the constructor.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initHierarchyData" scope="instance" visibility="private">
			<description>A helper method used by _getClasses and _getAttrCfgs, which determines both the array of classes and aggregate set of attribute configurations across the class hierarchy for the instance.</description>
		</method>
		<method name="_aggregateAttrs" scope="instance" visibility="private">
			<description>A helper method, used by _initHierarchyData to aggregate attribute configuration across the instances class hierarchy. The method will potect the attribute configuration value to protect the statically defined default value in ATTRS if required (if the value is an object literal, array or the attribute configuration has cloneDefaultValue set to shallow or deep).</description>
			<parameters>
			<parameter name="allAttrs" type="Array" usage="required">
				<description> An array of ATTRS definitions across classes in the hierarchy (subclass first, Base last)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The aggregate set of ATTRS definitions for the instance</return-description>
		</method>
		<method name="_destroyHierarchy" scope="instance" visibility="private">
			<description>Destroys the class hierarchy for this instance by invoking the descructor method on the prototype of each class in the hierarchy.</description>
		</method>
		<method name="init" scope="instance">
			<description>Init lifecycle method, invoked during construction. Fires the init event prior to setting up attributes and invoking initializers for the class hierarchy.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Object with configuration property name/value pairs</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Base" />
			</return-types>
			<return-description>A reference to this object</return-description>
		</method>
		<method name="_defDestroyFn" scope="instance">
			<description>Default destroy event handler</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> Event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getClasses" scope="instance">
			<description>Returns the class hierarchy for this object, with Base being the last class in the array.</description>
			<return-types>
			<return-type type="Function[]" />
			</return-types>
			<return-description>An array of classes (constructor functions), making up the class hierarchy for this object.
This value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the 
cached value.</return-description>
		</method>
		<method name="Base.plug" scope="static">
			<description>Alias for Plugin.Host.plug. See aliased method for argument and return value details.</description>
		</method>
		<method name="_getAttrCfgs" scope="instance">
			<description>Returns an aggregated set of attribute configurations, by traversing the class hierarchy.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The hash of attribute configurations, aggregated across classes in the hierarchy
This value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return
the cached value.</return-description>
		</method>
		<method name="_filterAttrCfs" scope="instance" visibility="private">
			<description>A helper method used when processing ATTRS across the class hierarchy during initialization. Returns a disposable object with the attributes defined for the provided class, extracted from the set of all attributes passed in .</description>
			<parameters>
			<parameter name="clazz" type="Function" usage="required">
				<description> The class for which the desired attributes are required.</description>
			</parameter>
			<parameter name="allCfgs" type="Object" usage="required">
				<description> The set of all attribute configurations for this instance. Attributes will be removed from this set, if they belong to the filtered class, so that by the time all classes are processed, allCfgs will be empty.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The set of attributes belonging to the class passed in, in the form
of an object with attribute name/configuration pairs.</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>&lt;p&gt; Destroy lifecycle method. Fires the destroy event, prior to invoking destructors for the class hierarchy. &lt;/p&gt; &lt;p&gt; Subscribers to the destroy event can invoke preventDefault on the event object, to prevent destruction from proceeding. &lt;/p&gt;</description>
			<return-types>
			<return-type type="Base" />
			</return-types>
			<return-description>A reference to this object</return-description>
		</method>
		<method name="_initHierarchy" scope="instance" visibility="private">
			<description>Initializes the class hierarchy for the instance, which includes initializing attributes for each class defined in the class's static ATTRS property and invoking the initializer method on the prototype of each class in the hierarchy.</description>
			<parameters>
			<parameter name="userVals" type="Object" usage="required">
				<description> Object with configuration property name/value pairs</description>
			</parameter>
			</parameters>
		</method>
		<method name="Base.build" scope="static">
			<description>&lt;p&gt; Builds a custom constructor function (class) from the main function, and array of extension functions (classes) provided. The NAME field for the constructor function is defined by the first argument passed in. &lt;/p&gt; &lt;p&gt; The cfg object supports the following properties &lt;/p&gt; &lt;dl&gt; &lt;dt&gt;dynamic &amp;#60;boolean&amp;#62;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If true (default), a completely new class is created which extends the main class, and acts as the host on which the extension classes are augmented.&lt;/p&gt; &lt;p&gt;If false, the extensions classes are augmented directly to the main class, modifying the main class' prototype.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;aggregates &amp;#60;String[]&amp;#62;&lt;/dt&gt; &lt;dd&gt;An array of static property names, which will get aggregated on to the built class, in addition to the default properties build will always aggregate as defined by the main class' static _buildCfg property. &lt;/dd&gt; &lt;/dl&gt;</description>
			<parameters>
			<parameter name="name" type="Function" usage="required">
				<description> The name of the new class. Used to defined the NAME property for the new class.</description>
			</parameter>
			<parameter name="main" type="Function" usage="required">
				<description> The main class on which to base the built class</description>
			</parameter>
			<parameter name="extensions" type="Function[]" usage="required">
				<description> The set of extension classes which will be augmented/aggregated to the built class.</description>
			</parameter>
			<parameter name="cfg" type="Object" usage="optional">
				<description> Optional. Build configuration for the class (see description).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>A custom class, created from the provided main and extension classes</return-description>
		</method>
		</methods>
	</class>
	<class type="History.Module">
		<description>This class represents a browser history module.</description>
		<constructors>
		<constructor scope="instance">
			<description>This class represents a browser history module.</description>
			<return-types>
				<return-type type="History.Module" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description>  the module identifier</description>
			</parameter>
			<parameter name="initialState" type="String" usage="required">
				<description>  the module's initial state</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="upcomingState" type="String" scope="instance" visibility="private">
			<description>The module's upcoming state. There can be a slight delay between the time a state is changed, and the time a state change is detected. This property allows us to not fire the module state changed event multiple times, making client code simpler.</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The module identifier</description>
		</property>
		<property name="currentState" type="String" scope="instance">
			<description>The module's current state</description>
		</property>
		<property name="initialState" type="String" scope="instance">
			<description>The module's initial state</description>
		</property>
		</properties>
	</class>
	<class type="Plugin.Base" superclass="Base">
		<description>The base class for all Plugin instances.</description>
		<properties>
		<property name="_handles" type="Array" scope="instance" visibility="private">
			<description>The list of event handles for event listeners or AOP injected methods applied by the plugin to the host object.</description>
		</property>
		<property name="Plugin.NS" type="String" scope="static">
			<description>The name of the property the the plugin will be attached to when plugged into a Plugin Host. Plugins extending Plugin.Base, should set their own NS value.</description>
		</property>
		<property name="Plugin.Base.ATTRS" type="Object" scope="static">
			<description>Object defining the set of attributes supported by the Plugin.Base class</description>
		</property>
		<property name="Plugin.Base.NAME" type="String" scope="static">
			<description>The string identifying the Plugin.Base class. Plugins extending Plugin.Base should set their own NAME value.</description>
		</property>
		</properties>
		<methods>
		<method name="doAfter" scope="instance">
			<description>Listens for the &quot;after&quot; moment of events fired by the host, or injects code &quot;after&quot; a given method on the host.</description>
			<parameters>
			<parameter name="sFn" type="String" usage="required">
				<description> The event to listen for, or method to inject logic after.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler function. For events, the &quot;after&quot; moment listener. For methods, the function to execute after the given method is executed.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> An optional context to call the handler with. The default context is the plugin instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle" />
			</return-types>
			<return-description>handle  The detach handle for the handler.</return-description>
		</method>
		<method name="destructor" scope="instance">
			<description>Destructor lifecycle implementation. Removes any event listeners or injected methods applied by the Plugin</description>
		</method>
		<method name="doBefore" scope="instance">
			<description>Listens for the &quot;on&quot; moment of events fired by the host, or injects code &quot;before&quot; a given method on the host.</description>
			<parameters>
			<parameter name="sFn" type="String" usage="required">
				<description> The event to listen for, or method to inject logic before.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler function. For events, the &quot;on&quot; moment listener. For methods, the function to execute before the given method is executed.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> An optional context to call the handler with. The default context is the plugin instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle" />
			</return-types>
			<return-description>handle  The detach handle for the handler.</return-description>
		</method>
		<method name="initializer" scope="instance">
			<description>Initializer lifecycle implementation.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Configuration object with property name/value pairs.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Do.AlterArgs">
		<description>Return an AlterArgs object when you want to change the arguments that
were passed into the function.  An example would be a service that scrubs
out illegal characters prior to executing the core business logic.</description>
	</class>
	<class type="Pollable" superclass="DataSource.Local">
		<description>Adds polling to the DataSource Utility.</description>
		<properties>
		<property name="_intervals" type="undefined" scope="instance" visibility="private">
			<description>Hash of polling interval IDs that have been enabled, stored here to be able to clear all intervals.</description>
		</property>
		</properties>
		<methods>
		<method name="setInterval" scope="instance">
			<description>Sets up a polling mechanism to send requests at set intervals and forward responses to given callback.</description>
			<parameters>
			<parameter name="msec" type="Number" usage="required">
				<description> Length of interval in milliseconds.</description>
			</parameter>
			<parameter name="request" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="callback" type="Object" usage="required">
				<description> An object literal with the following properties: &lt;dl&gt; &lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Arbitrary data that will be passed back to the success and failure handlers.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Interval ID.</return-description>
		</method>
		<method name="clearInterval" scope="instance">
			<description>Disables polling mechanism associated with the given interval ID.</description>
			<parameters>
			<parameter name="id" type="Number" usage="required">
				<description> Interval ID.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearAllIntervals" scope="instance">
			<description>Clears all intervals.</description>
		</method>
		</methods>
	</class>
	<class type="ClassNameManager">
		<description>A singleton class providing: 
&lt;ul&gt;
&lt;li&gt;Easy creation of prefixed class names&lt;/li&gt;
&lt;li&gt;Caching of previously created class names for improved performance.&lt;/li&gt;
&lt;/ul&gt;</description>
		<properties>
		<property name="Y.config.classNameDelimiter" type="{String}" scope="static">
			<description>Configuration property indicating the delimiter used to compose all CSS class names in this YUI instance.</description>
		</property>
		<property name="Y.config.classNamePrefix" type="{String}" scope="static">
			<description>Configuration property indicating the prefix for all CSS class names in this YUI instance.</description>
		</property>
		</properties>
		<methods>
		<method name="getClassName" scope="instance">
			<description>Returns a class name prefixed with the the value of the &lt;code&gt;Y.config.classNamePrefix&lt;/code&gt; attribute + the provided strings. Uses the &lt;code&gt;Y.config.classNameDelimiter&lt;/code&gt; attribute to delimit the provided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar</description>
			<parameters>
			<parameter name="+" type="String" usage="required">
				<description> one or more classname bits to be joined and prefixed</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Assert.ObjectAssert">
		<description>The ObjectAssert object provides functions to test JavaScript objects
for a variety of cases.</description>
		<methods>
		<method name="hasKeys" scope="static">
			<description>Asserts that an object has all properties of a reference object.</description>
			<parameters>
			<parameter name="properties" type="Array" usage="required">
				<description> An array of property names that should be on the object.</description>
			</parameter>
			<parameter name="object" type="Object" usage="required">
				<description> The object to search.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="ownsKeys" scope="static">
			<description>Asserts that all properties exist on an object instance (not on its prototype).</description>
			<parameters>
			<parameter name="properties" type="Array" usage="required">
				<description> An array of property names that should be on the object.</description>
			</parameter>
			<parameter name="object" type="Object" usage="required">
				<description> The object to search.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="hasKey" scope="static">
			<description>Asserts that an object has a property with the given name.</description>
			<parameters>
			<parameter name="propertyName" type="String" usage="required">
				<description> The name of the property to test.</description>
			</parameter>
			<parameter name="object" type="Object" usage="required">
				<description> The object to search.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="ownsNoKeys" scope="static">
			<description>Asserts that an object owns no properties.</description>
			<parameters>
			<parameter name="object" type="Object" usage="required">
				<description> The object to check.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="ownsKey" scope="static">
			<description>Asserts that a property with the given name exists on an object instance (not on its prototype).</description>
			<parameters>
			<parameter name="propertyName" type="String" usage="required">
				<description> The name of the property to test.</description>
			</parameter>
			<parameter name="object" type="Object" usage="required">
				<description> The object to search.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Plugin.DDWindowScroll" superclass="DD.Scroll">
		<description>Extends the Scroll class to make the window scroll while dragging.</description>
		<constructors>
		<constructor scope="instance">
			<description>Extends the Scroll class to make the window scroll while dragging.</description>
			<return-types>
				<return-type type="Plugin.DDWindowScroll" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="plugin.NodeFocusManager">
		<description>The NodeFocusManager class is a plugin for a Node instance.  The class is used 
via the &lt;a href=&quot;Node.html#method_plug&quot;&gt;&lt;code&gt;plug&lt;/code&gt;&lt;/a&gt; method of Node 
and should not be instantiated directly.</description>
		<methods>
		<method name="_onDocMouseDown" scope="instance">
			<description>&quot;mousedown&quot; event handler for the owner document of the Focus Manager's Node.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_detachEventHandlers" scope="instance">
			<description>Detaches all event handlers used by the Focus Manager.</description>
		</method>
		<method name="_preventScroll" scope="instance">
			<description>Prevents the viewport from scolling when the user presses the up, down, left, or right key.</description>
		</method>
		<method name="_focusPrevious" scope="instance">
			<description>Keydown event handler that moves focus to the previous enabled descendant.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			<parameter name="activeDescendant" type="Number" usage="required">
				<description> Number representing the index of the next descendant to be focused.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocFocus" scope="instance">
			<description>&quot;focus&quot; event handler for the owner document of the Focus Manager's Node.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initDescendants" scope="instance">
			<description>Sets the &lt;code&gt;tabIndex&lt;/code&gt; attribute of all of the descendants to -1, except the active descendant, whose &lt;code&gt;tabIndex&lt;/code&gt; attribute is set to 0.</description>
		</method>
		<method name="_afterActiveDescendantChange" scope="instance">
			<description>afterChange event handler for the &quot;activeDescendant&quot; attribute.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the change event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focusNext" scope="instance">
			<description>Keydown event handler that moves focus to the next enabled descendant.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			<parameter name="activeDescendant" type="Number" usage="required">
				<description> Number representing the index of the next descendant to be focused</description>
			</parameter>
			</parameters>
		</method>
		<method name="blur" scope="instance">
			<description>Blurs the current active descendant and sets the &lt;code&gt;focused&lt;/code&gt; attribute to false.</description>
		</method>
		<method name="stop" scope="instance">
			<description>Disables the Focus Manager by detaching all event handlers.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Focuses the active descendant and sets the  &lt;code&gt;focused&lt;/code&gt; attribute to true.</description>
			<parameters>
			<parameter name="index" type="Number" usage="optional">
				<description> Optional. Number representing the index of the descendant to be set as the active descendant.</description>
			</parameter>
			<parameter name="index" type="Node" usage="optional">
				<description> Optional. Node instance representing the descendant to be set as the active descendant.</description>
			</parameter>
			</parameters>
		</method>
		<method name="refresh" scope="instance">
			<description>Refreshes the Focus Manager's descendants by re-executing the CSS selector query specified by the &lt;code&gt;descendants&lt;/code&gt; attribute.</description>
		</method>
		<method name="start" scope="instance">
			<description>Enables the Focus Manager.</description>
		</method>
		<method name="_removeFocusClass" scope="instance">
			<description>Removes the class name representing focus (as specified by the &quot;focusClass&quot; attribute) from the Node instance to which it is currently applied.</description>
		</method>
		<method name="_isDescendant" scope="instance">
			<description>Determines if the specified Node instance is a descendant managed by the Focus Manager.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> Node instance to be checked.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Boolean indicating if the specified Node instance is a 
descendant managed by the Focus Manager.</return-description>
		</method>
		<method name="_detachKeyHandler" scope="instance">
			<description>Detaches the &quot;key&quot; event handlers used to support the &quot;keys&quot; attribute.</description>
		</method>
		<method name="_attachKeyHandler" scope="instance">
			<description>Attaches the &quot;key&quot; event handlers used to support the &quot;keys&quot; attribute.</description>
		</method>
		</methods>
	</class>
	<class type="Assert.ComparisonFailure" superclass="Assert.Error">
		<description>ComparisonFailure is subclass of Error that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
		<constructors>
		<constructor scope="instance">
			<description>ComparisonFailure is subclass of Error that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
			<return-types>
				<return-type type="Assert.ComparisonFailure" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value that caused the assertion to fail.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="expected" type="Object" scope="instance">
			<description>The expected value.</description>
		</property>
		<property name="actual" type="Object" scope="instance">
			<description>The actual value.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="toString" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. This message provides information about the expected and actual values.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSchema.XML" superclass="DataSchema.Base">
		<description>XML subclass for the DataSchema Utility.</description>
		<methods>
		<method name="apply" scope="static">
			<description>Applies a given schema to given XML data.</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to apply.</description>
			</parameter>
			<parameter name="data" type="XMLDoc" usage="required">
				<description> XML document.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		<method name="_getLocationValue" scope="static">
			<description>Get an XPath-specified value for a given field from an XML node or document.</description>
			<parameters>
			<parameter name="field" type="String | Object" usage="required">
				<description> Field definition.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> XML node or document to search within.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Data value or null.</return-description>
		</method>
		<method name="_parseResults" scope="static">
			<description>Schema-parsed list of results from full data</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to parse against.</description>
			</parameter>
			<parameter name="xmldoc_in" type="Object" usage="required">
				<description> XML document parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress schema-parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		<method name="_parseMeta" scope="static">
			<description>Parses results data according to schema</description>
			<parameters>
			<parameter name="xmldoc_in" type="Object" usage="required">
				<description> XML document parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress schema-parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		</methods>
	</class>
	<class type="YUI~dump">
		<description>The following methods are added to the YUI instance</description>
		<methods>
		<method name="dump" scope="instance">
			<description>Returns a simple string representation of the object or array. Other types of objects will be returned unprocessed. Arrays are expected to be indexed. Use object notation for associative arrays.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The object to dump</description>
			</parameter>
			<parameter name="d" type="int" usage="required">
				<description> How deep to recurse child objects, default 3</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the dump result</return-description>
		</method>
		</methods>
	</class>
	<class type="WidgetPosition">
		<description>Widget extension, which can be used to add positioning support to the base Widget class, 
through the &lt;a href=&quot;Base.html#method_build&quot;&gt;Base.build&lt;/a&gt; method.</description>
		<properties>
		<property name="WidgetPosition.POSITIONED_CLASS_NAME" type="String" scope="static">
			<description>Default class used to mark the boundingBox of a positioned widget.</description>
		</property>
		<property name="WidgetPosition.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration introduced by WidgetPosition.</description>
		</property>
		</properties>
		<methods>
		<method name="_getX" scope="instance">
			<description>Default getter for the X attribute. The value is retrieved from the XY attribute, which is the sole store for the XY state.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The X page co-ordinate value</return-description>
		</method>
		<method name="_validateXY" scope="instance">
			<description>Default validator for the XY attribute</description>
			<parameters>
			<parameter name="val" type="Array" usage="required">
				<description> The XY page co-ordinate value which is being set.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if valid, false if not.</return-description>
		</method>
		<method name="_setX" scope="instance">
			<description>Default setter for the X attribute. The setter passes the X value through to the XY attribute, which is the sole store for the XY state.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The X page co-ordinate value</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetXY" scope="instance">
			<description>Updates the UI to reflect the XY page co-ordinates passed in.</description>
			<parameters>
			<parameter name="val" type="String" usage="required">
				<description> The XY page co-ordinates value to be reflected in the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="move" scope="instance">
			<description>Moves the Widget to the specified page xy co-ordinate position.</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The new x position</description>
			</parameter>
			<parameter name="y" type="Number" usage="required">
				<description> The new y position &lt;p&gt;Or&lt;/p&gt;</description>
			</parameter>
			<parameter name="x," type="Array" usage="required">
				<description> y values passed as an array ([x, y]), to support simple pass through of Node.getXY results</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncUIPosition" scope="instance">
			<description>Synchronizes the UI to match the Widgets xy page position state. &lt;p&gt; This method in invoked after syncUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_getY" scope="instance">
			<description>Default getter for the Y attribute. The value is retrieved from the XY attribute, which is the sole store for the XY state.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The Y page co-ordinate value</return-description>
		</method>
		<method name="syncXY" scope="instance">
			<description>Synchronizes the Panel's &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the Widget's position in the DOM.</description>
		</method>
		<method name="_setY" scope="instance">
			<description>Default setter for the Y attribute. The setter passes the Y value through to the XY attribute, which is the sole store for the XY state.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The Y page co-ordinate value</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterXYChange" scope="instance">
			<description>Default attribute change listener for the xy attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderUIPosition" scope="instance">
			<description>Creates/Initializes the DOM to support xy page positioning. &lt;p&gt; This method in invoked after renderUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_bindUIPosition" scope="instance">
			<description>Binds event listeners responsible for updating the UI state in response to Widget position related state changes. &lt;p&gt; This method in invoked after bindUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		</methods>
	</class>
	<class type="Do.Prevent">
		<description>Return a Prevent object when you want to prevent the wrapped function
from executing, but want the remaining listeners to execute</description>
	</class>
	<class type="State">
		<description>The State class maintains state for a collection of named items, with 
a varying number of properties defined.
It avoids the need to create a separate class for the item, and separate instances 
of these classes for each item, by storing the state in a 2 level hash table, 
improving performance when the number of items is likely to be large.</description>
		<constructors>
		<constructor scope="instance">
			<description>The State class maintains state for a collection of named items, with 
a varying number of properties defined.
It avoids the need to create a separate class for the item, and separate instances 
of these classes for each item, by storing the state in a 2 level hash table, 
improving performance when the number of items is likely to be large.</description>
			<return-types>
				<return-type type="State" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="data" type="undefined" scope="instance">
			<description>Hash of attributes</description>
		</property>
		</properties>
		<methods>
		<method name="addAll" scope="instance">
			<description>Adds multiple properties to an item.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item.</description>
			</parameter>
			<parameter name="o" type="Object" usage="required">
				<description> A hash of property/value pairs.</description>
			</parameter>
			</parameters>
		</method>
		<method name="get" scope="instance">
			<description>For a given item, returns the value of the property requested, or undefined if not found.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item</description>
			</parameter>
			<parameter name="key" type="String" usage="optional">
				<description> Optional. The property value to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The value of the supplied property.</return-description>
		</method>
		<method name="getAll" scope="instance">
			<description>For the given item, returns a disposable object with all of the item's property/value pairs.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object with property/value pairs for the item.</return-description>
		</method>
		<method name="remove" scope="instance">
			<description>Removes a property from an item.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item.</description>
			</parameter>
			<parameter name="key" type="String" usage="required">
				<description> The property to remove.</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeAll" scope="instance">
			<description>Removes multiple properties from an item, or remove the item completely.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item.</description>
			</parameter>
			<parameter name="o" type="Object|Array" usage="required">
				<description> Collection of properties to delete. If not provided, the entire item is removed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="add" scope="instance">
			<description>Adds a property to an item.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the item.</description>
			</parameter>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property.</description>
			</parameter>
			<parameter name="val" type="Any" usage="required">
				<description> The value of the property.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="CustomEvent">
		<description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
		<constructors>
		<constructor scope="instance">
			<description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
			<return-types>
				<return-type type="CustomEvent" />
			</return-types>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type of event, which is passed to the callback
when the event fires</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> configuration object</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="queuable" type="boolean" scope="instance">
			<description>Specifies whether this event should be queued when the host is actively processing an event. This will effect exectution order of the callbacks for the various events.</description>
		</property>
		<property name="silent" type="boolean" scope="instance">
			<description>By default all custom events are logged in the debug build, set silent to true to disable debug outpu for this event.</description>
		</property>
		<property name="defaultFn" type="Function" scope="instance">
			<description>The default function to execute after event listeners have fire, but only if the default action was not prevented.</description>
		</property>
		<property name="fireOnce" type="boolean" scope="instance">
			<description>This event should only fire one time if true, and if it has fired, any new subscribers should be notified immediately.</description>
		</property>
		<property name="prevented" type="int" scope="instance">
			<description>Flag for preventDefault that is modified during fire(). if it is not 0, the default behavior for this event</description>
		</property>
		<property name="preventedFn" type="Function" scope="instance">
			<description>The function to execute if a subscriber calls preventDefault</description>
		</property>
		<property name="subscribers" type="Subscriber{}" scope="instance">
			<description>The subscribers to this event</description>
		</property>
		<property name="emitFacade" type="boolean" scope="instance">
			<description>If set to true, the custom event will deliver an EventFacade object that is similar to a DOM event object.</description>
		</property>
		<property name="broadcast" type="int" scope="instance">
			<description>If 0, this event does not broadcast. If 1, the YUI instance is notified every time this event fires. If 2, the YUI instance and the YUI global (if event is enabled on the global) are notified every time this event fires.</description>
		</property>
		<property name="firedWith" type="Array" scope="instance">
			<description>An array containing the arguments the custom event was last fired with.</description>
		</property>
		<property name="host" type="EventTarget" scope="instance">
			<description>Specifies the host for this custom event. This is used to enable event bubbling</description>
		</property>
		<property name="stopped" type="int" scope="instance">
			<description>Flag for stopPropagation that is modified during fire() 1 means to stop propagation to bubble targets. 2 means to also stop additional subscribers on this target.</description>
		</property>
		<property name="context" type="object" scope="instance">
			<description>The context the the event will fire from by default. Defaults to the YUI instance.</description>
		</property>
		<property name="signature" type="int" scope="instance">
			<description>Supports multiple options for listener signatures in order to port YUI 2 apps.</description>
		</property>
		<property name="preventable" type="boolean" scope="instance">
			<description>Specifies whether or not this event's default function can be cancelled by a subscriber by executing preventDefault() on the event facade</description>
		</property>
		<property name="stoppedFn" type="Function" scope="instance">
			<description>The function to execute if a subscriber calls stopPropagation or stopImmediatePropagation</description>
		</property>
		<property name="fired" type="boolean" scope="instance">
			<description>This event has fired if true</description>
		</property>
		<property name="type" type="string" scope="instance">
			<description>The type of event, returned to subscribers when the event fires</description>
		</property>
		<property name="bubbles" type="boolean" scope="instance">
			<description>Specifies whether or not a subscriber can stop the event propagation via stopPropagation(), stopImmediatePropagation(), or halt()</description>
		</property>
		<property name="afters" type="Subscriber{}" scope="instance">
			<description>'After' subscribers</description>
		</property>
		</properties>
		<methods>
		<method name="on" scope="instance">
			<description>Listen for this event</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The function to execute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle|EventTarget" />
			</return-types>
			<return-description>unsubscribe handle or a
chainable event target depending on the 'chain' config.</return-description>
		</method>
		<method name="preventDefault" scope="instance">
			<description>Prevents the execution of this event's defaultFn</description>
		</method>
		<method name="halt" scope="instance">
			<description>Stops the event propagation and prevents the default event behavior.</description>
			<parameters>
			<parameter name="immediate" type="boolean" usage="required">
				<description> if true additional listeners on the current target will not be executed</description>
			</parameter>
			</parameters>
		</method>
		<method name="_delete" scope="instance" visibility="private">
			<parameters>
			<parameter name="subscriber" type="" usage="required">
				<description> object</description>
			</parameter>
			</parameters>
		</method>
		<method name="fire" scope="instance">
			<description>Notifies the subscribers. The callback functions will be executed from the context specified when the event was created, and with the following parameters: &lt;ul&gt; &lt;li&gt;The type of event&lt;/li&gt; &lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt; &lt;li&gt;The custom object (if any) that was passed into the subscribe() method&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="arguments" type="Object*" usage="required">
				<description> an arbitrary set of parameters to pass to the handler.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>false if one of the subscribers returned false, 
true otherwise</return-description>
		</method>
		<method name="unsubscribeAll" scope="instance">
			<description>Removes all listeners</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>The number of listeners unsubscribed</return-description>
		</method>
		<method name="stopImmediatePropagation" scope="instance">
			<description>Stops propagation to bubble targets, and prevents any remaining subscribers on the current target from executing.</description>
		</method>
		<method name="applyConfig" scope="instance">
			<description>Apply configuration properties. Only applies the CONFIG whitelist</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> hash of properties to apply</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> if true, properties that exist on the event will be overwritten.</description>
			</parameter>
			</parameters>
		</method>
		<method name="detachAll" scope="instance">
			<description>Removes all listeners</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>The number of listeners unsubscribed</return-description>
		</method>
		<method name="_notify" scope="instance" visibility="private">
			<description>Notify a single subscriber</description>
			<parameters>
			<parameter name="s" type="Subscriber" usage="required">
				<description> the subscriber</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> the arguments array to apply to the listener</description>
			</parameter>
			</parameters>
		</method>
		<method name="subscribe" scope="instance">
			<description>Listen for this event</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The function to execute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle|EventTarget" />
			</return-types>
			<return-description>unsubscribe handle or a
chainable event target depending on the 'chain' config.</return-description>
		</method>
		<method name="unsubscribe" scope="instance">
			<description>Detach listeners.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The subscribed function to remove, if not supplied all will be removed</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> The context object passed to subscribe.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean|EventTarget" />
			</return-types>
			<return-description>returns a chainable event target
or a boolean for legacy detach support.</return-description>
		</method>
		<method name="detach" scope="instance">
			<description>Detach listeners.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The subscribed function to remove, if not supplied all will be removed</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> The context object passed to subscribe.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int|EventTarget" />
			</return-types>
			<return-description>returns a chainable event target
or the number of subscribers unsubscribed.</return-description>
		</method>
		<method name="stopPropagation" scope="instance">
			<description>Stop propagation to bubble targets</description>
		</method>
		<method name="after" scope="instance">
			<description>Listen for this event after the normal subscribers have been notified and the default behavior has been applied. If a normal subscriber prevents the default behavior, it also prevents after listeners from firing.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The function to execute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle|EventTarget" />
			</return-types>
			<return-description>unsubscribe handle or a
chainable event target depending on the 'chain' config.</return-description>
		</method>
		<method name="log" scope="instance">
			<description>Logger abstraction to centralize the application of the silent flag</description>
			<parameters>
			<parameter name="msg" type="string" usage="required">
				<description> message to log</description>
			</parameter>
			<parameter name="cat" type="string" usage="required">
				<description> log category</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Plugin.Drop" superclass="DD.Drop">
		<description>This is a simple Drop plugin that can be attached to a Node via the plug method.</description>
		<constructors>
		<constructor scope="instance">
			<description>This is a simple Drop plugin that can be attached to a Node via the plug method.</description>
			<return-types>
				<return-type type="Plugin.Drop" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="NS" type="{String}" scope="instance">
			<description>The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;</description>
		</property>
		<property name="NAME" type="{String}" scope="instance">
			<description>dd-drop-plugin</description>
		</property>
		</properties>
	</class>
	<class type="DataSource.Get" superclass="DataSource.Local">
		<description>Get Utility subclass for the DataSource Utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>Get Utility subclass for the DataSource Utility.</description>
			<return-types>
				<return-type type="DataSource.Get" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="callbacks" type="Function[]" scope="static">
			<description>Global array of callback functions, one for each request sent.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		<property name="_tId" type="Number" scope="static" visibility="private">
			<description>Unique ID to track requests.</description>
		</property>
		</properties>
		<methods>
		<method name="_defRequestFn" scope="instance">
			<description>Passes query string to Get Utility. Fires &lt;code&gt;response&lt;/code&gt; event when response is received asynchronously.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Selector">
		<description>Provides support for using CSS selectors to query the DOM</description>
		<properties>
		<property name="shorthand" type="object" scope="instance">
			<description>Mapping of shorthand tokens to corresponding attribute selector</description>
		</property>
		<property name="operators" type="object" scope="instance">
			<description>List of operators and corresponding boolean functions. These functions are passed the attribute and the current node's value of the attribute.</description>
		</property>
		<property name="PARENT_NODE" type="undefined" scope="instance">
			<description>Provides helper methods for collecting and filtering DOM elements.</description>
		</property>
		</properties>
		<methods>
		<method name="_tokenize" scope="instance">
			<description>Break selector into token units per simple selector. Combinator is attached to the previous token.</description>
		</method>
		<method name="viewportRegion" scope="instance">
			<description>Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)</return-description>
		</method>
		<method name="region" scope="instance">
			<description>Returns an Object literal containing the following about this element: (top, right, bottom, left)</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal containing the following about this element: (top, right, bottom, left)</return-description>
		</method>
		<method name="inRegion" scope="instance">
			<description>Check if any part of this node is in the passed region</description>
			<parameters>
			<parameter name="all" type="Object} node2 The node to get the region from|an Object literal of the region $param {Boolean" usage="required">
				<description> Should all of the node be inside the region</description>
			</parameter>
			<parameter name="altRegion" type="Object" usage="required">
				<description> An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if in region, false if not.</return-description>
		</method>
		<method name="intersect" scope="instance">
			<description>Find the intersect information for the passes nodes.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The first element</description>
			</parameter>
			<parameter name="element2" type="HTMLElement | Object" usage="required">
				<description> The element or region to check the interect with</description>
			</parameter>
			<parameter name="altRegion" type="Object" usage="required">
				<description> An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)</return-description>
		</method>
		<method name="query" scope="static">
			<description>Retrieves a set of nodes based on a given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS Selector to test the node against.</description>
			</parameter>
			<parameter name="root" type="HTMLElement" usage="required">
				<description> optional An HTMLElement to start the query from. Defaults to Y.config.doc</description>
			</parameter>
			<parameter name="firstOnly" type="Boolean" usage="required">
				<description> optional Whether or not to return only the first match.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of nodes that match the given selector.</return-description>
		</method>
		<method name="inViewportRegion" scope="instance">
			<description>Check if any part of this element is in the viewport</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="all" type="Boolean" usage="required">
				<description> Should all of the node be inside the region</description>
			</parameter>
			<parameter name="altRegion" type="Object" usage="required">
				<description> An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if in region, false if not.</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSourceXMLSchema" superclass="Plugin.Base">
		<description>Adds schema-parsing to the DataSource Utility.</description>
		<properties>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_beforeDefDataFn
<dl>
<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>
<dt>request (Object)</dt> <dd>The request.</dd>
<dt>callback (Object)</dt> <dd>The callback object with the following properties:
<dl>
<dt>success (Function)</dt> <dd>Success handler.</dd>
<dt>failure (Function)</dt> <dd>Failure handler.</dd>
</dl>
</dd>
<dt>data (Object)</dt> <dd>Raw data.</dd>
</dl>" scope="instance">
			<description>Parses raw data into a normalized response.</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="DD.Drop" superclass="Base">
		<description>This class provides the ability to create a Drop Target.</description>
		<constructors>
		<constructor scope="instance">
			<description>This class provides the ability to create a Drop Target.</description>
			<return-types>
				<return-type type="DD.Drop" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_groups" type="Array" scope="instance" visibility="private">
			<description>The groups this target belongs to.</description>
		</property>
		<property name="region" type="Object" scope="instance">
			<description>A region object associated with this target, used for checking regions while dragging.</description>
		</property>
		<property name="overTarget" type="Boolean" scope="instance">
			<description>This flag is tripped when a drag element is over this target.</description>
		</property>
		<property name="_valid" type="Boolean" scope="instance" visibility="private">
			<description>Flag for determining if the target is valid in this operation.</description>
		</property>
		<property name="shim" type="{Object}" scope="instance">
			<description>Node reference to the targets shim</description>
		</property>
		</properties>
		<methods>
		<method name="_createEvents" scope="instance" visibility="private">
			<description>This method creates all the events for this Event Target and publishes them so we get Event Bubbling.</description>
		</method>
		<method name="_handleOverTarget" scope="instance" visibility="private">
			<description>This handles the over target call made from this object or from the DDM</description>
		</method>
		<method name="_handleOverEvent" scope="instance" visibility="private">
			<description>Handles the mouseover DOM event on the Target Shim</description>
		</method>
		<method name="sizeShim" scope="instance">
			<description>Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..</description>
		</method>
		<method name="destructor" scope="instance" visibility="private">
			<description>Lifecycle destructor, unreg the drag from the DDM and remove listeners</description>
		</method>
		<method name="_handleOutEvent" scope="instance" visibility="private">
			<description>Handles the mouseout DOM event on the Target Shim</description>
		</method>
		<method name="_createShim" scope="instance" visibility="private">
			<description>Creates the Target shim and adds it to the DDM's playground..</description>
		</method>
		<method name="inGroup" scope="instance">
			<description>Check if this target is in one of the supplied groups.</description>
			<parameters>
			<parameter name="groups" type="Array" usage="required">
				<description> The groups to check against</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_activateShim" scope="instance" visibility="private">
			<description>Activates the shim and adds some interaction CSS classes</description>
		</method>
		<method name="_deactivateShim" scope="instance" visibility="private">
			<description>Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Private lifecycle method</description>
		</method>
		<method name="_handleOut" scope="instance" visibility="private">
			<description>Handles out of target calls/checks</description>
		</method>
		</methods>
	</class>
	<class type="DataType.Number">
		<description>DataType.Number provides a set of utility functions to operate against Number objects.</description>
		<methods>
		<method name="parse" scope="instance">
			<description>Converts data to type Number.</description>
			<parameters>
			<parameter name="data" type="String | Number | Boolean" usage="required">
				<description> Data to convert. The following values return as null: null, undefined, NaN, &quot;&quot;.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>A number, or null.</return-description>
		</method>
		<method name="format" scope="instance">
			<description>Takes a Number and formats to string for display to user.</description>
			<parameters>
			<parameter name="data" type="Number" usage="required">
				<description> Number.</description>
			</parameter>
			<parameter name="config" type="Object} (Optional) Optional configuration values: &lt;dl&gt; &lt;dt&gt;prefix {String}&lt;|dd&gt; &lt;dd&gt;String prepended before each number, like a currency designator &quot;$&quot;&lt;|dd&gt; &lt;dt&gt;decimalPlaces {Number}&lt;|dd&gt; &lt;dd&gt;Number of decimal places to round. Must be a number 0 to 20.&lt;|dd&gt; &lt;dt&gt;decimalSeparator {String}&lt;|dd&gt; &lt;dd&gt;Decimal separator&lt;|dd&gt; &lt;dt&gt;thousandsSeparator {String}&lt;|dd&gt; &lt;dd&gt;Thousands separator&lt;|dd&gt; &lt;dt&gt;suffix {String" usage="required">
				<description> &lt;/dd&gt; &lt;dd&gt;String appended after each number, like &quot; items&quot; (note the space)&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Formatted number for display. Note, the following values
return as &quot;&quot;: null, undefined, NaN, &quot;&quot;.</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSourceArraySchema" superclass="Plugin.Base">
		<description>Adds schema-parsing to the DataSource Utility.</description>
		<properties>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_beforeDefDataFn
<dl>
<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>
<dt>request (Object)</dt> <dd>The request.</dd>
<dt>callback (Object)</dt> <dd>The callback object with the following properties:
<dl>
<dt>success (Function)</dt> <dd>Success handler.</dd>
<dt>failure (Function)</dt> <dd>Failure handler.</dd>
</dl>
</dd>
<dt>data (Object)</dt> <dd>Raw data.</dd>
</dl>" scope="instance">
			<description>Parses raw data into a normalized response.</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Profiler">
		<description>Profiles functions in JavaScript.</description>
		<methods>
		<method name="getFunctionReport" scope="static">
			<description>Returns an object containing profiling data for a single function. The object has an entry for min, max, avg, calls, and points).</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing profile data for a given function.</return-description>
		</method>
		<method name="pause" scope="static">
			<description>Pauses profiling information for a given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getReport" scope="static">
			<description>Returns an object containing profiling data for a single function. The object has an entry for min, max, avg, calls, and points).</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing profile data for a given function.</return-description>
		</method>
		<method name="start" scope="static">
			<description>Start profiling information for a given name. The name cannot be the name of a registered function or object. This is used to start timing for a particular block of code rather than instrumenting the entire function.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getFullReport" scope="static">
			<description>Returns an object containing profiling data for all of the functions that were profiled. The object has an entry for each function and returns all information (min, max, average, calls, etc.) for each function.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing all profile data.</return-description>
		</method>
		<method name="unregisterFunction" scope="static">
			<description>Removes a constructor function from profiling. Reverses the registerConstructor() method.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The full name of the function including namespacing. This is the name of the function that is stored in the report.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="clear" scope="static">
			<description>Removes all report data from the profiler.</description>
			<parameters>
			<parameter name="name" type="String" usage="optional">
				<description> (Optional) The name of the report to clear. If omitted, then all report data is cleared.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="stop" scope="static">
			<description>Stops profiling information for a given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getCallCount" scope="static">
			<description>Returns the number of times that the given function has been called.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>The number of times the function was called.</return-description>
		</method>
		<method name="registerFunction" scope="static">
			<description>Sets up a function for profiling. It essentially overwrites the function with one that has instrumentation data. This method also creates an entry for the function in the profile report. The original function is stored on the container object.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The full name of the function including namespacing. This is the name of the function that is stored in the report.</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object that owns the function. If the function isn't global then this argument is required. This could be the namespace that the function belongs to or the object on which it's a method.</description>
			</parameter>
			<parameter name="registerPrototype" type="Boolean" usage="optional">
				<description> (Optional) Indicates that the prototype should also be instrumented. Setting to true has the same effect as calling registerConstructor().</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="instrument" scope="static">
			<description>Instruments a method to have profiling calls.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the report for the function.</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> The function to instrument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>An instrumented version of the function.</return-description>
		</method>
		<method name="getOriginal" scope="static">
			<description>Returns the uninstrumented version of a function/object.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function/object to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function|Object" />
			</return-types>
			<return-description>The uninstrumented version of a function/object.</return-description>
		</method>
		<method name="getAverage" scope="static">
			<description>Returns the average amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The average time it takes the function to execute.</return-description>
		</method>
		<method name="getMin" scope="static">
			<description>Returns the minimum amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The minimum time it takes the function to execute.</return-description>
		</method>
		<method name="unregisterObject" scope="static">
			<description>Unregisters an object for profiling. It takes the object and looks for functions. When a function is found, unregisterMethod() is called on it. If set to recrusive mode, it will also unregister objects found inside of this object, using the same methodology.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the object to unregister.</description>
			</parameter>
			<parameter name="recurse" type="Boolean" usage="optional">
				<description> (Optional) Determines if subobject methods should also be unregistered.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getMax" scope="static">
			<description>Returns the maximum amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The maximum time it takes the function to execute.</return-description>
		</method>
		<method name="registerConstructor" scope="static">
			<description>Sets up a constructor for profiling, including all properties and methods on the prototype.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The fully-qualified name of the function including namespace information.</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object that owns the function (namespace or containing object).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="registerObject" scope="static">
			<description>Sets up an object for profiling. It takes the object and looks for functions. When a function is found, registerMethod() is called on it. If set to recrusive mode, it will also setup objects found inside of this object for profiling, using the same methodology.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the object to profile (shows up in report).</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object represented by the name.</description>
			</parameter>
			<parameter name="recurse" type="Boolean" usage="optional">
				<description> (Optional) Determines if subobject methods are also profiled.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="Queue">
		<description>A simple FIFO queue.  Items are added to the Queue with add(1..n items) and
removed using next().</description>
		<properties>
		<property name="_q" type="{Array}" scope="instance">
			<description>The collection of enqueued items</description>
		</property>
		</properties>
		<methods>
		<method name="indexOf" scope="instance">
			<description>Returns the current index in the queue of the specified item</description>
			<parameters>
			<parameter name="needle" type="MIXED" usage="required">
				<description> the item to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the index of the item or -1 if not found</return-description>
		</method>
		<method name="_init" scope="instance">
			<description>Initialize the queue</description>
		</method>
		<method name="remove" scope="instance">
			<description>Removes the referenced item from the queue</description>
			<parameters>
			<parameter name="item" type="MIXED" usage="required">
				<description> an item in the queue</description>
			</parameter>
			</parameters>
		</method>
		<method name="next" scope="instance">
			<description>Get the next item in the queue.</description>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>the next item in the queue</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Add 0..n items to the end of the queue</description>
			<parameters>
			<parameter name="item*" type="MIXED" usage="required">
				<description> 0..n items</description>
			</parameter>
			</parameters>
		</method>
		<method name="promote" scope="instance">
			<description>Moves the referenced item to the head of the queue</description>
			<parameters>
			<parameter name="item" type="MIXED" usage="required">
				<description> an item in the queue</description>
			</parameter>
			</parameters>
		</method>
		<method name="size" scope="instance">
			<description>Returns the current number of queued items</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="DataSource.IO" superclass="DataSource.Local">
		<description>IO subclass for the DataSource Utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>IO subclass for the DataSource Utility.</description>
			<return-types>
				<return-type type="DataSource.IO" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		<property name="_queue" type="Object" scope="instance" visibility="private">
			<description>Object literal to manage asynchronous request/response cycles enabled if queue needs to be managed (asyncMode/ioConnMode): &lt;dl&gt; &lt;dt&gt;interval {Number}&lt;/dt&gt; &lt;dd&gt;Interval ID of in-progress queue.&lt;/dd&gt; &lt;dt&gt;conn&lt;/dt&gt; &lt;dd&gt;In-progress connection identifier (if applicable).&lt;/dd&gt; &lt;dt&gt;requests {Object[]}&lt;/dt&gt; &lt;dd&gt;Array of queued request objects: {request:request, callback:callback}.&lt;/dd&gt; &lt;/dl&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="_defRequestFn" scope="instance">
			<description>Passes query string to IO. Fires &lt;code&gt;response&lt;/code&gt; event when response is received asynchronously.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="ImgLoadGroup" superclass="Base">
		<description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
		<constructors>
		<constructor scope="instance">
			<description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
			<return-types>
				<return-type type="ImgLoadGroup" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_areFoldTriggersSet" type="Boolean" scope="instance" visibility="private">
			<description>Boolean tracking whether the window scroll and window resize triggers have been set if this is a fold group.</description>
		</property>
		<property name="_maxKnownHLimit" type="Int" scope="instance" visibility="private">
			<description>The maximum pixel height of the document that has been made visible. During fold checks, if the user scrolls up then there's no need to check for newly exposed images.</description>
		</property>
		<property name="_imgObjs" type="Object" scope="instance" visibility="private">
			<description>Collection of images (&lt;code&gt;Y.ImgLoadImgObj&lt;/code&gt; objects) registered with this group, keyed by DOM id.</description>
		</property>
		<property name="_classImageEls" type="Array" scope="instance" visibility="private">
			<description>DOM elements having the class name that is associated with this group. Elements are stored during the &lt;code&gt;_foldCheck&lt;/code&gt; function and reused later during any subsequent &lt;code&gt;_foldCheck&lt;/code&gt; calls - gives a slight performance improvement when the page fold is repeatedly checked.</description>
		</property>
		<property name="_triggers" type="Array" scope="instance" visibility="private">
			<description>Collection of triggers for this group. Keeps track of each trigger's event handle, as returned from &lt;code&gt;Y.on&lt;/code&gt;.</description>
		</property>
		<property name="_className" type="String" scope="instance" visibility="private">
			<description>Keep the CSS class name in a member variable for ease and speed.</description>
		</property>
		<property name="_timeout" type="Object" scope="instance" visibility="private">
			<description>Timeout object to keep a handle on the time limit.</description>
		</property>
		</properties>
		<methods>
		<method name="addCustomTrigger" scope="instance">
			<description>Adds a custom event trigger to the group.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The object on which to attach the event. &lt;code&gt;obj&lt;/code&gt; is optional - by default the event is attached to the &lt;code&gt;Y&lt;/code&gt; instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="addTrigger" scope="instance">
			<description>Adds a trigger to the group. Arguments are passed to &lt;code&gt;Y.on&lt;/code&gt;.</description>
			<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description> The DOM object to attach the trigger event to</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The event type</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setFoldTriggers" scope="instance" visibility="private">
			<description>Sets the window scroll and window resize triggers for any group that is fold-conditional (i.e., has a fold distance set).</description>
		</method>
		<method name="_init" scope="instance" visibility="private">
			<description>Initialize all private members needed for the group.</description>
		</method>
		<method name="_clearTriggers" scope="instance" visibility="private">
			<description>Clears the timeout and all triggers associated with the group.</description>
		</method>
		<method name="_getFetchTimeout" scope="instance" visibility="private">
			<description>Returns the group's &lt;code&gt;fetch&lt;/code&gt; method, with the proper closure, for use with &lt;code&gt;setTimeout&lt;/code&gt;.</description>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>group's &lt;code&gt;fetch&lt;/code&gt; method</return-description>
		</method>
		<method name="_onloadTasks" scope="instance" visibility="private">
			<description>Performs necessary setup at domready time. Initiates time limit for group; executes the fold check for the images.</description>
		</method>
		<method name="registerImage" scope="instance">
			<description>Registers an image with the group. Arguments are passed through to a &lt;code&gt;Y.ImgLoadImgObj&lt;/code&gt; constructor; see that class' attribute documentation for detailed information. &quot;&lt;code&gt;domId&lt;/code&gt;&quot; is a required attribute.</description>
			<parameters>
			<parameter name="*" type="Object" usage="required">
				<description> A configuration object literal with attribute name/value pairs (passed through to a &lt;code&gt;Y.ImgLoadImgObj&lt;/code&gt; constructor)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>&lt;code&gt;Y.ImgLoadImgObj&lt;/code&gt; that was registered</return-description>
		</method>
		<method name="_foldCheck" scope="instance" visibility="private">
			<description>Checks the position of each image in the group. If any part of the image is within the specified distance (&lt;code&gt;foldDistance&lt;/code&gt;) of the client viewport, the image is fetched immediately.</description>
		</method>
		<method name="fetch" scope="instance">
			<description>Displays the images in the group. This method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.</description>
		</method>
		<method name="_fetchByClass" scope="instance" visibility="private">
			<description>Finds all elements in the DOM with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching.</description>
		</method>
		</methods>
	</class>
	<class type="Test.Wait">
		<description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
		<constructors>
		<constructor scope="instance">
			<description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
			<return-types>
				<return-type type="Test.Wait" />
			</return-types>
			<parameters>
			<parameter name="segment" type="Function" usage="required">
				<description> A function to run when the wait is over.</description>
			</parameter>
			<parameter name="delay" type="int" usage="required">
				<description> The number of milliseconds to wait before running the code.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="delay" type="int" scope="instance">
			<description>The delay before running the segment of code.</description>
		</property>
		<property name="segment" type="Function" scope="instance">
			<description>The segment of code to run when the wait is over.</description>
		</property>
		</properties>
	</class>
	<class type="Do.Halt">
		<description>Return a Halt object when you want to terminate the execution
of all subsequent subscribers as well as the wrapped method
if it has not exectued yet.</description>
	</class>
	<class type="DataSourceCache" superclass="Cache">
		<description>Adds cacheability to the DataSource Utility.</description>
		<properties>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_beforeDefRequestFn" scope="instance">
			<description>First look for cached response, then send request to live data.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object.&lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="_beforeDefResponseFn" scope="instance">
			<description>Adds data to cache before returning data.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;tId (Number)&lt;/dt&gt; &lt;dd&gt;Unique transaction ID.&lt;/dd&gt; &lt;dt&gt;request (Object)&lt;/dt&gt; &lt;dd&gt;The request.&lt;/dd&gt; &lt;dt&gt;callback (Object)&lt;/dt&gt; &lt;dd&gt;The callback object with the following properties: &lt;dl&gt; &lt;dt&gt;success (Function)&lt;/dt&gt; &lt;dd&gt;Success handler.&lt;/dd&gt; &lt;dt&gt;failure (Function)&lt;/dt&gt; &lt;dd&gt;Failure handler.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;data (Object)&lt;/dt&gt; &lt;dd&gt;Raw data.&lt;/dd&gt; &lt;dt&gt;response (Object)&lt;/dt&gt; &lt;dd&gt;Normalized response object with the following properties: &lt;dl&gt; &lt;dt&gt;cached (Object)&lt;/dt&gt; &lt;dd&gt;True when response is cached.&lt;/dd&gt; &lt;dt&gt;results (Object)&lt;/dt&gt; &lt;dd&gt;Parsed results.&lt;/dd&gt; &lt;dt&gt;meta (Object)&lt;/dt&gt; &lt;dd&gt;Parsed meta data.&lt;/dd&gt; &lt;dt&gt;error (Object)&lt;/dt&gt; &lt;dd&gt;Error object.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;cfg (Object)&lt;/dt&gt; &lt;dd&gt;Configuration object.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Assert.ShouldError" superclass="Assert.Error">
		<description>ShouldError is subclass of Error that is thrown whenever
a test is expected to throw an error but doesn't.</description>
		<constructors>
		<constructor scope="instance">
			<description>ShouldError is subclass of Error that is thrown whenever
a test is expected to throw an error but doesn't.</description>
			<return-types>
				<return-type type="Assert.ShouldError" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
	</class>
	<class type="Do.AlterReturn">
		<description>Return an AlterReturn object when you want to change the result returned
from the core method to the caller</description>
	</class>
	<class type="Event">
		<description>The event utility provides functions to add and remove event listeners,
event cleansing.  It also tries to automatically remove listeners it
registers during the unload event.</description>
		<properties>
		<property name="DOMReady" type="boolean" scope="static">
			<description>True when the document is initially usable</description>
		</property>
		<property name="_retryCount" type="undefined" scope="static" visibility="private">
			<description>The number of times to poll after window.onload. This number is increased if additional late-bound handlers are requested after the page load.</description>
		</property>
		<property name="POLL_RETRYS" type="int" scope="static">
			<description>The number of times we should look for elements that are not in the DOM at the time the event is requested after the document has been loaded. The default is 1000@amp;40 ms, so it will poll for 40 seconds or until all outstanding handlers are bound (whichever comes first).</description>
		</property>
		<property name="_dri" type="undefined" scope="static" visibility="private">
			<description>document readystate poll handle</description>
		</property>
		<property name="_wrappers" type="Y.Event.Custom" scope="static" visibility="private">
			<description>Custom event wrappers for DOM events. Key is 'event:' + Element uid stamp + event type</description>
		</property>
		<property name="_loadComplete" type="boolean" scope="static" visibility="private">
			<description>True after the onload event has fired</description>
		</property>
		<property name="POLL_INTERVAL" type="int" scope="static">
			<description>The poll interval in milliseconds</description>
		</property>
		<property name="_interval" type="undefined" scope="static" visibility="private">
			<description>poll handle</description>
		</property>
		<property name="_el_events" type="undefined" scope="static" visibility="private">
			<description>Custom event wrapper map DOM events. Key is Element uid stamp. Each item is a hash of custom event wrappers as provided in the _wrappers collection. This provides the infrastructure for getListeners.</description>
		</property>
		<property name="lastError" type="Error" scope="static">
			<description>addListener/removeListener can throw errors in unexpected scenarios. These errors are suppressed, the method returns false, and this property is set</description>
		</property>
		<property name="_avail" type="undefined" scope="static" visibility="private">
			<description>onAvailable listeners</description>
		</property>
		</properties>
		<methods>
		<method name="nativeRemove" scope="static" visibility="private">
			<description>Basic remove listener</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>   the element to bind the handler to</description>
			</parameter>
			<parameter name="type" type="string" usage="required">
				<description>  the type of event handler</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description>   the callback to invoke</description>
			</parameter>
			<parameter name="capture" type="boolen" usage="required">
				<description> capture or bubble phase</description>
			</parameter>
			</parameters>
		</method>
		<method name="getListeners" scope="static">
			<description>Returns all listeners attached to the given element via addListener. Optionally, you can specify a specific type of event to return.</description>
			<parameters>
			<parameter name="el" type="HTMLElement|string" usage="required">
				<description> the element or element id to inspect</description>
			</parameter>
			<parameter name="type" type="string" usage="required">
				<description> optional type of listener to return. If left out, all listeners will be returned</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Y.Custom.Event" />
			</return-types>
			<return-description>the custom event wrapper for the DOM event(s)</return-description>
		</method>
		<method name="getEvent" scope="static">
			<description>Finds the event in the window object, the caller's arguments, or in the arguments of another method in the callstack. This is executed automatically for events registered through the event manager, so the implementer should not normally need to execute this function at all.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event parameter from the handler</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element the listener was attached to</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event" />
			</return-types>
			<return-description>the event</return-description>
		</method>
		<method name="attach" scope="static">
			<description>Adds an event listener</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description>   The type of event to append</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> optional context object</description>
			</parameter>
			<parameter name="args" type="Boolean|object" usage="required">
				<description> 0..n arguments to pass to the callback</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventHandle" />
			</return-types>
			<return-description>an object to that can be used to detach the listener</return-description>
		</method>
		<method name="_unload" scope="static" visibility="private">
			<description>Removes all listeners registered by pe.event. Called automatically during the unload event.</description>
		</method>
		<method name="purgeElement" scope="static">
			<description>Removes all listeners attached to the given element via addListener. Optionally, the node's children can also be purged. Optionally, you can specify a specific type of event to remove.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to purge</description>
			</parameter>
			<parameter name="recurse" type="boolean" usage="required">
				<description> recursively purge this element's children as well. Use with caution.</description>
			</parameter>
			<parameter name="type" type="string" usage="required">
				<description> optional type of listener to purge. If left out, all listeners will be removed</description>
			</parameter>
			</parameters>
		</method>
		<method name="generateId" scope="static">
			<description>Generates an unique ID for the element if it does not already have one.</description>
			<parameters>
			<parameter name="el" type="" usage="required">
				<description> the element to create the id for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the resulting id of the element</return-description>
		</method>
		<method name="_isValidCollection" scope="static" visibility="private">
			<description>We want to be able to use getElementsByTagName as a collection to attach a group of events to. Unfortunately, different browsers return different types of collections. This function tests to determine if the object is array-like. It will also fail if the object is an array, but is empty.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the object is array-like and populated</return-description>
		</method>
		<method name="onContentReady" scope="static">
			<description>Works the same way as onAvailable, but additionally checks the state of sibling elements to determine if the content of the available element is safe to modify. &lt;p&gt;The callback is executed with a single parameter: the custom object parameter, if provided.&lt;/p&gt;</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the element to look for.</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the element is ready.</description>
			</parameter>
			<parameter name="p_obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="p_override" type="boolean|object" usage="required">
				<description> If set to true, fn will execute in the context of p_obj. If an object, fn will exectute in the context of that object</description>
			</parameter>
			</parameters>
		</method>
		<method name="startInterval" scope="static" visibility="private">
		</method>
		<method name="nativeAdd" scope="static" visibility="private">
			<description>Adds a DOM event directly without the caching, cleanup, context adj, etc</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>   the element to bind the handler to</description>
			</parameter>
			<parameter name="type" type="string" usage="required">
				<description>  the type of event handler</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description>   the callback to invoke</description>
			</parameter>
			<parameter name="capture" type="boolen" usage="required">
				<description> capture or bubble phase</description>
			</parameter>
			</parameters>
		</method>
		<method name="_poll" scope="static" visibility="private">
			<description>Polling function that runs before the onload event fires, attempting to attach to DOM Nodes as soon as they are available</description>
		</method>
		<method name="onAvailable" scope="static">
			<description>Executes the supplied callback when the item with the supplied id is found. This is meant to be used to execute behavior as soon as possible as the page loads. If you use this after the initial page load it will poll for a fixed time for the element. The number of times it will poll and the frequency are configurable. By default it will poll for 10 seconds. &lt;p&gt;The callback is executed with a single parameter: the custom object parameter, if provided.&lt;/p&gt;</description>
			<parameters>
			<parameter name="id" type="string||string[]" usage="required">
				<description> the id of the element, or an array of ids to look for.</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the element is found.</description>
			</parameter>
			<parameter name="p_obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="p_override" type="boolean|object" usage="required">
				<description> If set to true, fn will execute in the context of p_obj, if set to an object it will execute in the context of that object</description>
			</parameter>
			<parameter name="checkContent" type="boolean" usage="required">
				<description> check child node readiness (onContentReady)</description>
			</parameter>
			</parameters>
		</method>
		<method name="detach" scope="static">
			<description>Removes an event listener. Supports the signature the event was bound with, but the preferred way to remove listeners is using the handle that is returned when using Y.on</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> the type of event to remove.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the method the event invokes. If fn is undefined, then all event handlers for the type of event are removed.</description>
			</parameter>
			<parameter name="el" type="String|HTMLElement|Array|NodeList|EventHandle" usage="required">
				<description> An event handle, an id, an element reference, or a collection of ids and/or elements to remove the listener from.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the unbind was successful, false otherwise.</return-description>
		</method>
		<method name="_load" scope="static" visibility="private">
			<description>hook up any deferred listeners</description>
		</method>
		</methods>
	</class>
	<class type="Plugin.NodeFX" superclass="Base">
		<description>Binds an Anim instance to a Node instance</description>
	</class>
	<class type="UA">
		<description>YUI user agent detection.
Do not fork for a browser if it can be avoided.  Use feature detection when
you can.  Use the user agent as a last resort.  UA stores a version
number for the browser engine, 0 otherwise.  This value may or may not map
to the version number of the browser using the engine.  The value is 
presented as a float so that it can easily be used for boolean evaluation 
as well as for looking for a particular range of versions.  Because of this, 
some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 
reports 1.8).</description>
		<properties>
		<property name="secure" type="boolean" scope="static">
			<description>Set to true if the page appears to be in SSL</description>
		</property>
		<property name="opera" type="float" scope="static">
			<description>Opera version number or 0. Example: 9.2</description>
		</property>
		<property name="ie" type="float" scope="static">
			<description>Internet Explorer version number or 0. Example: 6</description>
		</property>
		<property name="air" type="float" scope="instance">
			<description>Adobe AIR version number or 0. Only populated if webkit is detected. Example: 1.0</description>
		</property>
		<property name="mobile" type="string" scope="static">
			<description>The mobile property will be set to a string containing any relevant user agent information when a modern mobile browser is detected. Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series devices with the WebKit-based browser, and Opera Mini.</description>
		</property>
		<property name="caja" type="float" scope="instance">
			<description>Google Caja version number or 0.</description>
		</property>
		<property name="os" type="string" scope="static">
			<description>The operating system. Currently only detecting windows or macintosh</description>
		</property>
		<property name="webkit" type="float" scope="static">
			<description>AppleWebKit version. KHTML browsers that are not WebKit browsers will evaluate to 1, other browsers 0. Example: 418.9 &lt;pre&gt; Safari 1.3.2 (312.6): 312.8.1 &lt;-- Reports 312.8 -- currently the latest available for Mac OSX 10.3. Safari 2.0.2:     416   &lt;-- hasOwnProperty introduced Safari 2.0.4:     418   &lt;-- preventDefault fixed Safari 2.0.4 (419.3): 418.9.1 &lt;-- One version of Safari may run different versions of webkit Safari 2.0.4 (419.3): 419   &lt;-- Tiger installations that have been updated, but not updated to the latest patch. Webkit 212 nightly:  522+  &lt;-- Safari 3.0 precursor (with native SVG and many major issues fixed). Safari 3.0.4 (523.12) 523.12 &lt;-- First Tiger release - automatic update from 2.x via the 10.4.11 OS patch Webkit nightly 1/2008:525+  &lt;-- Supports DOMContentLoaded event. yahoo.com user agent hack removed. &lt;/pre&gt; http://en.wikipedia.org/wiki/Safari_(web_browser)#Version_history</description>
		</property>
		<property name="gecko" type="float" scope="static">
			<description>Gecko engine revision number. Will evaluate to 1 if Gecko is detected but the revision could not be found. Other browsers will be 0. Example: 1.8 &lt;pre&gt; Firefox 1.0.0.4: 1.7.8  &lt;-- Reports 1.7 Firefox 1.5.0.9: 1.8.0.9 &lt;-- Reports 1.8 Firefox 2.0.0.3: 1.8.1.3 &lt;-- Reports 1.8 Firefox 3 alpha: 1.9a4  &lt;-- Reports 1.9 &lt;/pre&gt;</description>
		</property>
		</properties>
	</class>
	<class type="DataSourceJSONSchema" superclass="Plugin.Base">
		<description>Adds schema-parsing to the DataSource Utility.</description>
		<properties>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_beforeDefDataFn
<dl>
<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>
<dt>request (Object)</dt> <dd>The request.</dd>
<dt>callback (Object)</dt> <dd>The callback object with the following properties:
<dl>
<dt>success (Function)</dt> <dd>Success handler.</dd>
<dt>failure (Function)</dt> <dd>Failure handler.</dd>
</dl>
</dd>
<dt>data (Object)</dt> <dd>Raw data.</dd>
</dl>" scope="instance">
			<description>Parses raw data into a normalized response.</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Test.TestNode">
		<description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
		<constructors>
		<constructor scope="instance">
			<description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
			<return-types>
				<return-type type="Test.TestNode" />
			</return-types>
			<parameters>
			<parameter name="testObject" type="Variant" usage="required">
				<description> A TestSuite, TestCase, or the name of a test function.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="testObject" type="Variant" scope="instance">
			<description>The TestSuite, TestCase, or test function represented by this node.</description>
		</property>
		<property name="parent" type="TestNode" scope="instance">
			<description>Pointer to this node's parent.</description>
		</property>
		<property name="results" type="object" scope="instance">
			<description>Test results for this test object.</description>
		</property>
		<property name="firstChild" type="TestNode" scope="instance">
			<description>Pointer to this node's first child.</description>
		</property>
		<property name="next" type="TestNode" scope="instance">
			<description>Pointer to this node's next sibling.</description>
		</property>
		<property name="lastChild" type="TestNode" scope="instance">
			<description>Pointer to this node's last child.</description>
		</property>
		</properties>
		<methods>
		<method name="appendChild" scope="instance">
			<description>Appends a new test object (TestSuite, TestCase, or test function name) as a child of this node.</description>
			<parameters>
			<parameter name="testObject" type="Variant" usage="required">
				<description> A TestSuite, TestCase, or the name of a test function.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="DOM">
		<description>Provides DOM helper methods.</description>
		<methods>
		<method name="_getRegExp" scope="instance" visibility="private">
			<description>Memoizes dynamic regular expressions to boost runtime performance.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The string to convert to a regular expression.</description>
			</parameter>
			<parameter name="flags" type="String" usage="required">
				<description> optional An optinal string of flags.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="RegExp" />
			</return-types>
			<return-description>An instance of RegExp</return-description>
		</method>
		<method name="replaceClass" scope="instance">
			<description>Replace a class with another class for a given element. If no oldClassName is present, the newClassName is simply added.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="oldClassName" type="String" usage="required">
				<description> the class name to be replaced</description>
			</parameter>
			<parameter name="newClassName" type="String" usage="required">
				<description> the class name that will be replacing the old class name</description>
			</parameter>
			</parameters>
		</method>
		<method name="addHTML" scope="instance">
			<description>Inserts content in a node at the given location</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The node to insert into</description>
			</parameter>
			<parameter name="content" type="String" usage="required">
				<description> The content to be inserted</description>
			</parameter>
			<parameter name="where" type="String" usage="required">
				<description> Where to insert the content; default is after lastChild</description>
			</parameter>
			</parameters>
		</method>
		<method name="getText" scope="instance">
			<description>Returns the text content of the HTMLElement.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The html element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The text content of the element (includes text of any descending elements).</return-description>
		</method>
		<method name="setStyle" scope="instance">
			<description>Sets a style property for a given element.</description>
			<parameters>
			<parameter name="An" type="HTMLElement" usage="required">
				<description> HTMLElement to apply the style to.</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The style property to set.</description>
			</parameter>
			<parameter name="val" type="String|Number" usage="required">
				<description> The value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getX" scope="instance">
			<description>Gets the current X position of an element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The X position of the element</return-description>
		</method>
		<method name="getY" scope="instance">
			<description>Gets the current Y position of an element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The Y position of the element</return-description>
		</method>
		<method name="_bruteContains" scope="instance" visibility="private">
			<description>Brute force version of contains. Used for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The containing html element.</description>
			</parameter>
			<parameter name="needle" type="HTMLElement" usage="required">
				<description> The html element that may be contained.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element is or contains the needle.</return-description>
		</method>
		<method name="setX" scope="instance">
			<description>Set the X position of an html element in page coordinates, regardless of how the element is positioned. The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			<parameter name="x" type="Int" usage="required">
				<description> The X values for new position (coordinates are page-based)</description>
			</parameter>
			</parameters>
		</method>
		<method name="create" scope="instance">
			<description>Creates a new dom node using the provided markup string.</description>
			<parameters>
			<parameter name="html" type="String" usage="required">
				<description> The markup used to create the element</description>
			</parameter>
			<parameter name="doc" type="HTMLDocument" usage="required">
				<description> An optional document context</description>
			</parameter>
			</parameters>
		</method>
		<method name="contains" scope="instance">
			<description>Determines whether or not one HTMLElement is or contains another HTMLElement.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The containing html element.</description>
			</parameter>
			<parameter name="needle" type="HTMLElement" usage="required">
				<description> The html element that may be contained.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element is or contains the needle.</return-description>
		</method>
		<method name="getComputedStyle" scope="instance">
			<description>Returns the computed style for the given node.</description>
			<parameters>
			<parameter name="An" type="HTMLElement" usage="required">
				<description> HTMLElement to get the style from.</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The style property to get.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The computed value of the style property.</return-description>
		</method>
		<method name="winHeight" scope="instance">
			<description>Returns the inner height of the viewport (exludes scrollbar).</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current height of the viewport.</return-description>
		</method>
		<method name="setStyles" scope="instance">
			<description>Sets multiple style properties.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> An HTMLElement to apply the styles to.</description>
			</parameter>
			<parameter name="hash" type="Object" usage="required">
				<description> An object literal of property:value pairs.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toggleClass" scope="instance">
			<description>If the className exists on the node it is removed, if it doesn't exist it is added.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to be toggled</description>
			</parameter>
			</parameters>
		</method>
		<method name="inDoc" scope="instance">
			<description>Determines whether or not the HTMLElement is part of the document.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The containing html element.</description>
			</parameter>
			<parameter name="doc" type="HTMLElement" usage="required">
				<description> optional The document to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element is attached to the document.</return-description>
		</method>
		<method name="addClass" scope="instance">
			<description>Adds a class name to a given DOM element.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to add to the class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="winWidth" scope="instance">
			<description>Returns the inner width of the viewport (exludes scrollbar).</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current width of the viewport.</return-description>
		</method>
		<method name="removeClass" scope="instance">
			<description>Removes a class name from a given element.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to remove from the class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="docScrollY" scope="instance">
			<description>Amount page has been scroll vertically</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current amount the screen is scrolled vertically.</return-description>
		</method>
		<method name="docScrollX" scope="instance">
			<description>Amount page has been scroll horizontally</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current amount the screen is scrolled horizontally.</return-description>
		</method>
		<method name="docHeight" scope="instance">
			<description>Document height</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current height of the document.</return-description>
		</method>
		<method name="getStyle" scope="instance">
			<description>Returns the current style value for the given property.</description>
			<parameters>
			<parameter name="An" type="HTMLElement" usage="required">
				<description> HTMLElement to get the style from.</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The style property to get.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setXY" scope="instance">
			<description>Set the position of an html element in page coordinates. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			<parameter name="xy" type="Array" usage="required">
				<description> Contains X &amp; Y values for new position (coordinates are page-based)</description>
			</parameter>
			<parameter name="noRetry" type="Boolean" usage="required">
				<description> By default we try and set the position a second time if the first fails</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getWin" scope="instance" visibility="private">
			<description>returns the appropriate window.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> optional Target element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The window for the given element or the default window.</return-description>
		</method>
		<method name="setAttibute" scope="instance">
			<description>Provides a normalized attribute interface.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> The target element for the attribute.</description>
			</parameter>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to set.</description>
			</parameter>
			<parameter name="val" type="String" usage="required">
				<description> The value of the attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="byId" scope="instance">
			<description>Returns the HTMLElement with the given ID (Wrapper for document.getElementById).</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id attribute</description>
			</parameter>
			<parameter name="doc" type="Object" usage="required">
				<description> optional The document to search. Defaults to current document</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement | null" />
			</return-types>
			<return-description>The HTMLElement with the id, or null if none found.</return-description>
		</method>
		<method name="setY" scope="instance">
			<description>Set the Y position of an html element in page coordinates, regardless of how the element is positioned. The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			<parameter name="y" type="Int" usage="required">
				<description> The Y values for new position (coordinates are page-based)</description>
			</parameter>
			</parameters>
		</method>
		<method name="getXY" scope="instance">
			<description>Gets the current position of an element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="element" type="" usage="required">
				<description> The target element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The XY position of the element
TODO: test inDocument/display?</return-description>
		</method>
		<method name="elementByAxis" scope="instance">
			<description>Searches the element by the given axis for the first matching element.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The html element.</description>
			</parameter>
			<parameter name="axis" type="String" usage="required">
				<description> The axis to search (parentNode, nextSibling, previousSibling).</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> optional An optional boolean test to apply.</description>
			</parameter>
			<parameter name="all" type="Boolean" usage="required">
				<description> optional Whether all node types should be returned, or just element nodes. The optional function is passed the current HTMLElement being tested as its only argument. If no function is given, the first element is returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement | null" />
			</return-types>
			<return-description>The matching element or null if none found.</return-description>
		</method>
		<method name="docWidth" scope="instance">
			<description>Document width</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The current width of the document.</return-description>
		</method>
		<method name="setText" scope="instance">
			<description>Sets the text content of the HTMLElement.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The html element.</description>
			</parameter>
			<parameter name="content" type="String" usage="required">
				<description> The content to add.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAttibute" scope="instance">
			<description>Provides a normalized attribute interface.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> The target element for the attribute.</description>
			</parameter>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to get.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The current value of the attribute.</return-description>
		</method>
		<method name="hasClass" scope="instance">
			<description>Determines whether a DOM element has the given className.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The DOM element.</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element has the given class.</return-description>
		</method>
		<method name="_getDoc" scope="instance" visibility="private">
			<description>returns the appropriate document.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> optional Target element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The document for the given element or the default document.</return-description>
		</method>
		</methods>
	</class>
	<class type="Cache" superclass="Plugin.Base">
		<description>Base class for the YUI Cache utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>Base class for the YUI Cache utility.</description>
			<return-types>
				<return-type type="Cache" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_entries" type="Object[]" scope="instance" visibility="private">
			<description>Array of request/response objects indexed chronologically.</description>
		</property>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="retrieve" scope="instance">
			<description>Retrieves cached entry for given request, if available, and refreshes entry in the cache. Returns null if there is no cache match.</description>
			<parameters>
			<parameter name="request" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Cached entry object with the properties request, response, and payload, or null.</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Adds a new entry to the cache of the format {request:request, response:response, payload:payload}. If cache is full, evicts the stalest entry before adding the new one.</description>
			<parameters>
			<parameter name="request" type="Object" usage="required">
				<description> Request value.</description>
			</parameter>
			<parameter name="response" type="Object" usage="required">
				<description> Response value.</description>
			</parameter>
			<parameter name="payload" type="Object" usage="optional">
				<description> (optional) Arbitrary data payload.</description>
			</parameter>
			</parameters>
		</method>
		<method name="destructor" scope="instance" visibility="private">
			<description>Internal destroy() handler.</description>
		</method>
		<method name="_defFlushFn" scope="instance">
			<description>Flushes cache.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isMatch" scope="instance">
			<description>Default overridable method compares current request with given cache entry. Returns true if current request matches the cached request, otherwise false. Implementers should override this method to customize the cache-matching algorithm.</description>
			<parameters>
			<parameter name="request" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="entry" type="Object" usage="required">
				<description> Cached entry.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if current request matches given cached request, false otherwise.</return-description>
		</method>
		<method name="flush" scope="instance">
			<description>Flushes cache.</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defAddFn" scope="instance">
			<description>Adds entry to cache.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> Event Facade with the following properties: &lt;dl&gt; &lt;dt&gt;entry (Object)&lt;/dt&gt; &lt;dd&gt;The cached entry.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="ImgLoadImgObj" superclass="Base">
		<description>Image objects to be registered with the groups</description>
		<constructors>
		<constructor scope="instance">
			<description>Image objects to be registered with the groups</description>
			<return-types>
				<return-type type="ImgLoadImgObj" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_imgEl" type="Object" scope="instance" visibility="private">
			<description>The Node object returned from &lt;code&gt;Y.get&lt;/code&gt;, to avoid repeat calls to access the DOM.</description>
		</property>
		<property name="_fetched" type="Boolean" scope="instance" visibility="private">
			<description>Whether this image has already been fetched. In the case of fold-conditional groups, images won't be fetched twice.</description>
		</property>
		<property name="_yPos" type="Int" scope="instance" visibility="private">
			<description>The vertical position returned from &lt;code&gt;getY&lt;/code&gt;, to avoid repeat calls to access the DOM. The Y position is checked only for images registered with fold-conditional groups. The position is checked first at page load (domready) and this caching enhancement assumes that the image's vertical position won't change after that first check.</description>
		</property>
		</properties>
		<methods>
		<method name="_getYPos" scope="instance" visibility="private">
			<description>Gets the Y position of the node in page coordinates. Expects that the page-coordinate position of the image won't change.</description>
		</method>
		<method name="_getImgEl" scope="instance" visibility="private">
			<description>Gets the object (as a &lt;code&gt;Y.Node&lt;/code&gt;) of the DOM element indicated by &quot;&lt;code&gt;domId&lt;/code&gt;&quot;.</description>
		</method>
		<method name="_init" scope="instance" visibility="private">
			<description>Initialize all private members needed for the group.</description>
		</method>
		<method name="fetch" scope="instance">
			<description>Displays the image; puts the URL into the DOM. This method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.</description>
			<parameters>
			<parameter name="withinY" type="Int" usage="required">
				<description> The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether the image has been fetched (either during this execution or previously)</return-description>
		</method>
		</methods>
	</class>
	<class type="plugin.NodeMenuNav">
		<description>The NodeMenuNav class is a plugin for a Node instance.  The class is used via  
the &lt;a href=&quot;Node.html#method_plug&quot;&gt;&lt;code&gt;plug&lt;/code&gt;&lt;/a&gt; method of Node and 
should not be instantiated directly.</description>
		<properties>
		<property name="_hideAllSubmenusTimer" type="Object" scope="instance">
			<description>Timer used to hide a all submenus.</description>
		</property>
		<property name="_blockMouseEvent" type="Boolean" scope="instance">
			<description>Boolean indicating whether or not to handle the &quot;mouseover&quot; event.</description>
		</property>
		<property name="_activeMenu" type="Node" scope="instance">
			<description>Node instance representing the menu that is the parent of the menu's active descendent.</description>
		</property>
		<property name="NodeMenuNav.SHIM_TEMPLATE_TITLE" type="String" scope="instance">
			<description>String representing the value for the &lt;code&gt;title&lt;/code&gt; attribute for the shim used to prevent &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; elements from poking through menus in IE 6.</description>
		</property>
		<property name="_hasFocus" type="Boolean" scope="instance">
			<description>Boolean indicating if the menu has focus.</description>
		</property>
		<property name="_currentMouseX" type="Number" scope="instance">
			<description>Number representing the current x coordinate of the mouse inside the menu.</description>
		</property>
		<property name="_hideSubmenuTimer" type="Object" scope="instance">
			<description>Timer used to hide a submenu.</description>
		</property>
		<property name="_firstItem" type="Node" scope="instance">
			<description>Node instance representing the first item (menuitem or menu label) in the root menu of a menu.</description>
		</property>
		<property name="_showSubmenuTimer" type="Object" scope="instance">
			<description>Timer used to show a submenu.</description>
		</property>
		<property name="_movingToSubmenu" type="Boolean" scope="instance">
			<description>Boolean indicating if the mouse is moving from a menu label to its corresponding submenu.</description>
		</property>
		<property name="NodeMenuNav.SHIM_TEMPLATE" type="String" scope="instance">
			<description>String representing the HTML used to create the &lt;code&gt;&amp;#60;iframe&amp;#62;&lt;/code&gt; shim used to prevent &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; elements from poking through menus in IE 6.</description>
		</property>
		<property name="_activeItem" type="Node" scope="instance">
			<description>Node instance representing the menu's active descendent: the menuitem or menu label the user is currently interacting with.</description>
		</property>
		<property name="_rootMenu" type="Node" scope="instance">
			<description>Node instance representing the root menu in the menu.</description>
		</property>
		</properties>
		<methods>
		<method name="_showMenu" scope="instance">
			<description>Shows the specified menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_hideAndFocusLabel" scope="instance">
			<description>Hides all of the submenus of the root menu and focuses the label of the topmost submenu</description>
		</method>
		<method name="_onMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_hideMenu" scope="instance">
			<description>Hides the specified menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			<parameter name="activateAndFocusLabel" type="Boolean" usage="required">
				<description> Boolean indicating if the label for the specified menu should be focused and set as active.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_toggleSubmenuDisplay" scope="instance">
			<description>&quot;mousedown,&quot; &quot;keydown,&quot; and &quot;click&quot; event handler for the menu used to toggle the display of a submenu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onHorizontalMenuKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for horizontal menus.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onVerticalMenuKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for vertical menus.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focusItem" scope="instance">
			<description>Focuses the specified menuitem or menu label.</description>
			<parameters>
			<parameter name="item" type="Node" usage="required">
				<description> Node instance representing a menuitem or menu label.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cancelHideSubmenuTimer" scope="instance">
			<description>Cancels the timer used to hide a submenu.</description>
		</method>
		<method name="_onActiveDescendantChange" scope="instance">
			<description>&quot;activeDescendantChange&quot; event handler for menu's Focus Manager.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the Attribute change event.</description>
			</parameter>
			<parameter name="menuNav" type="NodeMenuNav" usage="required">
				<description> Object representing the NodeMenuNav instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuLabelMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for a menu label.</description>
			<parameters>
			<parameter name="menuLabel" type="Node" usage="required">
				<description> Node instance representing a menu label.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocMouseDown" scope="instance">
			<description>&quot;mousedown&quot; event handler for the owner document of the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuLabelMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for a menu label.</description>
			<parameters>
			<parameter name="menuLabel" type="Node" usage="required">
				<description> Node instance representing a menu label.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterActiveDescendantChange" scope="instance">
			<description>&quot;activeDescendantChange&quot; event handler for menu's Focus Manager.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the Attribute change event.</description>
			</parameter>
			<parameter name="menuNav" type="NodeMenuNav" usage="required">
				<description> Object representing the NodeMenuNav instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuItemMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for a menuitem.</description>
			<parameters>
			<parameter name="menuItem" type="Node" usage="required">
				<description> Node instance representing a menuitem.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cancelShowSubmenuTimer" scope="instance">
			<description>Cancels the timer used to show a submenu.</description>
		</method>
		<method name="_isRoot" scope="instance">
			<description>Returns a boolean indicating if the specified menu is the root menu in the menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Boolean indicating if the specified menu is the root 
menu in the menu.</return-description>
		</method>
		<method name="_getTopmostSubmenu" scope="instance">
			<description>Returns the topmost submenu of a submenu hierarchy.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>Node instance representing a menu.</return-description>
		</method>
		<method name="_clearActiveItem" scope="instance">
			<description>Clears the menu's active descendent.</description>
		</method>
		<method name="_onMouseMove" scope="instance">
			<description>&quot;mousemove&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuItemMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for a menuitem.</description>
			<parameters>
			<parameter name="menuItem" type="Node" usage="required">
				<description> Node instance representing a menuitem.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocFocus" scope="instance">
			<description>&quot;focus&quot; event handler for the owner document of the MenuNav.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for a menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_hideAllSubmenus" scope="instance">
			<description>Hides all submenus of the specified menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setActiveItem" scope="instance">
			<description>Sets the specified menuitem or menu label as the menu's active descendent.</description>
			<parameters>
			<parameter name="item" type="Node" usage="required">
				<description> Node instance representing a menuitem or menu label.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initFocusManager" scope="instance">
			<description>Initializes and updates the Focus Manager so that is is always managing descendants of the active menu.</description>
		</method>
		<method name="_onKeyPress" scope="instance">
			<description>&quot;keypress&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for a menu.</description>
			<parameters>
			<parameter name="menu" type="Node" usage="required">
				<description> Node instance representing a menu.</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> Object representing the DOM event.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="DataSchema.Base">
		<description>Base class for the YUI DataSchema Utility.</description>
		<methods>
		<method name="parse" scope="instance">
			<description>Applies field parser, if defined</description>
			<parameters>
			<parameter name="value" type="Object" usage="required">
				<description> Original value.</description>
			</parameter>
			<parameter name="field" type="Object" usage="required">
				<description> Field.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Type-converted value.</return-description>
		</method>
		<method name="apply" scope="static">
			<description>Overridable method returns data as-is.</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to apply.</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description> Data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		</methods>
	</class>
	<class type="Do.Method">
		<description>Wrapper for a displaced method with aop enabled</description>
		<constructors>
		<constructor scope="instance">
			<description>Wrapper for a displaced method with aop enabled</description>
			<return-types>
				<return-type type="Do.Method" />
			</return-types>
			<parameters>
			<parameter name="obj" type="" usage="required">
				<description> The object to operate on</description>
			</parameter>
			<parameter name="sFn" type="" usage="required">
				<description> The name of the method to displace</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="register" scope="instance">
			<description>Register a aop subscriber</description>
			<parameters>
			<parameter name="sid" type="string" usage="required">
				<description> the subscriber id</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="when" type="string" usage="required">
				<description> when to execute the function</description>
			</parameter>
			</parameters>
		</method>
		<method name="exec" scope="instance">
			<description>Execute the wrapped method</description>
		</method>
		<method name="delete" scope="instance">
			<description>Unregister a aop subscriber</description>
			<parameters>
			<parameter name="sid" type="string" usage="required">
				<description> the subscriber id</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="when" type="string" usage="required">
				<description> when to execute the function</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Node">
		<description>The Node class provides a wrapper for manipulating DOM Nodes.
Node properties can be accessed via the set/get methods.
Use Y.get() to retrieve Node instances.
&lt;strong&gt;NOTE:&lt;/strong&gt; Node properties are accessed using
the &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; methods.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Node class provides a wrapper for manipulating DOM Nodes.
Node properties can be accessed via the set/get methods.
Use Y.get() to retrieve Node instances.
&lt;strong&gt;NOTE:&lt;/strong&gt; Node properties are accessed using
the &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; methods.</description>
			<return-types>
				<return-type type="Node" />
			</return-types>
		</constructor>
		</constructors>
		<methods>
		<method name="size" scope="instance">
			<description>Returns the current number of items in the Node.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The number of items in the Node.</return-description>
		</method>
		<method name="appendChild" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement | Node" usage="required">
				<description> Node to be appended</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The appended node</return-description>
		</method>
		<method name="all" scope="instance">
			<description>Retrieves a nodeList based on the given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS selector to test against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>A NodeList instance for the matching HTMLCollection/Array.</return-description>
		</method>
		<method name="set" scope="instance">
			<description>Sets an attribute on the Node instance.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to be set.</description>
			</parameter>
			<parameter name="val" type="any" usage="required">
				<description> The value to set the attribute to.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAttrs" scope="instance">
			<description>Returns an object containing the values for the requested attributes.</description>
			<parameters>
			<parameter name="attrs" type="Array" usage="required">
				<description> an array of attributes to get values</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object with attribute name/value pairs.</return-description>
		</method>
		<method name="replaceChild" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement | Node" usage="required">
				<description> Node to be inserted</description>
			</parameter>
			<parameter name="refNode" type="HTMLElement | Node" usage="required">
				<description> Node to be replaced</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The replaced node</return-description>
		</method>
		<method name="removeAttribute" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="attribute" type="String" usage="required">
				<description> The attribute to be removed</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAttribute" scope="instance">
			<description>Allows getting attributes on DOM nodes, normalizing in some cases. This passes through to the DOM node, allowing for custom attributes.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The attribute name</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The attribute value</return-description>
		</method>
		<method name="replaceClass" scope="instance">
			<description>Replace a class with another class for each node. If no oldClassName is present, the newClassName is simply added.</description>
			<parameters>
			<parameter name="oldClassName" type="String" usage="required">
				<description> the class name to be replaced</description>
			</parameter>
			<parameter name="newClassName" type="String" usage="required">
				<description> the class name that will be replacing the old class name</description>
			</parameter>
			</parameters>
		</method>
		<method name="focus" scope="instance">
			<description>Passes through to DOM method.</description>
		</method>
		<method name="cloneNode" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="deep" type="Boolean" usage="required">
				<description> Whether or not to perform a deep clone, which includes subtree and attributes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The clone</return-description>
		</method>
		<method name="one" scope="instance">
			<description>Retrieves a Node instance of nodes based on the given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS selector to test against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>A Node instance for the matching HTMLElement.</return-description>
		</method>
		<method name="getX" scope="instance">
			<description>Gets the current position of the node in page coordinates.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The X position of the node</return-description>
		</method>
		<method name="getY" scope="instance">
			<description>Gets the current position of the node in page coordinates.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The Y position of the node</return-description>
		</method>
		<method name="hasClass" scope="instance">
			<description>Determines whether each node has the given className.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of booleans for each node bound to the NodeList.</return-description>
		</method>
		<method name="query" scope="instance">
			<description>Retrieves a Node instance of nodes based on the given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS selector to test against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>A Node instance for the matching HTMLElement.</return-description>
		</method>
		<method name="prepend" scope="instance">
			<description>Inserts the content as the firstChild of the node.</description>
			<parameters>
			<parameter name="content" type="String | Y.Node | HTMLElement" usage="required">
				<description> The content to insert</description>
			</parameter>
			</parameters>
		</method>
		<method name="queryAll" scope="instance">
			<description>Retrieves a nodeList based on the given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS selector to test against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>A NodeList instance for the matching HTMLCollection/Array.</return-description>
		</method>
		<method name="select" scope="instance">
			<description>Passes through to DOM method.</description>
		</method>
		<method name="previous" scope="instance">
			<description>Returns the previous matching sibling. Returns the nearest element node sibling if no method provided.</description>
			<parameters>
			<parameter name="fn" type="String | Function" usage="required">
				<description> A selector or boolean method for testing elements. If a function is used, it receives the current node being tested as the only argument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>Node instance or null if not found</return-description>
		</method>
		<method name="setStyles" scope="instance">
			<description>Sets multiple style properties on the node.</description>
			<parameters>
			<parameter name="hash" type="Object" usage="required">
				<description> An object literal of property:value pairs.</description>
			</parameter>
			</parameters>
		</method>
		<method name="insertBefore" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="newNode" type="HTMLElement | Node" usage="required">
				<description> Node to be appended</description>
			</parameter>
			<parameter name="refNode" type="HTMLElement | Node" usage="required">
				<description> Node to be inserted before</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The inserted node</return-description>
		</method>
		<method name="item" scope="instance">
			<description>Retrieves the Node instance at the given index.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the target Node.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The Node instance at the given index.</return-description>
		</method>
		<method name="toggleClass" scope="instance">
			<description>If the className exists on the node it is removed, if it doesn't exist it is added.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to be toggled</description>
			</parameter>
			</parameters>
		</method>
		<method name="setX" scope="instance">
			<description>Set the position of the node in page coordinates, regardless of how the node is positioned.</description>
			<parameters>
			<parameter name="x" type="Int" usage="required">
				<description> X value for new position (coordinates are page-based)</description>
			</parameter>
			</parameters>
		</method>
		<method name="Y.one" scope="static">
			<description>Returns a single Node instance bound to the node or the first element matching the given selector.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> a node or Selector</description>
			</parameter>
			<parameter name="doc" type="Y.Node || HTMLElement" usage="required">
				<description> an optional document to scan. Defaults to Y.config.doc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="contains" scope="instance">
			<description>Determines whether the ndoe is an ancestor of another HTML element in the DOM hierarchy.</description>
			<parameters>
			<parameter name="needle" type="Node | HTMLElement" usage="required">
				<description> The possible node or descendent</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not this node is the needle its ancestor</return-description>
		</method>
		<method name="getComputedStyle" scope="instance">
			<description>Returns the computed value for the given style property.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The computed value of the style property for the element.</return-description>
		</method>
		<method name="submit" scope="instance">
			<description>Passes through to DOM method. Only valid on FORM elements</description>
		</method>
		<method name="next" scope="instance">
			<description>Returns the next matching sibling. Returns the nearest element node sibling if no method provided.</description>
			<parameters>
			<parameter name="fn" type="String | Function" usage="required">
				<description> A selector or boolean method for testing elements. If a function is used, it receives the current node being tested as the only argument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>Node instance or null if not found</return-description>
		</method>
		<method name="hasChildNodes" scope="instance">
			<description>Passes through to DOM method.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the node has any childNodes</return-description>
		</method>
		<method name="append" scope="instance">
			<description>Inserts the content as the lastChild of the node.</description>
			<parameters>
			<parameter name="content" type="String | Y.Node | HTMLElement" usage="required">
				<description> The content to insert</description>
			</parameter>
			</parameters>
		</method>
		<method name="intersect" scope="instance">
			<description>Compares the intersection of the node with another node or region</description>
			<parameters>
			<parameter name="node2" type="Node|Object" usage="required">
				<description> The node or region to compare with.</description>
			</parameter>
			<parameter name="altRegion" type="Object" usage="required">
				<description> An alternate region to use (rather than this node's).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object representing the intersection of the regions.</return-description>
		</method>
		<method name="blur" scope="instance">
			<description>Passes through to DOM method.</description>
		</method>
		<method name="test" scope="instance">
			<description>Test if the supplied node matches the supplied selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS selector to test against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Whether or not the node matches the selector.</return-description>
		</method>
		<method name="ancestor" scope="instance">
			<description>Returns the nearest ancestor that passes the test applied by supplied boolean method.</description>
			<parameters>
			<parameter name="fn" type="String | Function" usage="required">
				<description> A selector string or boolean method for testing elements. If a function is used, it receives the current node being tested as the only argument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The matching Node instance or null if not found</return-description>
		</method>
		<method name="inDoc" scope="instance">
			<description>Determines whether the node is appended to the document.</description>
			<parameters>
			<parameter name="doc" type="Node|HTMLElement" usage="required">
				<description> optional An optional document to check against. Defaults to current document.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not this node is appended to the document.</return-description>
		</method>
		<method name="addClass" scope="instance">
			<description>Adds a class name to each node.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to add to the node's class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="getXY" scope="instance">
			<description>Gets the current position of the node in page coordinates.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The XY position of the node</return-description>
		</method>
		<method name="removeClass" scope="instance">
			<description>Removes a class name from each node.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> the class name to remove from the node's class attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="Y.get" scope="static">
			<description>Returns a single Node instance bound to the node or the first element matching the given selector.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> a node or Selector</description>
			</parameter>
			<parameter name="doc" type="Y.Node || HTMLElement" usage="required">
				<description> an optional document to scan. Defaults to Y.config.doc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="get" scope="instance">
			<description>Returns an attribute value on the Node instance</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to be set</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="any" />
			</return-types>
			<return-description>The current value of the attribute</return-description>
		</method>
		<method name="setContent" scope="instance">
			<description>Replaces the node's current content with the content.</description>
			<parameters>
			<parameter name="content" type="String | Y.Node | HTMLElement" usage="required">
				<description> The content to insert</description>
			</parameter>
			</parameters>
		</method>
		<method name="getElementsByTagName" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="tagName" type="String" usage="required">
				<description> The tagName to collect</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="NodeList" />
			</return-types>
			<return-description>A NodeList representing the HTMLCollection</return-description>
		</method>
		<method name="each" scope="instance">
			<description>Applies the given function to each Node in the NodeList.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to apply</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> optional An optional context to apply the function with Default context is the NodeList instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="setAttrs" scope="instance">
			<description>Sets multiple attributes.</description>
			<parameters>
			<parameter name="attrMap" type="Object" usage="required">
				<description> an object of name/value pairs to set</description>
			</parameter>
			</parameters>
		</method>
		<method name="getStyle" scope="instance">
			<description>Returns the style's current value.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The current value of the style property for the element.</return-description>
		</method>
		<method name="hasAttribute" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="attribute" type="String" usage="required">
				<description> The attribute to test for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the attribute is present</return-description>
		</method>
		<method name="simulate" scope="static">
			<description>Simulates an event on the node.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to simulate (i.e., &quot;click&quot;).</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) Extra options to copy onto the event object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="setStyle" scope="instance">
			<description>Sets a style property of the node.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The style attribute to set.</description>
			</parameter>
			<parameter name="val" type="String|Number" usage="required">
				<description> The value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="replace" scope="instance">
			<description>Replace the node with the other node. This is a DOM update only and does not change the node bound to the Node instance. Shortcut for myNode.get('parentNode').replaceChild(newNode, myNode);</description>
		</method>
		<method name="invoke" scope="instance">
			<description>Invokes a method on the Node instance</description>
			<parameters>
			<parameter name="method" type="String" usage="required">
				<description> The name of the method to invoke</description>
			</parameter>
			<parameter name="a," type="Any" usage="required">
				<description> b, c, etc. Arguments to invoke the method with.</description>
			</parameter>
			</parameters>
			<return-description>Whatever the underly method returns. 
DOM Nodes and Collections return values
are converted to Node/NodeList instances.</return-description>
		</method>
		<method name="setY" scope="instance">
			<description>Set the position of the node in page coordinates, regardless of how the node is positioned.</description>
			<parameters>
			<parameter name="y" type="Int" usage="required">
				<description> Y value for new position (coordinates are page-based)</description>
			</parameter>
			</parameters>
		</method>
		<method name="reset" scope="instance">
			<description>Passes through to DOM method. Only valid on FORM elements</description>
		</method>
		<method name="insert" scope="instance">
			<description>Inserts the content before the reference node.</description>
			<parameters>
			<parameter name="content" type="String | Y.Node | HTMLElement" usage="required">
				<description> The content to insert</description>
			</parameter>
			<parameter name="where" type="Int | Y.Node | HTMLElement | String" usage="required">
				<description> The position to insert at.</description>
			</parameter>
			</parameters>
		</method>
		<method name="scrollIntoView" scope="instance">
			<description>Passes through to DOM method.</description>
		</method>
		<method name="setAttribute" scope="instance">
			<description>Allows setting attributes on DOM nodes, normalizing in some cases. This passes through to the DOM node, allowing for custom attributes.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The attribute name</description>
			</parameter>
			<parameter name="value" type="string" usage="required">
				<description> The value to set</description>
			</parameter>
			</parameters>
		</method>
		<method name="remove" scope="instance">
			<description>Removes the node from its parent. Shortcut for myNode.get('parentNode').removeChild(myNode);</description>
		</method>
		<method name="removeChild" scope="instance">
			<description>Passes through to DOM method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement | Node" usage="required">
				<description> Node to be removed</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The removed node</return-description>
		</method>
		<method name="delegate" scope="instance">
			<description>Functionality to make the node a delegated event container</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> the event type to delegate</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="selector" type="String" usage="required">
				<description> a selector that must match the target of the event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event.Handle" />
			</return-types>
			<return-description>the detach handle</return-description>
		</method>
		<method name="compareTo" scope="instance">
			<description>Compares nodes to determine if they match. Node instances can be compared to each other and/or HTMLElements.</description>
			<parameters>
			<parameter name="refNode" type="HTMLElement | Node" usage="required">
				<description> The reference node to compare to the node.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the nodes match, false if they do not.</return-description>
		</method>
		<method name="Node.getDOMNode" scope="static">
			<description>Retrieves the DOM node bound to a Node instance</description>
			<parameters>
			<parameter name="node" type="Y.Node || HTMLNode" usage="required">
				<description> The Node instance or an HTMLNode</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLNode" />
			</return-types>
			<return-description>The DOM node bound to the Node instance.  If a DOM node is passed
as the node argument, it is simply returned.</return-description>
		</method>
		<method name="setXY" scope="instance">
			<description>Set the position of the node in page coordinates, regardless of how the node is positioned.</description>
			<parameters>
			<parameter name="xy" type="Array" usage="required">
				<description> Contains X &amp; Y values for new position (coordinates are page-based)</description>
			</parameter>
			</parameters>
		</method>
		<method name="create" scope="static">
			<description>Creates a new dom node using the provided markup string.</description>
			<parameters>
			<parameter name="html" type="String" usage="required">
				<description> The markup used to create the element</description>
			</parameter>
			<parameter name="doc" type="HTMLDocument" usage="required">
				<description> An optional document context</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>A Node instance bound to a DOM node or fragment</return-description>
		</method>
		<method name="inRegion" scope="instance">
			<description>Determines whether or not the node is within the giving region.</description>
			<parameters>
			<parameter name="node2" type="Node|Object" usage="required">
				<description> The node or region to compare with.</description>
			</parameter>
			<parameter name="all" type="Boolean" usage="required">
				<description> Whether or not all of the node must be in the region.</description>
			</parameter>
			<parameter name="altRegion" type="Object" usage="required">
				<description> An alternate region to use (rather than this node's).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object representing the intersection of the regions.</return-description>
		</method>
		</methods>
	</class>
	<class type="Test.Runner">
		<description>Runs test suites and test cases, providing events to allowing for the
interpretation of test results.</description>
		<properties>
		<property name="_waiting" type="Boolean" scope="static" visibility="private">
			<description>Indicates if the TestRunner is waiting as a result of wait() being called.</description>
		</property>
		<property name="_root" type="TestNode" scope="static" visibility="private">
			<description>Pointer to the root node in the test tree.</description>
		</property>
		<property name="_cur" type="TestNode" scope="static" visibility="private">
			<description>Pointer to the current node in the test tree.</description>
		</property>
		<property name="masterSuite" type="Y.Test.Suite" scope="static" visibility="private">
			<description>Suite on which to attach all TestSuites and TestCases to be run.</description>
		</property>
		<property name="_log" type="Boolean" scope="static" visibility="private">
			<description>Indicates if the TestRunner will log events or not.</description>
		</property>
		</properties>
		<methods>
		<method name="disableLogging" scope="static">
			<description>Disable logging via Y.log(). Test output will not be visible unless TestRunner events are subscribed to.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_run" scope="static" visibility="private">
			<description>Runs a test case or test suite, returning the results.</description>
			<parameters>
			<parameter name="testObject" type="Y.Test.Case|Y.Test.Suite" usage="required">
				<description> The test case or test suite to run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Results of the execution with properties passed, failed, and total.</return-description>
		</method>
		<method name="run" scope="static">
			<description>Runs the test suite.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="resume" scope="static">
			<description>Resumes the TestRunner after wait() was called.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="required">
				<description> The function to run as the rest of the haulted test.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_logEvent" scope="static" visibility="private">
			<description>Logs TestRunner events using Y.log().</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> The event object for the event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_addTestCaseToTestTree" scope="static" visibility="private">
			<description>Adds a test case to the test tree as a child of the specified node.</description>
			<parameters>
			<parameter name="parentNode" type="TestNode" usage="required">
				<description> The node to add the test case to as a child.</description>
			</parameter>
			<parameter name="testCase" type="Y.Test.Case" usage="required">
				<description> The test case to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="clear" scope="static">
			<description>Removes all test objects from the runner.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="enableLogging" scope="static">
			<description>Enable logging via Y.log(). Test output is published and can be read via logreader.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_buildTestTree" scope="static" visibility="private">
			<description>Builds the test tree based on items in the master suite. The tree is a hierarchical representation of the test suites, test cases, and test functions. The resulting tree is stored in _root and the pointer _cur is set to the root initially.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_addTestSuiteToTestTree" scope="static" visibility="private">
			<description>Adds a test suite to the test tree as a child of the specified node.</description>
			<parameters>
			<parameter name="parentNode" type="TestNode" usage="required">
				<description> The node to add the test suite to as a child.</description>
			</parameter>
			<parameter name="testSuite" type="Y.Test.Suite" usage="required">
				<description> The test suite to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_handleTestObjectComplete" scope="instance" visibility="private">
			<description>Handles the completion of a test object's tests. Tallies test results from one level up to the next.</description>
			<parameters>
			<parameter name="node" type="TestNode" usage="required">
				<description> The TestNode representing the test object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="add" scope="static">
			<description>Adds a test suite or test case to the list of test objects to run.</description>
			<parameters>
			<parameter name="testObject" type="" usage="required">
				<description> Either a TestCase or a TestSuite that should be run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="isWaiting" scope="static">
			<description>Indicates if the TestRunner is waiting for a test to resume</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the TestRunner is waiting, false if not.</return-description>
		</method>
		<method name="_next" scope="static" visibility="private">
			<description>Retrieves the next node in the test tree.</description>
			<return-types>
			<return-type type="TestNode" />
			</return-types>
			<return-description>The next node in the test tree or null if the end is reached.</return-description>
		</method>
		<method name="_handleError" scope="static" visibility="private">
			<description>Handles an error as if it occurred within the currently executing test. This is for mock methods that may be called asynchronously and therefore out of the scope of the TestRunner. Previously, this error would bubble up to the browser. Now, this method is used to tell TestRunner about the error. This should never be called by anyplace other than the Mock object.</description>
			<parameters>
			<parameter name="error" type="Error" usage="required">
				<description> The error object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_runTest" scope="static" visibility="private">
			<description>Runs a single test based on the data provided in the node.</description>
			<parameters>
			<parameter name="node" type="TestNode" usage="required">
				<description> The TestNode representing the test to run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="Get">
		<description>Fetches and inserts one or more script or link nodes into the document</description>
		<properties>
		<property name="queues" type="undefined" scope="instance" visibility="private">
			<description>hash of queues to manage multiple requests</description>
		</property>
		<property name="qidx" type="int" scope="instance" visibility="private">
			<description>queue index used to generate transaction ids</description>
		</property>
		<property name="PURGE_THRESH" type="int" scope="static" visibility="private">
			<description>The number of request required before an automatic purge. Can be configured via the 'purgethreshold' config property PURGE_THRESH</description>
		</property>
		<property name="purging" type="boolean" scope="instance" visibility="private">
			<description>interal property used to prevent multiple simultaneous purge processes</description>
		</property>
		</properties>
		<methods>
		<method name="_purge" scope="instance" visibility="private">
			<description>Removes the nodes for the specified queue</description>
		</method>
		<method name="_finalize" scope="static" visibility="private">
			<description>Called by the the helper for detecting script load in Safari</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the transaction id</description>
			</parameter>
			</parameters>
		</method>
		<method name="_autoPurge" scope="instance" visibility="private">
			<description>Removes processed queues and corresponding nodes</description>
		</method>
		<method name="_finish" scope="instance" visibility="private">
			<description>The request is complete, so executing the requester's callback</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_linkNode" scope="instance" visibility="private">
			<description>Generates a link node</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url for the css file</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the node in</description>
			</parameter>
			<parameter name="attributes" type="" usage="required">
				<description> optional attributes collection to apply to the new node</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="script" scope="static">
			<description>Fetches and inserts one or more script nodes into the head of the current document or the document in a specified window.</description>
			<parameters>
			<parameter name="url" type="string|string[]" usage="required">
				<description> the url or urls to the script(s)</description>
			</parameter>
			<parameter name="opts" type="object" usage="required">
				<description> Options: &lt;dl&gt; &lt;dt&gt;onSuccess&lt;/dt&gt; &lt;dd&gt; callback to execute when the script(s) are finished loading The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;onTimeout&lt;/dt&gt; &lt;dd&gt; callback to execute when a timeout occurs. The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;onEnd&lt;/dt&gt; &lt;dd&gt;a function that executes when the transaction finishes, regardless of the exit path&lt;/dd&gt; &lt;dt&gt;onFailure&lt;/dt&gt; &lt;dd&gt; callback to execute when the script load operation fails The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted successfully&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove any nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;context&lt;/dt&gt; &lt;dd&gt;the execution context for the callbacks&lt;/dd&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt; &lt;dt&gt;autopurge&lt;/dt&gt; &lt;dd&gt; setting to true will let the utilities cleanup routine purge the script once loaded &lt;/dd&gt; &lt;dt&gt;purgethreshold&lt;/dt&gt; &lt;dd&gt; The number of transaction before autopurge should be initiated &lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt; data that is supplied to the callback when the script(s) are loaded. &lt;/dd&gt; &lt;dt&gt;insertBefore&lt;/dt&gt; &lt;dd&gt;node or node id that will become the new node's nextSibling&lt;/dd&gt; &lt;/dl&gt; &lt;dt&gt;charset&lt;/dt&gt; &lt;dd&gt;Node charset, default utf-8 (deprecated, use the attributes config)&lt;/dd&gt; &lt;dt&gt;attributes&lt;/dt&gt; &lt;dd&gt;An object literal containing additional attributes to add to the link tags&lt;/dd&gt; &lt;dt&gt;timeout&lt;/dt&gt; &lt;dd&gt;Number of milliseconds to wait before aborting and firing the timeout event&lt;/dd&gt; &lt;pre&gt; &amp;nbsp;&amp;nbsp;Y.Get.script( &amp;nbsp;&amp;nbsp;[&quot;http://yui.yahooapis.com/2.5.2/build/yahoo/yahoo-min.js&quot;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;http://yui.yahooapis.com/2.5.2/build/event/event-min.js&quot;], &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onSuccess: function(o) &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.log(&quot;won't cause error because Y is the context&quot;); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Y.log(o.data); // foo &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Y.log(o.nodes.length === 2) // true &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// o.purge(); // optionally remove the script nodes immediately &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onFailure: function(o) &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Y.log(&quot;transaction failed&quot;); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onTimeout: function(o) &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Y.log(&quot;transaction timed out&quot;); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data: &quot;foo&quot;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;timeout: 10000, // 10 second timeout &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context: Y, // make the YUI instance &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// win: otherframe // target another window/frame &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;autopurge: true // allow the utility to choose when to remove the nodes &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;purgetheshold: 1 // purge previous transaction before next transaction &amp;nbsp;&amp;nbsp;&amp;#125;); &lt;/pre&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="tId: string" />
			</return-types>
			<return-description>an object containing info about the transaction</return-description>
		</method>
		<method name="_end" scope="instance" visibility="private">
			<description>The transaction is finished</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_returnData" scope="instance" visibility="private">
			<description>Returns the data payload for callback functions</description>
		</method>
		<method name="queue" scope="instance" visibility="private">
			<description>Saves the state for the request and begins loading the requested urls</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of node to insert</description>
			</parameter>
			<parameter name="url" type="string" usage="required">
				<description> the url to load</description>
			</parameter>
			<parameter name="opts" type="" usage="required">
				<description> the hash of options for this request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_scriptNode" scope="instance" visibility="private">
			<description>Generates a script node</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url for the script file</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the node in</description>
			</parameter>
			<parameter name="attributes" type="" usage="required">
				<description> optional attributes collection to apply to the new node</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="_node" scope="instance" visibility="private">
			<description>Generates an HTML element, this is not appended to a document</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of element</description>
			</parameter>
			<parameter name="attr" type="string" usage="required">
				<description> the attributes</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the element in</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="abort" scope="static">
			<description>Abort a transaction</description>
			<parameters>
			<parameter name="o" type="string|object" usage="required">
				<description> Either the tId or the object returned from script() or css()</description>
			</parameter>
			</parameters>
		</method>
		<method name="_next" scope="instance" visibility="private">
			<description>Loads the next item for a given request</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			<parameter name="loaded" type="string" usage="required">
				<description> the url that was just loaded, if any</description>
			</parameter>
			</parameters>
		</method>
		<method name="_timeout" scope="instance" visibility="private">
			<description>Timeout detected</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_track" scope="instance" visibility="private">
			<description>Detects when a node has been loaded. In the case of script nodes, this does not guarantee that contained script is ready to use.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of node to track</description>
			</parameter>
			<parameter name="n" type="HTMLElement" usage="required">
				<description> the node to track</description>
			</parameter>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			<parameter name="url" type="string" usage="required">
				<description> the url that is being loaded</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> the targeted window</description>
			</parameter>
			<parameter name="qlength" type="" usage="required">
				<description> the number of remaining items in the queue, including this one</description>
			</parameter>
			<parameter name="trackfn" type="Function" usage="required">
				<description> function to execute when finished the default is _next</description>
			</parameter>
			</parameters>
		</method>
		<method name="css" scope="static">
			<description>Fetches and inserts one or more css link nodes into the head of the current document or the document in a specified window.</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url or urls to the css file(s)</description>
			</parameter>
			<parameter name="opts" type="" usage="required">
				<description> Options: &lt;dl&gt; &lt;dt&gt;onSuccess&lt;/dt&gt; &lt;dd&gt; callback to execute when the css file(s) are finished loading The callback receives an object back with the following data: &lt;dl&gt;win&lt;/dl&gt; &lt;dd&gt;the window the link nodes(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;context&lt;/dt&gt; &lt;dd&gt;the execution context for the callbacks&lt;/dd&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt; data that is supplied to the callbacks when the nodes(s) are loaded. &lt;/dd&gt; &lt;dt&gt;insertBefore&lt;/dt&gt; &lt;dd&gt;node or node id that will become the new node's nextSibling&lt;/dd&gt; &lt;dt&gt;charset&lt;/dt&gt; &lt;dd&gt;Node charset, default utf-8 (deprecated, use the attributes config)&lt;/dd&gt; &lt;dt&gt;attributes&lt;/dt&gt; &lt;dd&gt;An object literal containing additional attributes to add to the link tags&lt;/dd&gt; &lt;/dl&gt; &lt;pre&gt; Y.Get.css(&quot;http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css&quot;); &lt;/pre&gt; &lt;pre&gt; &amp;nbsp;&amp;nbsp;Y.Get.css( &amp;nbsp;&amp;nbsp;[&quot;http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css&quot;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;http://yui.yahooapis.com/2.3.1/build/logger/assets/skins/sam/logger.css&quot;], &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insertBefore: 'custom-styles' // nodes will be inserted before the specified node &amp;nbsp;&amp;nbsp;&amp;#125;); &lt;/pre&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="tId: string" />
			</return-types>
			<return-description>an object containing info about the transaction</return-description>
		</method>
		</methods>
	</class>
	<class type="WidgetPositionExt">
		<description>Widget extension, which can be used to add extended XY positioning support to the base Widget class,
through the &lt;a href=&quot;Base.html#method_build&quot;&gt;Base.build&lt;/a&gt; method. This extension requires that 
the WidgetPosition extension be added to the Widget (before WidgetPositionExt, if part of the same 
extension list passed to Base.build).</description>
		<properties>
		<property name="WidgetPositionExt.CC" type="String" scope="static">
			<description>Constant used to specify the center of widget/node/viewport for alignment</description>
		</property>
		<property name="WidgetPositionExt.BC" type="String" scope="static">
			<description>Constant used to specify the bottom edge, center point for alignment</description>
		</property>
		<property name="WidgetPositionExt.TC" type="String" scope="static">
			<description>Constant used to specify the top edge-center point for alignment</description>
		</property>
		<property name="WidgetPositionExt.TL" type="String" scope="static">
			<description>Constant used to specify the top-left corner for alignment</description>
		</property>
		<property name="WidgetPositionExt.BL" type="String" scope="static">
			<description>Constant used to specify the bottom-left corner for alignment</description>
		</property>
		<property name="WidgetPositionExt.LC" type="String" scope="static">
			<description>Constant used to specify the left edge, center point for alignment</description>
		</property>
		<property name="WidgetPositionExt.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration introduced by WidgetPositionExt.</description>
		</property>
		<property name="WidgetPositionExt.BR" type="String" scope="static">
			<description>Constant used to specify the bottom-right corner for alignment</description>
		</property>
		<property name="WidgetPositionExt.RC" type="String" scope="static">
			<description>Constant used to specify the right edge, center point for alignment</description>
		</property>
		<property name="WidgetPositionExt.TR" type="String" scope="static">
			<description>Constant used to specify the top-right corner for alignment</description>
		</property>
		</properties>
		<methods>
		<method name="_doAlign" scope="instance" visibility="private">
			<description>Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.</description>
			<parameters>
			<parameter name="widgetPoint" type="String" usage="required">
				<description> Supported point constant (e.g. WidgetPositionExt.TL)</description>
			</parameter>
			<parameter name="x" type="Number" usage="required">
				<description> X page co-ordinate to align to</description>
			</parameter>
			<parameter name="y" type="Number" usage="required">
				<description> Y page co-ordinate to align to</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncUIPosExtras" scope="instance">
			<description>Synchronizes the UI to match the Widgets extended positioning state. This method in invoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.</description>
		</method>
		<method name="centered" scope="instance">
			<description>Centers the container in the viewport, or if a node is passed in, the node.</description>
			<parameters>
			<parameter name="node" type="Node | String" usage="optional">
				<description> Optional. A node reference or selector string defining the node inside which the Widget is to be centered. If not passed in, the Widget will be centered in the viewport.</description>
			</parameter>
			</parameters>
		</method>
		<method name="align" scope="instance">
			<description>Aligns the Widget to the provided node (or viewport) using the provided points. The method can be invoked directly, however it will result in the align attribute being out of sync with current position of the of Widget.</description>
			<parameters>
			<parameter name="node" type="Node | String | null" usage="required">
				<description> A reference (or selector string) for the Node which with the Widget is to be aligned. If null is passed in, the Widget will be aligned with the viewport.</description>
			</parameter>
			<parameter name="points" type="Array[2]" usage="required">
				<description> A two element array, specifying the points on the Widget and node/viewport which need to be aligned. The first entry is the point on the Widget, and the second entry is the point on the node/viewport which need to align. Valid point references are defined as static constants on the WidgetPositionExt class. e.g. [WidgetPositionExt.TL, WidgetPositionExt.TR] will align the top-left corner of the Widget with the top-right corner of the node/viewport.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setAlignCenter" scope="instance">
			<description>Default setter for center attribute changes. Sets up the appropriate value, and passes it through the to the align attribute.</description>
			<parameters>
			<parameter name="The" type="boolean | node" usage="required">
				<description> attribute value being set.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The attribute value being set.</return-description>
		</method>
		<method name="_bindUIStack" scope="instance">
			<description>Binds event listeners responsible for updating the UI state in response to Widget extended positioning related state changes. &lt;p&gt; This method is invoked after bindUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_uiSetAlign" scope="instance">
			<description>Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)</description>
			<parameters>
			<parameter name="The" type="Node | null" usage="required">
				<description> node to align to, or null to indicate the viewport</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterAlignChange" scope="instance">
			<description>Default attribute change listener for the align attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="JSON">
		<description>&lt;p&gt;The JSON module adds support for serializing JavaScript objects into
JSON strings and parsing JavaScript objects from strings in JSON format.&lt;/p&gt;
&lt;p&gt;The JSON namespace is added to your YUI instance including static methods
Y.JSON.parse(..) and Y.JSON.stringify(..).&lt;/p&gt;
&lt;p&gt;The functionality and method signatures follow the ECMAScript 5
specification.  In browsers with native JSON support, the native
implementation is used.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;json&lt;/code&gt; module is a rollup of &lt;code&gt;json-parse&lt;/code&gt; and
&lt;code&gt;json-stringify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As their names suggest, &lt;code&gt;json-parse&lt;/code&gt; adds support for parsing
JSON data (Y.JSON.parse) and &lt;code&gt;json-stringify&lt;/code&gt; for serializing
JavaScript data into JSON strings (Y.JSON.stringify).  You may choose to
include either of the submodules individually if you don't need the
complementary functionality, or include the rollup for both.&lt;/p&gt;</description>
		<properties>
		<property name="_BRACKETS" type="{RegExp}" scope="instance" visibility="private">
			<description>Third step in the safety evaluation. Regex used to remove all open square brackets following a colon, comma, or at the beginning of the string.</description>
		</property>
		<property name="_UNICODE_EXCEPTIONS" type="{RegExp}" scope="instance" visibility="private">
			<description>Replace certain Unicode characters that JavaScript may handle incorrectly during eval--either by deleting them or treating them as line endings--with escape sequences. IMPORTANT NOTE: This regex will be used to modify the input if a match is found.</description>
		</property>
		<property name="useNativeParse" type="Boolean" scope="static">
			<description>Leverage native JSON parse if the browser has a native implementation. In general, this is a good idea. See the Known Issues section in the JSON user guide for caveats. The default value is true for browsers with native JSON support.</description>
		</property>
		<property name="JSON.useNativeStringify" type="Boolean" scope="static">
			<description>Leverage native JSON stringify if the browser has a native implementation. In general, this is a good idea. See the Known Issues section in the JSON user guide for caveats. The default value is true for browsers with native JSON support.</description>
		</property>
		<property name="_UNSAFE" type="{RegExp}" scope="instance" visibility="private">
			<description>Final step in the safety evaluation. Regex used to test the string left after all previous replacements for invalid characters.</description>
		</property>
		<property name="_ESCAPES" type="{RegExp}" scope="instance" visibility="private">
			<description>First step in the safety evaluation. Regex used to replace all escape sequences (i.e. &quot;\\&quot;, etc) with '@' characters (a non-JSON character).</description>
		</property>
		<property name="_VALUES" type="{RegExp}" scope="instance" visibility="private">
			<description>Second step in the safety evaluation. Regex used to replace all simple values with ']' characters.</description>
		</property>
		<property name="Native" type="{Object}" scope="instance" visibility="private">
			<description>Alias to native browser implementation of the JSON object if available.</description>
		</property>
		</properties>
		<methods>
		<method name="parse" scope="static">
			<description>Parse a JSON string, returning the native JavaScript representation.</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> JSON string data</description>
			</parameter>
			<parameter name="reviver" type="function" usage="optional">
				<description> (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>the native JavaScript representation of the JSON string</return-description>
		</method>
		<method name="stringify" scope="static">
			<description>&lt;p&gt;Converts an arbitrary value to a JSON string representation.&lt;/p&gt; &lt;p&gt;Objects with cyclical references will trigger an exception.&lt;/p&gt; &lt;p&gt;If a whitelist is provided, only matching object keys will be included. Alternately, a replacer function may be passed as the second parameter. This function is executed on every value in the input, and its return value will be used in place of the original value. This is useful to serialize specialized objects or class instances.&lt;/p&gt; &lt;p&gt;If a positive integer or non-empty string is passed as the third parameter, the output will be formatted with carriage returns and indentation for readability. If a String is passed (such as &quot;\t&quot;) it will be used once for each indentation level. If a number is passed, that number of spaces will be used.&lt;/p&gt;</description>
			<parameters>
			<parameter name="o" type="MIXED" usage="required">
				<description> any arbitrary value to convert to JSON string</description>
			</parameter>
			<parameter name="w" type="Array|Function" usage="optional">
				<description> (optional) whitelist of acceptable object keys to include, or a replacer function to modify the raw value before serialization</description>
			</parameter>
			<parameter name="ind" type="Number|String" usage="optional">
				<description> (optional) indentation character or depth of spaces to format the output.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>JSON string representation of the input</return-description>
		</method>
		<method name="escapeException" scope="instance" visibility="private">
			<description>Replaces specific unicode characters with their appropriate \unnnn format. Some browsers ignore certain characters during eval.</description>
			<parameters>
			<parameter name="c" type="String" usage="required">
				<description> Unicode character</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>the \unnnn escapement of the character</return-description>
		</method>
		<method name="dateToString" scope="static">
			<description>Serializes a Date instance as a UTC date string. Used internally by stringify. Override this method if you need Dates serialized in a different format.</description>
			<parameters>
			<parameter name="d" type="Date" usage="required">
				<description> The Date to serialize</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ</return-description>
		</method>
		<method name="_revive" scope="instance" visibility="private">
			<description>Traverses nested objects, applying a reviver function to each (key,value) from the scope if the key:value's containing object. The value returned from the function will replace the original value in the key:value pair. If the value returned is undefined, the key will be omitted from the returned object.</description>
			<parameters>
			<parameter name="data" type="MIXED" usage="required">
				<description> Any JavaScript data</description>
			</parameter>
			<parameter name="reviver" type="Function" usage="required">
				<description> filter or mutation function</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>The results of the filtered data</return-description>
		</method>
		</methods>
	</class>
	<class type="Test.Manager">
		<description>Runs pages containing test suite definitions.</description>
		<properties>
		<property name="_pages" type="String[]" scope="static" visibility="private">
			<description>Array of pages to load.</description>
		</property>
		<property name="TEST_MANAGER_COMPLETE_EVENT" type="string" scope="static">
			<description>Constant for the testmanagercomplete custom event</description>
		</property>
		<property name="_timeoutId" type="int" scope="static" visibility="private">
			<description>The timeout ID for the next iteration through the tests.</description>
		</property>
		<property name="_logger" type="YAHOO.tool.TestLogger" scope="static" visibility="private">
			<description>The logger used to output results from the various tests.</description>
		</property>
		<property name="TEST_PAGE_BEGIN_EVENT" type="string" scope="static">
			<description>Constant for the testpagebegin custom event</description>
		</property>
		<property name="TEST_PAGE_COMPLETE_EVENT" type="string" scope="static">
			<description>Constant for the testpagecomplete custom event</description>
		</property>
		<property name="_curPage" type="String" scope="static" visibility="private">
			<description>The URL of the page currently being executed.</description>
		</property>
		<property name="_results" type="Object" scope="static" visibility="private">
			<description>Aggregated results</description>
		</property>
		<property name="TEST_MANAGER_BEGIN_EVENT" type="string" scope="static">
			<description>Constant for the testmanagerbegin custom event</description>
		</property>
		<property name="_frame" type="Window" scope="static" visibility="private">
			<description>The frame used to load and run tests.</description>
		</property>
		</properties>
		<methods>
		<method name="load" scope="static">
			<description>Signals that a test page has been loaded. This should be called from within the test page itself to notify the TestManager that it is ready.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_run" scope="static" visibility="private">
			<description>Loads the next test page into the iframe.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="stop" scope="static">
			<description>Stops the execution of tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setPages" scope="static">
			<description>Sets the pages to be loaded.</description>
			<parameters>
			<parameter name="pages" type="String[]" usage="required">
				<description> An array of URLs to load.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="start" scope="static">
			<description>Begins the process of running the tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_processResults" scope="static" visibility="private">
			<description>Processes the results of a test page run, outputting log messages for failed tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_handleTestRunnerComplete" scope="static" visibility="private">
			<description>Handles TestRunner.COMPLETE_EVENT, storing the results and beginning the loop again.</description>
			<parameters>
			<parameter name="data" type="Object" usage="required">
				<description> Data about the event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="Cookie">
		<description>Cookie utility.</description>
		<methods>
		<method name="setSub" scope="static">
			<description>Sets a sub cookie with a given name to a particular value.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to set.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value to set.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), and secure (true/false).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="_parseCookieHash" scope="static" visibility="private">
			<description>Parses a cookie hash string into an object.</description>
			<parameters>
			<parameter name="text" type="String" usage="required">
				<description> The cookie hash string to parse (format: n1=v1&amp;n2=v2).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing entries for each cookie value.</return-description>
		</method>
		<method name="set" scope="static">
			<description>Sets a cookie with a given name and value.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value to set for the cookie.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), secure (true/false), and raw (true/false). Setting raw to true indicates that the cookie should not be URI encoded before being set.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="setSubs" scope="static">
			<description>Sets a cookie with a given name to contain a hash of name-value pairs.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="value" type="Object" usage="required">
				<description> An object containing name-value pairs.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), and secure (true/false).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="exists" scope="static">
			<description>Determines if the cookie with the given name exists. This is useful for Boolean cookies (those that do not follow the name=value convention).</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the cookie exists, false if not.</return-description>
		</method>
		<method name="get" scope="static">
			<description>Returns the cookie value for the given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			<parameter name="options" type="Function|Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: raw (true/false) and converter (a function). The converter function is run on the value before returning it. The function is not used if the cookie doesn't exist. The function can be passed instead of the options object for backwards compatibility. When raw is set to true, the cookie value is not URI decoded.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Variant" />
			</return-types>
			<return-description>If no converter is specified, returns a string or null if
the cookie doesn't exist. If the converter is specified, returns the value
returned from the converter or null if the cookie doesn't exist.</return-description>
		</method>
		<method name="_parseCookieString" scope="static" visibility="private">
			<description>Parses a cookie string into an object representing all accessible cookies.</description>
			<parameters>
			<parameter name="text" type="String" usage="required">
				<description> The cookie string to parse.</description>
			</parameter>
			<parameter name="shouldDecode" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the cookie values should be decoded or not. Default is true.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing entries for each accessible cookie.</return-description>
		</method>
		<method name="remove" scope="static">
			<description>Removes a cookie from the machine by setting its expiration date to sometime in the past.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to remove.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), and secure (true/false). The expires option will be overwritten by the method.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="removeSub" scope="static">
			<description>Removes a sub cookie with a given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie in which the subcookie exists.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to remove.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), removeIfEmpty (true/false), and secure (true/false). This must be the same settings as the original subcookie.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="_createCookieHashString" scope="static" visibility="private">
			<description>Formats a cookie value for an object containing multiple values.</description>
			<parameters>
			<parameter name="hash" type="Object" usage="required">
				<description> An object of key-value pairs to create a string for.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string suitable for use as a cookie value.</return-description>
		</method>
		<method name="getSubs" scope="static">
			<description>Returns an object containing name-value pairs stored in the cookie with the given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object of name-value pairs if the cookie with the given name
exists, null if it does not.</return-description>
		</method>
		<method name="getSub" scope="static">
			<description>Returns the value of a subcookie.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to retrieve.</description>
			</parameter>
			<parameter name="converter" type="Function" usage="optional">
				<description> (Optional) A function to run on the value before returning it. The function is not used if the cookie doesn't exist.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Variant" />
			</return-types>
			<return-description>If the cookie doesn't exist, null is returned. If the subcookie
doesn't exist, null if also returned. If no converter is specified and the
subcookie exists, a string is returned. If a converter is specified and the
subcookie exists, the value returned from the converter is returned.</return-description>
		</method>
		<method name="_createCookieString" scope="static" visibility="private">
			<description>Creates a cookie string that can be assigned into document.cookie.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie.</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value of the cookie.</description>
			</parameter>
			<parameter name="encodeValue" type="Boolean" usage="required">
				<description> True to encode the value, false to leave as-is.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) Options for the cookie.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The formatted cookie string.</return-description>
		</method>
		</methods>
	</class>
	<class type="DataType.Date">
		<description>DataType.Date provides a set of utility functions to operate against Date objects.</description>
		<methods>
		<method name="parse" scope="instance">
			<description>Converts data to type Date.</description>
			<parameters>
			<parameter name="data" type="String | Number" usage="required">
				<description> Data to convert. Values supported by the Date constructor are supported.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>A Date, or null.</return-description>
		</method>
		<method name="xPad" scope="instance" visibility="private">
			<description>Pad a number with leading spaces, zeroes or something else</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The number to be padded</description>
			</parameter>
			<parameter name="pad" type="String" usage="required">
				<description>  The character to pad the number with</description>
			</parameter>
			<parameter name="r" type="Number" usage="optional">
				<description> (optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits.</description>
			</parameter>
			</parameters>
		</method>
		<method name="format" scope="instance">
			<description>Takes a native JavaScript Date and formats it as a string for display to user.</description>
			<parameters>
			<parameter name="oDate" type="Date" usage="required">
				<description> Date.</description>
			</parameter>
			<parameter name="oConfig" type="Object} (Optional) Object literal of configuration values: &lt;dl&gt; &lt;dt&gt;format {String} (Optional)&lt;|dt&gt; &lt;dd&gt; &lt;p&gt; Any strftime string is supported, such as &quot;%I:%M:%S %p&quot;. strftime has several format specifiers defined by the Open group at &lt;a href=&quot;http:||www.opengroup.org|onlinepubs|007908799|xsh|strftime.html&quot;&gt;http:||www.opengroup.org|onlinepubs|007908799|xsh|strftime.html&lt;|a&gt; PHP added a few of its own, defined at &lt;a href=&quot;http:||www.php.net|strftime&quot;&gt;http:||www.php.net|strftime&lt;|a&gt; &lt;|p&gt; &lt;p&gt; This javascript implementation supports all the PHP specifiers and a few more. The full list is below. &lt;|p&gt; &lt;p&gt; If not specified, it defaults to the ISO8601 standard date format: %Y-%m-%d. This may be overridden by changing Y.config.dateFormat &lt;|p&gt; &lt;dl&gt; &lt;dt&gt;%a&lt;|dt&gt; &lt;dd&gt;abbreviated weekday name according to the current locale&lt;|dd&gt; &lt;dt&gt;%A&lt;|dt&gt; &lt;dd&gt;full weekday name according to the current locale&lt;|dd&gt; &lt;dt&gt;%b&lt;|dt&gt; &lt;dd&gt;abbreviated month name according to the current locale&lt;|dd&gt; &lt;dt&gt;%B&lt;|dt&gt; &lt;dd&gt;full month name according to the current locale&lt;|dd&gt; &lt;dt&gt;%c&lt;|dt&gt; &lt;dd&gt;preferred date and time representation for the current locale&lt;|dd&gt; &lt;dt&gt;%C&lt;|dt&gt; &lt;dd&gt;century number (the year divided by 100 and truncated to an integer, range 00 to 99)&lt;|dd&gt; &lt;dt&gt;%d&lt;|dt&gt; &lt;dd&gt;day of the month as a decimal number (range 01 to 31)&lt;|dd&gt; &lt;dt&gt;%D&lt;|dt&gt; &lt;dd&gt;same as %m|%d|%y&lt;|dd&gt; &lt;dt&gt;%e&lt;|dt&gt; &lt;dd&gt;day of the month as a decimal number, a single digit is preceded by a space (range &quot; 1&quot; to &quot;31&quot;)&lt;|dd&gt; &lt;dt&gt;%F&lt;|dt&gt; &lt;dd&gt;same as %Y-%m-%d (ISO 8601 date format)&lt;|dd&gt; &lt;dt&gt;%g&lt;|dt&gt; &lt;dd&gt;like %G, but without the century&lt;|dd&gt; &lt;dt&gt;%G&lt;|dt&gt; &lt;dd&gt;The 4-digit year corresponding to the ISO week number&lt;|dd&gt; &lt;dt&gt;%h&lt;|dt&gt; &lt;dd&gt;same as %b&lt;|dd&gt; &lt;dt&gt;%H&lt;|dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 00 to 23)&lt;|dd&gt; &lt;dt&gt;%I&lt;|dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 01 to 12)&lt;|dd&gt; &lt;dt&gt;%j&lt;|dt&gt; &lt;dd&gt;day of the year as a decimal number (range 001 to 366)&lt;|dd&gt; &lt;dt&gt;%k&lt;|dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)&lt;|dd&gt; &lt;dt&gt;%l&lt;|dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) &lt;|dd&gt; &lt;dt&gt;%m&lt;|dt&gt; &lt;dd&gt;month as a decimal number (range 01 to 12)&lt;|dd&gt; &lt;dt&gt;%M&lt;|dt&gt; &lt;dd&gt;minute as a decimal number&lt;|dd&gt; &lt;dt&gt;%n&lt;|dt&gt; &lt;dd&gt;newline character&lt;|dd&gt; &lt;dt&gt;%p&lt;|dt&gt; &lt;dd&gt;either &quot;AM&quot;|&quot;PM&quot; according to the given time value,|the corresponding strings for the current locale&lt;|dd&gt; &lt;dt&gt;%P&lt;|dt&gt; &lt;dd&gt;like %p, but lower case&lt;|dd&gt; &lt;dt&gt;%r&lt;|dt&gt; &lt;dd&gt;time in a.m. and p.m. notation equal to %I:%M:%S %p&lt;|dd&gt; &lt;dt&gt;%R&lt;|dt&gt; &lt;dd&gt;time in 24 hour notation equal to %H:%M&lt;|dd&gt; &lt;dt&gt;%s&lt;|dt&gt; &lt;dd&gt;number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC&lt;|dd&gt; &lt;dt&gt;%S&lt;|dt&gt; &lt;dd&gt;second as a decimal number&lt;|dd&gt; &lt;dt&gt;%t&lt;|dt&gt; &lt;dd&gt;tab character&lt;|dd&gt; &lt;dt&gt;%T&lt;|dt&gt; &lt;dd&gt;current time, equal to %H:%M:%S&lt;|dd&gt; &lt;dt&gt;%u&lt;|dt&gt; &lt;dd&gt;weekday as a decimal number [1,7], with 1 representing Monday&lt;|dd&gt; &lt;dt&gt;%U&lt;|dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the first Sunday as the first day of the first week&lt;|dd&gt; &lt;dt&gt;%V&lt;|dt&gt; &lt;dd&gt;The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week.&lt;|dd&gt; &lt;dt&gt;%w&lt;|dt&gt; &lt;dd&gt;day of the week as a decimal, Sunday being 0&lt;|dd&gt; &lt;dt&gt;%W&lt;|dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the first Monday as the first day of the first week&lt;|dd&gt; &lt;dt&gt;%x&lt;|dt&gt; &lt;dd&gt;preferred date representation for the current locale without the time&lt;|dd&gt; &lt;dt&gt;%X&lt;|dt&gt; &lt;dd&gt;preferred time representation for the current locale without the date&lt;|dd&gt; &lt;dt&gt;%y&lt;|dt&gt; &lt;dd&gt;year as a decimal number without a century (range 00 to 99)&lt;|dd&gt; &lt;dt&gt;%Y&lt;|dt&gt; &lt;dd&gt;year as a decimal number including the century&lt;|dd&gt; &lt;dt&gt;%z&lt;|dt&gt; &lt;dd&gt;numerical time zone representation&lt;|dd&gt; &lt;dt&gt;%Z&lt;|dt&gt; &lt;dd&gt;time zone name|abbreviation&lt;|dd&gt; &lt;dt&gt;%%&lt;|dt&gt; &lt;dd&gt;a literal &quot;%&quot; character&lt;|dd&gt; &lt;|dl&gt; &lt;|dd&gt; &lt;dt&gt;locale {String" usage="optional">
				<description> (Optional)&lt;/dt&gt; &lt;dd&gt; The locale to use when displaying days of week, months of the year, and other locale specific strings. If not specified, this defaults to &quot;en&quot; (though this may be overridden by changing Y.config.locale). The following locales are built in: &lt;dl&gt; &lt;dt&gt;en&lt;/dt&gt; &lt;dd&gt;English&lt;/dd&gt; &lt;dt&gt;en-US&lt;/dt&gt; &lt;dd&gt;US English&lt;/dd&gt; &lt;dt&gt;en-GB&lt;/dt&gt; &lt;dd&gt;British English&lt;/dd&gt; &lt;dt&gt;en-AU&lt;/dt&gt; &lt;dd&gt;Australian English (identical to British English)&lt;/dd&gt; &lt;/dl&gt; More locales may be added by subclassing of Y.DataType.Date.Locale[&quot;en&quot;]. See Y.DataType.Date.Locale for more information. &lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Formatted date for display.</return-description>
		</method>
		</methods>
	</class>
	<class type="DataSchema.Array" superclass="DataSchema.Base">
		<description>Array subclass for the DataSchema Utility.</description>
		<methods>
		<method name="apply" scope="static">
			<description>Applies a given schema to given Array data.</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to apply.</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description> Array data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		<method name="_parseResults" scope="static">
			<description>Schema-parsed list of results from full data</description>
			<parameters>
			<parameter name="fields" type="Array" usage="required">
				<description> Schema to parse against.</description>
			</parameter>
			<parameter name="array_in" type="Array" usage="required">
				<description> Array to parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed data object.</return-description>
		</method>
		</methods>
	</class>
	<class type="Lang">
		<description>Provides the language utilites and extensions used by the library</description>
		<methods>
		<method name="isArray" scope="static">
			<description>Determines whether or not the provided item is an array. Returns false for array-like collections such as the function arguments collection or HTMLElement collection will return false. You can use @see Array.test if you want to</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is an array</return-description>
		</method>
		<method name="trim" scope="static">
			<description>Returns a string without any leading or trailing whitespace. If the input is not a string, the input will be returned untouched.</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> the string to trim</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the trimmed string</return-description>
		</method>
		<method name="isDate" scope="static">
			<description>Determines whether or not the supplied item is a date instance</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is a date</return-description>
		</method>
		<method name="isString" scope="static">
			<description>Determines whether or not the provided item is a string</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is a string</return-description>
		</method>
		<method name="isBoolean" scope="static">
			<description>Determines whether or not the provided item is a boolean</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is a boolean</return-description>
		</method>
		<method name="isNull" scope="static">
			<description>Determines whether or not the provided item is null</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is null</return-description>
		</method>
		<method name="isValue" scope="static">
			<description>A convenience method for detecting a legitimate non-null value. Returns false for null/undefined/NaN, true for other values, including 0/false/''</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The item to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if it is not null/undefined/NaN || false</return-description>
		</method>
		<method name="isFunction" scope="static">
			<description>Determines whether or not the provided item is a function Note: Internet Explorer thinks certain functions are objects: var obj = document.createElement(&quot;object&quot;); Y.Lang.isFunction(obj.getAttribute) // reports false in IE var input = document.createElement(&quot;input&quot;); // append to body Y.Lang.isFunction(input.focus) // reports false in IE You will have to implement additional tests if these functions matter to you.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is a function</return-description>
		</method>
		<method name="isNumber" scope="static">
			<description>Determines whether or not the provided item is a legal number</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is a number</return-description>
		</method>
		<method name="type" scope="instance">
			<description>Returns a string representing the type of the item passed in.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the item to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the detected type</return-description>
		</method>
		<method name="isObject" scope="static">
			<description>Determines whether or not the provided item is of type object or function</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			<parameter name="failfn" type="boolean" usage="required">
				<description> fail if the input is a function</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is an object</return-description>
		</method>
		<method name="isUndefined" scope="static">
			<description>Determines whether or not the provided item is undefined</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> The object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if o is undefined</return-description>
		</method>
		</methods>
	</class>
	<class type="DD.Drag" superclass="Base">
		<description>This class provides the ability to drag a Node.</description>
		<constructors>
		<constructor scope="instance">
			<description>This class provides the ability to drag a Node.</description>
			<return-types>
				<return-type type="DD.Drag" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_groups" type="{Array}" scope="instance" visibility="private">
			<description>Storage Array for the groups this drag belongs to.</description>
		</property>
		<property name="_handles" type="{Object}" scope="instance" visibility="private">
			<description>A private hash of the valid drag handles</description>
		</property>
		<property name="_invalids" type="{Object}" scope="instance" visibility="private">
			<description>A private hash of the invalid selector strings</description>
		</property>
		<property name="_clickTimeout" type="{Boolean}" scope="instance" visibility="private">
			<description>Holder for the setTimeout call</description>
		</property>
		<property name="_ev_md" type="{Event.Facade}" scope="instance" visibility="private">
			<description>A private reference to the mousedown DOM event</description>
		</property>
		<property name="target" type="{Object}" scope="instance">
			<description>This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..</description>
		</property>
		<property name="mouseXY" type="{Array}" scope="instance">
			<description>The XY coords of the mousemove</description>
		</property>
		<property name="_startTime" type="Date" scope="instance" visibility="private">
			<description>The getTime of the mousedown event. Not used, just here in case someone wants/needs to use it.</description>
		</property>
		<property name="_endTime" type="Date" scope="instance" visibility="private">
			<description>The getTime of the mouseup event. Not used, just here in case someone wants/needs to use it.</description>
		</property>
		<property name="region" type="Object" scope="instance">
			<description>A region object associated with this drag, used for checking regions while dragging.</description>
		</property>
		<property name="_dragThreshMet" type="{Boolean}" scope="instance" visibility="private">
			<description>Private flag to see if the drag threshhold was met</description>
		</property>
		<property name="actXY" type="{Array}" scope="instance">
			<description>The xy that the node will be set to. Changing this will alter the position as it's dragged.</description>
		</property>
		<property name="startXY" type="{Array}" scope="instance">
			<description>The initial mouse position</description>
		</property>
		<property name="nodeXY" type="{Array}" scope="instance">
			<description>The initial element position</description>
		</property>
		<property name="deltaXY" type="{Array}" scope="instance">
			<description>The offset of the mouse position to the element's position</description>
		</property>
		<property name="_invalidsDefault" type="{Object}" scope="instance" visibility="private">
			<description>A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true, 'select': true}</description>
		</property>
		<property name="lastXY" type="{Array}" scope="instance">
			<description>The position of the element as it's moving (for offset calculations)</description>
		</property>
		<property name="_fromTimeout" type="{Boolean}" scope="instance" visibility="private">
			<description>Flag to determine if the drag operation came from a timeout</description>
		</property>
		<property name="_ieSelectBack" type="undefined" scope="instance" visibility="private">
			<description>We will hold a copy of the current &quot;onselectstart&quot; method on this property, and reset it after we are done using it.</description>
		</property>
		<property name="realXY" type="{Array}" scope="instance">
			<description>The real xy position of the node.</description>
		</property>
		</properties>
		<methods>
		<method name="addToGroup" scope="instance">
			<description>Add this Drag instance to a group, this should be used for on-the-fly group additions.</description>
			<parameters>
			<parameter name="g" type="String" usage="required">
				<description> The group to add this Drag Instance to.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_setStartPosition" scope="instance" visibility="private">
			<description>Sets the current position of the Element and calculates the offset</description>
			<parameters>
			<parameter name="xy" type="Array" usage="required">
				<description> The XY coords to set the position to.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_fixDragStart" scope="instance" visibility="private">
			<description>The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles.</description>
		</method>
		<method name="_defDragFn" scope="instance" visibility="private">
			<description>Default function for drag:drag. Fired from _moveNode.</description>
			<parameters>
			<parameter name="ev" type="Event.Facade" usage="required">
				<description> The drag:drag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="stopDrag" scope="instance">
			<description>Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.</description>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_move" scope="instance" visibility="private">
			<description>Fired from DragDropMgr (DDM) on mousemove.</description>
			<parameters>
			<parameter name="ev" type="Event.Facade" usage="required">
				<description> The mousemove DOM event</description>
			</parameter>
			</parameters>
		</method>
		<method name="validClick" scope="instance">
			<description>Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.</description>
			<parameters>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="removeInvalid" scope="instance">
			<description>Remove an invalid handle added by addInvalid</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The invalid handle to remove from the internal list.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="addHandle" scope="instance">
			<description>Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The selector to test for a valid handle. Must be a child of the element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init handler</description>
		</method>
		<method name="removeHandle" scope="instance">
			<description>Remove a Selector added by addHandle</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The selector for the handle to be removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_handleMouseDownEvent" scope="instance" visibility="private">
			<description>Handler for the mousedown DOM event</description>
			<parameters>
			</parameters>
		</method>
		<method name="end" scope="instance">
			<description>Ends the drag operation</description>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_moveNode" scope="instance" visibility="private">
			<description>This method performs the actual element move.</description>
		</method>
		<method name="destructor" scope="instance" visibility="private">
			<description>Lifecycle destructor, unreg the drag from the DDM and remove listeners</description>
		</method>
		<method name="start" scope="instance">
			<description>Starts the drag operation</description>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_ieSelectFix" scope="instance" visibility="private">
			<description>The function we use as the onselectstart handler when we start a drag in Internet Explorer</description>
		</method>
		<method name="_defAlignFn" scope="instance" visibility="private">
			<description>Calculates the offsets and set's the XY that the element will move to.</description>
			<parameters>
			<parameter name="e" type="Event.Facade" usage="required">
				<description> The drag:align event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createEvents" scope="instance" visibility="private">
			<description>This method creates all the events for this Event Target and publishes them so we get Event Bubbling.</description>
		</method>
		<method name="_timeoutCheck" scope="instance" visibility="private">
			<description>The method passed to setTimeout to determine if the clickTimeThreshold was met.</description>
		</method>
		<method name="removeFromGroup" scope="instance">
			<description>Remove this Drag instance from a group, this should be used for on-the-fly group removals.</description>
			<parameters>
			<parameter name="g" type="String" usage="required">
				<description> The group to remove this Drag Instance from.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_fixIEMouseUp" scope="instance" visibility="private">
			<description>This method copies the _ieSelectFix property back to the onselectstart listner on the document.</description>
		</method>
		<method name="_alignNode" scope="instance" visibility="private">
			<description>This method performs the alignment before the element move.</description>
			<parameters>
			<parameter name="eXY" type="Array" usage="required">
				<description> The XY to move the element to, usually comes from the mousemove DOM event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_prevEndFn" scope="instance" visibility="private">
			<description>Handler for preventing the drag:end event. It will reset the node back to it's start position</description>
		</method>
		<method name="_prep" scope="instance" visibility="private">
			<description>Attach event listners and add classname</description>
		</method>
		<method name="addInvalid" scope="instance">
			<description>Add a selector string to test the handle against. If the test passes the drag operation will not continue.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The selector to test against to determine if this is an invalid drag handle.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_defMouseDownFn" scope="instance" visibility="private">
			<description>Handler for the mousedown DOM event</description>
			<parameters>
			</parameters>
		</method>
		<method name="_handleMouseUp" scope="instance" visibility="private">
			<description>Handler for the mouseup DOM event</description>
			<parameters>
			</parameters>
		</method>
		<method name="_align" scope="instance" visibility="private">
			<description>Calculates the offsets and set's the XY that the element will move to.</description>
			<parameters>
			<parameter name="xy" type="Array" usage="required">
				<description> The xy coords to align with.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleTarget" scope="instance" visibility="private">
			<description>Attribute handler for the target config attribute.</description>
			<parameters>
			</parameters>
			<return-types>
			<return-type type="Boolean|Object" />
			</return-types>
		</method>
		<method name="_unprep" scope="instance" visibility="private">
			<description>Detach event listeners and remove classname</description>
		</method>
		<method name="_fixIEMouseDown" scope="instance" visibility="private">
			<description>This method copies the onselectstart listner on the document to the _ieSelectFix property</description>
		</method>
		</methods>
	</class>
	<class type="DataSchema.JSON" superclass="DataSchema.Base">
		<description>JSON subclass for the DataSchema Utility.</description>
		<methods>
		<method name="DataSchema.JSON.getPath" scope="static">
			<description>Utility function converts JSON locator strings into walkable paths</description>
			<parameters>
			<parameter name="locator" type="String" usage="required">
				<description> JSON value locator.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String[]" />
			</return-types>
			<return-description>Walkable path to data value.</return-description>
		</method>
		<method name="DataSchema.JSON.getLocationValue" scope="static">
			<description>Utility function to walk a path and return the value located there.</description>
			<parameters>
			<parameter name="path" type="String[]" usage="required">
				<description> Locator path.</description>
			</parameter>
			<parameter name="data" type="String" usage="required">
				<description> Data to traverse.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Data value at location.</return-description>
		</method>
		<method name="_parseMeta" scope="static">
			<description>Parses results data according to schema</description>
			<parameters>
			<parameter name="metaFields" type="Object" usage="required">
				<description> Metafields definitions.</description>
			</parameter>
			<parameter name="json_in" type="Object" usage="required">
				<description> JSON to parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed meta data.</return-description>
		</method>
		<method name="_getFieldValues" scope="static">
			<description>Get field data values out of list of full results</description>
			<parameters>
			<parameter name="fields" type="Array" usage="required">
				<description> Fields to find.</description>
			</parameter>
			<parameter name="array_in" type="Array" usage="required">
				<description> Results to parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed data object.</return-description>
		</method>
		<method name="_parseResults" scope="static">
			<description>Schema-parsed list of results from full data</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to parse against.</description>
			</parameter>
			<parameter name="json_in" type="Object" usage="required">
				<description> JSON to parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed data object.</return-description>
		</method>
		<method name="apply" scope="static">
			<description>Applies a given schema to given JSON data.</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to apply.</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description> JSON data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		</methods>
	</class>
	<class type="AsyncQueue" superclass="EventTarget">
		<description>&lt;p&gt;A specialized queue class that supports scheduling callbacks to execute
sequentially, iteratively, even asynchronously.&lt;/p&gt;
&lt;p&gt;Callbacks can be function refs or objects with the following keys.  Only
the &lt;code&gt;fn&lt;/code&gt; key is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; -- The callback function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; -- The execution context for the callbackFn.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; -- Arguments to pass to callbackFn.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; -- Millisecond delay before executing callbackFn.
(Applies to each iterative execution of callback)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; -- Number of times to repeat the callback.
&lt;li&gt;&lt;code&gt;until&lt;/code&gt; -- Repeat the callback until this function returns
true.  This setting trumps iterations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoContinue&lt;/code&gt; -- Set to false to prevent the AsyncQueue from
executing the next callback in the Queue after
the callback completes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; -- Name that can be used to get, promote, get the
indexOf, or delete this callback.&lt;/li&gt;
&lt;/ul&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;A specialized queue class that supports scheduling callbacks to execute
sequentially, iteratively, even asynchronously.&lt;/p&gt;
&lt;p&gt;Callbacks can be function refs or objects with the following keys.  Only
the &lt;code&gt;fn&lt;/code&gt; key is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; -- The callback function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; -- The execution context for the callbackFn.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; -- Arguments to pass to callbackFn.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; -- Millisecond delay before executing callbackFn.
(Applies to each iterative execution of callback)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; -- Number of times to repeat the callback.
&lt;li&gt;&lt;code&gt;until&lt;/code&gt; -- Repeat the callback until this function returns
true.  This setting trumps iterations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoContinue&lt;/code&gt; -- Set to false to prevent the AsyncQueue from
executing the next callback in the Queue after
the callback completes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; -- Name that can be used to get, promote, get the
indexOf, or delete this callback.&lt;/li&gt;
&lt;/ul&gt;</description>
			<return-types>
				<return-type type="AsyncQueue" />
			</return-types>
			<parameters>
			<parameter name="callback*" type="Function|Object" usage="required">
				<description>  0..n callbacks to seed the queue</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="AsyncQueue.defaults" type="{Object}" scope="static">
			<description>&lt;p&gt;Static default values used to populate callback configuration properties. Preconfigured defaults include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;autoContinue&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;iterations&lt;/code&gt;: 1&lt;/li&gt; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: 10 (10ms between callbacks)&lt;/li&gt; &lt;li&gt;&lt;code&gt;until&lt;/code&gt;: (function to run until iterations &amp;lt;= 0)&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="_running" type="{Boolean|Object} true for synchronous callback execution, the return handle from Y.later for async callbacks. Otherwise false." scope="instance">
			<description>Used to indicate the queue is currently executing a callback.</description>
		</property>
		<property name="defaults" type="{Object}" scope="instance">
			<description>Callback defaults for this instance. Static defaults that are not overridden are also included.</description>
		</property>
		</properties>
		<methods>
		<method name="_initEvents" scope="instance">
			<description>Initializes the instance events.</description>
		</method>
		<method name="_defRemoveFn" scope="instance">
			<description>&lt;p&gt;Default functionality for the &amp;quot;remove&amp;quot; event. Removes the callback from the queue.&lt;/p&gt; &lt;p&gt;The event object will contain a property &amp;quot;callback&amp;quot;, which holds the id of a callback or the callback object itself.&lt;/p&gt;</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="pause" scope="instance">
			<description>Pause the execution of the queue after the execution of the current callback completes. If called from code outside of a queued callback, clears the timeout for the pending callback. Paused queue can be restarted with q.run()</description>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="run" scope="instance">
			<description>Sets the queue in motion. All queued callbacks will be executed in order unless pause() or stop() is called or if one of the callbacks is configured with autoContinue: false.</description>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="_schedule" scope="instance">
			<description>Schedules the execution of asynchronous callbacks.</description>
			<parameters>
			<parameter name="callback" type="Object" usage="required">
				<description> the callback object to execute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>whether the run loop should continue</return-description>
		</method>
		<method name="_defShiftFn" scope="instance">
			<description>Default functionality for the &amp;quot;shift&amp;quot; event. Shifts the callback stored in the event object's &lt;em&gt;callback&lt;/em&gt; property from the queue if it is the first item.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_execute" scope="instance">
			<description>Handles the execution of callbacks. Returns a boolean indicating whether it is appropriate to continue running.</description>
			<parameters>
			<parameter name="callback" type="Object" usage="required">
				<description> the callback object to execute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>whether the run loop should continue</return-description>
		</method>
		<method name="stop" scope="instance">
			<description>Stop and clear the queue after the current execution of the current callback completes.</description>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="_init" scope="instance">
			<description>Initializes the AsyncQueue instance properties and events.</description>
		</method>
		<method name="remove" scope="instance">
			<description>Removes the callback from the queue. If the queue is active, the removal is scheduled to occur after the current callback has completed.</description>
			<parameters>
			<parameter name="callback" type="String|Object" usage="required">
				<description> the callback object or a callback's id</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="next" scope="instance">
			<description>Returns the next callback needing execution. If a callback is configured to repeat via iterations or until, it will be returned until the completion criteria is met. When the queue is empty, null is returned.</description>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>the callback to execute</return-description>
		</method>
		<method name="indexOf" scope="instance">
			<description>Returns the current index of a callback. Pass in either the id or callback function from getCallback.</description>
			<parameters>
			<parameter name="callback" type="String|Function" usage="required">
				<description> the callback or its specified id</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>index of the callback or -1 if not found</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Add any number of callbacks to the end of the queue. Callbacks may be provided as functions or objects.</description>
			<parameters>
			<parameter name="callback*" type="Function|Object" usage="required">
				<description> 0..n callbacks</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="_defExecFn" scope="instance">
			<description>Default functionality for the &amp;quot;execute&amp;quot; event. Executes the callback function</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCallback" scope="instance">
			<description>Retrieve a callback by its id. Useful to modify the configuration while the queue is running.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id assigned to the callback</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>the callback object</return-description>
		</method>
		<method name="_defPromoteFn" scope="instance">
			<description>&lt;p&gt;Default functionality for the &amp;quot;promote&amp;quot; event. Promotes the named callback to the head of the queue.&lt;/p&gt; &lt;p&gt;The event object will contain a property &amp;quot;callback&amp;quot;, which holds the id of a callback or the callback object itself.&lt;/p&gt;</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_prepare" scope="instance">
			<description>Creates a wrapper function to execute the callback using the aggregated configuration generated by combining the static AsyncQueue.defaults, the instance defaults, and the specified callback settings. The wrapper function is decorated with the callback configuration as properties for runtime modification.</description>
			<parameters>
			<parameter name="callback" type="Object|Function" usage="required">
				<description> the raw callback</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>a decorated function wrapper to execute the callback</return-description>
		</method>
		<method name="promote" scope="instance">
			<description>Promotes the named callback to the top of the queue. If a callback is currently executing or looping (via until or iterations), the promotion is scheduled to occur after the current callback has completed.</description>
			<parameters>
			<parameter name="callback" type="String|Object" usage="required">
				<description> the callback object or a callback's id</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="AsyncQueue" />
			</return-types>
			<return-description>the AsyncQueue instance</return-description>
		</method>
		<method name="_defAddFn" scope="instance">
			<description>Default functionality for the &amp;quot;add&amp;quot; event. Adds the callbacks in the event facade to the queue. Callbacks successfully added to the queue are present in the event's &lt;code&gt;added&lt;/code&gt; property in the after phase.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="isRunning" scope="instance">
			<description>Determines if the queue is waiting for a callback to complete execution.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if queue is waiting for a 
from any initiated transactions</return-description>
		</method>
		<method name="size" scope="instance">
			<description>Returns the number of callbacks in the queue.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="Easing">
		<description>The easing module provides methods for customizing
how an animation behaves during each run.</description>
		<methods>
		<method name="easeIn" scope="instance">
			<description>Begins slowly and accelerates towards end. (quadratic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeInStrong" scope="instance">
			<description>Begins slowly and accelerates towards end. (quartic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceBoth" scope="instance">
			<description>Bounces off start and end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backOut" scope="instance">
			<description>Overshoots end, then reverses and comes back to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticBoth" scope="instance">
			<description>Snap both elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticOut" scope="instance">
			<description>Snap out elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceOut" scope="instance">
			<description>Bounces off end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backBoth" scope="instance">
			<description>Backtracks slightly, then reverses direction, overshoots end, then reverses and comes back to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeBoth" scope="instance">
			<description>Begins slowly and decelerates towards end. (quadratic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceIn" scope="instance">
			<description>Bounce off of start.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeOutStrong" scope="instance">
			<description>Begins quickly and decelerates towards end. (quartic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeNone" scope="instance">
			<description>Uniform speed between points.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticIn" scope="instance">
			<description>Snap in elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeBothStrong" scope="instance">
			<description>Begins slowly and decelerates towards end. (quartic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeOut" scope="instance">
			<description>Begins quickly and decelerates towards end. (quadratic)</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backIn" scope="instance">
			<description>Backtracks slightly, then reverses direction and moves to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		</methods>
	</class>
	<class type="Plugin.Drag" superclass="DD.Drag">
		<description>This is a simple Drag plugin that can be attached to a Node via the plug method.</description>
		<constructors>
		<constructor scope="instance">
			<description>This is a simple Drag plugin that can be attached to a Node via the plug method.</description>
			<return-types>
				<return-type type="Plugin.Drag" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="NS" type="{String}" scope="instance">
			<description>The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;</description>
		</property>
		<property name="NAME" type="{String}" scope="instance">
			<description>dd-plugin</description>
		</property>
		</properties>
	</class>
	<class type="History">
		<description>This class represents an instance of the browser history utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>This class represents an instance of the browser history utility.</description>
			<return-types>
				<return-type type="History" />
			</return-types>
		</constructor>
		</constructors>
		<methods>
		<method name="getBookmarkedState" scope="instance">
			<description>Returns the state of a module according to the URL fragment identifier. This method is useful to initialize your modules if your application was bookmarked from a particular state.</description>
			<parameters>
			<parameter name="moduleId" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The bookmarked state of the specified module.</return-description>
		</method>
		<method name="_updateIFrame" scope="instance" visibility="private">
			<description>Update the IFrame with our new state.</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if successful. false otherwise.</return-description>
		</method>
		<method name="_handleFQStateChange" scope="instance" visibility="private">
			<description>Sets the new currentState attribute of all modules depending on the new fully qualified state. Also notifies the modules which current state has changed.</description>
			<parameters>
			<parameter name="fqstate" type="string" usage="required">
				<description> fully qualified state</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCurrentState" scope="instance">
			<description>Returns the current state of the specified module.</description>
			<parameters>
			<parameter name="moduleId" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The current state of the specified module.</return-description>
		</method>
		<method name="navigate" scope="instance">
			<description>Stores a new entry in the browser history by changing the state of a registered module.</description>
			<parameters>
			<parameter name="module" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			<parameter name="state" type="string" usage="required">
				<description> String representing the new state of the specified module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Indicates whether the new state was successfully added to the history.</return-description>
		</method>
		<method name="_initialize" scope="instance" visibility="private">
			<description>Finish up the initialization of the browser utility library.</description>
		</method>
		<method name="register" scope="instance">
			<description>Registers a new module.</description>
			<parameters>
			<parameter name="moduleId" type="string" usage="required">
				<description> Non-empty string uniquely identifying the module you wish to register.</description>
			</parameter>
			<parameter name="initialState" type="string" usage="required">
				<description> The initial state of the specified module corresponding to its earliest history entry.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="History.Module" />
			</return-types>
			<return-description>The newly registered module</return-description>
		</method>
		<method name="_checkIframeLoaded" scope="instance" visibility="private">
			<description>Periodically checks whether our internal IFrame is ready to be used</description>
		</method>
		<method name="initialize" scope="instance">
			<description>Initializes the Browser History Manager. Call this method from a script block located right after the opening body tag.</description>
			<parameters>
			<parameter name="stateField" type="string|HTML Element" usage="required">
				<description> &lt;input type=&quot;hidden&quot;&gt; used to store application states. Must be in the static markup.</description>
			</parameter>
			<parameter name="historyIFrame" type="string|HTML Element" usage="required">
				<description> IFrame used to store the history (only required for IE6/7)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_storeStates" scope="instance" visibility="private">
			<description>Stores the initial state and current state for all registered modules in the (hidden) form field specified during initialization.</description>
		</method>
		<method name="getQueryStringParameter" scope="instance">
			<description>Returns the value of the specified query string parameter. This method is not used internally by the Browser History Manager. However, it is provided here as a helper since many applications using the Browser History Manager will want to read the value of url parameters to initialize themselves.</description>
			<parameters>
			<parameter name="paramName" type="string" usage="required">
				<description> Name of the parameter we want to look up.</description>
			</parameter>
			<parameter name="queryString" type="string" usage="required">
				<description> Optional URL to look at. If not specified, this method uses the URL in the address bar.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The value of the specified parameter, or null.</return-description>
		</method>
		<method name="_getHash" scope="instance" visibility="private">
			<description>Returns the portion of the hash after the '#' symbol.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The hash portion of the document's location</return-description>
		</method>
		<method name="multiNavigate" scope="instance">
			<description>Stores a new entry in the browser history by changing the state of several registered modules in one atomic operation.</description>
			<parameters>
			<parameter name="states" type="object" usage="required">
				<description> Associative array of module-state pairs to set simultaneously.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Indicates whether the new state was successfully added to the history.</return-description>
		</method>
		</methods>
	</class>
	<class type="Plugin.DDNodeScroll" superclass="DD.Scroll">
		<description>Extends the Scroll class to make a parent node scroll while dragging.</description>
		<constructors>
		<constructor scope="instance">
			<description>Extends the Scroll class to make a parent node scroll while dragging.</description>
			<return-types>
				<return-type type="Plugin.DDNodeScroll" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="Attribute">
		<description>&lt;p&gt;
Attribute provides configurable attribute support along with attribute change events. It is designed to be 
augmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state, 
along with attribute change events.
&lt;/p&gt;
&lt;p&gt;For example, attributes added to the host can be configured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As read only.&lt;/li&gt;
&lt;li&gt;As write once.&lt;/li&gt;
&lt;li&gt;With a setter function, which can be used to manipulate
values passed to Attribute's &lt;a href=&quot;#method_set&quot;&gt;set&lt;/a&gt; method, before they are stored.&lt;/li&gt;
&lt;li&gt;With a getter function, which can be used to manipulate stored values,
before they are returned by Attribute's &lt;a href=&quot;#method_get&quot;&gt;get&lt;/a&gt; method.&lt;/li&gt;
&lt;li&gt;With a validator function, to validate values before they are stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&quot;#method_addAttr&quot;&gt;addAttr&lt;/a&gt; method, for the complete set of configuration
options available for attributes&lt;/p&gt;.
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Most implementations will be better off extending the &lt;a href=&quot;Base.html&quot;&gt;Base&lt;/a&gt; class, 
instead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration 
of attributes for derived classes, accounting for values passed into the constructor.&lt;/p&gt;</description>
		<properties>
		<property name="Attribute._ATTR_CFG" type="Array" scope="static">
			<description>The list of properties which can be configured for each attribute (e.g. setter, getter, writeOnce etc.). This property is used internally as a whitelist for faster Y.mix operations.</description>
		</property>
		<property name="Attribute.INVALID_VALUE" type="Object" scope="static">
			<description>&lt;p&gt;The value to return from an attribute setter in order to prevent the set from going through.&lt;/p&gt; &lt;p&gt;You can return this value from your setter if you wish to combine validator and setter functionality into a single setter function, which either returns the massaged value to be stored or Attribute.INVALID_VALUE to prevent invalid values from being stored.&lt;/p&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="_setAttrVal" scope="instance" visibility="private">
			<description>Updates the stored value of the attribute in the privately held State object, if validation and setter passes.</description>
			<parameters>
			<parameter name="attrName" type="String" usage="required">
				<description> The attribute name.</description>
			</parameter>
			<parameter name="subAttrName" type="String" usage="required">
				<description> The sub-attribute name, if setting a sub-attribute property (&quot;x.y.z&quot;).</description>
			</parameter>
			<parameter name="prevVal" type="Any" usage="required">
				<description> The currently stored value of the attribute.</description>
			</parameter>
			<parameter name="newVal" type="Any" usage="required">
				<description> The value which is going to be stored.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="booolean" />
			</return-types>
			<return-description>true if the new attribute value was stored, false if not.</return-description>
		</method>
		<method name="set" scope="instance">
			<description>Sets the value of an attribute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute. If the current value of the attribute is an Object, dot notation can be used to set the value of a property within the object (e.g. &lt;code&gt;set(&quot;x.y.z&quot;, 5)&lt;/code&gt;).</description>
			</parameter>
			<parameter name="value" type="Any" usage="required">
				<description> The value to set the attribute to.</description>
			</parameter>
			<parameter name="opts" type="Object" usage="optional">
				<description> (Optional) Optional event data to be mixed into the event facade passed to subscribers of the attribute's change event. This can be used as a flexible way to identify the source of a call to set, allowing the developer to distinguish between set called internally by the host, vs. set called externally by the application developer.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="getAttrs" scope="instance">
			<description>Gets multiple attribute values.</description>
			<parameters>
			<parameter name="attrs" type="Array | boolean" usage="optional">
				<description> Optional. An array of attribute names. If omitted, all attribute values are returned. If set to true, all attributes modified from their initial values are returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object with attribute name/value pairs.</return-description>
		</method>
		<method name="_fireAttrChange" scope="instance" visibility="private">
			<description>Utility method to help setup the event payload and fire the attribute change event.</description>
			<parameters>
			<parameter name="attrName" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			<parameter name="subAttrName" type="String" usage="required">
				<description> The full path of the property being changed, if this is a sub-attribute value being change. Otherwise null.</description>
			</parameter>
			<parameter name="currVal" type="Any" usage="required">
				<description> The current value of the attribute</description>
			</parameter>
			<parameter name="newVal" type="Any" usage="required">
				<description> The new value of the attribute</description>
			</parameter>
			<parameter name="opts" type="Object" usage="required">
				<description> Any additional event data to mix into the attribute change event's event facade.</description>
			</parameter>
			</parameters>
		</method>
		<method name="modifyAttr" scope="instance">
			<description>Updates the configuration of an attribute which has already been added. &lt;p&gt; The properties which can be modified through this interface are limited to the following subset of attributes, which can be safely modified after a value has already been set on the attribute: readOnly, writeOnce, broadcast and getter. &lt;/p&gt;</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute whose configuration is to be updated.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> An object with configuration property/value pairs, specifying the configuration properties to modify.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_protectAttrs" scope="instance">
			<description>Utility method to protect an attribute configuration hash, by merging the entire object and the individual attr config objects.</description>
			<parameters>
			<parameter name="attrs" type="Object" usage="required">
				<description> A hash of attribute to configuration object pairs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A protected version of the attrs argument.</return-description>
		</method>
		<method name="_setAttr" scope="instance">
			<description>Provides the common implementation for the public set and protected _set methods. See set for argument details.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			<parameter name="value" type="Any" usage="required">
				<description> The value to set the attribute to.</description>
			</parameter>
			<parameter name="opts" type="Object" usage="optional">
				<description> (Optional) Optional event data to be mixed into the event facade passed to subscribers of the attribute's change event.</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> If true, allows the caller to set values for readOnly or writeOnce attributes which have already been set.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="_normAttrVals" scope="instance" visibility="private">
			<description>Utility method to split out simple attribute name/value pairs (&quot;x&quot;) from complex attribute name/value pairs (&quot;x.y.z&quot;), so that complex attributes can be keyed by the top level attribute name.</description>
			<parameters>
			<parameter name="valueHash" type="Object" usage="required">
				<description> An object with attribute name/value pairs</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object literal with 2 properties - &quot;simple&quot; and &quot;complex&quot;,
containing simple and complex attribute values respectively keyed 
by the top level attribute name, or null, if valueHash is falsey.</return-description>
		</method>
		<method name="_defAttrChangeFn" scope="instance" visibility="private">
			<description>Default function for attribute change events.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event object for attribute change events.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addLazyAttr" scope="instance" visibility="private">
			<description>Finishes initializing an attribute which has been lazily added.</description>
			<parameters>
			<parameter name="name" type="Object" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getAttrInitVal" scope="instance" visibility="private">
			<description>Returns the initial value of the given attribute from either the default configuration provided, or the over-ridden value if it exists in the set of initValues provided and the attribute is not read-only.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			<parameter name="cfg" type="Object" usage="required">
				<description> The attribute configuration object</description>
			</parameter>
			<parameter name="initValues" type="Object" usage="required">
				<description> The object with simple and complex attribute name/value pairs returned from _normAttrVals</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The initial value of the attribute.</return-description>
		</method>
		<method name="_getAttr" scope="instance">
			<description>Provides the common implementation for the public get method, allowing Attribute hosts to over-ride either method. See get for argument details.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The value of the attribute.</return-description>
		</method>
		<method name="_getAttrs" scope="instance">
			<description>Implementation behind the public getAttrs method, to get multiple attribute values.</description>
			<parameters>
			<parameter name="attrs" type="Array | boolean" usage="optional">
				<description> Optional. An array of attribute names. If omitted, all attribute values are returned. If set to true, all attributes modified from their initial values are returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object with attribute name/value pairs.</return-description>
		</method>
		<method name="removeAttr" scope="instance">
			<description>Removes an attribute from the host object</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute to be removed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="get" scope="instance">
			<description>Returns the current value of the attribute. If the attribute has been configured with a 'getter' function, this method will delegate to the 'getter' to obtain the value of the attribute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute. If the value of the attribute is an Object, dot notation can be used to obtain the value of a property of the object (e.g. &lt;code&gt;get(&quot;x.y.z&quot;)&lt;/code&gt;)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The value of the attribute</return-description>
		</method>
		<method name="_setStateVal" scope="instance" visibility="private">
			<description>Sets the stored value for the attribute, in either the internal state object, or the state proxy if it exits</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			<parameter name="value" type="Any" usage="required">
				<description> The value of the attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="addAttrs" scope="instance">
			<description>Configures a group of attributes, and sets initial values. &lt;p&gt; &lt;strong&gt;NOTE:&lt;/strong&gt; This method does not isolate the configuration object by merging/cloning. The caller is responsible for merging/cloning the configuration object if required. &lt;/p&gt;</description>
			<parameters>
			<parameter name="cfgs" type="Object" usage="required">
				<description> An object with attribute name/configuration pairs.</description>
			</parameter>
			<parameter name="values" type="Object" usage="required">
				<description> An object with attribute name/value pairs, defining the initial values to apply. Values defined in the cfgs argument will be over-written by values in this argument unless defined as read only.</description>
			</parameter>
			<parameter name="lazy" type="boolean" usage="required">
				<description> Whether or not to delay the intialization of these attributes until the first call to get/set. Individual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration. See addAttr.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="_getStateVal" scope="instance" visibility="private">
			<description>Gets the stored value for the attribute, from either the internal state object, or the state proxy if it exits</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The stored value of the attribute</return-description>
		</method>
		<method name="_setAttrs" scope="instance">
			<description>Implementation behind the public setAttrs method, to set multiple attribute values.</description>
			<parameters>
			<parameter name="attrs" type="Object" usage="required">
				<description> An object with attributes name/value pairs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="reset" scope="instance">
			<description>Resets the attribute (or all attributes) to its initial value, as long as the attribute is not readOnly, or writeOnce.</description>
			<parameters>
			<parameter name="name" type="String" usage="optional">
				<description> Optional. The name of the attribute to reset. If omitted, all attributes are reset.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="addAttr" scope="instance">
			<description>&lt;p&gt; Adds an attribute with the provided configuration to the host object. &lt;/p&gt; &lt;p&gt; The config argument object supports the following properties: &lt;/p&gt; &lt;dl&gt; &lt;dt&gt;value &amp;#60;Any&amp;#62;&lt;/dt&gt; &lt;dd&gt;The initial value to set on the attribute&lt;/dd&gt; &lt;dt&gt;valueFn &amp;#60;Function&amp;#62;&lt;/dt&gt; &lt;dd&gt;A function, which will return the initial value to set on the attribute. This is useful for cases where the attribute configuration is defined statically, but needs to reference the host instance (&quot;this&quot;) to obtain an initial value. If defined, this precedence over the value property.&lt;/dd&gt; &lt;dt&gt;readOnly &amp;#60;boolean&amp;#62;&lt;/dt&gt; &lt;dd&gt;Whether or not the attribute is read only. Attributes having readOnly set to true cannot be modified by invoking the set method.&lt;/dd&gt; &lt;dt&gt;writeOnce &amp;#60;boolean&amp;#62;&lt;/dt&gt; &lt;dd&gt;Whether or not the attribute is &quot;write once&quot;. Attributes having writeOnce set to true, can only have their values set once, be it through the default configuration, constructor configuration arguments, or by invoking set.&lt;/dd&gt; &lt;dt&gt;setter &amp;#60;Function&amp;#62;&lt;/dt&gt; &lt;dd&gt;The setter function used to massage or normalize the value passed to the set method for the attribute. The value returned by the setter will be the final stored value. Returning Attribute.INVALID_VALUE, from the setter will prevent the value from being stored.&lt;/dd&gt; &lt;dt&gt;getter &amp;#60;Function&amp;#62;&lt;/dt&gt; &lt;dd&gt;The getter function used to massage or normalize the value returned by the get method for the attribute. The value returned by the getter function is the value which will be returned to the user when they invoke get.&lt;/dd&gt; &lt;dt&gt;validator &amp;#60;Function&amp;#62;&lt;/dt&gt; &lt;dd&gt;The validator function invoked prior to setting the stored value. Returning false from the validator function will prevent the value from being stored.&lt;/dd&gt; &lt;dt&gt;broadcast &amp;#60;int&amp;#62;&lt;/dt&gt; &lt;dd&gt;If and how attribute change events for this attribute should be broadcast. See CustomEvent's broadcast property for valid values. By default attribute change events are not broadcast.&lt;/dd&gt; &lt;dt&gt;lazyAdd &amp;#60;boolean&amp;#62;&lt;/dt&gt; &lt;dd&gt;Whether or not to delay initialization of the attribute until the first call to get/set it. This flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through the addAttrs method.&lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with the context (&quot;this&quot;) set to the host object.&lt;/p&gt; &lt;p&gt;Configuration properties outside of the list mentioned above are considered private properties used internally by attribute, and are not intended for public use.&lt;/p&gt;</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> An object with attribute configuration property/value pairs, specifying the configuration for the attribute. &lt;p&gt; &lt;strong&gt;NOTE:&lt;/strong&gt; The configuration object is modified when adding an attribute, so if you need to protect the original values, you will need to merge the object. &lt;/p&gt;</description>
			</parameter>
			<parameter name="lazy" type="boolean" usage="optional">
				<description> (optional) Whether or not to add this attribute lazily (on the first call to get/set).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="attrAdded" scope="instance">
			<description>Checks if the given attribute has been added to the host</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if an attribute with the given name has been added, false if it hasn't. This method will return true for lazily added attributes.</return-description>
		</method>
		<method name="_isLazyAttr" scope="instance" visibility="private">
			<description>Checks whether or not the attribute is one which has been added lazily and still requires initialization.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if it's a lazily added attribute, false otherwise.</return-description>
		</method>
		<method name="_addAttrs" scope="instance" visibility="private">
			<description>Implementation behind the public addAttrs method. This method is invoked directly by get if it encounters a scenario in which an attribute's valueFn attempts to obtain the value an attribute in the same group of attributes, which has not yet been added (on demand initialization).</description>
			<parameters>
			<parameter name="cfgs" type="Object" usage="required">
				<description> An object with attribute name/configuration pairs.</description>
			</parameter>
			<parameter name="values" type="Object" usage="required">
				<description> An object with attribute name/value pairs, defining the initial values to apply. Values defined in the cfgs argument will be over-written by values in this argument unless defined as read only.</description>
			</parameter>
			<parameter name="lazy" type="boolean" usage="required">
				<description> Whether or not to delay the intialization of these attributes until the first call to get/set. Individual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration. See addAttr.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setAttrs" scope="instance">
			<description>Sets multiple attribute values.</description>
			<parameters>
			<parameter name="attrs" type="Object" usage="required">
				<description> An object with attributes name/value pairs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		<method name="_set" scope="instance">
			<description>Allows setting of readOnly/writeOnce attributes. See set for argument details.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			<parameter name="val" type="Any" usage="required">
				<description> The value to set the attribute to.</description>
			</parameter>
			<parameter name="opts" type="Object" usage="optional">
				<description> (Optional) Optional event data to be mixed into the event facade passed to subscribers of the attribute's change event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the host object.</return-description>
		</method>
		</methods>
	</class>
	<class type="StyleSheet">
		<description>Create an instance of StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
&lt;pre&gt;&lt;code&gt;var sheet = Y.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
or
&lt;pre&gt;&lt;code&gt;var sheet = new Y.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
The first parameter passed can be any of the following things:
&lt;ul&gt;
&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;
&lt;li&gt;The string name of an existing StyleSheet instance&lt;/li&gt;
&lt;li&gt;The unique guid generated for an existing StyleSheet instance&lt;/li&gt;
&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The Y.Node instance wrapping an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.&lt;/p&gt;
&lt;p&gt;The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Create an instance of StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
&lt;pre&gt;&lt;code&gt;var sheet = Y.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
or
&lt;pre&gt;&lt;code&gt;var sheet = new Y.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
The first parameter passed can be any of the following things:
&lt;ul&gt;
&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;
&lt;li&gt;The string name of an existing StyleSheet instance&lt;/li&gt;
&lt;li&gt;The unique guid generated for an existing StyleSheet instance&lt;/li&gt;
&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The Y.Node instance wrapping an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.&lt;/p&gt;
&lt;p&gt;The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.&lt;/p&gt;</description>
			<return-types>
				<return-type type="StyleSheet" />
			</return-types>
			<parameters>
			<parameter name="seed" type="String|HTMLElement|Node" usage="required">
				<description>  a style or link node, its id, or a
name or guid of a StyleSheet, or a string of css text</description>
			</parameter>
			<parameter name="name" type="String" usage="optional">
				<description>  (optional) name to register instance for future static
access</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="enable" scope="instance">
			<description>Enable all the rules in the sheet</description>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
		</method>
		<method name="StyleSheet.isValidSelector" scope="static">
			<description>&lt;p&gt;Determines if a selector string is safe to use. Used internally in set to prevent IE from locking up when attempting to add a rule for a &amp;quot;bad selector&amp;quot;.&lt;/p&gt; &lt;p&gt;Bad selectors are considered to be any string containing unescaped `~!@$%^&amp;()+=|{}[];'&quot;?&lt; or space. Also forbidden are . or # followed by anything other than an alphanumeric. Additionally -abc or .-abc or #_abc or '# ' all fail. There are likely more failure cases, so please file a bug if you encounter one.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="getCssText" scope="instance">
			<description>Get the current cssText for a rule or the entire sheet. If the selector param is supplied, only the cssText for that rule will be returned, if found. If the selector string targets multiple selectors separated by commas, the cssText of the first rule only will be returned. If no selector string, the stylesheet's full cssText will be returned.</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> Selector string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="isEnabled" scope="instance">
			<description>Returns false if the StyleSheet is disabled. Otherwise true.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="disable" scope="instance">
			<description>Disable all the rules in the sheet. Rules may be changed while the StyleSheet is disabled.</description>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
		</method>
		<method name="set" scope="instance">
			<description>&lt;p&gt;Set style properties for a provided selector string. If the selector includes commas, it will be split into individual selectors and applied accordingly. If the selector string does not have a corresponding rule in the sheet, it will be added.&lt;/p&gt; &lt;p&gt;The object properties in the second parameter must be the JavaScript names of style properties. E.g. fontSize rather than font-size.&lt;/p&gt; &lt;p&gt;The float style property will be set by any of &amp;quot;float&amp;quot;, &amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot;.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string to apply the changes to</description>
			</parameter>
			<parameter name="css" type="Object" usage="required">
				<description> Object literal of style properties and new values</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
		</method>
		<method name="getId" scope="instance">
			<description>Get the unique stamp for this StyleSheet instance</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the static id</return-description>
		</method>
		<method name="StyleSheet.register" scope="static">
			<description>Registers a StyleSheet instance in the static registry by the given name</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> the name to assign the StyleSheet in the registry</description>
			</parameter>
			<parameter name="sheet" type="StyleSheet" usage="required">
				<description> The StyleSheet instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>false if no name or sheet is not a StyleSheet
instance. true otherwise.</return-description>
		</method>
		<method name="unset" scope="instance">
			<description>&lt;p&gt;Unset style properties for a provided selector string, removing their effect from the style cascade.&lt;/p&gt; &lt;p&gt;If the selector includes commas, it will be split into individual selectors and applied accordingly. If there are no properties remaining in the rule after unsetting, the rule is removed.&lt;/p&gt; &lt;p&gt;The style property or properties in the second parameter must be the JavaScript style property names. E.g. fontSize rather than font-size.&lt;/p&gt; &lt;p&gt;The float style property will be unset by any of &amp;quot;float&amp;quot;, &amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot;.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string to apply the changes to</description>
			</parameter>
			<parameter name="css" type="String|Array" usage="required">
				<description> style property name or Array of names</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
		</method>
		<method name="StyleSheet.toCssText" scope="static">
			<description>&lt;p&gt;Converts an object literal of style properties and values into a string of css text. This can then be assigned to el.style.cssText.&lt;/p&gt; &lt;p&gt;The optional second parameter is a cssText string representing the starting state of the style prior to alterations. This is most often extracted from the eventual target's current el.style.cssText.&lt;/p&gt;</description>
			<parameters>
			<parameter name="css" type="Object" usage="required">
				<description> object literal of style properties and values</description>
			</parameter>
			<parameter name="cssText" type="String" usage="optional">
				<description> (optional) starting cssText value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>the resulting cssText string</return-description>
		</method>
		</methods>
	</class>
	<class type="YUI~oop">
		<description>The following methods are added to the YUI instance</description>
		<methods>
		<method name="augment" scope="instance">
			<description>Applies prototype properties from the supplier to the receiver. The receiver can be a constructor or an instance.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="ov" type="boolean" usage="required">
				<description> if true, properties already on the receiver will be overwritten if found on the supplier.</description>
			</parameter>
			<parameter name="wl" type="string[]" usage="required">
				<description> a whitelist. If supplied, only properties in this list will be applied to the receiver.</description>
			</parameter>
			<parameter name="args" type="Array | Any" usage="required">
				<description> arg or arguments to apply to the supplier constructor when initializing.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the augmented object</return-description>
		</method>
		<method name="extend" scope="instance">
			<description>Utility to set up the prototype, constructor and superclass properties to support an inheritance strategy that can chain constructors and methods. Static members will not be inherited.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description>  the object to modify</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object to inherit</description>
			</parameter>
			<parameter name="px" type="Object" usage="required">
				<description> prototype properties to add/override</description>
			</parameter>
			<parameter name="sx" type="Object" usage="required">
				<description> static properties to add/override</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="bind" scope="instance">
			<description>Returns a function that will execute the supplied function in the supplied object's context, optionally adding any additional supplied parameters to the beginning of the arguments collection the supplied to the function.</description>
			<parameters>
			<parameter name="f" type="Function|String" usage="required">
				<description> the function to bind, or a function name to execute on the context object</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> the execution context</description>
			</parameter>
			<parameter name="args*" type="" usage="required">
				<description> 0..n arguments to include before the arguments the function is executed with.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="function" />
			</return-types>
			<return-description>the wrapped function</return-description>
		</method>
		<method name="clone" scope="instance">
			<description>Deep obj/array copy. Functions are cloned with Y.bind. Array-like objects are treated as arrays. Primitives are returned untouched. Optionally, a function can be provided to handle other data types, filter keys, validate values, etc.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> what to clone</description>
			</parameter>
			<parameter name="safe" type="boolean" usage="required">
				<description> if true, objects will not have prototype items from the source. If false, they will. In this case, the original is initially protected, but the clone is not completely immune from changes to the source object prototype. Also, cloned prototype items that are deleted from the clone will result in the value of the source prototype being exposed. If operating on a non-safe clone, items should be nulled out rather than deleted.</description>
			</parameter>
			<parameter name="f" type="" usage="required">
				<description> optional function to apply to each item in a collection; it will be executed prior to applying the value to the new object. Return false to prevent the copy.</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> optional execution context for f</description>
			</parameter>
			<parameter name="owner" type="" usage="required">
				<description> Owner object passed when clone is iterating an object. Used to set up context for cloned functions.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array|Object" />
			</return-types>
			<return-description>the cloned object</return-description>
		</method>
		<method name="rbind" scope="instance">
			<description>Returns a function that will execute the supplied function in the supplied object's context, optionally adding any additional supplied parameters to the end of the arguments the function is executed with.</description>
			<parameters>
			<parameter name="f" type="Function|String" usage="required">
				<description> the function to bind, or a function name to execute on the context object</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> the execution context</description>
			</parameter>
			<parameter name="args*" type="" usage="required">
				<description> 0..n arguments to append to the end of arguments collection supplied to the function</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="function" />
			</return-types>
			<return-description>the wrapped function</return-description>
		</method>
		<method name="each" scope="instance">
			<description>Executes the supplied function for each item in a collection. Supports arrays, objects, and Y.NodeLists</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the object to iterate</description>
			</parameter>
			<parameter name="f" type="" usage="required">
				<description> the function to execute. This function receives the value, key, and object as parameters</description>
			</parameter>
			<parameter name="proto" type="" usage="required">
				<description> if true, prototype properties are iterated on objects</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="aggregate" scope="instance">
			<description>Applies object properties from the supplier to the receiver. If the target has the property, and the property is an object, the target object will be augmented with the supplier's value. If the property is an array, the suppliers value will be appended to the target.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="ov" type="boolean" usage="required">
				<description> if true, properties already on the receiver will be overwritten if found on the supplier.</description>
			</parameter>
			<parameter name="wl" type="string[]" usage="required">
				<description> a whitelist. If supplied, only properties in this list will be applied to the receiver.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the extended object</return-description>
		</method>
		</methods>
	</class>
	<class type="Assert.Error">
		<description>Error is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
		<constructors>
		<constructor scope="instance">
			<description>Error is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
			<return-types>
				<return-type type="Assert.Error" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="valueOf" scope="instance">
			<description>Returns a primitive value version of the error. Same as toString().</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A primitive value version of the error.</return-description>
		</method>
		<method name="getMessage" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. This should be overridden by all subclasses to provide specific information.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the error.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string representation of the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="DD.Scroll" superclass="Base">
		<description>This class is the base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.
This class should not be called on it's own, it's designed to be a plugin.</description>
		<constructors>
		<constructor scope="instance">
			<description>This class is the base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.
This class should not be called on it's own, it's designed to be a plugin.</description>
			<return-types>
				<return-type type="DD.Scroll" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_scrollTimer" type="{Y.later}" scope="instance" visibility="private">
			<description>Holder for the Timer object returned from Y.later.</description>
		</property>
		<property name="_dimCache" type="Object" scope="instance" visibility="private">
			<description>Cache of the dragNode dims.</description>
		</property>
		<property name="_vpRegionCache" type="Object" scope="instance" visibility="private">
			<description>Cache of the Viewport dims.</description>
		</property>
		<property name="_scrolling" type="Boolean" scope="instance" visibility="private">
			<description>Tells if we are actively scrolling or not.</description>
		</property>
		</properties>
		<methods>
		<method name="_cancelScroll" scope="instance" visibility="private">
			<description>Cancel a currently running scroll timer.</description>
		</method>
		<method name="end" scope="instance">
			<description>Called from the drag:end event</description>
		</method>
		<method name="start" scope="instance">
			<description>Called from the drag:start event</description>
		</method>
		<method name="align" scope="instance">
			<description>Called from the drag:align event to determine if we need to scroll.</description>
		</method>
		<method name="_checkWinScroll" scope="instance" visibility="private">
			<description>Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.</description>
			<parameters>
			<parameter name="move" type="Boolean" usage="required">
				<description> Should we move the window. From Y.later</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setDimCache" scope="instance" visibility="private">
			<description>Set the cache of the dragNode dims.</description>
		</method>
		<method name="toString" scope="instance">
			<description>General toString method for logging</description>
			<return-description>String name for the object</return-description>
		</method>
		<method name="_initScroll" scope="instance" visibility="private">
			<description>Cancel a previous scroll timer and init a new one.</description>
		</method>
		<method name="_getVPRegion" scope="instance" visibility="private">
			<description>Sets the _vpRegionCache property with an Object containing the dims from the viewport.</description>
		</method>
		</methods>
	</class>
	<class type="Overlay" superclass="Widget">
		<description>A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).
It also provides alignment and centering support and uses a standard module format for it's content, with header,
body and footer section support.</description>
		<constructors>
		<constructor scope="instance">
			<description>A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).
It also provides alignment and centering support and uses a standard module format for it's content, with header,
body and footer section support.</description>
			<return-types>
				<return-type type="Overlay" />
			</return-types>
			<parameters>
			<parameter name="object" type="Object" usage="required">
				<description> The user configuration for the instance.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="Test.DateAssert">
		<description>The DateAssert object provides functions to test JavaScript Date objects
for a variety of cases.</description>
		<methods>
		<method name="datesAreEqual" scope="static">
			<description>Asserts that a date's month, day, and year are equal to another date's.</description>
			<parameters>
			<parameter name="expected" type="Date" usage="required">
				<description> The expected date.</description>
			</parameter>
			<parameter name="actual" type="Date" usage="required">
				<description> The actual date to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="timesAreEqual" scope="static">
			<description>Asserts that a date's hour, minutes, and seconds are equal to another date's.</description>
			<parameters>
			<parameter name="expected" type="Date" usage="required">
				<description> The expected date.</description>
			</parameter>
			<parameter name="actual" type="Date" usage="required">
				<description> The actual date to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Subscriber">
		<description>Stores the subscriber information to be used when the event fires.</description>
		<constructors>
		<constructor scope="instance">
			<description>Stores the subscriber information to be used when the event fires.</description>
			<return-types>
				<return-type type="Subscriber" />
			</return-types>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>       The wrapped function to execute</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description>  The value of the keyword 'this' in the listener</description>
			</parameter>
			<parameter name="args*" type="Array" usage="required">
				<description>       0..n additional arguments to supply the listener</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="events" type="{EventTarget}" scope="instance">
			<description>Custom events for a given fire transaction.</description>
		</property>
		<property name="args" type="Array" scope="instance">
			<description>Additional arguments to propagate to the subscriber</description>
		</property>
		<property name="context" type="Object" scope="instance">
			<description>Optional 'this' keyword for the listener</description>
		</property>
		<property name="fn" type="Function" scope="instance">
			<description>The callback that will be execute when the event fires This is wrapped by Y.rbind if obj was supplied.</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>Unique subscriber id</description>
		</property>
		</properties>
		<methods>
		<method name="contains" scope="instance">
			<description>Returns true if the fn and obj match this objects properties. Used by the unsubscribe method to match the right subscriber.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> optional 'this' keyword for the listener</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the supplied arguments match this 
subscriber's signature.</return-description>
		</method>
		<method name="notify" scope="instance">
			<description>Executes the subscriber.</description>
			<parameters>
			<parameter name="args" type="Array" usage="required">
				<description> Arguments array for the subscriber</description>
			</parameter>
			<parameter name="ce" type="CustomEvent" usage="required">
				<description> The custom event that sent the notification</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Test.ArrayAssert">
		<description>The ArrayAssert object provides functions to test JavaScript array objects
for a variety of cases.</description>
		<methods>
		<method name="containsMatch" scope="static">
			<description>Asserts that a value matching some condition is present in an array. This uses a function to determine a match.</description>
			<parameters>
			<parameter name="matcher" type="Function" usage="required">
				<description> A function that returns true if the items matches or false if not.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContain" scope="static">
			<description>Asserts that a value is not present in an array. This uses the triple equals Asserts that a value is not present in an array. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value that is expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="indexOf" scope="static">
			<description>Asserts that the given value is contained in an array at the specified index. This uses the triple equals sign so no type cohersion will occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value to look for.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> The array to search in.</description>
			</parameter>
			<parameter name="index" type="int" usage="required">
				<description> The index at which the value should exist.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="itemsAreSame" scope="static">
			<description>Asserts that the values in an array are the same, and in the same position, as values in another array. This uses the triple equals sign so no type cohersion will occur. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="contains" scope="static">
			<description>Asserts that a value is present in an array. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value that is expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="containsItems" scope="static">
			<description>Asserts that a set of values are present in an array. This uses the triple equals sign so no type cohersion may occur. For this assertion to pass, all values must be found.</description>
			<parameters>
			<parameter name="needles" type="Object[]" usage="required">
				<description> An array of values that are expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values to check.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContainItems" scope="static">
			<description>Asserts that a set of values are not present in an array. This uses the triple equals sign so no type cohersion may occur. For this assertion to pass, all values must not be found.</description>
			<parameters>
			<parameter name="needles" type="Object[]" usage="required">
				<description> An array of values that are not expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values to check.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="itemsAreEquivalent" scope="static">
			<description>Asserts that the values in an array are equivalent, and in the same position, as values in another array. This uses a function to determine if the values are equivalent. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="comparator" type="Function" usage="required">
				<description> A function that returns true if the values are equivalent or false if not.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="itemsAreEqual" scope="static">
			<description>Asserts that the values in an array are equal, and in the same position, as values in another array. This uses the double equals sign so type cohersion may occur. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isEmpty" scope="static">
			<description>Asserts that an array is empty.</description>
			<parameters>
			<parameter name="actual" type="Array" usage="required">
				<description> The array to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="lastIndexOf" scope="static">
			<description>Asserts that the given value is contained in an array at the specified index, starting from the back of the array. This uses the triple equals sign so no type cohersion will occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value to look for.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> The array to search in.</description>
			</parameter>
			<parameter name="index" type="int" usage="required">
				<description> The index at which the value should exist.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotEmpty" scope="static">
			<description>Asserts that an array is not empty.</description>
			<parameters>
			<parameter name="actual" type="Array" usage="required">
				<description> The array to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContainMatch" scope="static">
			<description>Asserts that no values matching a condition are present in an array. This uses a function to determine a match.</description>
			<parameters>
			<parameter name="matcher" type="Function" usage="required">
				<description> A function that returns true if the items matches or false if not.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YUI~substitute">
		<description>The following methods are added to the YUI instance</description>
		<methods>
		<method name="substitute" scope="instance">
			<description>Does variable substitution on a string. It scans through the string looking for expressions enclosed in { } braces. If an expression is found, it is used a key on the object. If there is a space in the key, the first word is used for the key and the rest is provided to an optional function to be used to programatically determine the value (the extra information might be used for this decision). If the value for the key in the object, or what is returned from the function has a string value, number value, or object value, it is substituted for the bracket expression and it repeats. If this value is an object, it uses the Object's toString() if this has been overridden, otherwise it does a shallow dump of the key/value pairs if Y.dump is available (if dump isn't available, toString() is used). This method is included in the 'substitute' module. It is not included in the YUI module.</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> The string that will be modified.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> An object containing the replacement values</description>
			</parameter>
			<parameter name="f" type="function" usage="required">
				<description> An optional function that can be used to process each match. It receives the key, value, and any extra metadata included with the key inside of the braces.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the substituted string</return-description>
		</method>
		</methods>
	</class>
	<class type="io">
		<description>The io class is a utility that brokers HTTP requests through a simplified
interface.  Specifically, it allows JavaScript to make HTTP requests to
a resource without a page reload.  The underlying transport for making
same-domain requests is the XMLHttpRequest object.  YUI.io can also use
Flash, if specified as a transport, for cross-domain requests.</description>
		<properties>
		<property name="_headers" type="object" scope="static" visibility="private">
			<description>Object of default HTTP headers to be initialized and sent for all transactions.</description>
		</property>
		<property name="_qState" type="int" scope="static" visibility="private">
			<description>Property to determine whether the queue is set to 1 (active) or 0 (inactive). When inactive, transactions will be stored in the queue until the queue is set to active.</description>
		</property>
		<property name="_rS" type="object" scope="static" visibility="private">
			<description>Map of transaction state used when XDomainRequest is the XDR transport.</description>
		</property>
		<property name="_transport" type="object" scope="static" visibility="private">
			<description>Map of io transports.</description>
		</property>
		<property name="_timeout" type="object" scope="static" visibility="private">
			<description>Object that stores timeout values for any transaction with a defined &quot;timeout&quot; configuration property.</description>
		</property>
		<property name="transactionId" type="int" scope="static" visibility="private">
			<description>A transaction counter that increments for each transaction.</description>
		</property>
		<property name="_fn" type="object" scope="static" visibility="private">
			<description>Object that stores callback handlers for cross-domain requests when using Flash as the transport.</description>
		</property>
		<property name="_e" type="Object" scope="static" visibility="private">
			<description>Reference to &quot;io:complete&quot; event handler.</description>
		</property>
		<property name="_yQ" type="Object" scope="static" visibility="private">
			<description>Array of transactions queued for processing</description>
		</property>
		</properties>
		<methods>
		<method name="_concat" scope="static" visibility="private">
			<description>Method that concatenates string data for HTTP GET transactions.</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> - URI or root data.</description>
			</parameter>
			<parameter name="d" type="string" usage="required">
				<description> - data to be concatenated onto URI.</description>
			</parameter>
			</parameters>
			<return-description>int</return-description>
		</method>
		<method name="_stop" scope="static" visibility="private">
			<description>Method for setting queue processing to inactive. Transaction requests to YUI.io.queue() will be stored in the queue, but not processed until the queue is reset to &quot;active&quot;.</description>
			<return-description>void</return-description>
		</method>
		<method name="_ioEnd" scope="static" visibility="private">
			<description>Fires event &quot;io:end&quot; and creates, fires a transaction-specific &quot;end&quot; event, if config.on.end is defined.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - transaction object.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_handle" scope="static" visibility="private">
			<description>Bound to the iframe's Load event and processes the response data.</description>
			<parameters>
			<parameter name="o" type="o" usage="required">
				<description> The transaction object</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> Configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="header" scope="static">
			<description>Method that stores default client headers for all transactions. If a label is passed with no value argument, the header will be deleted. This is the interface for _setHeader().</description>
			<parameters>
			<parameter name="l" type="string" usage="required">
				<description> - HTTP header</description>
			</parameter>
			<parameter name="v" type="string" usage="required">
				<description> - HTTP header value</description>
			</parameter>
			</parameters>
			<return-description>int</return-description>
		</method>
		<method name="_startTimeout" scope="static" visibility="private">
			<description>Starts timeout count if the configuration object has a defined timeout property.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create().</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - Configuration object passed to YUI.io().</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_ioFailure" scope="static" visibility="private">
			<description>Fires event &quot;io:failure&quot; and creates, fires a transaction-specific &quot;failure&quot; event, if config.on.failure is defined.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - transaction object.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="io" scope="static">
			<description>Method for requesting a transaction. This is the interface for _io().</description>
			<parameters>
			<parameter name="uri" type="string" usage="required">
				<description> - qualified path to transaction resource.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="_isInProgress." scope="static" visibility="private">
			<description>Method for determining if an XDR transaction has completed and all data are received.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create() in io-base.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_size" scope="static" visibility="private">
			<description>Method to query the current size of the queue.</description>
			<return-description>int</return-description>
		</method>
		<method name="_data" scope="static" visibility="private">
			<description>Creates a response object for XDR transactions, for success and failure cases.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create() in io-base.</description>
			</parameter>
			<parameter name="isFlash" type="boolean" usage="required">
				<description> - True if Flash was used as the transport.</description>
			</parameter>
			<parameter name="isXML" type="boolean" usage="required">
				<description> - True if the response data are XML.</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="_ioSuccess" scope="static" visibility="private">
			<description>Fires event &quot;io:success&quot; and creates, fires a transaction-specific &quot;success&quot; event, if config.on.success is defined.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - transaction object.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="size" scope="static">
			<description>Method to query the current size of the queue, or to set a maximum queue size. This is the interface for _size().</description>
			<parameters>
			<parameter name="i" type="number" usage="required">
				<description> - Specified maximum size of queue.</description>
			</parameter>
			</parameters>
			<return-description>number</return-description>
		</method>
		<method name="_remove" scope="static" visibility="private">
			<description>Method for removing a specific, pending transaction from the queue.</description>
			<return-description>void</return-description>
		</method>
		<method name="_readyState" scope="static" visibility="private">
			<description>Event handler bound to onreadystatechange.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create().</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - Configuration object passed to YUI.io().</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="start" scope="static">
			<description>Method for setting the queue to active. If there are transactions pending in the queue, they will be processed from the queue in FIFO order. This is the interface for _start().</description>
			<return-description>void</return-description>
		</method>
		<method name="_clearTimeout" scope="static" visibility="private">
			<description>Clears the timeout interval started by _startTimeout().</description>
			<parameters>
			<parameter name="id" type="number" usage="required">
				<description> - Transaction id.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_subscribe" scope="static" visibility="private">
			<description>Method for creating and subscribing transaction events.</description>
			<parameters>
			<parameter name="e" type="string" usage="required">
				<description> - event to be published</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration data subset for event subscription.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="transport" scope="static">
			<description>Method to initialize the desired transport.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - object of transport configurations.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_serialize" scope="static" visibility="private">
			<description>Method to enumerate through an HTML form's elements collection and return a string comprised of key-value pairs.</description>
			<parameters>
			<parameter name="c" type="object" usage="required">
				<description> - YUI form node or HTML form id.</description>
			</parameter>
			<parameter name="s" type="string" usage="required">
				<description> - Transaction data defined in the configuration.</description>
			</parameter>
			</parameters>
			<return-description>string</return-description>
		</method>
		<method name="_create" scope="static" visibility="private">
			<description>Method that creates a unique transaction object for each request.</description>
			<parameters>
			<parameter name="c" type="number" usage="required">
				<description> - configuration object subset to determine if the transaction is an XDR or file upload, requiring an alternate transport.</description>
			</parameter>
			<parameter name="i" type="number" usage="required">
				<description> - transaction id</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="_upload" scope="static" visibility="private">
			<description>Uploads HTML form data, inclusive of files/attachments, using the iframe created in _create to facilitate the transaction.</description>
			<parameters>
			<parameter name="o" type="o" usage="required">
				<description> The transaction object</description>
			</parameter>
			<parameter name="uri" type="object" usage="required">
				<description> Qualified path to transaction resource.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> Configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_resend" scope="static" visibility="private">
			<description>Resends an XDR transaction, using the Flash tranport, if the native transport fails.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create().</description>
			</parameter>
			<parameter name="uri" type="string" usage="required">
				<description> - qualified path to transaction resource.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="xdrResponse" scope="static" visibility="private">
			<description>Response controller for cross-domain requests when using the Flash transport or IE8's XDomainRequest object.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create() in io-base.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			<parameter name="e" type="string" usage="required">
				<description> - Event name</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="_destroy" scope="static" visibility="private">
			<parameters>
			<parameter name="o" type="o" usage="required">
				<description> The transaction object</description>
			</parameter>
			<parameter name="uri" type="object" usage="required">
				<description> Qualified path to transaction resource.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> Configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="stop" scope="static">
			<description>Method for setting queue processing to inactive. Transaction requests to YUI.io.queue() will be stored in the queue, but not processed until the queue is restarted. This is the interface for _stop().</description>
			<return-description>void</return-description>
		</method>
		<method name="_shift" scope="static" visibility="private">
			<description>Method Process the first transaction from the queue in FIFO order.</description>
			<return-description>void</return-description>
		</method>
		<method name="_setHeader" scope="static" visibility="private">
			<description>Method that stores default client headers for all transactions. If a label is passed with no value argument, the header will be deleted.</description>
			<parameters>
			<parameter name="l" type="string" usage="required">
				<description> - HTTP header</description>
			</parameter>
			<parameter name="v" type="string" usage="required">
				<description> - HTTP header value</description>
			</parameter>
			</parameters>
			<return-description>int</return-description>
		</method>
		<method name="_swf" scope="static" visibility="private">
			<description>Method that creates the Flash transport swf.</description>
			<parameters>
			<parameter name="uri" type="string" usage="required">
				<description> - location of io.swf.</description>
			</parameter>
			<parameter name="yid" type="string" usage="required">
				<description> - YUI instance id.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_xdr" scope="static" visibility="private">
			<description>Sets event handlers for XDomainRequest transactions.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create() in io-base.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_ioComplete" scope="static" visibility="private">
			<description>Fires event &quot;io:complete&quot; and creates, fires a transaction-specific &quot;complete&quot; event, if config.on.complete is defined.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - transaction object.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="appendData" scope="static" visibility="private">
			<description>Parses the POST data object and creates hidden form elements for each key-value, and appends them to the HTML form object.</description>
			<parameters>
			<parameter name="f" type="object" usage="required">
				<description> HTML form object.</description>
			</parameter>
			<parameter name="s" type="string" usage="required">
				<description> The key-value POST data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="array" />
			</return-types>
			<return-description>e Array of created fields.</return-description>
		</method>
		<method name="promote" scope="static">
			<description>Method for promoting a transaction to the top of the queue. This is the interface for _unshift().</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> - Reference to queued transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_setAttrs" scope="static" visibility="private">
			<description>Sets the appropriate attributes and values to the HTML form, in preparation of a file upload transaction.</description>
			<parameters>
			<parameter name="f" type="object" usage="required">
				<description> HTML form object.</description>
			</parameter>
			<parameter name="id" type="object" usage="required">
				<description> The Transaction ID.</description>
			</parameter>
			<parameter name="uri" type="object" usage="required">
				<description> Qualified path to transaction resource.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_setHeaders" scope="static" visibility="private">
			<description>Method that sets all HTTP headers to be sent in a transaction.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - XHR instance for the specific transaction.</description>
			</parameter>
			<parameter name="h" type="object" usage="required">
				<description> - HTTP headers for the specific transaction, as defined in the configuration object passed to YUI.io().</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_xhr" scope="static" visibility="private">
			<description>Method that creates the XMLHttpRequest transport</description>
			<return-description>object</return-description>
		</method>
		<method name="_queue" scope="static" visibility="private">
			<description>Method for requesting a transaction, and queueing the request before it is sent to the resource.</description>
			<return-description>Object</return-description>
		</method>
		<method name="f" scope="static" visibility="private">
			<description>Removes the custom fields created to pass additional POST data, along with the HTML form fields.</description>
			<parameters>
			<parameter name="f" type="object" usage="required">
				<description> HTML form object.</description>
			</parameter>
			<parameter name="o" type="object" usage="required">
				<description> HTML form fields created from configuration.data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_abort" scope="static" visibility="private">
			<description>Method for intiating an XDR transaction abort.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create() in io-base.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
		</method>
		<method name="remove" scope="static">
			<description>Method for removing a specific, pending transaction from the queue. This is the interface for _remove().</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> - Reference to queued transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_io" scope="static" visibility="private">
			<description>Method for requesting a transaction. _io() is implemented as yui.io(). Each transaction may include a configuration object. Its properties are: method: HTTP method verb (e.g., GET or POST). If this property is not not defined, the default value will be GET. data: This is the name-value string that will be sent as the transaction data. If the request is HTTP GET, the data become part of querystring. If HTTP POST, the data are sent in the message body. xdr: Defines the transport to be used for cross-domain requests. By setting this property, the transaction will use the specified transport instead of XMLHttpRequest. Currently, the only alternate transport supported is Flash (e.g., { xdr: 'flash' }). form: This is a defined object used to process HTML form as data. The properties are: { id: object, //HTML form object or id of HTML form useDisabled: boolean, //Allow disabled HTML form field values to be sent as part of the data. } on: This is a defined object used to create and handle specific events during a transaction lifecycle. These events will fire in addition to the global io events. The events are: start - This event is fired when a request is sent to a resource. complete - This event fires when the transaction is complete. success - This event fires when the response status resolves to HTTP 2xx. failure - This event fires when the response status resolves to HTTP 4xx, 5xx; and, for all transaction exceptions, including aborted transactions and transaction timeouts. end - This even is fired at the conclusion of the transaction lifecycle, after a success or failure resolution. The properties are: { start: function(id, args){}, complete: function(id, responseobject, args){}, success: function(id, responseobject, args){}, failure: function(id, responseobject, args){}, end: function(id, args){} } Each property can reference a function or be written as an inline function. context: Object reference for an event handler when it is implemented as a method of a base object. Defining &quot;context&quot; will preserve the proper reference of &quot;this&quot; used in the event handler. headers: This is a defined object of client headers, as many as. desired for the transaction. These headers are sentThe object pattern is: { header: value } timeout: This value, defined as milliseconds, is a time threshold for the transaction. When this threshold is reached, and the transaction's Complete event has not yet fired, the transaction will be aborted. arguments: Object, array, string, or number passed to all registered event handlers. This value is available as the second argument in the &quot;start&quot; and &quot;abort&quot; event handlers; and, it is the third argument in the &quot;complete&quot;, &quot;success&quot;, and &quot;failure&quot; event handlers.</description>
			<parameters>
			<parameter name="uri" type="string" usage="required">
				<description> - qualified path to transaction resource.</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			<parameter name="i" type="number" usage="required">
				<description> - transaction id, if already set by queue.</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="_ioStart" scope="static" visibility="private">
			<description>Fires event &quot;io:start&quot; and creates, fires a transaction-specific start event, if config.on.start is defined.</description>
			<parameters>
			<parameter name="id" type="number" usage="required">
				<description> - transaction id</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_resetAttrs" scope="static" visibility="private">
			<description>Sets the appropriate attributes and values to the HTML form, in preparation of a file upload transaction.</description>
			<parameters>
			<parameter name="f" type="object" usage="required">
				<description> HTML form object.</description>
			</parameter>
			<parameter name="a" type="object" usage="required">
				<description> Object of original attributes.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_unshift" scope="static" visibility="private">
			<description>Method for promoting a transaction to the top of the queue.</description>
			<return-description>void</return-description>
		</method>
		<method name="_handleResponse" scope="static" visibility="private">
			<description>Method that determines if a transaction response qualifies as success or failure, based on the response HTTP status code, and fires the appropriate success or failure events.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create().</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - Configuration object passed to io().</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_ioCancel" scope="static" visibility="private">
			<description>Terminates a transaction due to an explicit abort or timeout.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> - Transaction object generated by _create().</description>
			</parameter>
			<parameter name="s" type="string" usage="required">
				<description> - Identifies timed out or aborted transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_id" scope="static" visibility="private">
			<description>Method that increments _transactionId for each transaction.</description>
			<return-description>int</return-description>
		</method>
		<method name="xdrReady" scope="static" visibility="private">
			<description>Fires event &quot;io:xdrReady&quot;</description>
			<parameters>
			<parameter name="id" type="number" usage="required">
				<description> - transaction id</description>
			</parameter>
			<parameter name="c" type="object" usage="required">
				<description> - configuration object for the transaction.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		</methods>
	</class>
	<class type="Test.Suite">
		<description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
		<constructors>
		<constructor scope="instance">
			<description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
			<return-types>
				<return-type type="Test.Suite" />
			</return-types>
			<parameters>
			<parameter name="data" type="String||Object" usage="required">
				<description> The name of the test suite or an object containing
a name property as well as setUp and tearDown methods.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="items" type="undefined" scope="instance" visibility="private">
			<description>Array of test suites and</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the test suite.</description>
		</property>
		</properties>
		<methods>
		<method name="XML" scope="static">
			<description>Returns test results formatted as an XML string.</description>
			<parameters>
			<parameter name="result" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>An XML-formatted string of results.</return-description>
		</method>
		<method name="tearDown" scope="instance">
			<description>Function to run after each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setUp" scope="instance">
			<description>Function to run before each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="JSON" scope="static">
			<description>Returns test results formatted as a JSON string. Requires JSON utility.</description>
			<parameters>
			<parameter name="result" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A JSON-formatted string of results.</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Adds a test suite or test case to the test suite.</description>
			<parameters>
			<parameter name="testObject" type="Y.Test.Suite||Y.Test.Case" usage="required">
				<description> The test suite or test case to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="JUnitXML" scope="static">
			<description>Returns test results formatted in JUnit XML format.</description>
			<parameters>
			<parameter name="result" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>An XML-formatted string of results.</return-description>
		</method>
		</methods>
	</class>
	<class type="Assert.UnexpectedError" superclass="Assert.Error">
		<description>UnexpectedError is subclass of Error that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
		<constructors>
		<constructor scope="instance">
			<description>UnexpectedError is subclass of Error that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
			<return-types>
				<return-type type="Assert.UnexpectedError" />
			</return-types>
			<parameters>
			<parameter name="cause" type="Error" usage="required">
				<description> The unexpected error that caused this error to be 
thrown.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="cause" type="Error" scope="instance">
			<description>The unexpected error that occurred.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		<property name="stack" type="String" scope="instance">
			<description>Stack information for the error (if provided).</description>
		</property>
		</properties>
	</class>
	<class type="Do">
		<description>Allows for the insertion of methods that are executed before or after
a specified method</description>
		<properties>
		<property name="objs" type="undefined" scope="static">
			<description>Cache of objects touched by the utility</description>
		</property>
		</properties>
		<methods>
		<method name="_inject" scope="static" visibility="private">
			<description>Execute the supplied method after the specified function</description>
			<parameters>
			<parameter name="when" type="string" usage="required">
				<description> before or after</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="obj" type="" usage="required">
				<description> the object hosting the method to displace</description>
			</parameter>
			<parameter name="sFn" type="string" usage="required">
				<description> the name of the method to displace</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> The execution context for fn</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>handle for the subscription</return-description>
		</method>
		<method name="detach" scope="instance">
			<description>Detach a before or after subscription</description>
			<parameters>
			<parameter name="handle" type="string" usage="required">
				<description> the subscription handle</description>
			</parameter>
			</parameters>
		</method>
		<method name="after" scope="static">
			<description>Execute the supplied method after the specified function</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="obj" type="" usage="required">
				<description> the object hosting the method to displace</description>
			</parameter>
			<parameter name="sFn" type="string" usage="required">
				<description> the name of the method to displace</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> The execution context for fn</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>handle for the subscription</return-description>
		</method>
		<method name="before" scope="static">
			<description>Execute the supplied method before the specified function</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="obj" type="" usage="required">
				<description> the object hosting the method to displace</description>
			</parameter>
			<parameter name="sFn" type="string" usage="required">
				<description> the name of the method to displace</description>
			</parameter>
			<parameter name="c" type="" usage="required">
				<description> The execution context for fn</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>handle for the subscription</return-description>
		</method>
		</methods>
	</class>
	<class type="Anim" superclass="Base">
		<description>A class for constructing animation instances.</description>
		<constructors>
		<constructor scope="instance">
			<description>A class for constructing animation instances.</description>
			<return-types>
				<return-type type="Anim" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="behaviors" type="undefined" scope="static">
			<description>Bucket for custom getters and setters</description>
		</property>
		<property name="DEFAULT_GETTER" type="undefined" scope="static">
			<description>The default getter to use when getting object properties.</description>
		</property>
		<property name="DEFAULT_UNIT" type="undefined" scope="static">
			<description>The default unit to use with properties that pass the RE_DEFAULT_UNIT test.</description>
		</property>
		<property name="RE_DEFAULT_UNIT" type="undefined" scope="static">
			<description>Regex of properties that should use the default unit.</description>
		</property>
		<property name="DEFAULT_SETTER" type="undefined" scope="static">
			<description>The default setter to use when setting object properties.</description>
		</property>
		</properties>
		<methods>
		<method name="getBezier" scope="static">
			<description>Get the current position of the animated element based on t. Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y) At least 2 points are required (start and end). First point is start. Last point is end. Additional control points are optional.</description>
			<parameters>
			<parameter name="points" type="Array" usage="required">
				<description> An array containing Bezier points</description>
			</parameter>
			<parameter name="t" type="Number" usage="required">
				<description> A number between 0 and 1 which is the basis for determining current position</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array containing int x and y member data</return-description>
		</method>
		<method name="stop" scope="static">
			<description>Stops all animation instances.</description>
		</method>
		<method name="pause" scope="static">
			<description>Pauses all animation instances.</description>
		</method>
		<method name="run" scope="static">
			<description>Runs all animation instances.</description>
		</method>
		<method name="_runFrame" scope="static" visibility="private">
			<description>Called per Interval to handle each animation frame.</description>
		</method>
		</methods>
	</class>
	<class type="Plugin.DDProxy" superclass="Base">
		<description>This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node.</description>
		<constructors>
		<constructor scope="instance">
			<description>This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node.</description>
			<return-types>
				<return-type type="Plugin.DDProxy" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="proxy" type="{String}" scope="instance">
			<description>The Proxy instance will be placed on the Drag instance under the proxy namespace.</description>
		</property>
		<property name="_hands" type="undefined" scope="instance" visibility="private">
			<description>Holds the event handles for setting the proxy</description>
		</property>
		</properties>
		<methods>
		<method name="_init" scope="instance" visibility="private">
			<description>Handler for the proxy config attribute</description>
		</method>
		</methods>
	</class>
	<class type="DD.DDM" superclass="Base">
		<description>Provides the base Drag Drop Manger required for making a Node draggable.</description>
		<constructors>
		<constructor scope="instance">
			<description>Provides the base Drag Drop Manger required for making a Node draggable.</description>
			<return-types>
				<return-type type="DD.DDM" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_active" type="{Boolean}" scope="instance">
			<description>flag set when we activate our first drag, so DDM can start listening for events.</description>
		</property>
		<property name="_noShim" type="{Boolean}" scope="instance" visibility="private">
			<description>This flag turns off the use of the mouseover/mouseout shim. It should not be used unless you know what you are doing.</description>
		</property>
		<property name="_pg" type="{Node}" scope="instance" visibility="private">
			<description>The shim placed over the screen to track the mousemove event.</description>
		</property>
		<property name="useHash" type="{Boolean}" scope="instance">
			<description>Should we only check targets that are in the viewport on drags (for performance), default: true</description>
		</property>
		<property name="activeDrag" type="{Drag}" scope="instance">
			<description>A reference to the currently active draggable object.</description>
		</property>
		<property name="POINT" type="Number" scope="instance" visibility="private">
			<description>In point mode, a Drop is targeted by the cursor being over the Target</description>
		</property>
		<property name="_activeShims" type="{Array}" scope="instance" visibility="private">
			<description>Placeholder for all active shims on the page</description>
		</property>
		<property name="otherDrops" type="{Object}" scope="instance">
			<description>An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)</description>
		</property>
		<property name="validDrops" type="{Array}" scope="instance">
			<description>An array of the valid Drop Targets for this interaction.</description>
		</property>
		<property name="CSS_PREFIX" type="{String}" scope="instance">
			<description>The PREFIX to attach to all DD CSS class names</description>
		</property>
		<property name="STRICT" type="Number" scope="instance" visibility="private">
			<description>In strict mode, a Drop is targeted by the &quot;entire&quot; drag node being over the Target</description>
		</property>
		<property name="mode" type="Number" scope="instance" visibility="private">
			<description>The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict</description>
		</property>
		<property name="INTERSECT" type="Number" scope="instance" visibility="private">
			<description>In intersect mode, a Drop is targeted by &quot;part&quot; of the drag node being over the Target</description>
		</property>
		<property name="_debugShim" type="{Boolean}" scope="instance" visibility="private">
			<description>Set this to true to set the shims opacity to .5 for debugging it, default: false.</description>
		</property>
		<property name="targets" type="{Array}" scope="instance">
			<description>All of the Targets</description>
		</property>
		<property name="_drags" type="{Array}" scope="instance" visibility="private">
			<description>Holder for all registered drag elements.</description>
		</property>
		<property name="activeDrop" type="{Object}" scope="instance">
			<description>A reference to the active Drop Target</description>
		</property>
		</properties>
		<methods>
		<method name="_calcTickArray" scope="instance" visibility="private">
			<description>This method is used with the tickXArray and tickYArray config options</description>
			<parameters>
			<parameter name="pos" type="Number" usage="required">
				<description> The current X or Y position</description>
			</parameter>
			<parameter name="ticks" type="Number" usage="required">
				<description> The array containing our custom tick positions.</description>
			</parameter>
			<parameter name="off1" type="Number" usage="required">
				<description> The min offset that we can't pass (region)</description>
			</parameter>
			<parameter name="off2" type="Number" usage="required">
				<description> The max offset that we can't pass (region)</description>
			</parameter>
			</parameters>
			<return-description>The tick position</return-description>
		</method>
		<method name="cssSizestoObject" scope="instance" visibility="private">
			<description>//TODO Private, rename??...</description>
			<parameters>
			<parameter name="gutter" type="String" usage="required">
				<description> CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The gutter Object Literal.</return-description>
		</method>
		<method name="_move" scope="instance" visibility="private">
			<description>Internal listener for the mousemove DOM event to pass to the Drag's move method.</description>
			<parameters>
			<parameter name="ev" type="Event.Facade" usage="required">
				<description> The Dom mousemove Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_unregTarget" scope="instance" visibility="private">
			<description>Remove the passed in Target from the targets collection</description>
			<parameters>
			<parameter name="drop" type="Object" usage="required">
				<description> The Target to remove from the targets collection</description>
			</parameter>
			</parameters>
		</method>
		<method name="_deactivateTargets" scope="instance" visibility="private">
			<description>This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..</description>
		</method>
		<method name="stopDrag" scope="instance">
			<description>Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.</description>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="getDrop" scope="instance">
			<description>Get a valid Drop instance back from a Node or a selector string, false otherwise</description>
			<parameters>
			<parameter name="node" type="String|Object" usage="required">
				<description> The Node instance or Selector string to check for a valid Drop Object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="_start" scope="instance" visibility="private">
			<description>Internal method used by Drag to signal the start of a drag operation</description>
		</method>
		<method name="_dropMove" scope="instance" visibility="private">
			<description>This method is called when the move method is called on the Drag Object.</description>
		</method>
		<method name="_unregDrag" scope="instance" visibility="private">
			<description>Remove this drag object from the DDM._drags array.</description>
			<parameters>
			<parameter name="d" type="Drag" usage="required">
				<description> The drag object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearCache" scope="instance">
			<description>Clears the cache data used for this interaction.</description>
		</method>
		<method name="_hasActiveShim" scope="instance" visibility="private">
			<description>This method checks the _activeShims Object to see if there is a shim active.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_startDrag" scope="instance" visibility="private">
			<description>Factory method to be overwritten by other DDM's</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The x position of the drag element</description>
			</parameter>
			<parameter name="y" type="Number" usage="required">
				<description> The y position of the drag element</description>
			</parameter>
			<parameter name="w" type="Number" usage="required">
				<description> The width of the drag element</description>
			</parameter>
			<parameter name="h" type="Number" usage="required">
				<description> The height of the drag element</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createFrame" scope="instance" visibility="private">
			<description>Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value</description>
		</method>
		<method name="_addActiveShim" scope="instance" visibility="private">
			<description>Adds a Drop Target to the list of active shims</description>
			<parameters>
			<parameter name="d" type="Object" usage="required">
				<description> The Drop instance to add to the list.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_end" scope="instance" visibility="private">
			<description>Internal method used by Drag to signal the end of a drag operation</description>
		</method>
		<method name="getBestMatch" scope="instance">
			<description>This method will gather the area for all potential targets and see which has the hightest covered area and return it.</description>
			<parameters>
			<parameter name="drops" type="Array" usage="required">
				<description> An Array of drops to scan for the best match.</description>
			</parameter>
			<parameter name="all" type="Boolean" usage="required">
				<description> If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object|Array" />
			</return-types>
		</method>
		<method name="_removeActiveShim" scope="instance" visibility="private">
			<description>Removes a Drop Target to the list of active shims</description>
			<parameters>
			<parameter name="d" type="Object" usage="required">
				<description> The Drop instance to remove from the list.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isOverTarget" scope="instance">
			<description>Check to see if the Drag element is over the target, method varies on current mode</description>
			<parameters>
			<parameter name="drop" type="Object" usage="required">
				<description> The drop to check against</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_createPG" scope="instance" visibility="private">
			<description>Creates the shim and adds it's listeners to it.</description>
		</method>
		<method name="_activateTargets" scope="instance" visibility="private">
			<description>Clear the cache and activate the shims of all the targets</description>
		</method>
		<method name="_addValid" scope="instance" visibility="private">
			<description>Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.</description>
			<parameters>
			<parameter name="drop" type="Object" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="syncActiveShims" scope="instance">
			<description>This method will sync the position of the shims on the Drop Targets that are currently active.</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> Resize/sync all Targets.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_removeValid" scope="instance" visibility="private">
			<description>Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.</description>
			<parameters>
			<parameter name="drop" type="Object" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Self" />
			</return-types>
		</method>
		<method name="_regTarget" scope="instance" visibility="private">
			<description>Add the passed in Target to the targets collection</description>
			<parameters>
			<parameter name="t" type="Object" usage="required">
				<description> The Target to add to the targets collection</description>
			</parameter>
			</parameters>
		</method>
		<method name="_endDrag" scope="instance" visibility="private">
			<description>Factory method to be overwritten by other DDM's</description>
		</method>
		<method name="_setupListeners" scope="instance" visibility="private">
			<description>Add the document listeners.</description>
		</method>
		<method name="_pg_deactivate" scope="instance" visibility="private">
			<description>Deactivates the shim</description>
		</method>
		<method name="_pg_activate" scope="instance" visibility="private">
			<description>Activates the shim</description>
		</method>
		<method name="_lookup" scope="instance" visibility="private">
			<description>Filters the list of Drops down to those in the viewport.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The valid Drop Targets that are in the viewport.</return-description>
		</method>
		<method name="_calcTicks" scope="instance" visibility="private">
			<description>Helper method to calculate the tick offsets for a given position</description>
			<parameters>
			<parameter name="pos" type="Number" usage="required">
				<description> The current X or Y position</description>
			</parameter>
			<parameter name="start" type="Number" usage="required">
				<description> The start X or Y position</description>
			</parameter>
			<parameter name="tick" type="Number" usage="required">
				<description> The X or Y tick increment</description>
			</parameter>
			<parameter name="off1" type="Number" usage="required">
				<description> The min offset that we can't pass (region)</description>
			</parameter>
			<parameter name="off2" type="Number" usage="required">
				<description> The max offset that we can't pass (region)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new position based on the tick calculation</return-description>
		</method>
		<method name="_setFrame" scope="instance" visibility="private">
			<description>If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element. If positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.</description>
		</method>
		<method name="getDrag" scope="instance">
			<description>Get a valid Drag instance back from a Node or a selector string, false otherwise</description>
			<parameters>
			<parameter name="node" type="String|Object" usage="required">
				<description> The Node instance or Selector string to check for a valid Drag Object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="_regDrag" scope="instance" visibility="private">
			<description>Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.</description>
			<parameters>
			<parameter name="d" type="Drag" usage="required">
				<description> The Drag object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_pg_size" scope="instance" visibility="private">
			<description>Sizes the shim on: activatation, window:scroll, window:resize</description>
		</method>
		<method name="_handleTargetOver" scope="instance" visibility="private">
			<description>This method execs _handleTargetOver on all valid Drop Targets</description>
		</method>
		<method name="_setDragMode" scope="instance" visibility="private">
			<description>Handler for dragMode attribute setter.</description>
			<parameters>
			<parameter name="String/Number" type="" usage="required">
				<description> The Number value or the String for the DragMode to default all future drag instances to.</description>
			</parameter>
			</parameters>
			<return-description>Number The Mode to be set</return-description>
		</method>
		</methods>
	</class>
	<class type="WidgetStack">
		<description>Widget extension, which can be used to add stackable (z-index) support to the 
base Widget class along with a shimming solution, through the 
&lt;a href=&quot;Base.html#method_build&quot;&gt;Base.build&lt;/a&gt; method.</description>
		<properties>
		<property name="WidgetStack.SHIM_TEMPLATE" type="String" scope="static">
			<description>Default markup template used to generate the shim element.</description>
		</property>
		<property name="WidgetStack.STACKED_CLASS_NAME" type="String" scope="static">
			<description>Default class used to mark the boundingBox of a stacked widget.</description>
		</property>
		<property name="WidgetStack.SHIM_CLASS_NAME" type="String" scope="static">
			<description>Default class used to mark the shim element</description>
		</property>
		<property name="WidgetStack.HTML_PARSER" type="Object" scope="static">
			<description>The HTML parsing rules for the WidgetStack class.</description>
		</property>
		<property name="WidgetStack.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration introduced by WidgetStack.</description>
		</property>
		</properties>
		<methods>
		<method name="sizeShim" scope="instance">
			<description>For IE6, synchronizes the size and position of iframe shim to that of Widget bounding box which it is protecting. For all other browsers, this method does not do anything.</description>
		</method>
		<method name="_renderShim" scope="instance" visibility="private">
			<description>Creates the shim element and adds it to the DOM</description>
		</method>
		<method name="_detachStackHandles" scope="instance" visibility="private">
			<description>Detaches any handles stored for the provided key</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> handleKey The key defining the group of handles which should be detached</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetZIndex" scope="instance">
			<description>Updates the UI to reflect the zIndex value passed in.</description>
			<parameters>
			<parameter name="zIndex" type="number" usage="required">
				<description> The zindex to be reflected in the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncUIStack" scope="instance">
			<description>Synchronizes the UI to match the Widgets stack state. This method in invoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.</description>
		</method>
		<method name="_setZIndex" scope="instance">
			<description>Default setter for zIndex attribute changes. Normalizes zIndex values to numbers, converting non-numerical values to 0.</description>
			<parameters>
			<parameter name="zIndex" type="String | Number" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Normalized zIndex</return-description>
		</method>
		<method name="_destroyShim" scope="instance" visibility="private">
			<description>Removes the shim from the DOM, and detaches any related event listeners.</description>
		</method>
		<method name="_uiSetShim" scope="instance">
			<description>Updates the UI to enable/disable the shim. If the widget is not currently visible, creation of the shim is deferred until it is made visible, for performance reasons.</description>
			<parameters>
			<parameter name="enable" type="boolean" usage="required">
				<description> If true, creates/renders the shim, if false, removes it.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getShimTemplate" scope="instance" visibility="private">
			<description>Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.</description>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>node A new shim Node instance.</return-description>
		</method>
		<method name="_renderUIStack" scope="instance">
			<description>Creates/Initializes the DOM to support stackability. &lt;p&gt; This method in invoked after renderUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_renderShimDeferred" scope="instance" visibility="private">
			<description>Sets up change handlers for the visible attribute, to defer shim creation/rendering until the Widget is made visible.</description>
		</method>
		<method name="_afterZIndexChange" scope="instance">
			<description>Default attribute change listener for the zIndex attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterShimChange" scope="instance">
			<description>Default attribute change listener for the shim attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_bindUIStack" scope="instance">
			<description>Binds event listeners responsible for updating the UI state in response to Widget stack related state changes. &lt;p&gt; This method is invoked after bindUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_addShimResizeHandlers" scope="instance" visibility="private">
			<description>Sets up event listeners to resize the shim when the size of the Widget changes. &lt;p&gt; NOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to resize the shim purely through CSS, when the Widget does not have an explicit width/height set. &lt;/p&gt;</description>
		</method>
		</methods>
	</class>
	<class type="Test.Case">
		<description>Test case containing various tests to run.</description>
		<constructors>
		<constructor scope="instance">
			<description>Test case containing various tests to run.</description>
			<return-types>
				<return-type type="Test.Case" />
			</return-types>
			<parameters>
			<parameter name="template" type="" usage="required">
				<description> An object containing any number of test methods, other methods,
an optional name, and anything else the test case needs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_should" type="undefined" scope="instance">
			<description>Special rules for the test case. Possible subobjects are fail, for tests that should fail, and error, for tests that should throw an error.</description>
		</property>
		<property name="name" type="undefined" scope="instance">
			<description>Name for the test case.</description>
		</property>
		</properties>
		<methods>
		<method name="tearDown" scope="instance">
			<description>Function to run after each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setUp" scope="instance">
			<description>Function to run before each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="wait" scope="instance">
			<description>Causes the test case to wait a specified amount of time and then continue executing the given code.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="optional">
				<description> (Optional) The function to run after the delay. If omitted, the TestRunner will wait until resume() is called.</description>
			</parameter>
			<parameter name="delay" type="int" usage="optional">
				<description> (Optional) The number of milliseconds to wait before running the function. If omitted, defaults to zero.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="resume" scope="instance">
			<description>Resumes a paused test and runs the given function.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="optional">
				<description> (Optional) The function to run. If omitted, the test automatically passes.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="Assert">
		<description>The Assert object provides functions to test JavaScript values against
known and expected results. Whenever a comparison (assertion) fails,
an error is thrown.</description>
		<properties>
		<property name="_asserts" type="int" scope="instance" visibility="private">
			<description>The number of assertions performed.</description>
		</property>
		</properties>
		<methods>
		<method name="isTrue" scope="static">
			<description>Asserts that a value is true. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFalse" scope="static">
			<description>Asserts that a value is false. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotNull" scope="static">
			<description>Asserts that a value is not null. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="fail" scope="static">
			<description>Forces an assertion error to occur.</description>
			<parameters>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display with the failure.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFunction" scope="static">
			<description>Asserts that a value is a function.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNaN" scope="static">
			<description>Asserts that a value is not a number.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isBoolean" scope="static">
			<description>Asserts that a value is a Boolean.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areNotSame" scope="static">
			<description>Asserts that a value is not the same as another. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotNaN" scope="static">
			<description>Asserts that a value is not the special NaN value.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areNotEqual" scope="static">
			<description>Asserts that a value is not equal to another. This uses the double equals sign so type cohersion may occur.</description>
			<parameters>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areSame" scope="static">
			<description>Asserts that a value is the same as another. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getCount" scope="static">
			<description>Returns the number of assertions that have been performed.</description>
		</method>
		<method name="isUndefined" scope="static">
			<description>Asserts that a value is undefined. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isArray" scope="static">
			<description>Asserts that a value is an array.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="Y.assert" scope="static">
			<description>Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown and the test fails.</description>
			<parameters>
			<parameter name="condition" type="Boolean" usage="required">
				<description> The condition to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="required">
				<description> The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isTypeOf" scope="static">
			<description>Asserts that a value is of a particular type.</description>
			<parameters>
			<parameter name="expectedType" type="String" usage="required">
				<description> The expected type of the variable.</description>
			</parameter>
			<parameter name="actualValue" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_formatMessage" scope="static">
			<description>Formats a message so that it can contain the original assertion message in addition to the custom message.</description>
			<parameters>
			<parameter name="customMessage" type="String" usage="required">
				<description> The message passed in by the developer.</description>
			</parameter>
			<parameter name="defaultMessage" type="String" usage="required">
				<description> The message created by the error by default.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The final error message, containing either or both.</return-description>
		</method>
		<method name="_increment" scope="static">
			<description>Increments the number of assertions that have been performed.</description>
		</method>
		<method name="areEqual" scope="static">
			<description>Asserts that a value is equal to another. This uses the double equals sign so type cohersion may occur.</description>
			<parameters>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNumber" scope="static">
			<description>Asserts that a value is a number.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isObject" scope="static">
			<description>Asserts that a value is an object.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isString" scope="static">
			<description>Asserts that a value is a string.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotUndefined" scope="static">
			<description>Asserts that a value is not undefined. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNull" scope="static">
			<description>Asserts that a value is null. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_reset" scope="static">
			<description>Resets the number of assertions that have been performed to 0.</description>
		</method>
		<method name="isInstanceOf" scope="static">
			<description>Asserts that a value is an instance of a particular object. This may return incorrect results when comparing objects from one frame to constructors in another frame. For best results, don't use in a cross-frame manner.</description>
			<parameters>
			<parameter name="expected" type="Function" usage="required">
				<description> The function that the object should be an instance of.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The object to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="Y.fail" scope="static">
			<description>Forces an assertion error to occur. Shortcut for Y.Assert.fail().</description>
			<parameters>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display with the failure.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Slider" superclass="Widget">
		<description>Create a slider to represent an integer value between a given minimum and
maximum.  Sliders may be aligned vertically or horizontally, based on the
&lt;code&gt;axis&lt;/code&gt; configuration.</description>
		<constructors>
		<constructor scope="instance">
			<description>Create a slider to represent an integer value between a given minimum and
maximum.  Sliders may be aligned vertically or horizontally, based on the
&lt;code&gt;axis&lt;/code&gt; configuration.</description>
			<return-types>
				<return-type type="Slider" />
			</return-types>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description>  Configuration object</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Slider.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration of the Widget.</description>
		</property>
		<property name="_thumbSize" type="Number" scope="instance">
			<description>Pixel dimension of the thumb Node's width for X axis Sliders or height for Y axis Sliders. Used with _factor to calculate positional coordinates for the thumb.</description>
		</property>
		<property name="_key" type="Object" scope="instance">
			<description>Collection of object property names from the appropriate hash set in Slider._AXIS_KEYS.</description>
		</property>
		<property name="_factor" type="Number" scope="instance">
			<description>Factor used to translate positional coordinates (e.g. left or top) to the Slider's value.</description>
		</property>
		<property name="Slider._AXIS_KEYS" type="Object" scope="static">
			<description>Object property names used for respective X and Y axis Sliders (e.g. &amp;quot;left&amp;quot; vs. &amp;quot;top&amp;quot; for placing the thumb according to its representative value).</description>
		</property>
		<property name="Slider.NAME" type="String" scope="static">
			<description>The identity of the widget.</description>
		</property>
		<property name="_disabled" type="Boolean" scope="instance">
			<description>Deferred value for the disabled attribute when stalled (see _stall property).</description>
		</property>
		<property name="Slider.HTML_PARSER" type="Object" scope="static">
			<description>Static Object hash used to capture existing markup for progressive enhancement. Keys correspond to config attribute names and values are selectors used to inspect the contentBox for an existing node structure.</description>
		</property>
		<property name="_railSize" type="Number" scope="instance">
			<description>Pixel dimension of the rail Node's width for X axis Sliders or height for Y axis Sliders. Used with _factor to calculate positional coordinates for the thumb.</description>
		</property>
		<property name="_thumbOffset" type="Number" scope="instance">
			<description>Pixel offset of the point in the thumb element from its top/left edge to where the value calculation should take place. By default, this is calculated to half the width of the thumb, causing the value to be marked from the center of the thumb.</description>
		</property>
		<property name="_stall" type="Object" scope="instance">
			<description>Object returned from temporary subscription to disabledChange event to defer setting the disabled state while Slider is loading the thumb image.</description>
		</property>
		</properties>
		<methods>
		<method name="_setThumbFn" scope="instance">
			<description>Setter applied to the input when updating the thumb attribute. Input can be a Node, raw HTMLElement, or a selector string to locate it.</description>
			<parameters>
			<parameter name="v" type="Node|String|HTMLElement" usage="required">
				<description> The thumb element Node or selector</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The Node if found.  Otherwise null.</return-description>
		</method>
		<method name="_resetDDCacheRegion" scope="instance">
			<description>Resets the cached region inside the DD constrain instance to support repositioning the Slider after instantiation.</description>
		</method>
		<method name="_defSyncFn" scope="instance">
			<description>The default synchronization behavior, updating the Slider's DOM state to match the current attribute values.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Internal sync event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterRailSizeChange" scope="instance">
			<description>Updates the Slider UI in response to change in the railSize attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> railSizeChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defPositionThumbFn" scope="instance">
			<description>Calls _uiPositionThumb with the value of the custom event's &amp;quot;offset&amp;quot; property.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the positionThumb custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isImageLoading" scope="instance">
			<description>Used to determine if there is a current or pending request for the thumbImage resource.</description>
			<parameters>
			<parameter name="img" type="Node" usage="required">
				<description> &lt;code&gt;img&lt;/code&gt; Node</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="initializer" scope="instance">
			<description>Construction logic executed durint Slider instantiation. Subscribes to after events for min, max, and railSize. Publishes custom events including slideStart and slideEnd.</description>
		</method>
		<method name="_uiSetRailSize" scope="instance">
			<description>Stores the rail Node's pixel height or width, depending on the Slider's axis, for use in calculating thumb position from the value.</description>
		</method>
		<method name="_setFactor" scope="instance">
			<description>Calculates the multiplier used to translate the value into a thumb position.</description>
		</method>
		<method name="_setRailOffsetXY" scope="instance">
			<description>Store the current XY position of the rail Node on the page. For use in calculating thumb position from value.</description>
		</method>
		<method name="_afterValueChange" scope="instance">
			<description>Fires the internal positionThumb event in response to a change in the value attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> valueChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setDDGutter" scope="instance">
			<description>Passes the gutter attribute value to the DDConstrain gutter attribute.</description>
		</method>
		<method name="_setThumbImageFn" scope="instance">
			<description>Setter applied to the input when updating the thumbImage attribute. Input can be a Node, raw HTMLElement, selector string to locate it, or the URL for an image resource. String input will be treated as a selector. If no element is found using the selector, an &lt;code&gt;img&lt;/code&gt; Node will be created with the string used as the &lt;code&gt;src&lt;/code&gt; attribute.</description>
			<parameters>
			<parameter name="v" type="Node|String|HTMLElement" usage="required">
				<description> The thumbImage element Node, selector, or image URL</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The Node if found or created.  Otherwise null.</return-description>
		</method>
		<method name="_uiPositionThumb" scope="instance">
			<description>Places the thumb at a particular X or Y location based on the configured axis.</description>
			<parameters>
			<parameter name="xy" type="Number" usage="required">
				<description> the desired left or top pixel position of the thumb in relation to the rail Node.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateNewValue" scope="instance">
			<description>Validator applied to the value attribute.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the value attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_setAxisFn" scope="instance">
			<description>Setter applied to the input when updating the axis attribute.</description>
			<parameters>
			<parameter name="v" type="String" usage="required">
				<description> proposed value for the axis attribute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>lowercased first character of the input string</return-description>
		</method>
		<method name="_setThumbOffset" scope="instance">
			<description>Establishes the point in the thumb that should align to the rail position representing the calculated value.</description>
		</method>
		<method name="_validateNewThumbImage" scope="instance">
			<description>Validator applied to the thumbImage attribute. Rejects all values after the Slider has been rendered.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the thumbImage attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_afterMaxChange" scope="instance">
			<description>Updates the Slider UI in response to change in the max attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> maxChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateNewThumb" scope="instance">
			<description>Validator applied to the thumb attribute. Rejects all values after the Slider has been rendered.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the thumb attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="bindUI" scope="instance">
			<description>Creates the Y.DD instance used to handle the thumb movement and binds Slider interaction to the configured value model.</description>
		</method>
		<method name="_initThumbImage" scope="instance">
			<description>Ensures the thumbImage is a child of the thumb element.</description>
		</method>
		<method name="_bindThumbDD" scope="instance">
			<description>Creates the Y.DD instance used to handle the thumb interaction.</description>
		</method>
		<method name="_stallDisabledChange" scope="instance">
			<description>Method subscribed to the disabledChange event when thumbImage is being loaded. Prevents manually enabling the Slider until the thumbImage resource is resolved. Intended value is stored during load and set upon completion.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Change event for the disabled attribute</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defThumbDragFn" scope="instance">
			<description>The default value update behavior in response to Slider thumb interaction. Calculates the value using stored offsets, the _factor multiplier and the min value.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the internal thumbDrag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initRailDD" scope="instance">
			<description>Subscribes to the rail Node's mousedown event to actuate the thumb when backgroundEnabled is true.</description>
		</method>
		<method name="setValue" scope="instance">
			<description>Convenience method for updating the current value of the Slider. Equivalent to &lt;code&gt;slider.set(&amp;quot;value&amp;quot;,val)&lt;/code&gt;.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> the new value</description>
			</parameter>
			</parameters>
		</method>
		<method name="_imageLoaded" scope="instance">
			<description>Event handler assigned to the thumbImage's load and error event if it was not loaded prior to instantiation. Restores the disabled value.</description>
			<parameters>
			<parameter name="img" type="Node" usage="required">
				<description> The thumbImage Node</description>
			</parameter>
			<parameter name="e" type="Event" usage="required">
				<description> load or error event fired by the thumbImage</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateNewMax" scope="instance">
			<description>Validator applied to the max attribute.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the max attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_refresh" scope="instance">
			<description>Common handler to call syncUI in response to change events that occurred after the Slider is rendered.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> An attribute change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetThumbSize" scope="instance">
			<description>Captures the thumb's pixel height or width (depending on the Slider's axis) for use in positioning calculations.</description>
		</method>
		<method name="_onDDEndDrag" scope="instance">
			<description>Fires the slideEnd event.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the DD instance's drag:end custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateNewRail" scope="instance">
			<description>Validator applied to the rail attribute. Rejects all values after the Slider has been rendered.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the rail attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_handleRailMouseDown" scope="instance">
			<description>If the Slider is not disabled and railEnabled is true, moves the thumb to the mousedown position and hands control over to DD.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> Mousedown event facade</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isImageLoaded" scope="instance">
			<description>Used to determine if the image resource loaded successfully or there was an error. NOTES: &lt;ul&gt; &lt;li&gt;img load error fired xbrowser for image resources not yet resolved&lt;/li&gt; &lt;li&gt;img.complete reports false in IE for images not yet loaded as well as images that failed to load&lt;/li&gt; &lt;li&gt;img.complete true &amp;&amp; img.naturalWidth == 0 in FF and Safari indicate image failed to load&lt;/li&gt; &lt;li&gt;img.complete &amp;&amp; img.width == 0 in Opera indicates image failed to load&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="img" type="Node" usage="required">
				<description> &lt;code&gt;img&lt;/code&gt; Node</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_afterThumbChange" scope="instance">
			<description>Replaces the thumb Node in response to a change in the thumb attribute. This only has effect after the Slider is rendered.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> thumbChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_convertValueToOffset" scope="instance">
			<description>Converts a value to a pixel offset for the thumb position on the rail.</description>
			<parameters>
			<parameter name="v" type="Number" usage="required">
				<description> value between the Slider's min and max</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterMinChange" scope="instance">
			<description>Updates the Slider UI in response to change in the min attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> minChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_convertOffsetToValue" scope="instance">
			<description>Converts a pixel offset of the thumb on the rail to a value.</description>
			<parameters>
			<parameter name="v" type="Number" usage="required">
				<description> pixel offset of the thumb on the rail</description>
			</parameter>
			</parameters>
		</method>
		<method name="_scheduleSync" scope="instance">
			<description>Binds to the load and error event on the thumbImage to sync the DOM state with the attribute settings when the image resource is resolved. The Slider is disabled while it waits.</description>
		</method>
		<method name="_initThumb" scope="instance">
			<description>&lt;p&gt;Creates the thumb element (not image) if not provided and not discovered via HTML_PARSER. If the thumb is an &lt;code&gt;img&lt;/code&gt; element but no thumbImage configured or discovered, reassigns the thumb element to the thumbImage and defaults the thumb element as a div.&lt;/p&gt; &lt;p&gt;Makes sure the thumb is a child of the rail element and calls _initThumbImage if thumbImage is provided.&lt;/p&gt;</description>
		</method>
		<method name="_validateNewRailSize" scope="instance">
			<description>Validator applied to the railSize attribute. Only strings of css size values (e.g. '200px') are allowed.</description>
			<parameters>
			<parameter name="v" type="String" usage="required">
				<description> proposed value for the railSize attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_onDDStartDrag" scope="instance">
			<description>Caches the current page position of the rail element and fires the slideStart event in response to the DD's drag:start.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the DD instance's drag:start custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="syncUI" scope="instance">
			<description>Synchronizes the DOM state with the attribute settings (most notably railSize and value). If thumbImage is provided and is still loading, sync is delayed until it is complete, since the image's dimensions are taken into consideration for calculations.</description>
		</method>
		<method name="_validateNewAxis" scope="instance">
			<description>Validator applied to new values for the axis attribute. Only &amp;quot;x&amp;quot; and &amp;quot;y&amp;quot; are permitted.</description>
			<parameters>
			<parameter name="v" type="String" usage="required">
				<description> proposed value for the axis attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_afterDisabledChange" scope="instance">
			<description>Locks or unlocks the DD instance in response to a change in the disabled attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> disabledChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="getValue" scope="instance">
			<description>Convenience method for accessing the current value of the Slider. Equivalent to &lt;code&gt;slider.get(&amp;quot;value&amp;quot;)&lt;/code&gt;.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the value</return-description>
		</method>
		<method name="_initRail" scope="instance">
			<description>Creates the rail element if not provided and not discovered via HTML_PARSER.</description>
		</method>
		<method name="_ready" scope="instance">
			<description>Applies a class to the content box if the thumbImage failed to resolve, the fires the internal sync event triggering a sync between UI and state.</description>
			<parameters>
			<parameter name="img" type="Node" usage="required">
				<description> the thumbImage Node</description>
			</parameter>
			<parameter name="error" type="Boolean" usage="required">
				<description> Indicates an error while loading the thumbImage</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setRailFn" scope="instance">
			<description>Setter applied to the input when updating the rail attribute. Input can be a Node, raw HTMLElement, or a selector string to locate it.</description>
			<parameters>
			<parameter name="v" type="Node|String|HTMLElement" usage="required">
				<description> The rail element Node or selector</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The Node if found.  Otherwise null.</return-description>
		</method>
		<method name="_validateNewMin" scope="instance">
			<description>Validator applied to the min attribute.</description>
			<parameters>
			<parameter name="v" type="MIXED" usage="required">
				<description> proposed value for the min attribute</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_isDisplayNone" scope="instance">
			<description>Helper function to search up the ancestor axis looking for a node with style display: none. This is passed as a function to node.ancestor(..) to test if a given node is in the displayed DOM and can get accurate positioning information.</description>
			<parameters>
			<parameter name="el" type="Node" usage="required">
				<description> ancestor node as the function walks up the parent axis</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the node is styled with display: none</return-description>
		</method>
		<method name="_afterThumbImageChange" scope="instance">
			<description>Sets or replaces the thumb's contained &lt;code&gt;img&lt;/code&gt; Node with the new Node in response to a change in the thumbImage attribute. This only has effect after the Slider is rendered.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> thumbImageChange custom event</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderUI" scope="instance">
			<description>Create the DOM structure for the Slider.</description>
		</method>
		<method name="_onDDDrag" scope="instance">
			<description>Fires the thumbDrag event to queue Slider value update.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the DD instance's drag:drag custom event</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="Assert.UnexpectedValue" superclass="Assert.Error">
		<description>UnexpectedValue is subclass of Error that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
		<constructors>
		<constructor scope="instance">
			<description>UnexpectedValue is subclass of Error that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
			<return-types>
				<return-type type="Assert.UnexpectedValue" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="unexpected" type="Object" scope="instance">
			<description>The unexpected value.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="getMessage" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. The message contains information about the unexpected value that was encountered.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="config">
		<description>The config object contains all of the configuration options for
the YUI instance.  This object is supplied by the implementer 
when instantiating a YUI instance.  Some properties have default
values if they are not supplied by the implementer.</description>
		<properties>
		<property name="comboBase" type="string" scope="instance">
			<description>The YUI combo service base dir. Ex: http://yui.yahooapis.com/combo? For dynamic loading.</description>
		</property>
		<property name="cssAttributes" type="string" scope="instance">
			<description>Object literal containing attributes to add to dynamically loaded link nodes.</description>
		</property>
		<property name="force" type="string[]" scope="instance">
			<description>A list of modules that should always be loaded when required, even if already present on the page.</description>
		</property>
		<property name="locale" type="string" scope="instance">
			<description>The default locale</description>
		</property>
		<property name="win" type="Window" scope="instance">
			<description>The window/frame that this instance should operate in.</description>
		</property>
		<property name="logExclude" type="object" scope="instance">
			<description>A hash of log sources that should be not be logged. If specified, all sources are logged if not on this list.</description>
		</property>
		<property name="onCSS" type="function" scope="instance">
			<description>Callback for the 'CSSComplete' event. When dynamically loading YUI components with CSS, this property fires when the CSS is finished loading but script loading is still ongoing. This provides an opportunity to enhance the presentation of a loading page a little bit before the entire loading process is done.</description>
		</property>
		<property name="filters" type="object" scope="instance">
			<description>Hash of per-component filter specification. If specified for a given component, this overrides the filter config For dynamic loading.</description>
		</property>
		<property name="pollInterval" type="int" scope="instance">
			<description>The default interval when polling in milliseconds.</description>
		</property>
		<property name="ignore" type="string[]" scope="instance">
			<description>A list of modules that should never be dynamically loaded</description>
		</property>
		<property name="dateFormat" type="string" scope="instance">
			<description>The default date format</description>
		</property>
		<property name="charset" type="string" scope="instance">
			<description>charset for dynamic nodes</description>
		</property>
		<property name="logInclude" type="object" scope="instance">
			<description>A hash of log sources that should be logged. If specified, only log messages from these sources will be logged.</description>
		</property>
		<property name="windowResizeDelay" type="int" scope="instance">
			<description>The default interval when polling in milliseconds.</description>
		</property>
		<property name="combine" type="boolean" scope="instance">
			<description>Use the YUI combo service to reduce the number of http connections required to load your dependencies. For dynamic loading.</description>
		</property>
		<property name="loaderPath" type="undefined" scope="instance">
			<description>The loader 'path' attribute to the loader itself. This is combined with the 'base' attribute to dynamically load the loader component when boostrapping with the get utility alone.</description>
		</property>
		<property name="purgethreshold" type="int" scope="instance">
			<description>The number of dynamic nodes to insert by default before automatically removing them. This applies to script nodes because remove the node will not make the evaluated script unavailable. Dynamic CSS is not auto purged, because removing a linked style sheet will also remove the style definitions.</description>
		</property>
		<property name="core" type="string[]" scope="instance">
			<description>A list of modules that defines the YUI core (overrides the default).</description>
		</property>
		<property name="timeout" type="int" scope="instance">
			<description>Number of milliseconds before a timeout occurs when dynamically loading nodes. If not set, there is no timeout.</description>
		</property>
		<property name="insertBefore" type="string" scope="instance">
			<description>Node or id for a node that should be used as the insertion point for new nodes For dynamic loading.</description>
		</property>
		<property name="useBrowserConsole" type="boolean" scope="instance">
			<description>Log to the browser console if debug is on and the browser has a supported console.</description>
		</property>
		<property name="jsAttributes" type="string" scope="instance">
			<description>Object literal containing attributes to add to dynamically loaded script nodes.</description>
		</property>
		<property name="base" type="string" scope="instance">
			<description>Base directory for dynamic loading</description>
		</property>
		<property name="injected" type="object" scope="instance">
			<description>Set to true if the yui seed file was dynamically loaded in order to bootstrap components relying on the window load event and the 'domready' custom event.</description>
		</property>
		<property name="doc" type="Document" scope="instance">
			<description>The document associated with the 'win' configuration.</description>
		</property>
		<property name="bootstrap" type="boolean" scope="instance">
			<description>Allows the YUI seed file to fetch the loader component and library metadata to dynamically load additional dependencies.</description>
		</property>
		<property name="modules" type="function" scope="instance">
			<description>A list of module definitions to add to the list of YUI components.  These components can then be dynamically loaded side by side with YUI via the use() method.See Loader.addModule for the supported module metadata.</description>
		</property>
		<property name="fetchCSS" type="undefined" scope="instance">
			<description>Specifies whether or not YUI().use(...) will attempt to load CSS resources at all. Any truthy value will cause CSS dependencies to load when fetching script. The special value 'force' will cause CSS dependencies to be loaded even if no script is needed.</description>
		</property>
		<property name="filter" type="string|object" scope="instance">
			<description>A filter to apply to result urls. This filter will modify the default path for all modules. The default path for the YUI library is the minified version of the files (e.g., event-min.js). The filter property can be a predefined filter or a custom filter. The valid predefined filters are: &lt;dl&gt; &lt;dt&gt;DEBUG&lt;/dt&gt; &lt;dd&gt;Selects the debug versions of the library (e.g., event-debug.js). This option will automatically include the Logger widget&lt;/dd&gt; &lt;dt&gt;RAW&lt;/dt&gt; &lt;dd&gt;Selects the non-minified version of the library (e.g., event.js).&lt;/dd&gt; &lt;/dl&gt; You can also define a custom filter, which must be an object literal containing a search expression and a replace string: &lt;pre&gt; myFilter: &amp;#123; 'searchExp': &quot;-min\\.js&quot;, 'replaceStr': &quot;-debug.js&quot; &amp;#125; &lt;/pre&gt; For dynamic loading.</description>
		</property>
		<property name="secureBase" type="string" scope="instance">
			<description>The secure base dir (not implemented) For dynamic loading.</description>
		</property>
		<property name="root" type="string" scope="instance">
			<description>The root path to prepend to module names for the combo service. Ex: 3.0.0b1/build/ For dynamic loading.</description>
		</property>
		<property name="throwFail" type="boolean" scope="instance">
			<description>If throwFail is set, Y.fail will generate or re-throw a JS Error. Otherwise the failure is logged.</description>
		</property>
		</properties>
	</class>
	<class type="Assert.ShouldFail" superclass="Assert.Error">
		<description>ShouldFail is subclass of Error that is thrown whenever
a test was expected to fail but did not.</description>
		<constructors>
		<constructor scope="instance">
			<description>ShouldFail is subclass of Error that is thrown whenever
a test was expected to fail but did not.</description>
			<return-types>
				<return-type type="Assert.ShouldFail" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
	</class>
	<class type="DataSchema.Text" superclass="DataSchema.Base">
		<description>Text subclass for the DataSchema Utility.</description>
		<methods>
		<method name="apply" scope="static">
			<description>Applies a given schema to given delimited text data.</description>
			<parameters>
			<parameter name="schema" type="Object" usage="required">
				<description> Schema to apply.</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description> Text data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Schema-parsed data.</return-description>
		</method>
		<method name="_parseResults" scope="static">
			<description>Schema-parsed list of results from full data</description>
			<parameters>
			<parameter name="schema" type="Array" usage="required">
				<description> Schema to parse against.</description>
			</parameter>
			<parameter name="text_in" type="String" usage="required">
				<description> Text to parse.</description>
			</parameter>
			<parameter name="data_out" type="Object" usage="required">
				<description> In-progress parsed data to update.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed data object.</return-description>
		</method>
		</methods>
	</class>
	<class type="EventTarget">
		<description>EventTarget provides the implementation for any object to
publish, subscribe and fire to custom events, and also
alows other EventTargets to target the object with events
sourced from the other object.
EventTarget is designed to be used with Y.augment to wrap 
EventCustom in an interface that allows events to be listened to 
and fired by name.  This makes it possible for implementing code to
subscribe to an event that either has not been created yet, or will
not be created at all.</description>
		<methods>
		<method name="on" scope="instance">
			<description>Subscribe to a custom event hosted by this object</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description>    The type of the event</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The callback</description>
			</parameter>
			</parameters>
			<return-description>the event target or a detach handle per 'chain' config</return-description>
		</method>
		<method name="addTarget" scope="instance">
			<description>Registers another EventTarget as a bubble target. Bubble order is determined by the order registered. Multiple targets can be specified.</description>
			<parameters>
			<parameter name="o" type="EventTarget" usage="required">
				<description> the target to add</description>
			</parameter>
			</parameters>
		</method>
		<method name="getEvent" scope="instance">
			<description>Returns the custom event of the provided type has been created, a falsy value otherwise</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type, or name of the event</description>
			</parameter>
			<parameter name="prefixed" type="string" usage="required">
				<description> if true, the type is prefixed already</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event.Custom" />
			</return-types>
			<return-description>the custom event or null</return-description>
		</method>
		<method name="_getType" scope="instance" visibility="private">
			<description>If the instance has a prefix attribute and the event type is not prefixed, the instance prefix is applied to the supplied type.</description>
		</method>
		<method name="removeTarget" scope="instance">
			<description>Removes a bubble target</description>
			<parameters>
			<parameter name="o" type="EventTarget" usage="required">
				<description> the target to remove</description>
			</parameter>
			</parameters>
		</method>
		<method name="fire" scope="instance">
			<description>Fire a custom event by name. The callback functions will be executed from the context specified when the event was created, and with the following parameters. If the custom event object hasn't been created, then the event hasn't been published and it has no subscribers. For performance sake, we immediate exit in this case. This means the event won't bubble, so if the intention is that a bubble target be notified, the event must be published on this object first. The first argument is the event type, and any additional arguments are passed to the listeners as parameters. If the first of these is an object literal, and the event is configured to emit an event facade, that object is mixed into the event facade and the facade is provided in place of the original object.</description>
			<parameters>
			<parameter name="type" type="String|Object" usage="required">
				<description> The type of the event, or an object that contains a 'type' property.</description>
			</parameter>
			<parameter name="arguments" type="Object*" usage="required">
				<description> an arbitrary set of parameters to pass to the handler. If the first of these is an object literal and the event is configured to emit an event facade, the event facade will replace that parameter after the properties the object literal contains are copied to the event facade.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event.Target" />
			</return-types>
			<return-description>the event host</return-description>
		</method>
		<method name="unsubscribeAll" scope="instance">
			<description>Removes all listeners from the specified event. If the event type is not specified, all listeners from all hosted custom events will be removed.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description>  The type, or name of the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="after" scope="instance">
			<description>Subscribe to a custom event hosted by this object. The supplied callback will execute after any listeners add via the subscribe method, and after the default function, if configured for the event, has executed.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description>    The type of the event</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The callback</description>
			</parameter>
			</parameters>
			<return-description>the event target or a detach handle per 'chain' config</return-description>
		</method>
		<method name="publish" scope="instance">
			<description>Creates a new custom event of the specified type. If a custom event by that name already exists, it will not be re-created. In either case the custom event is returned.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type, or name of the event</description>
			</parameter>
			<parameter name="opts" type="object" usage="required">
				<description> optional config params. Valid properties are: &lt;ul&gt; &lt;li&gt; 'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false) &lt;/li&gt; &lt;li&gt; 'bubbles': whether or not this event bubbles (true) &lt;/li&gt; &lt;li&gt; 'context': the default execution context for the listeners (this) &lt;/li&gt; &lt;li&gt; 'defaultFn': the default function to execute when this event fires if preventDefault was not called &lt;/li&gt; &lt;li&gt; 'emitFacade': whether or not this event emits a facade (false) &lt;/li&gt; &lt;li&gt; 'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click' &lt;/li&gt; &lt;li&gt; 'fireOnce': if an event is configured to fire once, new subscribers after the fire will be notified immediately. &lt;/li&gt; &lt;li&gt; 'preventable': whether or not preventDefault() has an effect (true) &lt;/li&gt; &lt;li&gt; 'preventedFn': a function that is executed when preventDefault is called &lt;/li&gt; &lt;li&gt; 'queuable': whether or not this event can be queued during bubbling (false) &lt;/li&gt; &lt;li&gt; 'silent': if silent is true, debug messages are not provided for this event. &lt;/li&gt; &lt;li&gt; 'stoppedFn': a function that is executed when stopPropagation is called &lt;/li&gt; &lt;li&gt; 'type': the event type (valid option if not provided as the first parameter to publish) &lt;/li&gt; &lt;/ul&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event.Custom" />
			</return-types>
			<return-description>the custom event</return-description>
		</method>
		<method name="detachAll" scope="instance">
			<description>Removes all listeners from the specified event. If the event type is not specified, all listeners from all hosted custom events will be removed.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description>  The type, or name of the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="subscribe" scope="instance">
			<description>subscribe to an event</description>
		</method>
		<method name="unsubscribe" scope="instance">
			<description>detach a listener</description>
		</method>
		<method name="detach" scope="instance">
			<description>Detach one or more listeners the from the specified event</description>
			<parameters>
			<parameter name="type" type="string|Object" usage="required">
				<description>  Either the handle to the subscriber or the type of event. If the type is not specified, it will attempt to remove the listener from all hosted events.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>  The subscribed function to unsubscribe, if not supplied, all subscribers will be removed.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description>   The custom object passed to subscribe. This is optional, but if supplied will be used to disambiguate multiple listeners that are the same (e.g., you subscribe many object using a function that lives on the prototype)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="EventTarget" />
			</return-types>
			<return-description>the host</return-description>
		</method>
		<method name="bubble" scope="instance">
			<description>Propagate an event. Requires the event-custom-complex module.</description>
			<parameters>
			<parameter name="evt" type="Event.Custom" usage="required">
				<description> the custom event to propagate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the aggregated return value from Event.Custom.fire</return-description>
		</method>
		<method name="_parseType" scope="instance" visibility="private">
			<description>Returns an array with the detach key (if provided), and the prefixed event name from _getType Y.on('detachcategory, menu:click', fn)</description>
		</method>
		<method name="before" scope="instance">
			<description>Executes the callback before a DOM event, custom event or method. If the first argument is a function, it is assumed the target is a method. For DOM and custom events, this is an alias for Y.on. For DOM and custom events: type, callback, context, 0-n arguments For methods: callback, object (method host), methodName, context, 0-n arguments</description>
			<return-description>detach handle</return-description>
		</method>
		</methods>
	</class>
	<class type="DataType.XML">
		<description>DataType.XML provides a set of utility functions to operate against XML documents.</description>
		<methods>
		<method name="parse" scope="instance">
			<description>Converts data to type XMLDocument.</description>
			<parameters>
			<parameter name="data" type="String" usage="required">
				<description> Data to convert.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="XMLDoc" />
			</return-types>
			<return-description>XML Document.</return-description>
		</method>
		<method name="format" scope="instance">
			<description>Converts data to type XMLDocument.</description>
			<parameters>
			<parameter name="data" type="XMLDoc" usage="required">
				<description> Data to convert.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>String.</return-description>
		</method>
		</methods>
	</class>
	<class type="Test.Reporter">
		<description>An object capable of sending test results to a server.</description>
		<constructors>
		<constructor scope="instance">
			<description>An object capable of sending test results to a server.</description>
			<return-types>
				<return-type type="Test.Reporter" />
			</return-types>
			<parameters>
			<parameter name="url" type="String" usage="required">
				<description> The URL to submit the results to.</description>
			</parameter>
			<parameter name="format" type="Function" usage="required">
				<description> (Optiona) A function that outputs the results in a specific format.
Default is Y.Test.Format.XML.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="url" type="String" scope="instance">
			<description>The URL to submit the data to.</description>
		</property>
		<property name="_form" type="HTMLFormElement" scope="instance" visibility="private">
			<description>The form element used to submit the results.</description>
		</property>
		<property name="_fields" type="Object" scope="instance" visibility="private">
			<description>Extra fields to submit with the request.</description>
		</property>
		<property name="_iframe" type="HTMLIFrameElement" scope="instance" visibility="private">
			<description>Iframe used as a target for form submission.</description>
		</property>
		<property name="format" type="Function" scope="instance">
			<description>The formatting function to call when submitting the data.</description>
		</property>
		</properties>
		<methods>
		<method name="report" scope="instance">
			<description>Sends the report to the server.</description>
			<parameters>
			<parameter name="results" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="destroy" scope="instance">
			<description>Cleans up the memory associated with the TestReporter, removing DOM elements that were created.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="addField" scope="instance">
			<description>Adds a field to the form that submits the results.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the field.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value of the field.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="WidgetStdMod">
		<description>Widget extension, which can be used to add Standard Module support to the 
base Widget class, through the &lt;a href=&quot;Base.html#method_build&quot;&gt;Base.build&lt;/a&gt; 
method.
&lt;p&gt;
The extension adds header, body and footer sections to the Widget's content box and 
provides the corresponding methods and attributes to modify the contents of these sections.
&lt;/p&gt;</description>
		<properties>
		<property name="WidgetStdMod.HEADER" type="String" scope="static">
			<description>Constant used to refer the the standard module header, in methods which expect a section specifier</description>
		</property>
		<property name="WidgetStdMod.REPLACE" type="String" scope="static">
			<description>Constant used to specify insertion position, when adding content to sections of the standard module in methods which expect a &quot;where&quot; argument. &lt;p&gt; &lt;em&gt;Replaces&lt;/em&gt; the sections existing content, with new content. &lt;/p&gt;</description>
		</property>
		<property name="WidgetStdMod.ATTRS" type="Object" scope="static">
			<description>Static property used to define the default attribute configuration introduced by WidgetStdMod.</description>
		</property>
		<property name="WidgetStdMod.BEFORE" type="String" scope="static">
			<description>Constant used to specify insertion position, when adding content to sections of the standard module in methods which expect a &quot;where&quot; argument. &lt;p&gt; Inserts new content &lt;em&gt;before&lt;/em&gt; the sections existing content. &lt;/p&gt;</description>
		</property>
		<property name="WidgetStdMod.HTML_PARSER" type="Object" scope="static">
			<description>The HTML parsing rules for the WidgetStdMod class.</description>
		</property>
		<property name="WidgetStdMod.SECTION_CLASS_NAMES" type="Object" scope="static">
			<description>Static hash of default class names used for the header, body and footer sections of the standard module, keyed by the section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)</description>
		</property>
		<property name="WidgetStdMod.FOOTER" type="String" scope="static">
			<description>Constant used to refer the the standard module footer, in methods which expect a section specifier</description>
		</property>
		<property name="WidgetStdMod.TEMPLATES" type="Object" scope="static">
			<description>The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants, WidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section. e.g. &lt;pre&gt; { header : '&amp;lt;div class=&quot;yui-widget-hd&quot;&amp;gt;&amp;lt;/div&amp;gt;', body : '&amp;lt;div class=&quot;yui-widget-bd&quot;&amp;gt;&amp;lt;/div&amp;gt;', footer : '&amp;lt;div class=&quot;yui-widget-ft&quot;&amp;gt;&amp;lt;/div&amp;gt;' } &lt;/pre&gt;</description>
		</property>
		<property name="WidgetStdMod.BODY" type="String" scope="static">
			<description>Constant used to refer the the standard module body, in methods which expect a section specifier</description>
		</property>
		<property name="WidgetStdMod.AFTER" type="String" scope="static">
			<description>Constant used to specify insertion position, when adding content to sections of the standard module in methods which expect a &quot;where&quot; argument. &lt;p&gt; Inserts new content &lt;em&gt;before&lt;/em&gt; the sections existing content. &lt;/p&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="_addNodeRef" scope="instance" visibility="private">
			<description>Helper method to add nodes, to another node. The child node(s) are added either before, after or replaces the existing node content based on the value of the &lt;code&gt;where&lt;/code&gt; argument.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> The section Node to be updated.</description>
			</parameter>
			<parameter name="children" type="Node|NodeList" usage="required">
				<description> The new content Node, or NodeList to be added to section Node provided.</description>
			</parameter>
			<parameter name="where" type="String" usage="optional">
				<description> Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE. If not provided, the content will replace existing content in the Node.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterHeaderChange" scope="instance">
			<description>Default attribute change listener for the headerContent attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_findStdModSection" scope="instance" visibility="private">
			<description>Helper method to query the rendered contents of the contentBox to find the node for the given section if it exists.</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The rendered node for the given section, or null if not found.</return-description>
		</method>
		<method name="_afterFooterChange" scope="instance">
			<description>Default attribute change listener for the footerContent attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncUIStdMod" scope="instance">
			<description>Synchronizes the UI to match the Widgets standard module state. &lt;p&gt; This method is invoked after syncUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_uiSetStdMod" scope="instance">
			<description>Updates the rendered UI, adding the provided content (either an HTML string, or node reference), to the specified section. The content is either added before, after or replaces existing content in the section, based on the value of the &lt;code&gt;where&lt;/code&gt; argument.</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			<parameter name="content" type="String | Node" usage="required">
				<description> The new content (either as an HTML string, or Node reference) to add to the section</description>
			</parameter>
			<parameter name="where" type="String" usage="optional">
				<description> Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE. If not provided, the content will replace existing content in the section.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setStdModContent" scope="instance">
			<description>Updates the body section of the standard module with the content provided (either an HTML string, or node reference). &lt;p&gt; This method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section, and insert content before or after it, by specifying the &lt;code&gt;where&lt;/code&gt; argument. &lt;/p&gt;</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			<parameter name="content" type="String | Node" usage="required">
				<description> The content to be added, either an HTML string or a Node reference.</description>
			</parameter>
			<parameter name="where" type="String" usage="optional">
				<description> Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE. If not provided, the content will replace existing content in the section.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_insertStdModSection" scope="instance" visibility="private">
			<description>Helper method to insert the Node for the given section into the correct location in the contentBox.</description>
			<parameters>
			<parameter name="contentBox" type="Node" usage="required">
				<description> A reference to the Widgets content box.</description>
			</parameter>
			<parameter name="section" type="String" usage="required">
				<description> The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			<parameter name="sectionNode" type="Node" usage="required">
				<description> The Node for the section.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getPreciseHeight" scope="instance" visibility="private">
			<description>Helper method to obtain the precise height of the node provided, including padding and border. The height could be a sub-pixel value for certain browsers, such as Firefox 3.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> The node for which the precise height is required.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The height of the Node including borders and padding, possibly a float.</return-description>
		</method>
		<method name="fillHeight" scope="instance">
			<description>Sets the height on the provided header, body or footer element to fill out the height of the Widget. It determines the height of the widgets bounding box, based on it's configured height value, and sets the height of the provided section to fill out any space remaining after the other standard module section heights have been accounted for. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This method is not designed to work if an explicit height has not been set on the Widget, since for an &quot;auto&quot; height Widget, the heights of the header/body/footer will drive the height of the Widget.&lt;/p&gt;</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> The node which should be resized to fill out the height of the Widget bounding box. Should be a standard module section node which belongs to the widget.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getStdModTemplate" scope="instance">
			<description>Gets a new Node reference for the given standard module section, by cloning the stored template node.</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The new Node instance for the section</return-description>
		</method>
		<method name="getStdModNode" scope="instance">
			<description>Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference stored by the widget instance is returned if set.</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The node reference for the section, or null if not set.</return-description>
		</method>
		<method name="_addNodeHTML" scope="instance" visibility="private">
			<description>Helper method to add the given HTML string to the node reference provided. The HTML is added either before, after or replaces the existing node content based on the value of the &lt;code&gt;where&lt;/code&gt; argument.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> The section Node to be updated.</description>
			</parameter>
			<parameter name="html" type="String" usage="required">
				<description> The new content HTML string to be added to the section Node.</description>
			</parameter>
			<parameter name="where" type="String" usage="optional">
				<description> Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE. If not provided, the content will replace Nodes existing content.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_parseStdModHTML" scope="instance" visibility="private">
			<description>Utility method, used by WidgetStdMods HTML_PARSER implementation to extract data for each section from markup.</description>
			<parameters>
			<parameter name="section" type="String" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Inner HTML string with the contents of the section</return-description>
		</method>
		<method name="_renderStdMod" scope="instance">
			<description>Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>A reference to the added section node</return-description>
		</method>
		<method name="_bindUIStdMod" scope="instance">
			<description>Binds event listeners responsible for updating the UI state in response to Widget standard module related state changes. &lt;p&gt; This method is invoked after bindUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_fillHeight" scope="instance" visibility="private">
			<description>Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so that the standard module fills out the Widget height. If a height has not been set on Widget, the section is not resized (height is set to &quot;auto&quot;).</description>
		</method>
		<method name="_renderUIStdMod" scope="instance">
			<description>Creates/Initializes the DOM for standard module support. &lt;p&gt; This method is invoked after renderUI is invoked for the Widget class using YUI's aop infrastructure. &lt;/p&gt;</description>
		</method>
		<method name="_uiSetFillHeight" scope="instance">
			<description>Updates the rendered UI, to resize the provided section so that the standard module fills out the specified widget height. Note: This method does not check whether or not a height is set on the Widget.</description>
			<parameters>
			<parameter name="fillSection" type="String" usage="required">
				<description> A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateFillHeight" scope="instance">
			<description>Default validator for the fillHeight attribute. Verifies that the value set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER, or a falsey value if fillHeight is to be disabled.</description>
			<parameters>
			<parameter name="val" type="String" usage="required">
				<description> The section which should be setup to fill height, or false/null to disable fillHeight</description>
			</parameter>
			</parameters>
			<return-description>true if valid, false if not</return-description>
		</method>
		<method name="_afterBodyChange" scope="instance">
			<description>Default attribute change listener for the bodyContent attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterFillHeightChange" scope="instance">
			<description>Default attribute change listener for the fillHeight attribute, responsible for updating the UI, in response to attribute changes.</description>
			<parameters>
			<parameter name="e" type="EventFacade" usage="required">
				<description> The event facade for the attribute change</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getStdModContent" scope="instance" visibility="private">
			<description>Retrieves the child nodes (content) of a standard module section</description>
			<parameters>
			<parameter name="section" type="String" usage="required">
				<description> The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The child node collection of the standard module section.</return-description>
		</method>
		</methods>
	</class>
	<class type="Array">
		<description>Adds the following array utilities to the YUI instance.  Additional
array helpers can be found in the collection component.</description>
		<methods>
		<method name="hash" scope="static">
			<description>Returns an object using the first array as keys, and the second as values. If the second array is not provided the value is set to true for each.</description>
			<parameters>
			<parameter name="k" type="Array" usage="required">
				<description> keyset</description>
			</parameter>
			<parameter name="v" type="Array" usage="required">
				<description> optional valueset</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the hash</return-description>
		</method>
		<method name="indexOf" scope="static">
			<description>Returns the index of the first item in the array that contains the specified value, -1 if the value isn't found.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to search</description>
			</parameter>
			<parameter name="val" type="" usage="required">
				<description> the value to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the index of the item that contains the value or -1</return-description>
		</method>
		<method name="some" scope="static">
			<description>Executes the supplied function on each item in the array. Returning true from the processing function will stop the processing of the remaining items.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item. The function receives three arguments: the value, the index, the full array.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the function returns true on
any of the items in the array</return-description>
		</method>
		<method name="()" scope="static">
			<description>Y.Array(o) returns an array: - Arrays are return unmodified unless the start position is specified. - &quot;Array-like&quot; collections (@see Array.test) are converted to arrays - For everything else, a new array is created with the input as the sole item - The start position is used if the input is or is like an array to return a subset of the collection.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the item to arrayify</description>
			</parameter>
			<parameter name="i" type="int" usage="required">
				<description> if an array or array-like, this is the start index</description>
			</parameter>
			<parameter name="al" type="boolean" usage="required">
				<description> if true, it forces the array-like fork. This can be used to avoid multiple array.test calls.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>the resulting array</return-description>
		</method>
		<method name="each" scope="static">
			<description>Executes the supplied function on each item in the array.</description>
			<parameters>
			<parameter name="a" type="Array" usage="required">
				<description> the array to iterate</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> the function to execute on each item. The function receives three arguments: the value, the index, the full array.</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> Optional context object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YUI" />
			</return-types>
			<return-description>the YUI instance</return-description>
		</method>
		<method name="test" scope="static">
			<description>Evaluates the input to determine if it is an array, array-like, or something else. This is used to handle the arguments collection available within functions, and HTMLElement collections</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>a number indicating the results:
0: Not an array or an array-like collection
1: A real array. 
2: array-like collection.</return-description>
		</method>
		<method name="numericSort" scope="instance">
			<description>Numeric sort convenience function. Y.ArrayAssert.itemsAreEqual([1, 2, 3], [3, 1, 2].sort(Y.Array.numericSort));</description>
		</method>
		</methods>
	</class>
	<class type="EventHandle">
		<description>Return value from all subscribe operations</description>
		<constructors>
		<constructor scope="instance">
			<description>Return value from all subscribe operations</description>
			<return-types>
				<return-type type="EventHandle" />
			</return-types>
			<parameters>
			<parameter name="evt" type="CustomEvent" usage="required">
				<description>  the custom event</description>
			</parameter>
			<parameter name="sub" type="Subscriber" usage="required">
				<description>  the subscriber</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="evt" type="CustomEvent" scope="instance">
			<description>The custom event</description>
		</property>
		<property name="sub" type="Subscriber" scope="instance">
			<description>The subscriber object</description>
		</property>
		</properties>
		<methods>
		<method name="detach" scope="instance">
			<description>Detaches this subscriber</description>
		</method>
		</methods>
	</class>
	<class type="Do.Error">
		<description>Return an Error object when you want to terminate the execution
of all subsequent method calls.</description>
	</class>
	<class type="Plugin.ConsoleFilters">
		<description>&lt;p&gt;Provides Plugin.ConsoleFilters plugin class.&lt;/p&gt;
&lt;p&gt;This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.&lt;/p&gt;</description>
		<properties>
		<property name="ConsoleFilters.NAME" type="String" scope="static">
			<description>Plugin name.</description>
		</property>
		<property name="ConsoleFilters.CHROME_CLASSES" type="Object" scope="static">
			<description>Classnames used by the templates when creating nodes.</description>
		</property>
		<property name="ConsoleFilters.SOURCES_TEMPLATE" type="String" scope="static">
			<description>Markup template used to create the container for the source filters.</description>
		</property>
		<property name="_entries" type="Array" scope="instance">
			<description>Collection of all log messages passed through since the plugin's instantiation. This holds all messages regardless of filter status. Used as a single source of truth for repopulating the Console body when filters are changed.</description>
		</property>
		<property name="ConsoleFilters.FILTER_TEMPLATE" type="String" scope="static">
			<description>Markup template used to create the category and source filter checkboxes.</description>
		</property>
		<property name="_categories" type="Node" scope="instance">
			<description>The container node created to house the category filters.</description>
		</property>
		<property name="ConsoleFilters.CATEGORIES_TEMPLATE" type="String" scope="static">
			<description>Markup template used to create the container for the category filters.</description>
		</property>
		<property name="ConsoleFilters.NS" type="String" scope="static">
			<description>The namespace hung off the host object that this plugin will inhabit.</description>
		</property>
		<property name="_sources" type="Node" scope="instance">
			<description>The container node created to house the source filters.</description>
		</property>
		</properties>
		<methods>
		<method name="_createCheckbox" scope="instance">
			<description>Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for the provided type and name. The checkbox and label are appended to the container node passes as the first arg.</description>
			<parameters>
			<parameter name="container" type="Node" usage="required">
				<description> the parentNode of the new checkbox and label</description>
			</parameter>
			<parameter name="name" type="String" usage="required">
				<description> the identifier of the filter</description>
			</parameter>
			</parameters>
		</method>
		<method name="initializer" scope="instance">
			<description>Initialize entries collection and attach listeners to host events and methods.</description>
		</method>
		<method name="_onCategoryCheckboxClick" scope="instance">
			<description>Passes checkbox clicks on to the category attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the DOM event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_uiSetCheckbox" scope="instance">
			<description>Updates the checked property of a filter checkbox of the specified type. If no checkbox is found for the input params, one is created.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> 'category' or 'source'</description>
			</parameter>
			<parameter name="item" type="String" usage="required">
				<description> the name of the filter (e.g. 'info', 'event')</description>
			</parameter>
			<parameter name="checked" type="Boolean" usage="required">
				<description> value to set the checkbox's checked property</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onEntry" scope="instance">
			<description>Ensures a filter is set up for any new categories or sources and collects the messages in _entries. If the message is stamped with a category or source that is currently being filtered out, the message will not pass to the Console's print buffer.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the custom event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="refreshConsole" scope="instance">
			<description>Repopulates the Console with entries appropriate to the current filter settings.</description>
		</method>
		<method name="destructor" scope="instance">
			<description>Removes the plugin UI and unwires events.</description>
		</method>
		<method name="_afterCategoryChange" scope="instance">
			<description>Triggers the Console to update if a known category filter changes value (e.g. visible =&gt; hidden). Updates the appropriate checkbox's checked state if necessary.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the attribute change event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="showSource" scope="instance">
			<description>Shows any number of sources in the UI. Convenience method for myConsole.filter.set('source.foo', true); set('source.bar', true); and so on.</description>
			<parameters>
			<parameter name="src*" type="String" usage="required">
				<description> 1..n sources to allow to display in the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="bindUI" scope="instance">
			<description>Binds to checkbox click events and internal attribute change events to maintain the UI state.</description>
		</method>
		<method name="showCategory" scope="instance">
			<description>Shows any number of categories in the UI. Convenience method for myConsole.filter.set('category.foo', true); set('category.bar', true); and so on.</description>
			<parameters>
			<parameter name="cat*" type="String" usage="required">
				<description> 1..n categories to allow to display in the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateCategory" scope="instance">
			<description>Validates category updates are objects and the subattribute is not too deep.</description>
			<parameters>
			<parameter name="cat" type="String" usage="required">
				<description> the new category:visibility map</description>
			</parameter>
			<parameter name="v" type="String" usage="required">
				<description> the subattribute path updated</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_onSourceCheckboxClick" scope="instance">
			<description>Passes checkbox clicks on to the source attribute.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the DOM event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateSource" scope="instance">
			<description>Validates source updates are objects and the subattribute is not too deep.</description>
			<parameters>
			<parameter name="cat" type="String" usage="required">
				<description> the new source:visibility map</description>
			</parameter>
			<parameter name="v" type="String" usage="required">
				<description> the subattribute path updated</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="hideCategory" scope="instance">
			<description>Hides any number of categories from the UI. Convenience method for myConsole.filter.set('category.foo', false); set('category.bar', false); and so on.</description>
			<parameters>
			<parameter name="cat*" type="String" usage="required">
				<description> 1..n categories to filter out of the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="syncUI" scope="instance">
			<description>Updates the UI to be in accordance with the current state of the plugin.</description>
		</method>
		<method name="_afterClearConsole" scope="instance">
			<description>Flushes the cached entries after a call to the Console's clearConsole().</description>
		</method>
		<method name="_afterCacheLimitChange" scope="instance">
			<description>Trims the cache of entries to the appropriate new length.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the attribute change event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_afterSourceChange" scope="instance">
			<description>Triggers the Console to update if a known source filter changes value (e.g. visible =&gt; hidden). Updates the appropriate checkbox's checked state if necessary.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the attribute change event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_filterBuffer" scope="instance">
			<description>Flushes the Console's print buffer of any entries that have a category or source that is currently being excluded.</description>
		</method>
		<method name="hideSource" scope="instance">
			<description>Hides any number of sources from the UI. Convenience method for myConsole.filter.set('source.foo', false); set('source.bar', false); and so on.</description>
			<parameters>
			<parameter name="src*" type="String" usage="required">
				<description> 1..n sources to filter out of the UI</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderUI" scope="instance">
			<description>Adds the category and source filter sections to the Console footer.</description>
		</method>
		</methods>
	</class>
	<class type="Test.Format.Mock">
		<description>Creates a new mock object.</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates a new mock object.</description>
			<return-types>
				<return-type type="Test.Format.Mock" />
			</return-types>
			<parameters>
			<parameter name="template" type="Object" usage="required">
				<description> (Optional) An object whose methods
should be stubbed out on the mock object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="verify" scope="static">
			<description>Verifies that all expectations of a mock object have been met and throws an assertion error if not.</description>
			<parameters>
			<parameter name="mock" type="Object" usage="required">
				<description> The object to verify..</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="expect" scope="static">
			<description>Assigns an expectation to a mock object. This is used to create methods and properties on the mock object that are monitored for calls and changes, respectively.</description>
			<parameters>
			<parameter name="mock" type="Object" usage="required">
				<description> The object to add the expectation to.</description>
			</parameter>
			<parameter name="expectation" type="Object" usage="required">
				<description> An object defining the expectation. For a method, the keys &quot;method&quot; and &quot;args&quot; are required with an optional &quot;returns&quot; key available. For properties, the keys &quot;property&quot; and &quot;value&quot; are required.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="DataType.Date.Locale">
		<description>The Date.Locale class is a container for all localised date strings
used by Y.DataType.Date. It is used internally, but may be extended
to provide new date localisations.
To create your own Locale, follow these steps:
&lt;ol&gt;
&lt;li&gt;Find an existing locale that matches closely with your needs&lt;/li&gt;
&lt;li&gt;Use this as your base class.  Use Y.DataType.Date.Locale[&quot;en&quot;] if nothing
matches.&lt;/li&gt;
&lt;li&gt;Create your own class as an extension of the base class using
Y.merge, and add your own localisations where needed.&lt;/li&gt;
&lt;/ol&gt;
See the Y.DataType.Date.Locale[&quot;en-US&quot;] and Y.DataType.Date.Locale[&quot;en-GB&quot;]
classes which extend Y.DataType.Date.Locale[&quot;en&quot;].
For example, to implement locales for French french and Canadian french,
we would do the following:
&lt;ol&gt;
&lt;li&gt;For French french, we have no existing similar locale, so use
Y.DataType.Date.Locale[&quot;en&quot;] as the base, and extend it:
&lt;pre&gt;
Y.DataType.Date.Locale[&quot;fr&quot;] = Y.merge(Y.DataType.Date.Locale, {
a: [&quot;dim&quot;, &quot;lun&quot;, &quot;mar&quot;, &quot;mer&quot;, &quot;jeu&quot;, &quot;ven&quot;, &quot;sam&quot;],
A: [&quot;dimanche&quot;, &quot;lundi&quot;, &quot;mardi&quot;, &quot;mercredi&quot;, &quot;jeudi&quot;, &quot;vendredi&quot;, &quot;samedi&quot;],
b: [&quot;jan&quot;, &quot;f&amp;eacute;v&quot;, &quot;mar&quot;, &quot;avr&quot;, &quot;mai&quot;, &quot;jun&quot;, &quot;jui&quot;, &quot;ao&amp;ucirc;&quot;, &quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;d&amp;eacute;c&quot;],
B: [&quot;janvier&quot;, &quot;f&amp;eacute;vrier&quot;, &quot;mars&quot;, &quot;avril&quot;, &quot;mai&quot;, &quot;juin&quot;, &quot;juillet&quot;, &quot;ao&amp;ucirc;t&quot;, &quot;septembre&quot;, &quot;octobre&quot;, &quot;novembre&quot;, &quot;d&amp;eacute;cembre&quot;],
c: &quot;%a %d %b %Y %T %Z&quot;,
p: [&quot;&quot;, &quot;&quot;],
P: [&quot;&quot;, &quot;&quot;],
x: &quot;%d.%m.%Y&quot;,
X: &quot;%T&quot;
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;For Canadian french, we start with French french and change the meaning of \%x:
&lt;pre&gt;
Y.DataType.Date.Locale[&quot;fr-CA&quot;] = Y.merge(Y.DataType.Date.Locale[&quot;fr&quot;], {
x: &quot;%Y-%m-%d&quot;
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
With that, you can use your new locales:
&lt;pre&gt;
var d = new Date(&quot;2008/04/22&quot;);
Y.DataType.Date.format(d, { format: &quot;%A, %d %B == %x&quot;, locale: &quot;fr&quot; });
&lt;/pre&gt;
will return:
&lt;pre&gt;
mardi, 22 avril == 22.04.2008
&lt;/pre&gt;
And
&lt;pre&gt;
Y.DataType.Date.format(d, {format: &quot;%A, %d %B == %x&quot;, locale: &quot;fr-CA&quot; });
&lt;/pre&gt;
Will return:
&lt;pre&gt;
mardi, 22 avril == 2008-04-22
&lt;/pre&gt;</description>
	</class>
	<class type="EventFacade">
		<description>Wraps and protects a custom event for use when emitFacade is set to true.
Requires the event-custom-complex module</description>
		<properties>
		<property name="relatedTarget" type="Node" scope="instance">
			<description>Node reference to the relatedTarget</description>
		</property>
		<property name="type" type="string" scope="instance">
			<description>The event type</description>
		</property>
		<property name="details" type="Array" scope="instance">
			<description>The arguments passed to fire</description>
		</property>
		<property name="currentTarget" type="Node" scope="instance">
			<description>Node reference for the element that the listener was attached to.</description>
		</property>
		<property name="target" type="Node" scope="instance">
			<description>Node reference for the targeted eventtarget</description>
		</property>
		</properties>
		<methods>
		<method name="stopImmediatePropagation" scope="instance">
			<description>Stops the propagation to the next bubble target and prevents any additional listeners from being exectued on the current target.</description>
		</method>
		<method name="stopPropagation" scope="instance">
			<description>Stops the propagation to the next bubble target</description>
		</method>
		<method name="preventDefault" scope="instance">
			<description>Prevents the event's default behavior</description>
		</method>
		<method name="halt" scope="instance">
			<description>Stops the event propagation and prevents the default event behavior.</description>
			<parameters>
			<parameter name="immediate" type="boolean" usage="required">
				<description> if true additional listeners on the current target will not be executed</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="DataSourceTextSchema" superclass="Plugin.Base">
		<description>Adds schema-parsing to the DataSource Utility.</description>
		<properties>
		<property name="NS" type="String" scope="static">
			<description>The namespace for the plugin. This will be the property on the host which references the plugin instance.</description>
		</property>
		<property name="NAME" type="String" scope="static">
			<description>Class name.</description>
		</property>
		</properties>
		<methods>
		<method name="_beforeDefDataFn
<dl>
<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>
<dt>request (Object)</dt> <dd>The request.</dd>
<dt>callback (Object)</dt> <dd>The callback object with the following properties:
<dl>
<dt>success (Function)</dt> <dd>Success handler.</dd>
<dt>failure (Function)</dt> <dd>Failure handler.</dd>
</dl>
</dd>
<dt>data (Object)</dt> <dd>Raw data.</dd>
</dl>" scope="instance">
			<description>Parses raw data into a normalized response.</description>
		</method>
		<method name="initializer" scope="instance" visibility="private">
			<description>Internal init() handler.</description>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description> Config object.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
</javascript>

