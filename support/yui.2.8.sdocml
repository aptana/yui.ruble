<?xml version="1.0" encoding="utf-8"?>
<javascript>
	<class type="YAHOO.util.Storage">
		<description>The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API.</description>
			<return-types>
				<return-type type="YAHOO.util.Storage" />
			</return-types>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description>  Required. The storage location.</description>
			</parameter>
			<parameter name="conf" type="Object" usage="required">
				<description>  Required. A configuration object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CE_CHANGE" type="{String}" scope="instance">
			<description>The event name for when the storage item has changed.</description>
		</property>
		<property name="_location" type="{String}" scope="instance">
			<description>The location for this instance.</description>
		</property>
		<property name="length" type="{Number}" scope="instance">
			<description>The current length of the keys.</description>
		</property>
		<property name="_name" type="{String}" scope="instance">
			<description>The name of this engine.</description>
		</property>
		<property name="CE_READY" type="{String}" scope="instance">
			<description>The event name for when the storage item is ready.</description>
		</property>
		<property name="DELIMITER" type="{String}" scope="instance">
			<description>The delimiter uesed between the data type and the data.</description>
		</property>
		<property name="_cfg" type="{Object}" scope="instance">
			<description>The configuration of the engine.</description>
		</property>
		<property name="isReady" type="{String}" scope="instance">
			<description>This engine singleton has been initialized already.</description>
		</property>
		</properties>
		<methods>
		<method name="getItem" scope="instance">
			<description>Fetches the data stored and the provided key.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key used to reference this value (DOMString in HTML 5 spec).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String|NULL" />
			</return-types>
			<return-description>The value stored at the provided key (DOMString in HTML 5 spec).</return-description>
		</method>
		<method name="_clear" scope="instance">
			<description>Implementation of the clear login; should be overwritten by storage engine.</description>
		</method>
		<method name="clear" scope="instance">
			<description>Clears any existing key/value pairs.</description>
		</method>
		<method name="_createValue" scope="instance">
			<description>Converts the object into a string, with meta data (type), so it can be restored later.</description>
			<parameters>
			<parameter name="s" type="Object" usage="required">
				<description> Required. An object to store.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getItem" scope="instance">
			<description>Implementation of the getItem login; should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key used to reference this value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String|NULL" />
			</return-types>
			<return-description>The value stored at the provided key.</return-description>
		</method>
		<method name="_key" scope="instance">
			<description>Implementation of the key logic; should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Required. The index to retrieve (unsigned long in HTML 5 spec).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String|NULL" />
			</return-types>
			<return-description>Required. The key at the provided index (DOMString in HTML 5 spec).</return-description>
		</method>
		<method name="setItem" scope="instance">
			<description>Remove an item from the data storage.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to remove (DOMString in HTML 5 spec).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getValue" scope="instance">
			<description>Converts the stored value into its appropriate type.</description>
			<parameters>
			<parameter name="s" type="String" usage="required">
				<description> Required. The stored value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="key" scope="instance">
			<description>Retrieve the key stored at the provided index; should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Required. The index to retrieve (unsigned long in HTML 5 spec).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Required. The key at the provided index (DOMString in HTML 5 spec).</return-description>
		</method>
		<method name="_removeItem" scope="instance">
			<description>Implementation of the removeItem login; should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to remove.</description>
			</parameter>
			</parameters>
		</method>
		<method name="hasKey" scope="instance">
			<description>Tests if the key has been set (not in HTML 5 spec); should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to search for.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True when key has been set.</return-description>
		</method>
		<method name="_setItem" scope="instance">
			<description>Implementation of the setItem login; should be overwritten by storage engine.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key used to reference this value.</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description> Required. The data to storage at key.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True when successful, false when size QUOTA exceeded.</return-description>
		</method>
		<method name="getName" scope="instance">
			<description>Fetches the storage object's name; should be overwritten by storage engine.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The name of the data storage object.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Panel" superclass="YAHOO.widget.Overlay">
		<description>Panel is an implementation of Overlay that behaves like an OS window, 
with a draggable header and an optional close icon at the top right.</description>
		<constructors>
		<constructor scope="instance">
			<description>Panel is an implementation of Overlay that behaves like an OS window, 
with a draggable header and an optional close icon at the top right.</description>
			<return-types>
				<return-type type="YAHOO.widget.Panel" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Panel &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Panel</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing 
the configuration that should be set for this Panel. See configuration 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.widget.Panel.CSS_PANEL_CONTAINER" type="String" scope="static">
			<description>Constant representing the default CSS class used for a Panel's wrapping container</description>
		</property>
		<property name="dd" type="YAHOO.util.DD" scope="instance">
			<description>The YAHOO.util.DD instance, used to implement the draggable header for the panel if draggable is enabled</description>
		</property>
		<property name="YAHOO.widget.Panel.CSS_PANEL" type="String" scope="static">
			<description>Constant representing the default CSS class used for a Panel</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the Panel's events</description>
		</property>
		<property name="YAHOO.widget.Panel.FOCUSABLE" type="Array" scope="static">
			<description>Constant representing the default set of focusable elements on the pagewhich Modal Panels will prevent access to, when the modal mask is displayed</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the Panel's configuration properties</description>
		</property>
		</properties>
		<methods>
		<method name="_removeFocusHandlers" scope="instance">
			<description>&quot;hideMask&quot; event handler that removes all &quot;focus&quot; event handlers added by the &quot;addFocusEventHandlers&quot; method.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> Event type</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Event Arguments</description>
			</parameter>
			</parameters>
		</method>
		<method name="configClose" scope="instance">
			<description>The default event handler fired when the &quot;close&quot; property is changed. The method controls the appending or hiding of the close icon at the top right of the Panel.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Renders the Panel by inserting the elements that are not already in the main Panel into their correct places. Optionally appends the Panel to the specified node prior to the render's execution. NOTE: For Panels without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure.</description>
			<parameters>
			<parameter name="appendToNode" type="String" usage="required">
				<description> The element id to which the Module should be appended to prior to rendering &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="appendToNode" type="HTMLElement" usage="required">
				<description> The element to which the Module should be appended to prior to rendering</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Success or failure of the render</return-description>
		</method>
		<method name="_doClose" scope="instance">
			<description>Event handler for the close icon</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required"/>
			</parameters>
		</method>
		<method name="stackMask" scope="instance">
			<description>Sets the zindex of the mask, if it exists, based on the zindex of the Panel element. The zindex of the mask is set to be one less than the Panel element's zindex. &lt;p&gt;NOTE: This method will not bump up the zindex of the Panel to ensure that the mask has a non-negative zindex. If you require the mask zindex to be 0 or higher, the zindex of the Panel should be set to a value higher than 0, before this method is called. &lt;/p&gt;</description>
		</method>
		<method name="_renderBody" scope="instance">
			<description>Renders the currently set body into it's proper position under the module element. If the module element is not provided, &quot;this.innerElement&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createHiddenFocusElement" scope="instance" visibility="private">
			<description>Creates a hidden focusable element, used to focus on, to enforce modality for browsers in which focus cannot be applied to the container box.</description>
		</method>
		<method name="sizeMask" scope="instance">
			<description>Sets the size of the modality mask to cover the entire scrollable area of the document</description>
		</method>
		<method name="_renderHeader" scope="instance">
			<description>Renders the currently set header into it's proper position under the module element. If the module element is not provided, &quot;this.innerElement&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element</description>
			</parameter>
			</parameters>
		</method>
		<method name="hideMask" scope="instance">
			<description>Hides the modality mask.</description>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.</description>
		</method>
		<method name="focusFirst" scope="instance">
			<description>Sets focus to the first element in the Panel.</description>
		</method>
		<method name="configModal" scope="instance">
			<description>The default event handler fired when the &quot;modal&quot; property is changed. This handler subscribes or unsubscribes to the show and hide events to handle the display or hide of the modality mask.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configKeyListeners" scope="instance">
			<description>The default event handler fired when the &quot;keylisteners&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Overlay</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a String representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the Panel.</return-description>
		</method>
		<method name="buildWrapper" scope="instance">
			<description>Builds the wrapping container around the Panel that is used for positioning the shadow and matte underlays. The container element is assigned to a local instance variable called container, and the element is reinserted inside of it.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the Panel element from the DOM and sets all child elements to null.</description>
		</method>
		<method name="removeMask" scope="instance">
			<description>Removes the modality mask.</description>
		</method>
		<method name="configHeight" scope="instance">
			<description>The default event handler fired when the &quot;height&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="registerDragDrop" scope="instance">
			<description>Registers the Panel's header for drag &amp; drop capability.</description>
		</method>
		<method name="showMask" scope="instance">
			<description>Shows the modality mask.</description>
		</method>
		<method name="configStrings" scope="instance">
			<description>The default handler for the &quot;strings&quot; property</description>
		</method>
		<method name="_onElementFocus" scope="instance" visibility="private">
			<description>&quot;focus&quot; event handler for a focuable element. Used to automatically blur the element when it receives focus to ensure that a Panel instance's modality is not compromised.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addFocusHandlers" scope="instance">
			<description>&quot;showMask&quot; event handler that adds a &quot;focus&quot; event handler to all focusable elements in the document to enforce a Panel instance's modality from being compromised.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> Custom event type</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Custom event arguments</description>
			</parameter>
			</parameters>
		</method>
		<method name="forceUnderlayRedraw" scope="instance">
			<description>Forces the underlay element to be repainted through the application/removal of a yui-force-redraw class to the underlay element.</description>
		</method>
		<method name="configUnderlay" scope="instance">
			<description>The default event handler fired when the &quot;underlay&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="focusLast" scope="instance">
			<description>Sets focus to the last element in the Panel.</description>
		</method>
		<method name="configWidth" scope="instance">
			<description>The default event handler fired when the &quot;width&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configDraggable" scope="instance">
			<description>The default event handler fired when the &quot;draggable&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderFooter" scope="instance">
			<description>Renders the currently set footer into it's proper position under the module element. If the module element is not provided, &quot;this.innerElement&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element</description>
			</parameter>
			</parameters>
		</method>
		<method name="buildMask" scope="instance">
			<description>Builds the mask that is laid over the document when the Panel is configured to be modal.</description>
		</method>
		<method name="_autoFillOnHeightChange" scope="instance">
			<description>The default custom event handler executed when the Panel's height is changed, if the autofillheight property has been set.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The event type</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> The array of arguments passed to event subscribers</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The header, body or footer element which is to be resized to fill out the containers height</description>
			</parameter>
			</parameters>
		</method>
		<method name="setFirstLastFocusable" scope="instance">
			<description>Sets the firstElement and lastElement instance properties to the first and last focusable elements in the Panel.</description>
		</method>
		<method name="getFocusableElements" scope="instance">
			<description>Returns an array of the currently focusable items which reside within Panel. The set of focusable elements the method looks for are defined in the Panel.FOCUSABLE static property</description>
			<parameters>
			<parameter name="root" type="HTMLElement" usage="required">
				<description> element to start from.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configzIndex" scope="instance">
			<description>The default event handler fired when the &quot;zIndex&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="sizeUnderlay" scope="instance">
			<description>Adjusts the size of the shadow based on the size of the element.</description>
		</method>
		<method name="setTabLoop" scope="instance">
			<description>Sets up a tab, shift-tab loop between the first and last elements provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener instance properties, which are reset everytime this method is invoked.</description>
			<parameters>
			<parameter name="firstElement" type="HTMLElement" usage="required"/>
			<parameter name="lastElement" type="HTMLElement" usage="required"/>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the Panel's Config object (cfg).</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.KeyListener">
		<description>KeyListener is a utility that provides an easy interface for listening for
keydown/keyup events fired against DOM elements.</description>
		<constructors>
		<constructor scope="instance">
			<description>KeyListener is a utility that provides an easy interface for listening for
keydown/keyup events fired against DOM elements.</description>
			<return-types>
				<return-type type="YAHOO.util.KeyListener" />
			</return-types>
			<parameters>
			<parameter name="attachTo" type="HTMLElement" usage="required">
				<description> The element or element ID to which the key 
event should be attached</description>
			</parameter>
			<parameter name="attachTo" type="String" usage="required">
				<description> The element or element ID to which the key
event should be attached</description>
			</parameter>
			<parameter name="keyData" type="Object" usage="required">
				<description>  The object literal representing the key(s) 
to detect. Possible attributes are 
shift(boolean), alt(boolean), ctrl(boolean) 
and keys(either an int or an array of ints 
representing keycodes).</description>
			</parameter>
			<parameter name="handler" type="Function" usage="required">
				<description>  The CustomEvent handler to fire when the 
key event is detected</description>
			</parameter>
			<parameter name="handler" type="Object" usage="required">
				<description>  An object literal representing the handler.</description>
			</parameter>
			<parameter name="event" type="String" usage="optional">
				<description>    Optional. The event (keydown or keyup) to 
listen for. Defaults automatically to keydown.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.util.KeyListener.KEYDOWN" type="String" scope="static">
			<description>Constant representing the DOM &quot;keydown&quot; event.</description>
		</property>
		<property name="YAHOO.util.KeyListener.KEYUP" type="String" scope="static">
			<description>Constant representing the DOM &quot;keyup&quot; event.</description>
		</property>
		<property name="enabled" type="Boolean" scope="instance">
			<description>Boolean indicating the enabled/disabled state of the Tooltip</description>
		</property>
		<property name="KEY" type="undefined" scope="static">
			<description>keycode constants for a subset of the special keys</description>
		</property>
		</properties>
		<methods>
		<method name="handleKeyPress" scope="instance" visibility="private">
			<description>Handles the key event when a key is pressed.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description>  The keypress DOM event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The DOM event scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="enable" scope="instance">
			<description>Enables the KeyListener by attaching the DOM event listeners to the target DOM element</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a String representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the KeyListener</return-description>
		</method>
		<method name="disable" scope="instance">
			<description>Disables the KeyListener by removing the DOM event listeners from the target DOM element</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Toolbar" superclass="YAHOO.util.Element">
		<description>Provides a rich toolbar widget based on the button and menu widgets</description>
		<constructors>
		<constructor scope="instance">
			<description>Provides a rich toolbar widget based on the button and menu widgets</description>
			<return-types>
				<return-type type="YAHOO.widget.Toolbar" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to turn into a toolbar.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_configuredButtons" type="Array" scope="instance"/>
		<property name="STR_SPIN_LABEL" type="String" scope="instance">
			<description>String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute</description>
		</property>
		<property name="_toolbarConfigs" type="Object" scope="instance"/>
		<property name="STR_SPIN_UP" type="String" scope="instance">
			<description>String for spinbutton up</description>
		</property>
		<property name="_buttonList" type="Array" scope="instance">
			<description>Internal property list of current buttons in the toolbar</description>
		</property>
		<property name="_colorPicker" type="HTMLElement" scope="instance">
			<description>The HTML Element containing the colorPicker</description>
		</property>
		<property name="STR_COLLAPSE" type="String" scope="instance">
			<description>String for Toolbar Collapse Button</description>
		</property>
		<property name="_navCounter" type="Number" scope="instance" visibility="private">
			<description>Internal counter for walking the buttons in the toolbar with the arrow keys</description>
		</property>
		<property name="CLASS_PREFIX" type="String" scope="instance">
			<description>Default prefix for dynamically created class names</description>
		</property>
		<property name="CLASS_DRAGHANDLE" type="String" scope="instance">
			<description>Default CSS class to apply to the toolbar's drag handle element</description>
		</property>
		<property name="_colorData" type="Object" scope="instance">
			<description>Object reference containing colors hex and text values.</description>
		</property>
		<property name="_sepCount" type="Number" scope="instance">
			<description>Internal refernce for counting separators, so we can give them a useful class name for styling</description>
		</property>
		<property name="dd" type="Object" scope="instance">
			<description>The DragDrop instance associated with the Toolbar</description>
		</property>
		<property name="_keyNav" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if the arrow nav listeners have been attached</description>
		</property>
		<property name="_titlebar" type="HTMLElement" scope="instance">
			<description>Object reference to the titlebar</description>
		</property>
		<property name="CLASS_CONTAINER" type="String" scope="instance">
			<description>Default CSS class to apply to the toolbar container element</description>
		</property>
		<property name="_buttonGroupList" type="Array" scope="instance">
			<description>Internal property list of current button groups in the toolbar</description>
		</property>
		<property name="CLASS_DISABLED" type="String" scope="instance">
			<description>Default CSS class to apply when the toolbar is disabled</description>
		</property>
		<property name="buttonType" type="Object" scope="instance">
			<description>The default button to use</description>
		</property>
		<property name="STR_EXPAND" type="String" scope="instance">
			<description>String for Toolbar Collapse Button - Expand</description>
		</property>
		<property name="_sep" type="HTMLElement" scope="instance">
			<description>Internal reference to the separator HTML Element for cloning</description>
		</property>
		<property name="STR_SPIN_DOWN" type="String" scope="instance">
			<description>String for spinbutton down</description>
		</property>
		<property name="CLASS_SEPARATOR" type="String" scope="instance">
			<description>Default CSS class to apply to all separators in the toolbar</description>
		</property>
		<property name="draghandle" type="HTMLElement" scope="instance"/>
		<property name="browser" type="Object" scope="instance">
			<description>Standard browser detection</description>
		</property>
		</properties>
		<methods>
		<method name="getButtons" scope="instance">
			<description>Returns an array of buttons in the current toolbar</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="enableButton" scope="instance">
			<description>Enables a button in the toolbar.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> Enable a button by it's id, index or value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="destroyButton" scope="instance">
			<description>Destroy a button in the toolbar.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> Destroy a button by it's id or index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_navigateButtons" scope="instance" visibility="private">
			<description>Handles the navigation/focus of toolbar buttons with the Arrow Keys</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The Key Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="addButton" scope="instance">
			<description>Add a new button to the toolbar. Buttons supported: push, split, menu, select, color, spin</description>
			<parameters>
			<parameter name="oButton" type="Object" usage="required">
				<description> Object literal reference to the Button's Config</description>
			</parameter>
			<parameter name="after" type="HTMLElement" usage="required">
				<description> Optional HTML element to insert this button after in the DOM.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to create the toolbar.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the toolbar.</description>
			</parameter>
			</parameters>
		</method>
		<method name="enableAllButtons" scope="instance">
			<description>Enables all buttons in the toolbar.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="selectButton" scope="instance">
			<description>Selects a button in the toolbar.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> Select a button by it's id, index or value.</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> If this is a Menu Button, check this item in the menu</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_buttonClick" scope="instance">
			<description>Click handler for all buttons in the toolbar.</description>
			<parameters>
			<parameter name="ev" type="String" usage="required">
				<description> The event that was passed in.</description>
			</parameter>
			<parameter name="info" type="Object" usage="required">
				<description> Object literal of information about the button that was clicked.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isSelected" scope="instance">
			<description>Tells if a button is selected or not.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> A button by it's id, index or value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="init" scope="instance">
			<description>The Toolbar class's initialization method</description>
		</method>
		<method name="addButtonToGroup" scope="instance">
			<description>Add a new button to a toolbar group. Buttons supported: push, split, menu, select, color, spin</description>
			<parameters>
			<parameter name="oButton" type="Object" usage="required">
				<description> Object literal reference to the Button's Config</description>
			</parameter>
			<parameter name="group" type="String" usage="required">
				<description> The Group identifier passed into the initial config</description>
			</parameter>
			<parameter name="after" type="HTMLElement" usage="required">
				<description> Optional HTML element to insert this button after in the DOM.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the toolbar.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_resetColorPicker" scope="instance" visibility="private">
			<description>Clears the currently selected color or mouseover color in the color picker.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the toolbar, all of it's elements and objects.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_handleFocus" scope="instance" visibility="private">
			<description>Sets up the listeners for the arrow key navigation</description>
		</method>
		<method name="collapse" scope="instance">
			<description>Programatically collapse the toolbar.</description>
			<parameters>
			<parameter name="collapse" type="Boolean" usage="required">
				<description> True to collapse, false to expand.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addSeparator" scope="instance">
			<description>Add a new button separator to the toolbar.</description>
			<parameters>
			<parameter name="cont" type="HTMLElement" usage="required">
				<description> Optional HTML element to insert this button into.</description>
			</parameter>
			<parameter name="after" type="HTMLElement" usage="required">
				<description> Optional HTML element to insert this button after in the DOM.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getButtonByIndex" scope="instance">
			<description>Gets a button instance from the toolbar by is index in _buttonList.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the button in _buttonList.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ToolbarButton" />
			</return-types>
		</method>
		<method name="getButtonById" scope="instance">
			<description>Gets a button instance from the toolbar by is Dom id.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> The Dom id to query for.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ToolbarButton" />
			</return-types>
		</method>
		<method name="resetAllButtons" scope="instance">
			<description>Resets all buttons to their initial state.</description>
			<parameters>
			<parameter name="_ex" type="Object" usage="required">
				<description> Except these buttons</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="deselectAllButtons" scope="instance">
			<description>Deselects all buttons in the toolbar.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="disableButton" scope="instance">
			<description>Disables a button in the toolbar.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> Disable a button by it's id, index or value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_addMenuClasses" scope="instance" visibility="private">
			<description>This method is called from Menu's renderEvent to add a few more classes to the menu items</description>
			<parameters>
			<parameter name="ev" type="String" usage="required">
				<description> The event that fired.</description>
			</parameter>
			<parameter name="na" type="Array" usage="required">
				<description> Array of event information.</description>
			</parameter>
			<parameter name="o" type="Object" usage="required">
				<description> Button config object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_makeSpinButton" scope="instance" visibility="private">
			<description>Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.</description>
			<parameters>
			<parameter name="_button" type="Object" usage="required">
				<description> YAHOO.widget.ToolbarButton reference</description>
			</parameter>
			<parameter name="oButton" type="Object" usage="required">
				<description> Object literal containing the buttons initial config</description>
			</parameter>
			</parameters>
		</method>
		<method name="deselectButton" scope="instance">
			<description>Deselects a button in the toolbar.</description>
			<parameters>
			<parameter name="id" type="String|Number" usage="required">
				<description> Deselect a button by it's id, index or value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="addButtonGroup" scope="instance">
			<description>Add a new button group to the toolbar. (uses addButton)</description>
			<parameters>
			<parameter name="oGroup" type="Object" usage="required">
				<description> Object literal reference to the Groups Config (contains an array of button configs as well as the group label)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createColorPicker" scope="instance" visibility="private">
			<description>Creates the core DOM reference to the color picker menu item.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the toolbar to prefix this DOM container with.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_makeColorButton" scope="instance" visibility="private">
			<description>Called to turn a &quot;color&quot; button into a menu button with an Overlay for the menu.</description>
			<parameters>
			<parameter name="_oButton" type="Object" usage="required">
				<description> YAHOO.widget.ToolbarButton reference</description>
			</parameter>
			</parameters>
		</method>
		<method name="disableAllButtons" scope="instance">
			<description>Disables all buttons in the toolbar.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="getButtonByValue" scope="instance">
			<description>Gets a button instance or a menuitem instance from the toolbar by it's value.</description>
			<parameters>
			<parameter name="value" type="String" usage="required">
				<description> The button value to query for.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ToolbarButton|YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.PieChart">
		<description>PieChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>PieChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.PieChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="_setDataField" scope="instance" visibility="private">
			<description>Setter for the dataField attribute.</description>
		</method>
		<method name="_setCategoryField" scope="instance" visibility="private">
			<description>Setter for the categoryField attribute.</description>
		</method>
		<method name="_getCategoryField" scope="instance" visibility="private">
			<description>Getter for the categoryField attribute.</description>
		</method>
		<method name="_initAttributes" scope="instance" visibility="private">
			<description>Initializes the attributes.</description>
		</method>
		<method name="_getDataField" scope="instance" visibility="private">
			<description>Getter for the dataField attribute.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>Factory class for instantiating a BaseCellEditor subclass.</description>
		<constructors>
		<constructor scope="instance">
			<description>Factory class for instantiating a BaseCellEditor subclass.</description>
			<return-types>
				<return-type type="YAHOO.widget.CellEditor" />
			</return-types>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description>  Type indicator, to map to YAHOO.widget.DataTable.Editors.</description>
			</parameter>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.Resize" superclass="YAHOO.util.Element">
		<description>&lt;p&gt;Makes an element resizable&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Makes an element resizable&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.Resize" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to make resizable.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CSS_RESIZING" type="String" scope="instance" visibility="private">
			<description>Class name given to the wrap element when a resize action is taking place.</description>
		</property>
		<property name="_cache" type="Object" scope="instance" visibility="private">
			<description>An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc..</description>
		</property>
		<property name="_dds" type="Object" scope="instance" visibility="private">
			<description>An Object containing references to all of the YAHOO.util.DragDrop instances used for the resize handles</description>
		</property>
		<property name="CSS_HIDDEN" type="String" scope="instance" visibility="private">
			<description>Class name given to the wrap element to make all handles hidden</description>
		</property>
		<property name="_handles" type="Object" scope="instance" visibility="private">
			<description>An object containing references to all of the resize handles.</description>
		</property>
		<property name="_ieSelectBack" type="undefined" scope="instance" visibility="private">
			<description>We will hold a copy of the current &quot;onselectstart&quot; method on this property, and reset it after we are done using it.</description>
		</property>
		<property name="CSS_STATUS" type="String" scope="instance" visibility="private">
			<description>Class name given to the status element</description>
		</property>
		<property name="CSS_RESIZE" type="String" scope="instance" visibility="private">
			<description>Base CSS class name</description>
		</property>
		<property name="CSS_WRAP" type="String" scope="instance" visibility="private">
			<description>Class name given to the wrap element</description>
		</property>
		<property name="_instances" type="Object" scope="static" visibility="private">
			<description>Internal hash table for all resize instances</description>
		</property>
		<property name="CSS_DRAG" type="String" scope="instance" visibility="private">
			<description>Class name added when dragging is enabled</description>
		</property>
		<property name="_resizeEvent" type="Event" scope="instance" visibility="private">
			<description>The mouse event used to resize with</description>
		</property>
		<property name="_proxy" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML reference of the element proxy</description>
		</property>
		<property name="dd" type="Object" scope="instance" visibility="private">
			<description>The YAHOO.util.DragDrop instance used if draggable is true</description>
		</property>
		<property name="CSS_HANDLE" type="String" scope="instance" visibility="private">
			<description>Class name given to all handles, used as a base for single handle names as well.. Handle &quot;t&quot; will get this.CSS_HANDLE + '-t' as well as this.CSS_HANDLE</description>
		</property>
		<property name="CSS_PROXY" type="String" scope="instance" visibility="private">
			<description>Class name given to the proxy element</description>
		</property>
		<property name="CSS_GHOST" type="String" scope="instance" visibility="private">
			<description>Class name given to the wrap element when the ghost property is active</description>
		</property>
		<property name="CSS_HOVER" type="String" scope="instance" visibility="private">
			<description>Class name used for hover only handles</description>
		</property>
		<property name="_positioned" type="Boolean" scope="instance" visibility="private">
			<description>A flag to show if the element is absolutely positioned</description>
		</property>
		<property name="_wrap" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML reference of the element wrapper</description>
		</property>
		<property name="_active" type="Boolean" scope="instance" visibility="private">
			<description>Flag to show if the resize is active. Used for events.</description>
		</property>
		<property name="_locked" type="Boolean" scope="instance" visibility="private">
			<description>A flag to show if the resize is locked</description>
		</property>
		<property name="CSS_KNOB" type="String" scope="instance" visibility="private">
			<description>Class name used to make the knob style handles</description>
		</property>
		<property name="_currentHandle" type="String" scope="instance" visibility="private">
			<description>The string identifier of the currently active handle. e.g. 'r', 'br', 'tl'</description>
		</property>
		<property name="_currentDD" type="Object" scope="instance" visibility="private">
			<description>A link to the currently active DD object</description>
		</property>
		<property name="browser" type="Object" scope="instance" visibility="private">
			<description>A copy of the YAHOO.env.ua property</description>
		</property>
		</properties>
		<methods>
		<method name="_handle_for_bl" scope="instance" visibility="private">
			<description>Handles the sizes for the Bottom Left handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setHeight" scope="instance" visibility="private">
			<description>Calculated the height based on the mouse event.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The mouse event.</description>
			</parameter>
			<parameter name="flip" type="Boolean" usage="required">
				<description> Argument to determine the direction of the movement.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value</return-description>
		</method>
		<method name="lock" scope="instance">
			<description>Lock the resize so it can't be resized</description>
			<parameters>
			<parameter name="dd" type="Boolean" usage="required">
				<description> If the draggable config is set, lock it too</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.Resize" />
			</return-types>
			<return-description>The Resize instance</return-description>
		</method>
		<method name="_handleStartDrag" scope="instance" visibility="private">
			<description>Resizes the proxy, sets up the YAHOO.util.DragDrop handlers, updates the status div and preps the cache</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The args passed from the CustomEvent.</description>
			</parameter>
			<parameter name="dd" type="Object" usage="required">
				<description> The YAHOO.util.DragDrop object we are working with.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getProxyEl" scope="instance">
			<description>Get the HTML reference for the proxy, returns null if no proxy.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The proxy element</return-description>
		</method>
		<method name="_handle_for_tl" scope="instance" visibility="private">
			<description>Handles the sizes for the Top Left handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_snapTick" scope="instance" visibility="private">
			<description>Adjusts the number based on the ticks used.</description>
			<parameters>
			<parameter name="size" type="Number" usage="required">
				<description> The size to tick against.</description>
			</parameter>
			<parameter name="pix" type="Number" usage="required">
				<description> The tick pixels.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the new snapped position</return-description>
		</method>
		<method name="unlock" scope="instance">
			<description>Unlock the resize so it can be resized</description>
			<parameters>
			<parameter name="dd" type="Boolean" usage="required">
				<description> If the draggable config is set, unlock it too</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.Resize" />
			</return-types>
			<return-description>The Resize instance</return-description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Initializes all of the configuration attributes used to create a resizable element.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the utility.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handle_for_tr" scope="instance" visibility="private">
			<description>Handles the sizes for the Top Right handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handle_for_br" scope="instance" visibility="private">
			<description>Handles the sizes for the Bottom Right handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getResizeById" scope="static">
			<description>Get's a resize object by the HTML id of the element associated with the Resize object.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The Resize Object</return-description>
		</method>
		<method name="_createProxy" scope="instance" visibility="private">
			<description>Creates the proxy element if the proxy config is true</description>
		</method>
		<method name="_setCache" scope="instance" visibility="private">
			<description>Sets up the this._cache hash table.</description>
		</method>
		<method name="init" scope="instance" visibility="private">
			<description>The Resize class's initialization method</description>
		</method>
		<method name="isLocked" scope="instance">
			<description>Check the locked status of the resize instance</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the Resize Object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_createHandles" scope="instance" visibility="private">
			<description>Creates the handles as specified in the config</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the resize object and all of it's elements &amp; listeners.</description>
		</method>
		<method name="_setAutoRatio" scope="instance" visibility="private">
			<description>This method checks to see if the &quot;autoRatio&quot; config is set. If it is, we will check to see if the &quot;Shift Key&quot; is pressed. If so, we will set the config ratio to true.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> A mouse event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_ieSelectFix" scope="instance" visibility="private">
			<description>The function we use as the onselectstart handler when we start a drag in Internet Explorer</description>
		</method>
		<method name="_checkWidth" scope="instance" visibility="private">
			<description>Checks the value passed against the maxWidth and minWidth.</description>
			<parameters>
			<parameter name="w" type="Number" usage="required">
				<description> The width to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the new value</return-description>
		</method>
		<method name="_handleMouseDown" scope="instance" visibility="private">
			<description>This method preps the autoRatio on MouseDown.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> A mouse event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createWrap" scope="instance" visibility="private">
			<description>Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select</description>
		</method>
		<method name="getStatusEl" scope="instance">
			<description>Get the HTML reference for the status element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The status element</return-description>
		</method>
		<method name="getWrapEl" scope="instance">
			<description>Get the HTML reference for the wrap element, returns the current element if not wrapped.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The wrap element</return-description>
		</method>
		<method name="_setupDragDrop" scope="instance" visibility="private">
			<description>Setup the YAHOO.util.DragDrop instance on the element</description>
		</method>
		<method name="_handleMouseOver" scope="instance" visibility="private">
			<description>Adds CSS class names to the handles</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> A mouse event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="resize" scope="instance" visibility="private">
			<description>Resizes the element, wrapper or proxy based on the data from the handlers.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The mouse event.</description>
			</parameter>
			<parameter name="h" type="Number" usage="required">
				<description> The new height setting.</description>
			</parameter>
			<parameter name="w" type="Number" usage="required">
				<description> The new width setting.</description>
			</parameter>
			<parameter name="t" type="Number" usage="required">
				<description> The new top setting.</description>
			</parameter>
			<parameter name="l" type="Number" usage="required">
				<description> The new left setting.</description>
			</parameter>
			<parameter name="force" type="Boolean" usage="required">
				<description> Resize the element (used for proxy resize).</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Don't fire the beforeResize Event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.Resize" />
			</return-types>
			<return-description>The Resize instance</return-description>
		</method>
		<method name="_handleMouseUp" scope="instance" visibility="private">
			<description>Cleans up listeners, hides proxy element and removes class names.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> A mouse event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="reset" scope="instance">
			<description>Resets the element to is start state.</description>
			<return-types>
			<return-type type="YAHOO.util.Resize" />
			</return-types>
			<return-description>The Resize instance</return-description>
		</method>
		<method name="_setRatio" scope="instance" visibility="private">
			<description>Using the Height, Width, Top &amp; Left, it recalcuates them based on the original element size.</description>
			<parameters>
			<parameter name="h" type="Number" usage="required">
				<description> The height offset.</description>
			</parameter>
			<parameter name="w" type="Number" usage="required">
				<description> The with offset.</description>
			</parameter>
			<parameter name="t" type="Number" usage="required">
				<description> The top offset.</description>
			</parameter>
			<parameter name="l" type="Number" usage="required">
				<description> The left offset.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The new Height, Width, Top &amp; Left settings</return-description>
		</method>
		<method name="_setWidth" scope="instance" visibility="private">
			<description>Calculates the width based on the mouse event.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The mouse event.</description>
			</parameter>
			<parameter name="flip" type="Boolean" usage="required">
				<description> Argument to determine the direction of the movement.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value</return-description>
		</method>
		<method name="_checkHeight" scope="instance" visibility="private">
			<description>Checks the value passed against the maxHeight and minHeight.</description>
			<parameters>
			<parameter name="h" type="Number" usage="required">
				<description> The height to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value</return-description>
		</method>
		<method name="getActiveHandleEl" scope="instance">
			<description>Get the HTML reference for the currently active resize handle.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The handle element that is active</return-description>
		</method>
		<method name="_handle_for_r" scope="instance" visibility="private">
			<description>Handles the sizes for the Right handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handle_for_t" scope="instance" visibility="private">
			<description>Handles the sizes for the Top handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateStatus" scope="instance" visibility="private">
			<description>Using the Height, Width, Top &amp; Left, it updates the status element with the elements sizes.</description>
			<parameters>
			<parameter name="h" type="Number" usage="required">
				<description> The new height setting.</description>
			</parameter>
			<parameter name="w" type="Number" usage="required">
				<description> The new width setting.</description>
			</parameter>
			<parameter name="t" type="Number" usage="required">
				<description> The new top setting.</description>
			</parameter>
			<parameter name="l" type="Number" usage="required">
				<description> The new left setting.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isActive" scope="instance">
			<description>Returns true or false if a resize operation is currently active on the element.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_handle_for_l" scope="instance" visibility="private">
			<description>Handles the sizes for the Left handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMouseOut" scope="instance" visibility="private">
			<description>Removes CSS class names to the handles</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> A mouse event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handle_for_b" scope="instance" visibility="private">
			<description>Handles the sizes for the Bottom handle.</description>
			<parameters>
			<parameter name="args" type="Object" usage="required">
				<description> The arguments from the CustomEvent.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.StackedBarChart">
		<description>StackedBarChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>StackedBarChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.StackedBarChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.Config">
		<description>Config is a utility used within an Object to allow the implementer to
maintain a list of local configuration properties and listen for changes 
to those properties dynamically using CustomEvent. The initial values are 
also maintained so that the configuration can be reset at any given point 
to its initial state.</description>
		<constructors>
		<constructor scope="instance">
			<description>Config is a utility used within an Object to allow the implementer to
maintain a list of local configuration properties and listen for changes 
to those properties dynamically using CustomEvent. The initial values are 
also maintained so that the configuration can be reset at any given point 
to its initial state.</description>
			<return-types>
				<return-type type="YAHOO.util.Config" />
			</return-types>
			<parameters>
			<parameter name="owner" type="Object" usage="required">
				<description> The owner Object to which this Config Object belongs</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.util.Config.CONFIG_CHANGED_EVENT" type="undefined" scope="static" visibility="private">
			<description>Constant representing the CustomEvent type for the config changed event.</description>
		</property>
		<property name="eventQueue" type="Object" scope="instance" visibility="private">
			<description>Maintains the local, normalized CustomEvent queue</description>
		</property>
		<property name="owner" type="Object" scope="instance">
			<description>Object reference to the owner of this Config Object</description>
		</property>
		<property name="queueInProgress" type="Boolean" scope="instance">
			<description>Boolean flag that specifies whether a queue is currently being executed</description>
		</property>
		<property name="initialConfig" type="Object" scope="instance" visibility="private">
			<description>Maintains the local collection of configuration property objects as they were initially applied. This object is used when resetting a property.</description>
		</property>
		<property name="config" type="Object" scope="instance" visibility="private">
			<description>Maintains the local collection of configuration property objects and their specified values</description>
		</property>
		<property name="YAHOO.util.Config.BOOLEAN_TYPE" type="undefined" scope="static" visibility="private">
			<description>Constant representing the boolean type string</description>
		</property>
		</properties>
		<methods>
		<method name="fireQueue" scope="instance">
			<description>Fires the normalized list of queued property change events</description>
		</method>
		<method name="YAHOO.util.Config.alreadySubscribed" scope="static">
			<description>Checks to determine if a particular function/Object pair are already subscribed to the specified CustomEvent</description>
			<parameters>
			<parameter name="evt" type="YAHOO.util.CustomEvent" usage="required">
				<description> The CustomEvent for which to check the subscriptions</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to look for in the subscribers list</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The execution scope Object for the subscription</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true, if the function/Object pair is already subscribed 
to the CustomEvent passed in</return-description>
		</method>
		<method name="getProperty" scope="instance">
			<description>Returns the value of specified property.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The value of the specified property</return-description>
		</method>
		<method name="addProperty" scope="instance">
			<description>Adds a property to the Config Object's private config hash.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The configuration property's name</description>
			</parameter>
			<parameter name="propertyObject" type="Object" usage="required">
				<description> The Object containing all of this property's arguments</description>
			</parameter>
			</parameters>
		</method>
		<method name="queueProperty" scope="instance">
			<description>Sets the value of a property and queues its event to execute. If the event is already scheduled to execute, it is moved from its current position to the end of the queue.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value to set the property to</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true, if the set was successful, false if 
it failed.</return-description>
		</method>
		<method name="checkNumber" scope="instance">
			<description>Validates that the value passed in is a number.</description>
			<parameters>
			<parameter name="val" type="Object" usage="required">
				<description> The value to validate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true, if the value is valid</return-description>
		</method>
		<method name="outputEventQueue" scope="instance">
			<description>Returns a string representation of the Config object's current CustomEvent queue</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string list of CustomEvents currently queued 
for execution</return-description>
		</method>
		<method name="resetProperty" scope="instance">
			<description>Resets the specified property's value to its initial value.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True is the property was reset, false if not</return-description>
		</method>
		<method name="applyConfig" scope="instance">
			<description>Applies a key-value Object literal to the configuration, replacing  any existing values, and queueing the property events. Although the values will be set, fireQueue() must be called for their associated events to execute.</description>
			<parameters>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration Object literal</description>
			</parameter>
			<parameter name="init" type="Boolean" usage="required">
				<description> When set to true, the initialConfig will be set to the userConfig passed in, so that calling a reset will reset the properties to the passed values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="refresh" scope="instance">
			<description>Refires the events for all configuration properties using their current values.</description>
		</method>
		<method name="subscribeToConfigEvent" scope="instance">
			<description>Subscribes an external handler to the change event for any given property.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The property name</description>
			</parameter>
			<parameter name="handler" type="Function" usage="required">
				<description> The handler function to use subscribe to the property's event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The Object to use for scoping the event handler (see CustomEvent documentation)</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean" usage="optional">
				<description> Optional. If true, will override &quot;this&quot; within the handler to map to the scope Object passed into the method.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True, if the subscription was successful, 
otherwise false.</return-description>
		</method>
		<method name="checkBoolean" scope="instance">
			<description>Validates that the value passed in is a Boolean.</description>
			<parameters>
			<parameter name="val" type="Object" usage="required">
				<description> The value to validate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true, if the value is valid</return-description>
		</method>
		<method name="init" scope="instance">
			<description>Initializes the configuration Object and all of its local members.</description>
			<parameters>
			<parameter name="owner" type="Object" usage="required">
				<description> The owner Object to which this Config Object belongs</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the Config object</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The Config object in string format.</return-description>
		</method>
		<method name="refireEvent" scope="instance">
			<description>Fires the event for a property using the property's current value.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property</description>
			</parameter>
			</parameters>
		</method>
		<method name="getConfig" scope="instance">
			<description>Returns a key-value configuration map of the values currently set in  the Config Object.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The current config, represented in a key-value map</return-description>
		</method>
		<method name="setProperty" scope="instance">
			<description>Sets the value of a property. If the silent property is passed as true, the property's event will not be fired.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the property</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value to set the property to</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Whether the value should be set silently, without firing the property event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True, if the set was successful, false if it failed.</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Sets all properties to null, unsubscribes all listeners from each property's change event and all listeners from the configChangedEvent.</description>
		</method>
		<method name="fireEvent" scope="instance" visibility="private">
			<description>Fires a configuration property event using the specified value.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The configuration property's name</description>
			</parameter>
			<parameter name="Object" type="value" usage="required">
				<description> The value of the correct type for the property</description>
			</parameter>
			</parameters>
		</method>
		<method name="unsubscribeFromConfigEvent" scope="instance">
			<description>Unsubscribes an external handler from the change event for any given property.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The property name</description>
			</parameter>
			<parameter name="handler" type="Function" usage="required">
				<description> The handler function to use subscribe to the property's event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The Object to use for scoping the event handler (see CustomEvent documentation)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True, if the unsubscription was successful, 
otherwise false.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Node">
		<description>The base class for all tree nodes.  The node's presentation and behavior in
response to mouse events is handled in Node subclasses.</description>
		<constructors>
		<constructor scope="instance">
			<description>The base class for all tree nodes.  The node's presentation and behavior in
response to mouse events is handled in Node subclasses.</description>
			<return-types>
				<return-type type="YAHOO.widget.Node" />
			</return-types>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description>  a string or object containing the data that will
be used to render this node, and any custom attributes that should be
stored with the node (which is available in noderef.data).
All values in oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions,
the rest of the values will be stored in noderef.data</description>
			</parameter>
			<parameter name="oParent" type="Node" usage="required">
				<description>  this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description>  the initial expanded/collapsed state (deprecated, use oData.expanded)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="childrenRendered" type="boolean" scope="instance">
			<description>This flag is set to true when the html is generated for this node's children, and set to false when new children are added.</description>
		</property>
		<property name="_focusedItem" type="DOM element" scope="instance" visibility="private">
			<description>DOM element that actually got the browser focus</description>
		</property>
		<property name="nextSibling" type="Node" scope="instance">
			<description>This node's next sibling</description>
		</property>
		<property name="renderHidden" type="boolean" scope="instance">
			<description>Should we render children for a collapsed node? It is possible that the implementer will want to render the hidden data... @todo verify that we need this, and implement it if we do.</description>
		</property>
		<property name="className" type="string" scope="instance">
			<description>User-defined className to be added to the Node</description>
		</property>
		<property name="iconMode" type="int" scope="instance">
			<description>Used to configure what happens when a dynamic load node is expanded and we discover that it does not have children. By default, it is treated as if it still could have children (plus/minus icon). Set iconMode to have it display like a leaf node instead.</description>
		</property>
		<property name="isLoading" type="boolean" scope="instance">
			<description>This is true for dynamically loading nodes while waiting for the callback to return.</description>
		</property>
		<property name="nowrap" type="boolean" scope="instance">
			<description>Specifies whether or not the content area of the node should be allowed to wrap.</description>
		</property>
		<property name="children" type="Node[]" scope="instance">
			<description>This node's child node collection.</description>
		</property>
		<property name="multiExpand" type="boolean" scope="instance">
			<description>Can multiple children be expanded at once?</description>
		</property>
		<property name="index" type="int" scope="instance">
			<description>The index for this instance obtained from global counter in YAHOO.widget.TreeView.</description>
		</property>
		<property name="_focusHighlightedItems" type="Array of DOM elements" scope="instance" visibility="private">
			<description>array of items that had the focus set on them so that they can be cleaned when focus is lost</description>
		</property>
		<property name="propagateHighlightDown" type="boolean" scope="instance">
			<description>Tells whether highlighting will be propagated down to the children of the clicked node</description>
		</property>
		<property name="_dynLoad" type="boolean" scope="instance" visibility="private">
			<description>We can set the node up to call an external method to get the child data dynamically.</description>
		</property>
		<property name="previousSibling" type="Node" scope="instance">
			<description>This node's previous sibling</description>
		</property>
		<property name="contentStyle" type="string" scope="instance">
			<description>The CSS class for the html content container. Defaults to ygtvhtml, but can be overridden to provide a custom presentation for a specific node.</description>
		</property>
		<property name="_type" type="string" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		<property name="propagateHighlightUp" type="boolean" scope="instance">
			<description>Tells whether highlighting will be propagated up to the parents of the clicked node</description>
		</property>
		<property name="parent" type="Node" scope="instance">
			<description>Parent node</description>
		</property>
		<property name="highlightState" type="integer" scope="instance">
			<description>Stores the highlight state. Can be any of: &lt;ul&gt; &lt;li&gt;0 - not highlighted&lt;/li&gt; &lt;li&gt;1 - highlighted&lt;/li&gt; &lt;li&gt;2 - some children highlighted&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="dataLoader" type="function" scope="instance">
			<description>Function to execute when we need to get this node's child data.</description>
		</property>
		<property name="editable" type="boolean" scope="instance">
			<description>Signals if the label is editable. (Ignored on TextNodes with href set.)</description>
		</property>
		<property name="data" type="object" scope="instance">
			<description>The data linked to this node. This can be any object or primitive value, and the data can be used in getNodeHtml().</description>
		</property>
		<property name="dynamicLoadComplete" type="boolean" scope="instance">
			<description>Dynamically loaded nodes only fetch the data the first time they are expanded. This flag is set to true once the data has been fetched.</description>
		</property>
		<property name="isLeaf" type="boolean" scope="instance">
			<description>If true, the node will alway be rendered as a leaf node. This can be used to override the presentation when dynamically loading the entire tree. Setting this to true also disables the dynamic load call for the node.</description>
		</property>
		<property name="hasIcon" type="boolean" scope="instance">
			<description>The toggle/branch icon will not show if this is set to false. This could be useful if the implementer wants to have the child contain extra info about the parent, rather than an actual node.</description>
		</property>
		<property name="contentElId" type="string" scope="instance">
			<description>The generated id that will contain the data passed in by the implementer.</description>
		</property>
		<property name="expanded" type="boolean" scope="instance">
			<description>The node's expanded/collapsed state</description>
		</property>
		<property name="tree" type="TreeView" scope="instance">
			<description>Tree instance this node is part of</description>
		</property>
		<property name="enableHighlight" type="boolean" scope="instance">
			<description>Enables node highlighting. If true, the node can be highlighted and/or propagate highlighting</description>
		</property>
		<property name="depth" type="int" scope="instance">
			<description>The depth of this node. We start at -1 for the root node.</description>
		</property>
		</properties>
		<methods>
		<method name="setNodesProperty" scope="instance">
			<description>Sets the value of property for this node and all loaded descendants.  Only public and defined properties can be set, not methods.  Values for unknown properties will be assigned to the refNode.data object</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> Name of the property to be set</description>
			</parameter>
			<parameter name="value" type="any" usage="required">
				<description> value to be set</description>
			</parameter>
			<parameter name="refresh" type="boolean" usage="required">
				<description> if present and true, it does a refresh</description>
			</parameter>
			</parameters>
		</method>
		<method name="appendChild" scope="instance" visibility="private">
			<description>Appends a node to the child collection.</description>
			<parameters>
			<parameter name="childNode" type="Node" usage="required">
				<description> the new node</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the child node</return-description>
		</method>
		<method name="setDynamicLoad" scope="instance">
			<description>Configures this node for dynamically obtaining the child data when the node is first expanded. Calling it without the callback will turn off dynamic load for the node.</description>
			<parameters>
			<parameter name="fmDataLoader" type="function" usage="required">
				<description> the function that will be used to get the data.</description>
			</parameter>
			<parameter name="iconMode" type="int" usage="required">
				<description> configures the icon that is displayed when a dynamic load node is expanded the first time without children. By default, the &quot;collapse&quot; icon will be used. If set to 1, the leaf node icon will be displayed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="unhighlight" scope="instance">
			<description>Turns highlighting off a node.</description>
			<parameters>
			<parameter name="_silent" type="boolean" usage="required">
				<description> optional, don't fire the highlightEvent</description>
			</parameter>
			</parameters>
		</method>
		<method name="_childrenHighlighted" scope="instance" visibility="private">
			<description>Checks whether all or part of the children of a node are highlighted and sets the node highlight to full, none or partial highlight. If set to propagate it will further call the parent</description>
		</method>
		<method name="getChildrenEl" scope="instance">
			<description>Returns the div that was generated for this node's children</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>this node's children div</return-description>
		</method>
		<method name="_removeFocus" scope="instance" visibility="private">
			<description>Removes the focus of previously selected Node</description>
		</method>
		<method name="toggle" scope="instance">
			<description>Expands if node is collapsed, collapses otherwise.</description>
		</method>
		<method name="getEditorValue" scope="instance">
			<description>Returns the value(s) from the input element(s) . Should be overridden by each node type.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="any" />
			</return-types>
			<return-description>value entered</return-description>
		</method>
		<method name="saveEditorValue" scope="instance">
			<description>Saves the value entered into the editor.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="false|none" />
			</return-types>
			<return-description>a return of exactly false will prevent the editor from closing</return-description>
		</method>
		<method name="getToggleLink" scope="instance">
			<description>Generates the link that will invoke this node's toggle method</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the javascript url for toggling this node</return-description>
		</method>
		<method name="getToggleEl" scope="instance">
			<description>Returns the element that is being used for this node's toggle.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>this node's toggle html element</return-description>
		</method>
		<method name="toggleHighlight" scope="instance">
			<description>Toggles the highlighted state of a Node</description>
		</method>
		<method name="getHtml" scope="instance">
			<description>Returns the markup for this node and its children.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the markup for this node and its expanded children.</return-description>
		</method>
		<method name="insertBefore" scope="instance">
			<description>Inserts this node before this supplied node</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node to insert this node before</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the inserted node</return-description>
		</method>
		<method name="hasChildren" scope="instance">
			<description>Checks if this node has children. If this node is lazy-loading and the children have not been rendered, we do not know whether or not there are actual children. In most cases, we need to assume that there are children (for instance, the toggle needs to show the expandable presentation state). In other times we want to know if there are rendered children. For the latter, &quot;checkForLazyLoad&quot; should be false.</description>
			<parameters>
			<parameter name="checkForLazyLoad" type="boolean" usage="required">
				<description> should we check for unloaded children?</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this has children or if it might and we are
checking for this condition.</return-description>
		</method>
		<method name="isDynamic" scope="instance">
			<description>Evaluates if this node's children should be loaded dynamically. Looks for the property both in this instance and the root node. If the tree is defined to load all children dynamically, the data callback function is defined in the root node</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this node's children are to be loaded dynamically</return-description>
		</method>
		<method name="init" scope="instance">
			<description>Initializes this node, gets some of the properties from the parent</description>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description> a string or object containing the data that will be used to render this node</description>
			</parameter>
			<parameter name="oParent" type="Node" usage="required">
				<description> this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description> the initial expanded/collapsed state</description>
			</parameter>
			</parameters>
		</method>
		<method name="getEl" scope="instance">
			<description>Returns this node's container html element</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the container html element</return-description>
		</method>
		<method name="appendTo" scope="instance">
			<description>Appends this node to the supplied node's child collection</description>
			<parameters>
			<parameter name="parentNode" type="Node" usage="required">
				<description> the node to append to.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>The appended node</return-description>
		</method>
		<method name="getContentEl" scope="instance">
			<description>Returns the outer html element for this node's content</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the element</return-description>
		</method>
		<method name="showChildren" scope="instance">
			<description>Shows this node's children</description>
		</method>
		<method name="insertAfter" scope="instance">
			<description>Inserts this node after the supplied node</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node to insert after</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the inserted node</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Node toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string representation of the node</return-description>
		</method>
		<method name="getChildrenElId" scope="instance">
			<description>Returns the id for this node's children div</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the element id for this node's children div</return-description>
		</method>
		<method name="getDepthStyle" scope="instance">
			<description>Returns the css class for the spacer at the specified depth for this node. If this node's ancestor at the specified depth has a next sibling the presentation is different than if it does not have a next sibling</description>
			<parameters>
			<parameter name="depth" type="int" usage="required">
				<description> the depth of the ancestor.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the css class for the spacer</return-description>
		</method>
		<method name="_canHaveFocus" scope="instance" visibility="private">
			<description>Returns true if there are any elements in the node that can accept the real actual browser focus</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>success</return-description>
		</method>
		<method name="expandAll" scope="instance">
			<description>Recursively expands all of this node's children.</description>
		</method>
		<method name="getNodeCount" scope="instance">
			<description>Count of nodes in a branch</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>number of nodes in the branch</return-description>
		</method>
		<method name="collapse" scope="instance">
			<description>Hides this nodes children (creating them if necessary), changes the toggle style.</description>
		</method>
		<method name="getSiblings" scope="instance">
			<description>Returns a node array of this node's siblings, null if none.</description>
			<return-description>Node[]</return-description>
		</method>
		<method name="editNode" scope="instance">
			<description>pops up the contents editor, if there is one and the node is declared editable</description>
		</method>
		<method name="getContentHtml" scope="instance">
			<description>Get the markup for the contents of the node. This is designed to be overrided so that we can support different types of nodes.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The HTML that will render the content of this node.</return-description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets the focus on the node element. It will only be able to set the focus on nodes that have anchor elements in it.  Toggle or branch icons have anchors and can be focused on.  If will fail in nodes that have no anchor</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>success</return-description>
		</method>
		<method name="displayEditedValue" scope="instance">
			<description>Finally displays the newly edited value(s) in the tree. Should be overridden by each node type.</description>
			<parameters>
			<parameter name="value" type="any" usage="required">
				<description> value to be displayed and stored in the node</description>
			</parameter>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
		</method>
		<method name="getStyle" scope="instance">
			<description>Returns the css style name for the toggle</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the css class for this node's toggle</return-description>
		</method>
		<method name="getNodeHtml" scope="instance">
			<description>Get the markup for the node. This may be overrided so that we can support different types of nodes.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The HTML that will render this node.</return-description>
		</method>
		<method name="getIconMode" scope="instance">
			<description>Returns the current icon mode. This refers to the way childless dynamic load nodes appear (this comes into play only after the initial dynamic load request produced no children).</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>0 for collapse style, 1 for leaf node style</return-description>
		</method>
		<method name="_setHighlightClassName" scope="instance" visibility="private">
			<description>Changes the classNames on the toggle and content containers to reflect the current highlighting</description>
		</method>
		<method name="hideChildren" scope="instance">
			<description>Hides this node's children</description>
		</method>
		<method name="destroyEditorContents" scope="instance">
			<description>Node-specific destroy function to empty the contents of the inline editor panel. This function is the worst case alternative that will purge all possible events and remove the editor contents. Method Event.purgeElement is somewhat costly so if it can be replaced by specifc Event.removeListeners, it is better to do so.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAncestor" scope="instance">
			<description>Returns this node's ancestor at the specified depth.</description>
			<parameters>
			<parameter name="depth" type="int" usage="required">
				<description> the depth of the ancestor.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the ancestor</return-description>
		</method>
		<method name="loadComplete" scope="instance">
			<description>Load complete is the callback function we pass to the data provider in dynamic load situations.</description>
		</method>
		<method name="expand" scope="instance">
			<description>Shows this nodes children (creating them if necessary), changes the toggle style, and collapses its siblings if multiExpand is not set.</description>
		</method>
		<method name="getElId" scope="instance">
			<description>Returns the id for this node's container div</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the element id</return-description>
		</method>
		<method name="isRoot" scope="instance">
			<description>Evaluates if this node is the root node of the tree</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this is the root node</return-description>
		</method>
		<method name="fillEditorContainer" scope="instance">
			<description>Placeholder for a function that should provide the inline node label editor. Leaving it set to null will indicate that this node type is not editable. It should be overridden by nodes that provide inline editing. The Node-specific editing element (input box, textarea or whatever) should be inserted into editorData.inputContainer.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="completeRender" scope="instance">
			<description>Called when we know we have all the child data.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>children html</return-description>
		</method>
		<method name="isChildOf" scope="instance" visibility="private">
			<description>Returns true if the Node is a child of supplied Node</description>
			<parameters>
			<parameter name="parentNode" type="Node" usage="required">
				<description> the Node to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>The node index if this Node is a child of 
supplied Node, else -1.</return-description>
		</method>
		<method name="getChildrenHtml" scope="instance" visibility="private">
			<description>Called when first rendering the tree. We always build the div that will contain this nodes children, but we don't render the children themselves unless this node is expanded.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the children container div html and any expanded children</return-description>
		</method>
		<method name="refresh" scope="instance">
			<description>Regenerates the html for this node and its children. To be used when the node is expanded and new children have been added.</description>
		</method>
		<method name="getToggleElId" scope="instance">
			<description>Returns the id for this node's toggle element</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the toggel element id</return-description>
		</method>
		<method name="getNodeDefinition" scope="instance">
			<description>Returns an object which could be used to build a tree out of this node and its children. It can be passed to the tree constructor to reproduce this node as a tree. It will return false if the node or any children loads dynamically, regardless of whether it is loaded or not.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the tree or false if the node or any children is defined as dynamic</return-description>
		</method>
		<method name="highlight" scope="instance">
			<description>Turns highlighting on node.</description>
			<parameters>
			<parameter name="_silent" type="boolean" usage="required">
				<description> optional, don't fire the highlightEvent</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderChildren" scope="instance" visibility="private">
			<description>Generates the markup for the child nodes. This is not done until the node is expanded.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the html for this node's children</return-description>
		</method>
		<method name="getHoverStyle" scope="instance">
			<description>Returns the hover style for the icon</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the css class hover state</return-description>
		</method>
		<method name="collapseAll" scope="instance">
			<description>Recursively collapses all of this node's children.</description>
		</method>
		<method name="applyParent" scope="instance">
			<description>Certain properties for the node cannot be set until the parent is known. This is called after the node is inserted into a tree. the parent is also applied to this node's children in order to make it possible to move a branch from one tree to another.</description>
			<parameters>
			<parameter name="parentNode" type="Node" usage="required">
				<description> this node's parent node</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the application was successful</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ColumnSeries">
		<description>ColumnSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>ColumnSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.ColumnSeries" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.ColumnChart">
		<description>ColumnChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>ColumnChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.ColumnChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.YUILoader">
		<description>YUILoader provides dynamic loading for YUI.</description>
		<properties>
		<property name="force" type="string[]" scope="instance">
			<description>A list of modules that should always be loaded, even if they have already been inserted into the page.</description>
		</property>
		<property name="varName" type="string" scope="instance">
			<description>The name of the variable in a sandbox or script node (for external script support in Safari 2.x and earlier) to reference when the load is complete. If this variable is not available in the specified scripts, the operation will fail.</description>
		</property>
		<property name="rollups" type="undefined" scope="instance">
			<description>List of rollup files found in the library metadata</description>
		</property>
		<property name="allowRollup" type="boolean" scope="instance">
			<description>Should we allow rollups</description>
		</property>
		<property name="skin" type="undefined" scope="instance">
			<description>Provides the information used to skin the skinnable components. The following skin definition would result in 'skin1' and 'skin2' being loaded for calendar (if calendar was requested), and 'sam' for all other skinnable components: &lt;code&gt; skin: { // The default skin, which is automatically applied if not // overriden by a component-specific skin definition. // Change this in to apply a different skin globally defaultSkin: 'sam', // This is combined with the loader base property to get // the default root directory for a skin. ex: // http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/ base: 'assets/skins/', // The name of the rollup css file for the skin path: 'skin.css', // The number of skinnable components requested that are // required before using the rollup file rather than the // individual component css files rollup: 3, // Any component-specific overrides can be specified here, // making it possible to load different skins for different // components. It is possible to load more than one skin // for a given component as well. overrides: { calendar: ['skin1', 'skin2'] } } &lt;/code&gt;</description>
		</property>
		<property name="loaded" type="{string: boolean}" scope="instance">
			<description>Set when beginning to compute the dependency tree. Composed of what YAHOO reports to be loaded combined with what has been loaded by the tool</description>
		</property>
		<property name="_internalCallback" type="undefined" scope="instance" visibility="private">
			<description>Internal callback to handle multiple internal insert() calls so that css is inserted prior to js</description>
		</property>
		<property name="inserted" type="{string: boolean}" scope="instance">
			<description>List of modules inserted by the utility</description>
		</property>
		<property name="charset" type="string" scope="instance">
			<description>The charset attribute for inserted nodes</description>
		</property>
		<property name="loadOptional" type="boolean" scope="instance">
			<description>Whether or not to load optional dependencies for the requested modules</description>
		</property>
		<property name="combine" type="boolean" scope="instance">
			<description>If configured, YUI will use the the combo handler on the Yahoo! CDN to pontentially reduce the number of http requests required.</description>
		</property>
		<property name="moduleInfo" type="undefined" scope="instance">
			<description>The library metadata</description>
		</property>
		<property name="scope" type="undefined" scope="instance">
			<description>The execution scope for all callbacks</description>
		</property>
		<property name="filter" type="string|{searchExp: string, replaceStr: string}" scope="instance">
			<description>A filter to apply to result urls. This filter will modify the default path for all modules. The default path for the YUI library is the minified version of the files (e.g., event-min.js). The filter property can be a predefined filter or a custom filter. The valid predefined filters are: &lt;dl&gt; &lt;dt&gt;DEBUG&lt;/dt&gt; &lt;dd&gt;Selects the debug versions of the library (e.g., event-debug.js). This option will automatically include the logger widget&lt;/dd&gt; &lt;dt&gt;RAW&lt;/dt&gt; &lt;dd&gt;Selects the non-minified version of the library (e.g., event.js). &lt;/dl&gt; You can also define a custom filter, which must be an object literal containing a search expression and a replace string: &lt;pre&gt; myFilter: &amp;#123; 'searchExp': &quot;-min\\.js&quot;, 'replaceStr': &quot;-debug.js&quot; &amp;#125; &lt;/pre&gt;</description>
		</property>
		<property name="comboBase" type="string" scope="instance">
			<description>Base path for the combo service</description>
		</property>
		<property name="insertBefore" type="string|HTMLElement" scope="instance">
			<description>Node reference or id where new nodes should be inserted before</description>
		</property>
		<property name="base" type="string" scope="instance">
			<description>The base directory.</description>
		</property>
		<property name="sorted" type="string[]" scope="instance">
			<description>All of the derived dependencies in sorted order, which will be populated when either calculate() or insert() is called</description>
		</property>
		<property name="data" type="undefined" scope="instance">
			<description>Data that is passed to all callbacks</description>
		</property>
		<property name="_useYahooListener" type="undefined" scope="instance" visibility="private">
			<description>Use the YAHOO environment listener to detect script load. This is only switched on for Safari 2.x and below.</description>
		</property>
		<property name="required" type="{string: boolean}" scope="instance">
			<description>The list of requested modules</description>
		</property>
		<property name="ignore" type="string[]" scope="instance">
			<description>A list of modules that should not be loaded, even if they turn up in the dependency tree</description>
		</property>
		<property name="dirty" type="boolean" scope="instance">
			<description>Flag to indicate the dependency tree needs to be recomputed if insert is called again.</description>
		</property>
		<property name="timeout" type="int" scope="instance">
			<description>Timeout value in milliseconds. If set, this value will be used by the get utility. the timeout event will fire if a timeout occurs.</description>
		</property>
		<property name="root" type="string" scope="instance">
			<description>Root path to prepend to module path for the combo service</description>
		</property>
		</properties>
		<methods>
		<method name="_pushEvents" scope="instance" visibility="private">
			<description>In IE, the onAvailable/onDOMReady events need help when Event is loaded dynamically</description>
			<parameters>
			<parameter name="optional" type="Function" usage="required">
				<description> function reference</description>
			</parameter>
			</parameters>
		</method>
		<method name="getRequires" scope="instance">
			<description>Returns an object containing properties for all modules required in order to load the requested module</description>
			<parameters>
			<parameter name="mod" type="" usage="required">
				<description> The module definition from moduleInfo</description>
			</parameter>
			</parameters>
		</method>
		<method name="onProgress" scope="instance">
			<description>Callback that will be executed each time a new module is loaded</description>
		</method>
		<method name="onTimeout" scope="instance">
			<description>Callback that will be executed if a timeout occurs</description>
		</method>
		<method name="getProvides" scope="instance">
			<description>Returns an object literal of the modules the supplied module satisfies</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The name of the module</description>
			</parameter>
			<parameter name="notMe" type="string" usage="required">
				<description> don't add this module name, only include superseded modules</description>
			</parameter>
			</parameters>
			<return-description>what this module provides</return-description>
		</method>
		<method name="_reduce" scope="instance" visibility="private">
			<description>Remove superceded modules and loaded modules. Called by calculate() after we have the mega list of all dependencies</description>
		</method>
		<method name="calculate" scope="instance">
			<description>Calculates the dependency tree, the result is stored in the sorted property</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> optional options object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_filter" scope="instance" visibility="private">
			<description>Applies filter method _filter</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the filtered string</return-description>
		</method>
		<method name="_addSkin" scope="instance" visibility="private">
			<description>Adds the skin def to the module info</description>
			<parameters>
			<parameter name="skin" type="string" usage="required">
				<description> the name of the skin</description>
			</parameter>
			<parameter name="mod" type="string" usage="required">
				<description> the name of the module</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the module name for the skin</return-description>
		</method>
		<method name="_explode" scope="instance" visibility="private">
			<description>Inspects the required modules list looking for additional dependencies. Expands the required list to include all required modules. Called by calculate()</description>
		</method>
		<method name="formatSkin" scope="instance">
			<description>Returns the skin module name for the specified skin name. If a module name is supplied, the returned skin module name is specific to the module passed in.</description>
			<parameters>
			<parameter name="skin" type="string" usage="required">
				<description> the name of the skin</description>
			</parameter>
			<parameter name="mod" type="string" usage="required">
				<description> optional: the name of a module to skin</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the full skin module name</return-description>
		</method>
		<method name="parseSkin" scope="instance">
			<description>Reverses &lt;code&gt;formatSkin&lt;/code&gt;, providing the skin name and module name if the string matches the pattern for skins.</description>
			<parameters>
			<parameter name="mod" type="string" usage="required">
				<description> the module name to parse</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="skin: string, module: string" />
			</return-types>
			<return-description>the parsed skin name 
and module name, or null if the supplied string does not match
the skin pattern</return-description>
		</method>
		<method name="addModule" scope="instance">
			<description>Add a new module to the component metadata.     &lt;dl&gt; &lt;dt&gt;name:&lt;/dt&gt;    &lt;dd&gt;required, the component name&lt;/dd&gt; &lt;dt&gt;type:&lt;/dt&gt;    &lt;dd&gt;required, the component type (js or css)&lt;/dd&gt; &lt;dt&gt;path:&lt;/dt&gt;    &lt;dd&gt;required, the path to the script from &quot;base&quot;&lt;/dd&gt; &lt;dt&gt;requires:&lt;/dt&gt;  &lt;dd&gt;array of modules required by this component&lt;/dd&gt; &lt;dt&gt;optional:&lt;/dt&gt;  &lt;dd&gt;array of optional modules for this component&lt;/dd&gt; &lt;dt&gt;supersedes:&lt;/dt&gt; &lt;dd&gt;array of the modules this component replaces&lt;/dd&gt; &lt;dt&gt;after:&lt;/dt&gt;   &lt;dd&gt;array of modules the components which, if present, should be sorted above this one&lt;/dd&gt; &lt;dt&gt;rollup:&lt;/dt&gt;   &lt;dd&gt;the number of superseded modules required for automatic rollup&lt;/dd&gt; &lt;dt&gt;fullpath:&lt;/dt&gt;  &lt;dd&gt;If fullpath is specified, this is used instead of the configured base + path&lt;/dd&gt; &lt;dt&gt;skinnable:&lt;/dt&gt; &lt;dd&gt;flag to determine if skin assets should automatically be pulled in&lt;/dd&gt; &lt;/dl&gt;</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> An object containing the module data</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the module was added, false if 
the object passed in did not provide all required attributes</return-description>
		</method>
		<method name="loadNext" scope="instance">
			<description>Executed every time a module is loaded, and if we are in a load cycle, we attempt to load the next script. Public so that it is possible to call this if using a method other than YAHOO.register to determine when scripts are fully loaded</description>
			<parameters>
			<parameter name="mname" type="string" usage="required">
				<description> optional the name of the module that has been loaded (which is usually why it is time to load the next one)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_rollup" scope="instance" visibility="private">
			<description>Look for rollup packages to determine if all of the modules a rollup supersedes are required. If so, include the rollup to help reduce the total number of connections required. Called by calculate()</description>
		</method>
		<method name="insert" scope="instance">
			<description>inserts the requested modules and their dependencies.  &lt;code&gt;type&lt;/code&gt; can be &quot;js&quot; or &quot;css&quot;. Both script and css are inserted if type is not provided.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> optional options object</description>
			</parameter>
			<parameter name="type" type="string" usage="required">
				<description> the type of dependency to insert</description>
			</parameter>
			</parameters>
		</method>
		<method name="_sort" scope="instance" visibility="private">
			<description>Sorts the dependency tree. The last step of calculate()</description>
		</method>
		<method name="onFailure" scope="instance">
			<description>Callback that will be executed if there is a failure</description>
		</method>
		<method name="require" scope="instance">
			<description>Add a requirement for one or more module</description>
			<parameters>
			<parameter name="what" type="string[] | string*" usage="required">
				<description> the modules to load</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setup" scope="instance" visibility="private">
			<description>Investigates the current YUI configuration on the page. By default, modules already detected will not be loaded again unless a force option is encountered. Called by calculate()</description>
		</method>
		<method name="onSuccess" scope="instance">
			<description>Callback that will be executed when the loader is finished with an insert</description>
		</method>
		<method name="sandbox" scope="instance">
			<description>Interns the script for the requested modules. The callback is provided a reference to the sandboxed YAHOO object. This only applies to the script: css can not be sandboxed; css will be loaded into the page normally if specified.</description>
			<parameters>
			<parameter name="callback" type="Function" usage="required">
				<description> the callback to exectued when the load is complete.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_url" scope="instance" visibility="private">
			<description>Generates the full url for a module method _url</description>
			<parameters>
			<parameter name="path" type="string" usage="required">
				<description> the path fragment</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the full url</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Region">
		<description>A region is a representation of an object on a grid.  It is defined
by the top, right, bottom, left extents, so is rectangular by default.  If 
other shapes are required, this class could be extended to support it.</description>
		<constructors>
		<constructor scope="instance">
			<description>A region is a representation of an object on a grid.  It is defined
by the top, right, bottom, left extents, so is rectangular by default.  If 
other shapes are required, this class could be extended to support it.</description>
			<return-types>
				<return-type type="YAHOO.util.Region" />
			</return-types>
			<parameters>
			<parameter name="t" type="Int" usage="required">
				<description> the top extent</description>
			</parameter>
			<parameter name="r" type="Int" usage="required">
				<description> the right extent</description>
			</parameter>
			<parameter name="b" type="Int" usage="required">
				<description> the bottom extent</description>
			</parameter>
			<parameter name="l" type="Int" usage="required">
				<description> the left extent</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="right" type="int" scope="instance">
			<description>The region's right extent</description>
		</property>
		<property name="bottom" type="Int" scope="instance">
			<description>The region's bottom extent</description>
		</property>
		<property name="top" type="Int" scope="instance">
			<description>The region's top extent</description>
		</property>
		<property name="height" type="Int" scope="instance">
			<description>The region's total height</description>
		</property>
		<property name="1" type="Int" scope="instance">
			<description>The region's top extent as index, for symmetry with set/getXY</description>
		</property>
		<property name="0" type="Int" scope="instance">
			<description>The region's left extent as index, for symmetry with set/getXY</description>
		</property>
		<property name="y" type="Int" scope="instance">
			<description>The region's top extent</description>
		</property>
		<property name="x" type="Int" scope="instance">
			<description>The region's left extent</description>
		</property>
		<property name="width" type="Int" scope="instance">
			<description>The region's total width</description>
		</property>
		<property name="left" type="Int" scope="instance">
			<description>The region's left extent</description>
		</property>
		</properties>
		<methods>
		<method name="getArea" scope="instance">
			<description>Returns the area of the region</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>the region's area</return-description>
		</method>
		<method name="getRegion" scope="static">
			<description>Returns a region that is occupied by the DOM element</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Region" />
			</return-types>
			<return-description>The region that the element occupies</return-description>
		</method>
		<method name="contains" scope="instance">
			<description>Returns true if this region contains the region passed in</description>
			<parameters>
			<parameter name="region" type="Region" usage="required">
				<description> The region to evaluate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the region is contained with this region, 
else false</return-description>
		</method>
		<method name="union" scope="instance">
			<description>Returns the region representing the smallest region that can contain both the passed in region and this region.</description>
			<parameters>
			<parameter name="region" type="Region" usage="required">
				<description> The region that to create the union with</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Region" />
			</return-types>
			<return-description>The union region</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>toString</description>
			<return-description>string the region properties</return-description>
		</method>
		<method name="intersect" scope="instance">
			<description>Returns the region where the passed in region overlaps with this one</description>
			<parameters>
			<parameter name="region" type="Region" usage="required">
				<description> The region that intersects</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Region" />
			</return-types>
			<return-description>The overlap region, or null if there is no overlap</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ContainerEffect">
		<description>ContainerEffect encapsulates animation transitions that are executed when 
an Overlay is shown or hidden.</description>
		<constructors>
		<constructor scope="instance">
			<description>ContainerEffect encapsulates animation transitions that are executed when 
an Overlay is shown or hidden.</description>
			<return-types>
				<return-type type="YAHOO.widget.ContainerEffect" />
			</return-types>
			<parameters>
			<parameter name="overlay" type="YAHOO.widget.Overlay" usage="required">
				<description> The Overlay that the animation 
should be associated with</description>
			</parameter>
			<parameter name="attrIn" type="Object" usage="required">
				<description> The object literal representing the animation 
arguments to be used for the animate-in transition. The arguments for 
this literal are: attributes(object, see YAHOO.util.Anim for description), 
duration(Number), and method(i.e. Easing.easeIn).</description>
			</parameter>
			<parameter name="attrOut" type="Object" usage="required">
				<description> The object literal representing the animation 
arguments to be used for the animate-out transition. The arguments for  
this literal are: attributes(object, see YAHOO.util.Anim for description), 
duration(Number), and method(i.e. Easing.easeIn).</description>
			</parameter>
			<parameter name="targetElement" type="HTMLElement" usage="optional">
				<description> Optional. The target element that  
should be animated during the transition. Defaults to overlay.element.</description>
			</parameter>
			<parameter name="Optional." type="class" usage="required">
				<description> The animation class to instantiate. Defaults to 
YAHOO.util.Anim. Other options include YAHOO.util.Motion.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="attrOut" type="Object" scope="instance">
			<description>The animation attributes to use when transitioning out of view</description>
		</property>
		<property name="animClass" type="class" scope="instance">
			<description>The animation class to use for animating the overlay</description>
		</property>
		<property name="targetElement" type="HTMLElement" scope="instance">
			<description>The target element to be animated</description>
		</property>
		<property name="attrIn" type="Object" scope="instance">
			<description>The animation attributes to use when transitioning into view</description>
		</property>
		<property name="overlay" type="YAHOO.widget.Overlay" scope="instance">
			<description>The overlay to animate</description>
		</property>
		</properties>
		<methods>
		<method name="handleTweenAnimateOut" scope="instance">
			<description>The default onTween handler for the out-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleStartAnimateIn" scope="instance">
			<description>The default onStart handler for the in-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleStartAnimateOut" scope="instance">
			<description>The default onStart handler for the out-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="animateOut" scope="instance">
			<description>Triggers the out-animation.</description>
		</method>
		<method name="handleCompleteAnimateOut" scope="instance">
			<description>The default onComplete handler for the out-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Initializes the animation classes and events.</description>
		</method>
		<method name="handleTweenAnimateIn" scope="instance">
			<description>The default onTween handler for the in-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="SLIDE" scope="static">
			<description>A pre-configured ContainerEffect instance that can be used for sliding an overlay in and out.</description>
			<parameters>
			<parameter name="overlay" type="YAHOO.widget.Overlay" usage="required">
				<description> The Overlay object to animate</description>
			</parameter>
			<parameter name="dur" type="Number" usage="required">
				<description> The duration of the animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ContainerEffect" />
			</return-types>
			<return-description>The configured ContainerEffect object</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the ContainerEffect</return-description>
		</method>
		<method name="FADE" scope="static">
			<description>A pre-configured ContainerEffect instance that can be used for fading an overlay in and out.</description>
			<parameters>
			<parameter name="overlay" type="YAHOO.widget.Overlay" usage="required">
				<description> The Overlay object to animate</description>
			</parameter>
			<parameter name="dur" type="Number" usage="required">
				<description> The duration of the animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ContainerEffect" />
			</return-types>
			<return-description>The configured ContainerEffect object</return-description>
		</method>
		<method name="handleCompleteAnimateIn" scope="instance">
			<description>The default onComplete handler for the in-animation.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="animateIn" scope="instance">
			<description>Triggers the in-animation.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Motion" superclass="YAHOO.util.ColorAnim">
		<description>Anim subclass for moving elements along a path defined by the &quot;points&quot; 
member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Anim subclass for moving elements along a path defined by the &quot;points&quot; 
member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.Motion" />
			</return-types>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> Reference to the element that will be animated</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description> The attribute(s) to be animated.  
Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  
Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  
All attribute names use camelCase.</description>
			</parameter>
			<parameter name="duration" type="Number" usage="required">
				<description> (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.ObjectAssert">
		<description>The ObjectAssert object provides functions to test JavaScript objects
for a variety of cases.</description>
		<methods>
		<method name="hasProperty" scope="static">
			<description>Asserts that an object has a property with the given name.</description>
			<parameters>
			<parameter name="propertyName" type="String" usage="required">
				<description> The name of the property to test.</description>
			</parameter>
			<parameter name="object" type="Object" usage="required">
				<description> The object to search.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="propertiesAreEqual" scope="static">
			<description>Asserts that all properties in the object exist in another object.</description>
			<parameters>
			<parameter name="expected" type="Object" usage="required">
				<description> An object with the expected properties.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> An object with the actual properties.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.LineSeries">
		<description>LineSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>LineSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.LineSeries" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.BarChart">
		<description>BarChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>BarChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.BarChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.TimeAxis">
		<description>A type of axis whose units are measured in time-based values.</description>
		<constructors>
		<constructor scope="instance">
			<description>A type of axis whose units are measured in time-based values.</description>
			<return-types>
				<return-type type="YAHOO.widget.TimeAxis" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="stackingEnabled" type="Boolean" scope="instance">
			<description>Series that are stackable will only stack when this value is set to true.</description>
		</property>
		<property name="calculateByLabelSize" type="Boolean" scope="instance">
			<description>Indicates whether to factor in the size of the labels when calculating a major unit.</description>
		</property>
		<property name="minimum" type="Date" scope="instance">
			<description>The minimum value drawn by the axis. If not set explicitly, the axis minimum will be calculated automatically.</description>
		</property>
		<property name="maximum" type="Number" scope="instance">
			<description>The maximum value drawn by the axis. If not set explicitly, the axis maximum will be calculated automatically.</description>
		</property>
		<property name="majorTimeUnit" type="String" scope="instance">
			<description>The time unit used by the majorUnit.</description>
		</property>
		<property name="majorUnit" type="Number" scope="instance">
			<description>The spacing between major intervals on this axis.</description>
		</property>
		<property name="snapToUnits" type="Boolean" scope="instance">
			<description>If true, the labels, ticks, gridlines, and other objects will snap to the nearest major or minor unit. If false, their position will be based on the minimum value.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.CustomEvent">
		<description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
		<constructors>
		<constructor scope="instance">
			<description>The CustomEvent class lets you define events for your application
that can be subscribed to by one or more independent component.</description>
			<return-types>
				<return-type type="YAHOO.util.CustomEvent" />
			</return-types>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type of event, which is passed to the callback
when the event fires</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> The context the event will fire from.  &quot;this&quot; will
refer to this object in the callback.  Default value: 
the window object.  The listener can override this.</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> pass true to prevent the event from writing to
the debugsystem</description>
			</parameter>
			<parameter name="signature" type="int" usage="required">
				<description> the signature that the custom event subscriber
will receive. YAHOO.util.CustomEvent.LIST or 
YAHOO.util.CustomEvent.FLAT.  The default is
YAHOO.util.CustomEvent.LIST.</description>
			</parameter>
			<parameter name="fireOnce" type="boolean" usage="required">
				<description>  If configured to fire once, the custom event 
will only notify subscribers a single time regardless of how many times 
the event is fired.  In addition, new subscribers will be notified 
immediately if the event has already been fired.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="fired" type="boolean" scope="instance">
			<description>Indicates whether or not this event has ever been fired.</description>
		</property>
		<property name="fireOnce" type="boolean" scope="instance">
			<description>If configured to fire once, the custom event will only notify subscribers a single time regardless of how many times the event is fired. In addition, new subscribers will be notified immediately if the event has already been fired.</description>
		</property>
		<property name="YAHOO.util.CustomEvent.FLAT" type="int" scope="static">
			<description>Subscriber listener sigature constant. The FLAT type returns two parameters: the first argument passed to fire and the optional custom object</description>
		</property>
		<property name="firedWith" type="Array" scope="instance">
			<description>For fireOnce events the arguments the event was fired with are stored so that new subscribers get the proper payload.</description>
		</property>
		<property name="subscribers" type="Subscriber[]" scope="instance">
			<description>The subscribers to this event</description>
		</property>
		<property name="signature" type="int" scope="instance">
			<description>Custom events support two styles of arguments provided to the event subscribers.  &lt;ul&gt; &lt;li&gt;YAHOO.util.CustomEvent.LIST: &lt;ul&gt; &lt;li&gt;param1: event name&lt;/li&gt; &lt;li&gt;param2: array of arguments sent to fire&lt;/li&gt; &lt;li&gt;param3: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;YAHOO.util.CustomEvent.FLAT &lt;ul&gt; &lt;li&gt;param1: the first argument passed to fire. If you need to pass multiple parameters, use and array or object literal&lt;/li&gt; &lt;li&gt;param2: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="YAHOO.util.CustomEvent.LIST" type="int" scope="static">
			<description>Subscriber listener sigature constant. The LIST type returns three parameters: the event type, the array of args passed to fire, and the optional custom object</description>
		</property>
		<property name="scope" type="object" scope="instance">
			<description>The context the event will fire from by default. Defaults to the window obj.</description>
		</property>
		<property name="lastError" type="Error" scope="instance">
			<description>In order to make it possible to execute the rest of the subscriber stack when one thows an exception, the subscribers exceptions are caught. The most recent exception is stored in this property</description>
		</property>
		<property name="type" type="string" scope="instance">
			<description>The type of event, returned to subscribers when the event fires</description>
		</property>
		<property name="silent" type="boolean" scope="instance">
			<description>By default all custom events are logged in the debug build. Set silent to true to disable debug output for this event.</description>
		</property>
		</properties>
		<methods>
		<method name="_delete" scope="instance" visibility="private">
		</method>
		<method name="fire" scope="instance">
			<description>Notifies the subscribers. The callback functions will be executed from the context specified when the event was created, and with the following parameters: &lt;ul&gt; &lt;li&gt;The type of event&lt;/li&gt; &lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt; &lt;li&gt;The custom object (if any) that was passed into the subscribe() method&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="arguments" type="Object*" usage="required">
				<description> an arbitrary set of parameters to pass to the handler.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>false if one of the subscribers returned false, 
true otherwise</return-description>
		</method>
		<method name="unsubscribeAll" scope="instance">
			<description>Removes all listeners</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>The number of listeners unsubscribed</return-description>
		</method>
		<method name="subscribe" scope="instance">
			<description>Subscribes the caller to this event</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The function to execute</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>    An object to be passed along when the event fires. overrideContext &lt;boolean|Object&gt; If true, the obj passed in becomes the execution context of the listener. If an object, that object becomes the execution context.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
		</method>
		<method name="unsubscribe" scope="instance">
			<description>Unsubscribes subscribers.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The subscribed function to remove, if not supplied all will be removed</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The custom object passed to subscribe. This is optional, but if supplied will be used to disambiguate multiple listeners that are the same (e.g., you subscribe many object using a function that lives on the prototype)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>True if the subscriber was found and detached.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.MenuBarItem" superclass="YAHOO.widget.MenuItem">
		<description>Creates an item for a menu bar.</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates an item for a menu bar.</description>
			<return-types>
				<return-type type="YAHOO.widget.MenuBarItem" />
			</return-types>
			<parameters>
			<parameter name="p_oObject" type="String" usage="required">
				<description> String specifying the text of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLLIElement" usage="required">
				<description> Object specifying the 
&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptGroupElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptionElement" usage="required">
				<description> Object specifying 
the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the menu bar item. See configuration class documentation 
for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CSS_LABEL_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the menu bar item's &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
		</property>
		</properties>
		<methods>
		<method name="init" scope="instance">
			<description>The MenuBarItem class's initialization method. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="p_oObject" type="String" usage="required">
				<description> String specifying the text of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLLIElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptGroupElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptionElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu bar item.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the configuration for the menu bar item. See configuration class documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the menu bar item.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Module">
		<description>Module is a JavaScript representation of the Standard Module Format. 
Standard Module Format is a simple standard for markup containers where 
child nodes representing the header, body, and footer of the content are 
denoted using the CSS classes &quot;hd&quot;, &quot;bd&quot;, and &quot;ft&quot; respectively. 
Module is the base class for all other classes in the YUI 
Container package.</description>
		<constructors>
		<constructor scope="instance">
			<description>Module is a JavaScript representation of the Standard Module Format. 
Standard Module Format is a simple standard for markup containers where 
child nodes representing the header, body, and footer of the content are 
denoted using the CSS classes &quot;hd&quot;, &quot;bd&quot;, and &quot;ft&quot; respectively. 
Module is the base class for all other classes in the YUI 
Container package.</description>
			<return-types>
				<return-type type="YAHOO.widget.Module" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Module &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Module</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration Object literal containing 
the configuration that should be set for this module. See configuration 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="body" type="HTMLElement" scope="instance">
			<description>The body element, denoted with CSS class &quot;bd&quot;</description>
		</property>
		<property name="isSecure" type="Boolean" scope="instance">
			<description>Boolean representing whether or not the current browsing context is secure (https)</description>
		</property>
		<property name="YAHOO.widget.Module.CSS_MODULE" type="String" scope="static">
			<description>Constant for the default CSS class name that represents a Module</description>
		</property>
		<property name="YAHOO.widget.Module.CSS_HEADER" type="String" scope="static">
			<description>Constant representing the module header</description>
		</property>
		<property name="YAHOO.widget.Module.CSS_FOOTER" type="String" scope="static">
			<description>Constant representing the module footer</description>
		</property>
		<property name="contructor" type="Function" scope="instance">
			<description>The class's constructor function</description>
		</property>
		<property name="platform" type="String" scope="instance">
			<description>String representing the current user-agent platform</description>
		</property>
		<property name="element" type="HTMLElement" scope="instance">
			<description>The main module element that contains the header, body, and footer</description>
		</property>
		<property name="YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL" type="String" scope="static">
			<description>Constant representing the url for the &quot;src&quot; attribute of the iframe used to monitor changes to the browser's base font size</description>
		</property>
		<property name="header" type="HTMLElement" scope="instance">
			<description>The header element, denoted with CSS class &quot;hd&quot;</description>
		</property>
		<property name="YAHOO.widget.Module.CSS_BODY" type="String" scope="static">
			<description>Constant representing the module body</description>
		</property>
		<property name="YAHOO.widget.Module.IMG_ROOT" type="String" scope="static">
			<description>Constant representing the prefix path to use for non-secure images</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the Module's events</description>
		</property>
		<property name="imageRoot" type="String" scope="instance">
			<description>A string representing the root path for all images created by a Module instance.</description>
		</property>
		<property name="cfg" type="YAHOO.util.Config" scope="instance">
			<description>The Module's Config object used for monitoring configuration properties.</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The id of the element</description>
		</property>
		<property name="footer" type="HTMLElement" scope="instance">
			<description>The footer element, denoted with CSS class &quot;ft&quot;</description>
		</property>
		<property name="YAHOO.widget.Module.RESIZE_MONITOR_BUFFER" type="Number" scope="static">
			<description>Constant representing the buffer amount (in pixels) to use when positioning the text resize monitor offscreen. The resize monitor is positioned offscreen by an amount eqaul to its offsetHeight + the buffer value.</description>
		</property>
		<property name="YAHOO.widget.Module.IMG_ROOT_SSL" type="String" scope="static">
			<description>Constant representing the prefix path to use for securely served images</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the Module's configuration properties</description>
		</property>
		<property name="browser" type="String" scope="instance">
			<description>String representing the user-agent of the browser</description>
		</property>
		</properties>
		<methods>
		<method name="render" scope="instance">
			<description>Renders the Module by inserting the elements that are not already in the main Module into their correct places. Optionally appends the Module to the specified node prior to the render's execution. &lt;p&gt; For Modules without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure. &lt;/p&gt; &lt;p&gt; NOTE: As of 2.3.1, if the appendToNode is the document's body element then the module is rendered as the first child of the body element, and not appended to it, to avoid Operation Aborted errors in IE when rendering the module before window's load event is fired. You can use the appendtodocumentbody configuration property to change this to append to document.body if required. &lt;/p&gt;</description>
			<parameters>
			<parameter name="appendToNode" type="String" usage="required">
				<description> The element id to which the Module should be appended to prior to rendering &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="appendToNode" type="HTMLElement" usage="required">
				<description> The element to which the Module should be appended to prior to rendering</description>
			</parameter>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> OPTIONAL. The element that represents the actual Standard Module container.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Success or failure of the render</return-description>
		</method>
		<method name="show" scope="instance">
			<description>Shows the Module element by setting the visible configuration property to true. Also fires two events: beforeShowEvent prior to the visibility change, and showEvent after.</description>
		</method>
		<method name="_renderBody" scope="instance">
			<description>Renders the currently set body into it's proper position under the module element. If the module element is not provided, &quot;this.element&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderHeader" scope="instance">
			<description>Renders the currently set header into it's proper position under the module element. If the module element is not provided, &quot;this.element&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element</description>
			</parameter>
			</parameters>
		</method>
		<method name="setBody" scope="instance">
			<description>Sets the Module's body content to the HTML specified. If no body is present, one will be automatically created. An empty string can be passed to the method to clear the contents of the body.</description>
			<parameters>
			<parameter name="bodyContent" type="String" usage="required">
				<description> The HTML used to set the body. As a convenience, non HTMLElement objects can also be passed into the method, and will be treated as strings, with the body innerHTML set to their default toString implementations. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="bodyContent" type="HTMLElement" usage="required">
				<description> The HTMLElement to add as the first and only child of the body element. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="bodyContent" type="DocumentFragment" usage="required">
				<description> The document fragment containing elements which are to be added to the body</description>
			</parameter>
			</parameters>
		</method>
		<method name="hide" scope="instance">
			<description>Hides the Module element by setting the visible configuration property to false. Also fires two events: beforeHideEvent prior to the visibility change, and hideEvent after.</description>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.</description>
		</method>
		<method name="initResizeMonitor" scope="instance">
			<description>Initialize an empty IFRAME that is placed out of the visible area that can be used to detect text resize.</description>
		</method>
		<method name="_supportsCWResize" scope="instance" visibility="private">
			<description>Text resize monitor helper method. Determines if the browser supports resize events on iframe content windows.</description>
		</method>
		<method name="init" scope="instance">
			<description>The Module class's initialization method, which is executed for Module and all of its subclasses. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present. &lt;p&gt; If the element passed in does not have an id, one will be generated for it. &lt;/p&gt;</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Module &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Module</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a String representation of the Object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the Module</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the Module element from the DOM and sets all child elements to null.</description>
		</method>
		<method name="_renderFooter" scope="instance">
			<description>Renders the currently set footer into it's proper position under the module element. If the module element is not provided, &quot;this.element&quot; is used.</description>
			<parameters>
			<parameter name="moduleElement" type="HTMLElement" usage="optional">
				<description> Optional. A reference to the module element</description>
			</parameter>
			</parameters>
		</method>
		<method name="appendToHeader" scope="instance">
			<description>Appends the passed element to the header. If no header is present, one will be automatically created.</description>
			<parameters>
			<parameter name="element" type="HTMLElement | DocumentFragment" usage="required">
				<description> The element to append to the header. In the case of a document fragment, the children of the fragment will be appended to the header.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDomResize" scope="instance">
			<description>Event handler fired when the resize monitor element is resized.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM resize event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object passed to the handler</description>
			</parameter>
			</parameters>
		</method>
		<method name="setFooter" scope="instance">
			<description>Sets the Module's footer content to the HTML specified, or appends the passed element to the footer. If no footer is present, one will be automatically created. An empty string can be passed to the method to clear the contents of the footer.</description>
			<parameters>
			<parameter name="footerContent" type="String" usage="required">
				<description> The HTML used to set the footer As a convenience, non HTMLElement objects can also be passed into the method, and will be treated as strings, with the footer innerHTML set to their default toString implementations. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="footerContent" type="HTMLElement" usage="required">
				<description> The HTMLElement to append to the footer &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="footerContent" type="DocumentFragment" usage="required">
				<description> The document fragment containing elements which are to be added to the footer</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.Module.forceDocumentRedraw" scope="static">
			<description>Helper utility method, which forces a document level redraw for Opera, which can help remove repaint irregularities after applying DOM changes.</description>
		</method>
		<method name="configMonitorResize" scope="instance">
			<description>Default event handler for the &quot;monitorresize&quot; configuration property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="appendToFooter" scope="instance">
			<description>Appends the passed element to the footer. If no footer is present, one will be automatically created.</description>
			<parameters>
			<parameter name="element" type="HTMLElement | DocumentFragment" usage="required">
				<description> The element to append to the footer. In the case of a document fragment, the children of the fragment will be appended to the footer</description>
			</parameter>
			</parameters>
		</method>
		<method name="configVisible" scope="instance">
			<description>Default event handler for changing the visibility property of a Module. By default, this is achieved by switching the &quot;display&quot; style between &quot;block&quot; and &quot;none&quot;. This method is responsible for firing showEvent and hideEvent.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addToParent" scope="instance">
			<description>This method is a protected helper, used when constructing the DOM structure for the module to account for situations which may cause Operation Aborted errors in IE. It should not be used for general DOM construction. &lt;p&gt; If the parentNode is not document.body, the element is appended as the last element. &lt;/p&gt; &lt;p&gt; If the parentNode is document.body the element is added as the first child to help prevent Operation Aborted errors in IE. &lt;/p&gt;</description>
			<parameters>
			<parameter name="The" type="parentNode" usage="required">
				<description> HTML element to which the element will be added</description>
			</parameter>
			<parameter name="The" type="element" usage="required">
				<description> HTML element to be added to parentNode's children</description>
			</parameter>
			</parameters>
		</method>
		<method name="appendToBody" scope="instance">
			<description>Appends the passed element to the body. If no body is present, one will be automatically created.</description>
			<parameters>
			<parameter name="element" type="HTMLElement | DocumentFragment" usage="required">
				<description> The element to append to the body. In the case of a document fragment, the children of the fragment will be appended to the body.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initResizeMonitor" scope="instance">
			<description>Create and initialize the text resize monitoring iframe.</description>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.</description>
		</method>
		<method name="setHeader" scope="instance">
			<description>Sets the Module's header content to the string specified, or appends the passed element to the header. If no header is present, one will be automatically created. An empty string can be passed to the method to clear the contents of the header.</description>
			<parameters>
			<parameter name="headerContent" type="String" usage="required">
				<description> The string used to set the header. As a convenience, non HTMLElement objects can also be passed into the method, and will be treated as strings, with the header innerHTML set to their default toString implementations. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="headerContent" type="HTMLElement" usage="required">
				<description> The HTMLElement to append to &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="headerContent" type="DocumentFragment" usage="required">
				<description> The document fragment containing elements which are to be added to the header</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.FirstPageLink">
		<description>ui Component to generate the link to jump to the first page.</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the link to jump to the first page.</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.FirstPageLink" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="current" type="HTMLElement" scope="instance" visibility="private">
			<description>The currently placed HTMLElement node</description>
		</property>
		<property name="span" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node (inactive link)</description>
		</property>
		<property name="link" type="HTMLElement" scope="instance" visibility="private">
			<description>Link node</description>
		</property>
		</properties>
		<methods>
		<method name="onClick" scope="instance">
			<description>Listener for the link's onclick event. Pass new value to setPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the link/span node and clears event listeners removal.</description>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Swap the link and span nodes if appropriate.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the appropriate node given the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.TestCase.Wait">
		<description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
		<constructors>
		<constructor scope="instance">
			<description>Represents a stoppage in test execution to wait for an amount of time before
continuing.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestCase.Wait" />
			</return-types>
			<parameters>
			<parameter name="segment" type="Function" usage="required">
				<description> A function to run when the wait is over.</description>
			</parameter>
			<parameter name="delay" type="int" usage="required">
				<description> The number of milliseconds to wait before running the code.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="delay" type="int" scope="instance">
			<description>The delay before running the segment of code.</description>
		</property>
		<property name="segment" type="Function" scope="instance">
			<description>The segment of code to run when the wait is over.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.lang">
		<description>Provides the language utilites and extensions used by the library</description>
		<properties>
		<property name="_IEEnumFix" type="undefined" scope="static" visibility="private">
			<description>IE will not enumerate native functions in a derived object even if the function was overridden. This is a workaround for specific functions we care about on the Object prototype.</description>
		</property>
		</properties>
		<methods>
		<method name="isArray" scope="instance">
			<description>Determines wheather or not the provided object is an array.</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="trim" scope="instance">
			<description>Returns a string without any leading or trailing whitespace. If the input is not a string, the input will be returned untouched.</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> the string to trim</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the trimmed string</return-description>
		</method>
		<method name="isString" scope="instance">
			<description>Determines whether or not the provided object is a string</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="hasOwnProperty" scope="instance">
			<description>Determines whether or not the property was added to the object instance. Returns false if the property is not present in the object, or was inherited from the prototype. This abstraction is provided to enable hasOwnProperty for Safari 1.3.x. There is a discrepancy between YAHOO.lang.hasOwnProperty and Object.prototype.hasOwnProperty when the property is a primitive added to both the instance AND prototype with the same value: &lt;pre&gt; var A = function() {}; A.prototype.foo = 'foo'; var a = new A(); a.foo = 'foo'; alert(a.hasOwnProperty('foo')); // true alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback &lt;/pre&gt;</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			<parameter name="prop" type="string" usage="required">
				<description> the name of the property to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="isBoolean" scope="instance">
			<description>Determines whether or not the provided object is a boolean</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="extend" scope="static">
			<description>Utility to set up the prototype, constructor and superclass properties to support an inheritance strategy that can chain constructors and methods. Static members will not be inherited.</description>
			<parameters>
			<parameter name="subc" type="Function" usage="required">
				<description>  the object to modify</description>
			</parameter>
			<parameter name="superc" type="Function" usage="required">
				<description> the object to inherit</description>
			</parameter>
			<parameter name="overrides" type="Object" usage="required">
				<description> additional properties/methods to add to the subclass prototype. These will override the matching items obtained from the superclass if present.</description>
			</parameter>
			</parameters>
		</method>
		<method name="merge" scope="instance">
			<description>Returns a new object containing all of the properties of all the supplied objects. The properties from later objects will overwrite those in earlier objects.</description>
			<parameters>
			<parameter name="arguments" type="Object*" usage="required">
				<description> the objects to merge</description>
			</parameter>
			</parameters>
			<return-description>the new merged object</return-description>
		</method>
		<method name="later" scope="instance">
			<description>Executes the supplied function in the context of the supplied object 'when' milliseconds later. Executes the function a single time unless periodic is set to true.</description>
			<parameters>
			<parameter name="when" type="int" usage="required">
				<description> the number of milliseconds to wait until the fn is executed</description>
			</parameter>
			<parameter name="o" type="" usage="required">
				<description> the context object</description>
			</parameter>
			<parameter name="fn" type="Function|String" usage="required">
				<description> the function to execute or the name of the method in the 'o' object to execute</description>
			</parameter>
			<parameter name="data" type="" usage="required">
				<description> [Array] data that is provided to the function. This accepts either a single item or an array. If an array is provided, the function is executed with one parameter for each array item. If you need to pass a single array parameter, it needs to be wrapped in an array [myarray]</description>
			</parameter>
			<parameter name="periodic" type="boolean" usage="required">
				<description> if true, executes continuously at supplied interval until canceled</description>
			</parameter>
			</parameters>
			<return-description>a timer object. Call the cancel() method on this object to 
stop the timer.</return-description>
		</method>
		<method name="substitute" scope="instance">
			<description>Does variable substitution on a string. It scans through the string looking for expressions enclosed in { } braces. If an expression is found, it is used a key on the object. If there is a space in the key, the first word is used for the key and the rest is provided to an optional function to be used to programatically determine the value (the extra information might be used for this decision). If the value for the key in the object, or what is returned from the function has a string value, number value, or object value, it is substituted for the bracket expression and it repeats. If this value is an object, it uses the Object's toString() if this has been overridden, otherwise it does a shallow dump of the key/value pairs.</description>
			<parameters>
			<parameter name="s" type="String" usage="required">
				<description> The string that will be modified.</description>
			</parameter>
			<parameter name="o" type="Object" usage="required">
				<description> An object containing the replacement values</description>
			</parameter>
			<parameter name="f" type="Function" usage="required">
				<description> An optional function that can be used to process each match. It receives the key, value, and any extra metadata included with the key inside of the braces.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>the substituted string</return-description>
		</method>
		<method name="isNull" scope="instance">
			<description>Determines whether or not the provided object is null</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="isValue" scope="instance">
			<description>A convenience method for detecting a legitimate non-null value. Returns false for null/undefined/NaN, true for other values, including 0/false/''</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> the item to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if it is not null/undefined/NaN || false</return-description>
		</method>
		<method name="augmentObject" scope="static">
			<description>Applies all properties in the supplier to the receiver if the receiver does not have these properties yet. Optionally, one or more methods/properties can be specified (as additional parameters). This option will overwrite the property if receiver has it already. If true is passed as the third parameter, all properties will be applied and _will_ overwrite properties in the receiver.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="arguments" type="String*|boolean" usage="required">
				<description> zero or more properties methods to augment the receiver with. If none specified, everything in the supplier will be used unless it would overwrite an existing property in the receiver. If true is specified as the third parameter, all properties will be applied and will overwrite an existing property in the receiver</description>
			</parameter>
			</parameters>
		</method>
		<method name="augment" scope="static">
			<description>Same as YAHOO.lang.augmentObject, except it only applies prototype properties. This is an alias for augmentProto.</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="arguments" type="String*|boolean" usage="required">
				<description> zero or more properties methods to augment the receiver with. If none specified, everything in the supplier will be used unless it would overwrite an existing property in the receiver. if true is specified as the third parameter, all properties will be applied and will overwrite an existing property in the receiver</description>
			</parameter>
			</parameters>
		</method>
		<method name="augmentProto" scope="static">
			<description>Same as YAHOO.lang.augmentObject, except it only applies prototype properties</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="arguments" type="String*|boolean" usage="required">
				<description> zero or more properties methods to augment the receiver with. If none specified, everything in the supplier will be used unless it would overwrite an existing property in the receiver. if true is specified as the third parameter, all properties will be applied and will overwrite an existing property in the receiver</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFunction" scope="instance">
			<description>Determines whether or not the provided object is a function. Note: Internet Explorer thinks certain functions are objects: var obj = document.createElement(&quot;object&quot;); YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE var input = document.createElement(&quot;input&quot;); // append to body YAHOO.lang.isFunction(input.focus) // reports false in IE You will have to implement additional tests if these functions matter to you.</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="isNumber" scope="instance">
			<description>Determines whether or not the provided object is a legal number</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="isObject" scope="instance">
			<description>Determines whether or not the provided object is of type object or function</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		<method name="dump" scope="instance">
			<description>Returns a simple string representation of the object or array. Other types of objects will be returned unprocessed. Arrays are expected to be indexed. Use object notation for associative arrays.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> The object to dump</description>
			</parameter>
			<parameter name="d" type="int" usage="required">
				<description> How deep to recurse child objects, default 3</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>the dump result</return-description>
		</method>
		<method name="isUndefined" scope="instance">
			<description>Determines whether or not the provided object is undefined</description>
			<parameters>
			<parameter name="o" type="any" usage="required">
				<description> The object being testing</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the result</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.DataTable" superclass="YAHOO.util.Element">
		<description>DataTable class for the YUI DataTable widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>DataTable class for the YUI DataTable widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.DataTable" />
			</return-types>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description>  Container element for the TABLE.</description>
			</parameter>
			<parameter name="aColumnDefs" type="Object[]" usage="required">
				<description>  Array of object literal Column definitions.</description>
			</parameter>
			<parameter name="oDataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DataTable.CLASS_MASK" type="String" scope="static">
			<description>Class name assigned to mask element when DataTable is disabled.</description>
		</property>
		<property name="DataTable.CLASS_LABEL" type="String" scope="static">
			<description>Class name assigned to display label elements.</description>
		</property>
		<property name="_sFirstTrId" type="String" scope="instance" visibility="private">
			<description>ID string of first TR element of the current DataTable page.</description>
		</property>
		<property name="DataTable.CLASS_LINER" type="String" scope="static">
			<description>Class name assigned to liner DIV elements.</description>
		</property>
		<property name="DataTable._elDynStyleNode" type="HTMLElement" scope="static" visibility="private">
			<description>Reference to the STYLE node that is dynamically created and updated in order to manage Column widths.</description>
		</property>
		<property name="_oColumnSet" type="YAHOO.widget.ColumnSet" scope="instance" visibility="private">
			<description>ColumnSet instance for the DataTable instance.</description>
		</property>
		<property name="_elMsgTbody" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the secondary TBODY element used to display DataTable messages.</description>
		</property>
		<property name="DataTable._oDynStyles" type="Object" scope="static" visibility="private">
			<description>Object literal hash of Columns and their dynamically create style rules.</description>
		</property>
		<property name="_bInit" type="Boolean" scope="instance" visibility="private">
			<description>True if instance is initialized, so as to fire the initEvent after render.</description>
		</property>
		<property name="_elCaption" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the CAPTION element for the DataTable instance.</description>
		</property>
		<property name="DataTable.CLASS_DISABLED" type="String" scope="static">
			<description>Class name assigned to disabled elements.</description>
		</property>
		<property name="DataTable.Formatter" type="Object" scope="static">
			<description>Cell formatting functions.</description>
		</property>
		<property name="DataTable.CLASS_CHECKBOX" type="String" scope="static">
			<description>Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements.</description>
		</property>
		<property name="DataTable.CLASS_PAGINATOR" type="String" scope="static">
			<description>Class name assigned to paginator container elements.</description>
		</property>
		<property name="DataTable.CLASS_ERROR" type="String" scope="static">
			<description>Class name assigned to error indicators.</description>
		</property>
		<property name="_oRecordSet" type="YAHOO.widget.RecordSet" scope="instance" visibility="private">
			<description>RecordSet instance for the DataTable instance.</description>
		</property>
		<property name="DataTable.CLASS_DESC" type="String" scope="static">
			<description>Class name assigned to descending elements.</description>
		</property>
		<property name="DataTable._nCurrentCount" type="Number" scope="static" visibility="private">
			<description>Internal class variable tracking current number of DataTable instances, so that certain class values can be reset when all instances are destroyed.</description>
		</property>
		<property name="DataTable.CLASS_HIGHLIGHTED" type="String" scope="static">
			<description>Class name assigned to highlighted elements.</description>
		</property>
		<property name="DataTable.CLASS_EVEN" type="String" scope="static">
			<description>Class name assigned to even elements.</description>
		</property>
		<property name="DataTable._bDynStylesFallback" type="boolean" scope="static" visibility="private">
			<description>Set to true if _elDynStyleNode cannot be populated due to browser incompatibility.</description>
		</property>
		<property name="_elContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the container element for the DataTable instance into which all other elements get created.</description>
		</property>
		<property name="DataTable.CLASS_HIDDEN" type="String" scope="static">
			<description>Class name assigned to hidden elements.</description>
		</property>
		<property name="DataTable.CLASS_NEXT" type="String" scope="static">
			<description>Class name assigned next indicators.</description>
		</property>
		<property name="DataTable.CLASS_RESIZERPROXY" type="String" scope="static">
			<description>Class name assigned to resizer proxy elements.</description>
		</property>
		<property name="_oAnchorCell" type="Object" scope="instance" visibility="private">
			<description>Object literal representing cell selection anchor: {recordId:sRecordId, columnKey:sColumnKey}.</description>
		</property>
		<property name="DataTable.CLASS_RESIZER" type="String" scope="static">
			<description>Class name assigned to resizer handle elements.</description>
		</property>
		<property name="DataTable.CLASS_RADIO" type="String" scope="static">
			<description>Class name assigned to INPUT TYPE=RADIO elements and/or container elements.</description>
		</property>
		<property name="_oCellEditor" type="YAHOO.widget.CellEditor" scope="instance" visibility="private">
			<description>The active CellEditor instance for the DataTable instance.</description>
		</property>
		<property name="DataTable._elColumnResizerProxy" type="HTMLElement" scope="static" visibility="private">
			<description>Element reference to shared Column resizer proxy.</description>
		</property>
		<property name="DataTable.CLASS_MESSAGE" type="String" scope="static">
			<description>Class name assigned to messaging elements.</description>
		</property>
		<property name="DataTable.CLASS_PREVIOUS" type="String" scope="static">
			<description>Class name assigned to previous indicators.</description>
		</property>
		<property name="DataTable.CLASS_DEFAULT" type="String" scope="static">
			<description>Class name assigned to default indicators.</description>
		</property>
		<property name="DataTable.CLASS_DATA" type="String" scope="static">
			<description>Class name assigned to data elements.</description>
		</property>
		<property name="DataTable.CLASS_RESIZERLINER" type="String" scope="static">
			<description>Class name assigned to resizer liner elements.</description>
		</property>
		<property name="_elMsgTr" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the secondary TBODY element's single TR element used to display DataTable messages.</description>
		</property>
		<property name="_sLastTrId" type="String" scope="instance" visibility="private">
			<description>ID string of the last TR element of the current DataTable page.</description>
		</property>
		<property name="DataTable.CLASS_BUTTON" type="String" scope="static">
			<description>Class name assigned to BUTTON elements and/or container elements.</description>
		</property>
		<property name="DataTable._elColumnDragTarget" type="HTMLElement" scope="static" visibility="private">
			<description>Element reference to shared Column drag target.</description>
		</property>
		<property name="DataTable.CLASS_RESIZEABLE" type="String" scope="static">
			<description>Class name assigned to resizeable elements.</description>
		</property>
		<property name="_oChainRender" type="YAHOO.util.Chain" scope="instance" visibility="private">
			<description>Render chain.</description>
		</property>
		<property name="DataTable._nCount" type="Number" scope="static" visibility="private">
			<description>Internal class variable for indexing multiple DataTable instances.</description>
		</property>
		<property name="DataTable.CLASS_PAGE" type="String" scope="static">
			<description>Class name assigned to page number indicators.</description>
		</property>
		<property name="_aSelections" type="Object[]" scope="instance" visibility="private">
			<description>Array to track row selections (by sRecordId) and/or cell selections (by {recordId:sRecordId, columnKey:sColumnKey})</description>
		</property>
		<property name="DataTable.CLASS_ASC" type="String" scope="static">
			<description>Class name assigned to ascending elements.</description>
		</property>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Unique id assigned to instance &quot;yui-dtN&quot;, useful prefix for generating unique DOM ID strings and log messages.</description>
		</property>
		<property name="configs" type="Object" scope="instance">
			<description>Returns object literal of initial configs.</description>
		</property>
		<property name="_oDataSource" type="YAHOO.util.DataSource" scope="instance" visibility="private">
			<description>DataSource instance for the DataTable instance.</description>
		</property>
		<property name="_elMask" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the mask element for the DataTable instance which disables it.</description>
		</property>
		<property name="DataTable.CLASS_EMPTY" type="String" scope="static">
			<description>Class name assigned to empty indicators.</description>
		</property>
		<property name="DataTable.CLASS_DATATABLE" type="String" scope="static">
			<description>Class name assigned to outer DataTable container.</description>
		</property>
		<property name="_elTable" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the TABLE element for the DataTable instance.</description>
		</property>
		<property name="_elColgroup" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the COLGROUP element for the DataTable instance.</description>
		</property>
		<property name="_nIndex" type="Number" scope="instance" visibility="private">
			<description>Index assigned to instance.</description>
		</property>
		<property name="DataTable.CLASS_DRAGGABLE" type="String" scope="static">
			<description>Class name assigned to draggable elements.</description>
		</property>
		<property name="_elThead" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the THEAD element for the DataTable instance.</description>
		</property>
		<property name="DataTable.CLASS_DROPDOWN" type="String" scope="static">
			<description>Class name assigned to SELECT elements and/or container elements.</description>
		</property>
		<property name="DataTable.CLASS_SCROLLABLE" type="String" scope="static">
			<description>Class name assigned to scrollable elements.</description>
		</property>
		<property name="_nTdCount" type="Number" scope="instance" visibility="private">
			<description>Counter for IDs assigned to TD elements.</description>
		</property>
		<property name="_oAnchorRecord" type="YAHOO.widget.Record" scope="instance" visibility="private">
			<description>Record instance of the row selection anchor.</description>
		</property>
		<property name="DataTable.CLASS_EDITOR" type="String" scope="static">
			<description>Class name assigned to CellEditor container elements.</description>
		</property>
		<property name="DataTable.CLASS_LAST" type="String" scope="static">
			<description>Class name assigned to last elements.</description>
		</property>
		<property name="DataTable.CLASS_ODD" type="String" scope="static">
			<description>Class name assigned to odd elements.</description>
		</property>
		<property name="DataTable.CLASS_FIRST" type="String" scope="static">
			<description>Class name assigned to first elements.</description>
		</property>
		<property name="_aDynFunctions" type="Array" scope="instance" visibility="private">
			<description>Sparse array of custom functions to set column widths for browsers that don't support dynamic CSS rules. Functions are added at the index representing the number of rows they update.</description>
		</property>
		<property name="DataTable.CLASS_COLTARGET" type="String" scope="static">
			<description>Class name assigned to Column drag target.</description>
		</property>
		<property name="_elTbody" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the primary TBODY element for the DataTable instance.</description>
		</property>
		<property name="_elTrTemplate" type="{HTMLElement}" scope="instance" visibility="private">
			<description>Template row to create all new rows from.</description>
		</property>
		<property name="DataTable.CLASS_SELECTED" type="String" scope="static">
			<description>Class name assigned to selected elements.</description>
		</property>
		<property name="DataTable.CLASS_LOADING" type="String" scope="static">
			<description>Class name assigned to loading indicatorx.</description>
		</property>
		<property name="_nTrCount" type="Number" scope="instance" visibility="private">
			<description>Counter for IDs assigned to TR elements.</description>
		</property>
		<property name="DataTable.CLASS_EDITABLE" type="String" scope="static">
			<description>Class name assigned to editable elements.</description>
		</property>
		<property name="DataTable.CLASS_SORTABLE" type="String" scope="static">
			<description>Class name assigned to sortable elements.</description>
		</property>
		<property name="_elMsgTd" type="HTMLElement" scope="instance" visibility="private">
			<description>DOM reference to the secondary TBODY element's single TD element used to display DataTable messages.</description>
		</property>
		</properties>
		<methods>
		<method name="sortColumn" scope="instance">
			<description>Sorts given Column. If &quot;dynamicData&quot; is true, current selections are purged before a request is sent to the DataSource for data for the new state (using the request returned by &quot;generateRequest()&quot;).</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="sDir" type="String" usage="optional">
				<description> (Optional) YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</description>
			</parameter>
			</parameters>
		</method>
		<method name="_unselectAllTdEls" scope="instance" visibility="private">
			<description>Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED from all TD elements in the internal tracker.</description>
		</method>
		<method name="getColumnById" scope="instance">
			<description>For the given Column ID, returns the associated Column instance. Note: For getting Columns by key, please use the method getColumn().</description>
			<parameters>
			<parameter name="column" type="String" usage="required">
				<description> Column ID string.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column instance.</return-description>
		</method>
		<method name="onEventSortColumn" scope="instance">
			<description>Overridable custom event handler to sort Column.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderPaginator" scope="instance">
			<description>Renders the Paginator to the DataTable UI</description>
		</method>
		<method name="_onTableFocus" scope="instance" visibility="private">
			<description>Handles focus events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The focus event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleCellRangeSelectionByKey" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a key event when selection mode is set to &quot;cellrange&quot;.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="updateCell" scope="instance">
			<description>For the given row and column, updates the Record with the given data. If the cell is on current page, the corresponding DOM elements are also updated.</description>
			<parameters>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column | String | Number" usage="required">
				<description> A Column key, or a ColumnSet key index.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> New data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable._cloneObject" scope="static" visibility="private">
			<description>Clones object literal or array of object literals.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> Object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setColumnWidth" scope="instance">
			<description>Sets given Column to given pixel width. If new width is less than minimum width, sets to minimum width. Updates oColumn.width value.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="nWidth" type="Number" usage="required">
				<description> New width in pixels. A null value auto-sizes Column, subject to minWidth and maxAutoWidth validations.</description>
			</parameter>
			</parameters>
		</method>
		<method name="focus" scope="instance">
			<description>Brings focus to the TBODY element. Alias to focusTbodyEl.</description>
		</method>
		<method name="_handleSingleCellSelectionByMouse" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a mouse event when selection mode is set to &quot;singlecell&quot;.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setColumnWidthDynStyles" scope="instance" visibility="private">
			<description>Updates width of a Column's liner DIV elements by dynamically creating a STYLE node and writing and updating CSS style rules to it. If this fails during runtime, the fallback method _setColumnWidthDynFunction() will be called. Notes: This technique is not performant in IE6. IE7 crashes if DataTable is nested within another TABLE element. For these cases, it is recommended to use the method _setColumnWidthDynFunction by setting _bDynStylesFallback to TRUE.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="sWidth" type="String" usage="required">
				<description> New width value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatTextarea" scope="static">
			<description>Formats TEXTAREA elements.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="optional">
				<description> (Optional) Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Implementation of Element's abstract method. Sets up config values.</description>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description> (Optional) Object literal definition of configuration values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventSelectCell" scope="instance">
			<description>Overridable custom event handler to select cell.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getRow" scope="instance">
		</method>
		<method name="_repaintGecko" scope="instance" visibility="private">
			<description>Forces Gecko repaint.</description>
		</method>
		<method name="_initColgroupEl" scope="instance" visibility="private">
			<description>Initializes COLGROUP and COL elements for managing minWidth.</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create COLGROUP.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_formatTdEl" scope="instance" visibility="private">
			<description>Formats a basic TD element.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Associated Column instance.</description>
			</parameter>
			<parameter name="elTd" type="HTMLElement" usage="required">
				<description> An unformatted TD element.</description>
			</parameter>
			<parameter name="index" type="Number" usage="required">
				<description> Column key index.</description>
			</parameter>
			<parameter name="isLast" type="Boolean" usage="required">
				<description> True if Column is last key of the ColumnSet.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>A formatted TD element.</return-description>
		</method>
		<method name="focusTbodyEl" scope="instance">
			<description>Brings focus to the TBODY element.</description>
		</method>
		<method name="getTrIndex" scope="instance">
			<description>Returns the page row index of given row. Returns null if the row is not on the current DataTable page.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" usage="required">
				<description> DOM or ID string reference to an element within the DataTable page, a Record instance, or a Record's RecordSet index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Page row index, or null if row does not exist or is not on current page.</return-description>
		</method>
		<method name="_onTheadClick" scope="instance" visibility="private">
			<description>Handles click events on the THEAD element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleSingleCellSelectionByKey" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a key event when selection mode is set to &quot;singlecell&quot;.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTbodyClick" scope="instance" visibility="private">
			<description>Handles click events on the primary TBODY element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isSelected" scope="instance">
			<description>Returns true if given item is selected, false otherwise.</description>
			<parameters>
			<parameter name="o" type="String | HTMLElement | YAHOO.widget.Record | Number {record:YAHOO.widget.Record, column:YAHOO.widget.Column} " usage="required">
				<description> TR or TD element by reference or ID string, a Record instance, a RecordSet position index, or an object literal representation of a cell.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if item is selected.</return-description>
		</method>
		<method name="onEventSaveCellEditor" scope="instance">
			<description>Overridable custom event handler to save active CellEditor input.</description>
		</method>
		<method name="_initTheadEl" scope="instance" visibility="private">
			<description>Initializes THEAD element.</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create COLGROUP.</description>
			</parameter>
			<parameter name="Initialized" type="HTMLElement" usage="required">
				<description> THEAD element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_insertColgroupColEl" scope="instance" visibility="private">
			<description>Adds a COL element to COLGROUP at given index.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Index of new COL element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="deleteRow" scope="instance">
			<description>Deletes the given row's Record from the RecordSet. If the row is on current page, the corresponding DOM elements are also deleted.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number" usage="required">
				<description> DOM element reference or ID string to DataTable page element or RecordSet index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="showTableMessage" scope="instance">
			<description>Displays message within secondary TBODY.</description>
			<parameters>
			<parameter name="sHTML" type="String" usage="optional">
				<description> (optional) Value for innerHTMlang.</description>
			</parameter>
			<parameter name="sClassName" type="String" usage="optional">
				<description> (optional) Classname.</description>
			</parameter>
			</parameters>
		</method>
		<method name="selectRow" scope="instance">
			<description>Sets given row to the selected state.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" usage="required">
				<description> HTML element reference or ID string, Record instance, or RecordSet position index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDataReturnAppendRows" scope="instance">
			<description>Callback function receives data from DataSource and appends to an existing DataTable new Records and, if applicable, creates or updates corresponding TR elements.</description>
			<parameters>
			<parameter name="sRequest" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="unhighlightCell" scope="instance">
			<description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCell" scope="instance">
		</method>
		<method name="getTableEl" scope="instance">
			<description>Returns DOM reference to the DataTable's TABLE element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TABLE element.</return-description>
		</method>
		<method name="_onEditorCancelEvent" scope="instance" visibility="private">
			<description>Passes through cancelEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.editTextarea" scope="instance">
		</method>
		<method name="_onTheadKeydown" scope="instance" visibility="private">
			<description>Handles keydown events on the THEAD element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The key event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearTextSelection" scope="instance">
			<description>Clears browser text selection. Useful to call on rowSelectEvent or cellSelectEvent to prevent clicks or dblclicks from selecting text in the browser.</description>
		</method>
		<method name="DataTable.editCheckbox" scope="instance">
		</method>
		<method name="getBelowTdEl" scope="instance">
			<description>Returns DOM reference to the below TD element from the given cell, or null.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String | Object} DOM element reference|string ID,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> from which to get previous TD element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to previous TD element, or null.</return-description>
		</method>
		<method name="getFirstTdEl" scope="instance">
			<description>Returns DOM reference to the first TD element in the DataTable page (by default), the first TD element of the optionally given row, or null.</description>
			<parameters>
			<parameter name="row" type="HTMLElement" usage="optional">
				<description> (optional) row from which to get first TD</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TD element.</return-description>
		</method>
		<method name="DataTable.formatRadio" scope="static">
			<description>Formats INPUT TYPE=RADIO elements.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="optional">
				<description> (Optional) Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onEditorRevertEvent" scope="instance" visibility="private">
			<description>Passes through revertEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleStandardSelectionByMouse" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a mouse event when selection mode is set to &quot;standard&quot;.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_destroyTbodyEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable TBODY element, if available.</description>
		</method>
		<method name="_updatePaginator" scope="instance" visibility="private">
			<description>Method executed during set() operation for the &quot;paginator&quot; attribute. Adds and/or severs event listeners between DataTable and Paginator</description>
			<parameters>
			<parameter name="newPag" type="Paginator" usage="required">
				<description> Paginator instance (or null) for DataTable to use</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTbodyKeydown" scope="instance" visibility="private">
			<description>Handles keydown events on the TBODY element. Handles selection behavior, provides hooks for ENTER to edit functionality.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The key event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initCaptionEl" scope="instance" visibility="private">
			<description>Creates HTML markup CAPTION element.</description>
			<parameters>
			<parameter name="sCaption" type="String" usage="required">
				<description> Text for caption.</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeColumn" scope="instance">
			<description>Removes given Column. NOTE: You cannot remove nested Columns. You can only remove non-nested Columns, and top-level parent Columns (which will remove all children Columns).</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>oColumn  Removed Column instance.</return-description>
		</method>
		<method name="onEventHighlightRow" scope="instance">
			<description>Overridable custom event handler to highlight row. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initCellEditorEl" scope="instance" visibility="private">
			<description>Backward compatibility.</description>
		</method>
		<method name="_clearMinWidth" scope="instance" visibility="private">
			<description>Clears minWidth.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Which Column.</description>
			</parameter>
			</parameters>
		</method>
		<method name="showCellEditor" scope="instance">
			<description>Activates and shows CellEditor instance for the given cell while deactivating and canceling previous CellEditor. It is baked into DataTable that only one CellEditor can be active at any given time.</description>
			<parameters>
			<parameter name="elCell" type="HTMLElement | String" usage="required">
				<description> Cell to edit.</description>
			</parameter>
			</parameters>
		</method>
		<method name="showColumn" scope="instance">
			<description>Shows given Column. NOTE: You cannot hide/show nested Columns. You can only hide/show non-nested Columns, and top-level parent Columns (which will hide/show all children Columns).</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setColumnWidth" scope="instance" visibility="private">
			<description>Sets liner DIV elements of given Column to given width. When value should be auto-calculated to fit content overflow is set to visible, otherwise overflow is set to hidden. No validations against minimum width and no updating Column.width value.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="sWidth" type="String" usage="required">
				<description> New width value.</description>
			</parameter>
			<parameter name="sOverflow" type="String" usage="required">
				<description> Should be &quot;hidden&quot; when Column width is explicitly being set to a value, but should be &quot;visible&quot; when Column is meant to auto-fit content.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSelectedRows" scope="instance">
			<description>Returns selected rows as an array of Record IDs.</description>
			<return-types>
			<return-type type="String[]" />
			</return-types>
			<return-description>Array of selected rows by Record ID.</return-description>
		</method>
		<method name="getTdEl" scope="instance">
			<description>Returns DOM reference to a TD element.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String | Object} TD element|child of a TD element,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> .</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TD element.</return-description>
		</method>
		<method name="onDataReturnReplaceRows" scope="instance">
			<description>Callback function receives reponse from DataSource, replaces all existing Records in RecordSet, updates TR elements with new data, and updates state UI for pagination and sorting from payload data, if necessary.</description>
			<parameters>
			<parameter name="oRequest" type="MIXED" usage="required">
				<description> Original generated request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="addRows" scope="instance">
			<description>Convenience method to add multiple rows.</description>
			<parameters>
			<parameter name="aData" type="Object[]" usage="required">
				<description> Array of object literal data for the rows.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) RecordSet position index at which to add data.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventHighlightCell" scope="instance">
			<description>Overridable custom event handler to highlight cell. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defaultPaginatorContainers" scope="instance" visibility="private">
			<description>Returns the default containers used for Paginators. If create param is passed, the containers will be created and added to the DataTable container.</description>
			<parameters>
			<parameter name="create" type="boolean" usage="required">
				<description> Create the default containers if not found</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventSelectRow" scope="instance">
			<description>Overridable custom event handler to manage selection according to desktop paradigm.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initContainerEl" scope="instance" visibility="private">
			<description>Initializes the DataTable outer container element, including a mask.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement | String" usage="required">
				<description> HTML DIV element by reference or ID.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onEditorSaveEvent" scope="instance" visibility="private">
			<description>Passes through saveEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTableMousedown" scope="instance" visibility="private">
			<description>Handles mousedown events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The mousedown event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onPaginatorChangeRequest" scope="instance">
			<description>Responds to new Pagination states. By default, updates the UI to reflect the new state. If &quot;dynamicData&quot; is true, current selections are purged before a request is sent to the DataSource for data for the new state (using the request returned by &quot;generateRequest()&quot;).</description>
			<parameters>
			<parameter name="oPaginatorState" type="Object" usage="required">
				<description> An object literal describing the proposed pagination state.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initDataSource" scope="instance" visibility="private">
			<description>Initializes DataSource.</description>
			<parameters>
			<parameter name="oDataSource" type="YAHOO.util.DataSource" usage="required">
				<description> DataSource instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDropdownChange" scope="instance" visibility="private">
			<description>Handles change events on SELECT elements within DataTable.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The change event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventUnhighlightColumn" scope="instance">
			<description>Overridable custom event handler to unhighlight Column. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable._destroyColumnResizerProxyEl" scope="static" visibility="private">
			<description>Destroys shared Column resizer proxy.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to Column resizer proxy.</return-description>
		</method>
		<method name="_initEvents" scope="instance" visibility="private">
			<description>Initialize internal event listeners</description>
		</method>
		<method name="updateRows" scope="instance">
			<description>Starting with the given row, updates associated Records with the given data. The number of rows to update are determined by the array of data provided. Undefined data (i.e., not an object literal) causes a row to be skipped. If any of the rows are on current page, the corresponding DOM elements are also updated.</description>
			<parameters>
			<parameter name="startrow" type="YAHOO.widget.Record | Number | HTMLElement | String" usage="required">
				<description> Starting row to update: By Record instance, by Record's RecordSet position index, by HTMLElement reference to the TR element, or by ID string of the TR element.</description>
			</parameter>
			<parameter name="aData" type="Object[]" usage="required">
				<description> Array of object literal of data for the rows.</description>
			</parameter>
			</parameters>
		</method>
		<method name="deleteRows" scope="instance">
			<description>Convenience method to delete multiple rows.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number" usage="required">
				<description> DOM element reference or ID string to DataTable page element or RecordSet index.</description>
			</parameter>
			<parameter name="count" type="Number" usage="optional">
				<description> (optional) How many rows to delete. A negative value will delete towards the beginning.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventCancelCellEditor" scope="instance">
			<description>Overridable custom event handler to cancel active CellEditor.</description>
		</method>
		<method name="_initColumnSort" scope="instance" visibility="private">
			<description>Initializes Column sorting.</description>
		</method>
		<method name="highlightColumn" scope="instance">
			<description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column. NOTE: You cannot highlight/unhighlight nested Columns. You can only highlight/unhighlight non-nested Columns, and bottom-level key Columns.</description>
			<parameters>
			<parameter name="column" type="HTMLElement | String | Number" usage="required">
				<description> DOM reference or ID string to a TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEditorBlurEvent" scope="instance">
			<description>Public handler of the editorBlurEvent. By default, saves on blur if disableBtns is true, otherwise cancels on blur.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventEditCell" scope="instance">
		</method>
		<method name="getThLinerEl" scope="instance">
			<description>Returns DOM reference to a TH liner element. Needed to normalize for resizeable Columns, which have an additional resizer liner DIV element between the TH element and the liner DIV element.</description>
			<parameters>
			<parameter name="theadCell" type="YAHOO.widget.Column | HTMLElement | String" usage="required">
				<description> Column instance, DOM element reference, or string ID.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TH liner element.</return-description>
		</method>
		<method name="getRecordSet" scope="instance">
			<description>Returns the DataTable instance's RecordSet instance.</description>
			<return-types>
			<return-type type="YAHOO.widget.RecordSet" />
			</return-types>
			<return-description>RecordSet instance.</return-description>
		</method>
		<method name="updateRow" scope="instance">
			<description>For the given row, updates the associated Record with the given data. If the row is on current page, the corresponding DOM elements are also updated.</description>
			<parameters>
			<parameter name="row" type="YAHOO.widget.Record | Number | HTMLElement | String" usage="required">
				<description> Which row to update: By Record instance, by Record's RecordSet position index, by HTMLElement reference to the TR element, or by ID string of the TR element.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Object literal of data for the row.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getPreviousTrEl" scope="instance">
			<description>Returns DOM reference to the previous TR element from the given TR element, or null.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" usage="required">
				<description> Element reference, ID string, page row index, or Record from which to get previous TR element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to previous TR element.</return-description>
		</method>
		<method name="_initColumnHelpers" scope="instance" visibility="private">
			<description>Initializes elements associated with Column functionality: ColumnDD and ColumnResizers.</description>
		</method>
		<method name="hideTableMessage" scope="instance">
			<description>Hides secondary TBODY.</description>
		</method>
		<method name="_getColumnClassnames" scope="instance" visibility="private">
			<description>Retruns classnames to represent current Column states.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="aAddClasses" type="String[]" usage="required">
				<description> An array of additional classnames to add to the return value.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A String of classnames to be assigned to TH or TD elements
for given Column.</return-description>
		</method>
		<method name="onEventUnhighlightCell" scope="instance">
			<description>Overridable custom event handler to unhighlight cell. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventSelectColumn" scope="instance">
			<description>Overridable custom event handler to select Column.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initTbodyEl" scope="instance" visibility="private">
			<description>Initializes TBODY element for data.</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create TBODY .</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatCurrency" scope="static">
			<description>Formats currency. Default unit is USD.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Number" usage="required">
				<description> Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="unselectRow" scope="instance">
			<description>Sets given row to the unselected state.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | YAHOO.widget.Record | Number" usage="required">
				<description> HTML element reference or ID string, Record instance, or RecordSet position index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatTheadCell" scope="instance">
			<description>Outputs markup into the given TH based on given Column.</description>
			<parameters>
			<parameter name="elCellLabel" type="HTMLElement" usage="required">
				<description> The label SPAN element within the TH liner, not the liner DIV element.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oSortedBy" type="Object" usage="required">
				<description> Sort state object literal.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onRenderChainEnd" scope="instance" visibility="private">
			<description>Validates minWidths whenever the render chain ends.</description>
		</method>
		<method name="toString" scope="instance">
			<description>DataSource instance name, for logging.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the DataSource instance.</return-description>
		</method>
		<method name="getTbodyEl" scope="instance">
			<description>Returns DOM reference to the DataTable's primary TBODY element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TBODY element.</return-description>
		</method>
		<method name="DataTable.formatLink" scope="static">
			<description>Formats links.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Data value for the cell, or null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTdLinerEl" scope="instance">
			<description>Returns DOM reference to a TD liner element.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | Object} TD element|child of a TD element,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> .</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TD liner element.</return-description>
		</method>
		<method name="getColumnSet" scope="instance">
			<description>Returns the DataTable instance's ColumnSet instance.</description>
			<return-types>
			<return-type type="YAHOO.widget.ColumnSet" />
			</return-types>
			<return-description>ColumnSet instance.</return-description>
		</method>
		<method name="addRow" scope="instance">
			<description>Adds one new Record of data into the RecordSet at the index if given, otherwise at the end. If the new Record is in page view, the corresponding DOM elements are also updated.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> Object literal of data for the row.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) RecordSet position index at which to add data.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventShowCellEditor" scope="instance">
			<description>Overridable custom event handler to edit cell.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initColumnSet" scope="instance" visibility="private">
			<description>Initializes ColumnSet.</description>
			<parameters>
			<parameter name="aColumnDefs" type="Object[]" usage="required">
				<description> Array of object literal Column definitions.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable._destroyColumnDragTargetEl" scope="static" visibility="private">
			<description>Destroys shared Column drag target.</description>
		</method>
		<method name="getMsgTdEl" scope="instance">
			<description>Returns DOM reference to the TD element within the secondary TBODY that is used to display messages.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TD element.</return-description>
		</method>
		<method name="DataTable.formatEmail" scope="static">
			<description>Formats emails.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Data value for the cell, or null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="unselectCell" scope="instance">
			<description>Sets given cell to the unselected state.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string to DataTable page element or RecordSet index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTableMouseout" scope="instance" visibility="private">
			<description>Handles mouseout events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The mouseout event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCellEditor" scope="instance">
			<description>Returns current CellEditor instance, or null.</description>
			<return-types>
			<return-type type="YAHOO.widget.CellEditor" />
			</return-types>
			<return-description>CellEditor instance.</return-description>
		</method>
		<method name="_destroyColumnHelpers" scope="instance" visibility="private">
			<description>Destroys elements associated with Column functionality: ColumnDD and ColumnResizers.</description>
		</method>
		<method name="getAboveTdEl" scope="instance">
			<description>Returns DOM reference to the above TD element from the given cell, or null.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String | Object} DOM element reference|string ID,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> from which to get next TD element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to next TD element, or null.</return-description>
		</method>
		<method name="onEventFormatCell" scope="instance">
			<description>Overridable custom event handler to format cell.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onEditorKeydownEvent" scope="instance" visibility="private">
			<description>Passes through keydownEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setRowStripes" scope="instance" visibility="private">
			<description>Assigns the classes DT.CLASS_EVEN and DT.CLASS_ODD to one, many, or all TR elements.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number" usage="optional">
				<description> (optional) HTML TR element reference or string ID, or page row index of where to start striping.</description>
			</parameter>
			<parameter name="range" type="Number" usage="optional">
				<description> (optional) If given, how many rows to stripe, otherwise stripe all the rows until the end.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_deleteTrEl" scope="instance" visibility="private">
			<description>Deletes TR element by DOM reference or by DataTable page row index.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | Number" usage="required">
				<description> TR element reference or Datatable page row index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if successful, else returns false.</return-description>
		</method>
		<method name="_destroyPaginator" scope="instance" visibility="private">
			<description>Calls Paginator's destroy() method</description>
		</method>
		<method name="_clearTrTemplateEl" scope="instance" visibility="private">
			<description>Clears TR element template in response to any Column state change.</description>
		</method>
		<method name="onEventUnhighlightRow" scope="instance">
			<description>Overridable custom event handler to unhighlight row. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getPreviousTdEl" scope="instance">
			<description>Returns DOM reference to the previous TD element from the given cell, or null.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String | Object} DOM element reference|string ID,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> from which to get previous TD element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to previous TD element, or null.</return-description>
		</method>
		<method name="_destroyContainerEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable outer container element, if available.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description> Reference to the container element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getTrTemplateEl" scope="instance" visibility="private">
			<description>Returns a new TR element template with TD elements classed with current Column states.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>A TR element to be cloned and added to the DOM.</return-description>
		</method>
		<method name="unselectAllRows" scope="instance">
			<description>Clears out all row selections.</description>
		</method>
		<method name="getSelectedTdEls" scope="instance">
			<description>Returns array of selected TD elements on the page.</description>
			<return-types>
			<return-type type="HTMLElement[]" />
			</return-types>
			<return-description>Array of selected TD elements.</return-description>
		</method>
		<method name="destroyCellEditor" scope="instance">
			<description>Destroys active CellEditor instance and UI.</description>
		</method>
		<method name="onDataReturnInitializeTable" scope="instance">
			<description>Callback function receives data from DataSource and populates an entire DataTable with Records and TR elements, clearing previous Records, if any.</description>
			<parameters>
			<parameter name="sRequest" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="doBeforeShowCellEditor" scope="instance">
			<description>Overridable abstract method to customize CellEditor before showing.</description>
			<parameters>
			<parameter name="oCellEditor" type="YAHOO.widget.CellEditor" usage="required">
				<description> The CellEditor instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue showing CellEditor.</return-description>
		</method>
		<method name="_setFirstRow" scope="instance" visibility="private">
			<description>Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element of the DataTable page and updates internal tracker.</description>
		</method>
		<method name="reorderColumn" scope="instance">
			<description>Removes given Column and inserts into given tree index. NOTE: You can only reorder non-nested Columns and top-level parent Columns. You cannot reorder a nested Column to an existing parent.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="index" type="Number" usage="required">
				<description> New tree index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>oColumn  Reordered Column instance.</return-description>
		</method>
		<method name="_restoreMinWidth" scope="instance" visibility="private">
			<description>Restores minWidth.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Which Column.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocumentClick" scope="instance" visibility="private">
			<description>Handles click events on the DOCUMENT.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.validateNumber" scope="static">
			<description>Validates data value to type Number, doing type conversion as necessary. A valid Number value is return, else null is returned if input value does not validate.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> Data to validate.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable._initColumnDragTargetEl" scope="static" visibility="private">
			<description>Creates HTML markup for shared Column drag target.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to Column drag target.</return-description>
		</method>
		<method name="undisable" scope="instance">
			<description>Undisables DataTable UI.</description>
		</method>
		<method name="_destroyTheadEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable THEAD element, if available.</description>
		</method>
		<method name="DataTable.formatCheckbox" scope="static">
			<description>Formats a CHECKBOX element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object | Boolean} Data value for the cell. Can be a simple Boolean to indicate whether checkbox is checked|not. Can be object literal {checked:bBoolean, label:sLabel" usage="required">
				<description> . Other forms of oData require a custom formatter.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getColumn" scope="instance">
			<description>For the given identifier, returns the associated Column instance. Note: For getting Columns by Column ID string, please use the method getColumnById().</description>
			<parameters>
			<parameter name="column" type="HTMLElement | String | Number" usage="required">
				<description> TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column instance.</return-description>
		</method>
		<method name="DataTable.formatNumber" scope="static">
			<description>Formats numbers.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Data value for the cell, or null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleCellBlockSelectionByMouse" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a mouse event when selection mode is set to &quot;cellblock&quot;.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="validateColumnWidths" scope="instance">
			<description>For one or all Columns, when Column is not hidden, width is not set, and minWidth and/or maxAutoWidth is set, validates auto-width against minWidth and maxAutoWidth.</description>
			<parameters>
			<parameter name="oArg.column" type="YAHOO.widget.Column" usage="optional">
				<description> (optional) One Column to validate. If null, all Columns' widths are validated.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTheadFocus" scope="instance" visibility="private">
			<description>Handles focus events on the THEAD element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The focus event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getDataSource" scope="instance">
			<description>Returns the DataTable instance's DataSource instance.</description>
			<return-types>
			<return-type type="YAHOO.util.DataSource" />
			</return-types>
			<return-description>DataSource instance.</return-description>
		</method>
		<method name="getColumnSortDir" scope="instance">
			<description>For the given Column instance, returns next direction to sort.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oSortedBy" type="Object" usage="optional">
				<description> (optional) Specify the state, or use current state.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTableCLASS_DESC.</return-description>
		</method>
		<method name="_handleCellBlockSelectionByKey" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a key event when selection mode is set to &quot;cellblock&quot;.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatDefault" scope="static">
			<description>Default cell formatter</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="optional">
				<description> (Optional) Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="select" scope="instance">
		</method>
		<method name="_initRecordSet" scope="instance" visibility="private">
			<description>Initializes RecordSet.</description>
		</method>
		<method name="getNextTrEl" scope="instance">
			<description>Returns DOM reference to the next TR element from the given TR element, or null.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" usage="required">
				<description> Element reference, ID string, page row index, or Record from which to get next TR element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to next TR element.</return-description>
		</method>
		<method name="_updateTrEl" scope="instance" visibility="private">
			<description>Formats the contents of the given TR's TD elements with data from the given Record. Only innerHTML should change, nothing structural.</description>
			<parameters>
			<parameter name="elTr" type="HTMLElement" usage="required">
				<description> The TR element to update.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> The associated Record instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>DOM reference to the new TR element.</return-description>
		</method>
		<method name="_initTableEl" scope="instance" visibility="private">
			<description>Creates HTML markup for TABLE, COLGROUP, THEAD and TBODY elements in outer container element.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description> Container element into which to create TABLE.</description>
			</parameter>
			</parameters>
		</method>
		<method name="unhighlightColumn" scope="instance">
			<description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column. NOTE: You cannot highlight/unhighlight nested Columns. You can only highlight/unhighlight non-nested Columns, and bottom-level key Columns.</description>
			<parameters>
			<parameter name="column" type="HTMLElement | String | Number" usage="required">
				<description> DOM reference or ID string to a TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.editDropdown" scope="instance">
		</method>
		<method name="_getSelectionAnchor" scope="instance" visibility="private">
			<description>Returns object literal of values that represent the selection anchor. Used to determine selection behavior resulting from a user event.</description>
			<parameters>
			<parameter name="oTrigger" type="Object" usage="optional">
				<description> (Optional) Object literal of selection trigger values (for key events).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onEditorBlurEvent" scope="instance" visibility="private">
			<description>Passes through blurEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getNextTdEl" scope="instance">
			<description>Returns DOM reference to the next TD element from the given cell, or null.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String | Object} DOM element reference|string ID,|object literal of syntax {record:oRecord, column:oColumn" usage="required">
				<description> from which to get next TD element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to next TD element, or null.</return-description>
		</method>
		<method name="_destroyResizeableColumns" scope="instance" visibility="private">
			<description>Disables resizeability on key Column TH elements.</description>
		</method>
		<method name="onDataReturnInsertRows" scope="instance">
			<description>Callback function receives data from DataSource and inserts new records starting at the index specified in oPayload.insertIndex. The value for oPayload.insertIndex can be populated when sending the request to the DataSource, or by accessing oPayload.insertIndex with the doBeforeLoadData() method at runtime. If applicable, creates or updates corresponding TR elements.</description>
			<parameters>
			<parameter name="sRequest" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="required">
				<description> Argument payload, looks in oPayload.insertIndex.</description>
			</parameter>
			</parameters>
		</method>
		<method name="saveCellEditor" scope="instance">
			<description>Saves active CellEditor input to Record and upates DOM UI.</description>
		</method>
		<method name="unhighlightRow" scope="instance">
			<description>Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setSelections" scope="instance" visibility="private">
			<description>Assigns the class DT.CLASS_SELECTED to TR and TD elements.</description>
		</method>
		<method name="_unsetLastRow" scope="instance" visibility="private">
			<description>Removes the class YAHOO.widget.DataTable.CLASS_LAST from the last TR element of the DataTable page and updates internal tracker.</description>
		</method>
		<method name="getSelectedCells" scope="instance">
			<description>Returns selected cells as an array of object literals: {recordId:sRecordId, columnKey:sColumnKey}.</description>
			<return-types>
			<return-type type="Object[]" />
			</return-types>
			<return-description>Array of selected cells by Record ID and Column ID.</return-description>
		</method>
		<method name="unselectColumn" scope="instance">
			<description>Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only select/unselect non-nested Columns, and bottom-level key Columns.</description>
			<parameters>
			<parameter name="column" type="HTMLElement | String | Number" usage="required">
				<description> DOM reference or ID string to a TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatTextbox" scope="static">
			<description>Formats INPUT TYPE=TEXT elements.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="optional">
				<description> (Optional) Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setLastRow" scope="instance" visibility="private">
			<description>Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element of the DataTable page and updates internal tracker.</description>
		</method>
		<method name="_destroyColgroupEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable COLGROUP element, if available.</description>
		</method>
		<method name="_initDraggableColumns" scope="instance" visibility="private">
			<description>Initializes top-level Column TH elements into DD instances.</description>
		</method>
		<method name="DataTable._initColumnResizerProxyEl" scope="static" visibility="private">
			<description>Creates HTML markup for shared Column resizer proxy.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to Column resizer proxy.</return-description>
		</method>
		<method name="_onTbodyFocus" scope="instance" visibility="private">
			<description>Handles focus events on the TBODY element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The focus event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getLastSelectedCell" scope="instance">
			<description>Returns last selected cell as an object literal: {recordId:sRecordId, columnKey:sColumnKey}.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal representation of a cell.</return-description>
		</method>
		<method name="onDataReturnUpdateRows" scope="instance">
			<description>Callback function receives data from DataSource and incrementally updates Records starting at the index specified in oPayload.updateIndex. The value for oPayload.updateIndex can be populated when sending the request to the DataSource, or by accessing oPayload.updateIndex with the doBeforeLoadData() method at runtime. If applicable, creates or updates corresponding TR elements.</description>
			<parameters>
			<parameter name="sRequest" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="required">
				<description> Argument payload, looks in oPayload.updateIndex.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.editRadio" scope="instance">
		</method>
		<method name="_reorderColgroupColEl" scope="instance" visibility="private">
			<description>Reorders a COL element from old index(es) to new index.</description>
			<parameters>
			<parameter name="aKeyIndexes" type="Number[]" usage="required">
				<description> Array of indexes of removed COL element.</description>
			</parameter>
			<parameter name="newIndex" type="Number" usage="required">
				<description> New index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_runRenderChain" scope="instance" visibility="private">
			<description>Internal wrapper calls run() on render Chain instance.</description>
		</method>
		<method name="_getSelectionTrigger" scope="instance" visibility="private">
			<description>Returns object literal of values that represent the selection trigger. Used to determine selection behavior resulting from a key event.</description>
		</method>
		<method name="_createTrEl" scope="instance" visibility="private">
			<description>Create a new TR element for a given Record and appends it with the correct number of Column-state-classed TD elements. Striping is the responsibility of the calling function, which may decide to stripe the single row, a subset of rows, or all the rows.</description>
			<parameters>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The new TR element.  This must be added to the DOM.</return-description>
		</method>
		<method name="getLastTrEl" scope="instance">
			<description>Returns DOM reference to the last TR element in the DataTable page, or null.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to last TR element.</return-description>
		</method>
		<method name="selectColumn" scope="instance">
			<description>Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only select/unselect non-nested Columns, and bottom-level key Columns.</description>
			<parameters>
			<parameter name="column" type="HTMLElement | String | Number" usage="required">
				<description> DOM reference or ID string to a TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventHighlightColumn" scope="instance">
			<description>Overridable custom event handler to highlight Column. Accounts for spurious caused-by-child events.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatText" scope="static">
			<description>Formats text strings.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="optional">
				<description> (Optional) Data value for the cell.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initCellEditing" scope="instance" visibility="private">
			<description>Initializes CellEditor integration.</description>
		</method>
		<method name="_setColumnWidthDynFunction" scope="instance" visibility="private">
			<description>Updates width of a Column's liner DIV elements by dynamically creating a function to update all element style properties in one pass. Note: This technique is not supported in sandboxed environments that prohibit EVALs.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="sWidth" type="String" usage="required">
				<description> New width value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_destroyDraggableColumns" scope="instance" visibility="private">
			<description>Disables DD from top-level Column TH elements.</description>
		</method>
		<method name="_initConfigs" scope="instance" visibility="private">
			<description>Initializes object literal of config values.</description>
			<parameters>
			<parameter name="oConfig" type="Object" usage="required">
				<description> Object literal of config values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initThEl" scope="instance" visibility="private">
			<description>Populates TH element as defined by Column.</description>
			<parameters>
			<parameter name="elTh" type="HTMLElement" usage="required">
				<description> TH element reference.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTrEl" scope="instance">
			<description>Returns the corresponding TR reference for a given DOM element, ID string or directly page row index. If the given identifier is a child of a TR element, then DOM tree is traversed until a parent TR element is returned, otherwise null.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String | Number | YAHOO.widget.Record" usage="required">
				<description> Which row to get: by element reference, ID string, page row index, or Record.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TR element, or null.</return-description>
		</method>
		<method name="resetCellEditor" scope="instance">
		</method>
		<method name="onPaginatorChange" scope="instance">
			<description>Alias for onPaginatorChange for backward compatibility</description>
		</method>
		<method name="doBeforeSortColumn" scope="instance">
			<description>Overridable method gives implementers a hook to show loading message before sorting Column.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="sSortDir" type="String" usage="required">
				<description> YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue sorting Column.</return-description>
		</method>
		<method name="onShow" scope="instance">
			<description>Setting display:none on DataTable or any parent may impact width validations. After setting display back to &quot;&quot;, implementers should call this method to manually perform those validations.</description>
		</method>
		<method name="getLastSelectedRecord" scope="instance">
			<description>Returns last selected Record ID.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Record ID of last selected row.</return-description>
		</method>
		<method name="getTheadEl" scope="instance">
			<description>Returns DOM reference to the DataTable's THEAD element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to THEAD element.</return-description>
		</method>
		<method name="_repaintWebkit" scope="instance" visibility="private">
			<description>Forces Webkit repaint.</description>
		</method>
		<method name="_handleStandardSelectionByKey" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a key event when selection mode is set to &quot;standard&quot;.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.editTextbox" scope="instance">
		</method>
		<method name="insertColumn" scope="instance">
			<description>Inserts given Column at the index if given, otherwise at the end. NOTE: You can only add non-nested Columns and top-level parent Columns. You cannot add a nested Column to an existing parent.</description>
			<parameters>
			<parameter name="oColumn" type="Object | YAHOO.widget.Column" usage="required">
				<description> Object literal Column definition or a Column instance.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) New tree index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>oColumn  Inserted Column instance.</return-description>
		</method>
		<method name="getState" scope="instance">
			<description>Returns on object literal representing the DataTable instance's current state with the following properties: &lt;dl&gt; &lt;dt&gt;pagination&lt;/dt&gt; &lt;dd&gt;Instance of YAHOO.widget.Paginator&lt;/dd&gt; &lt;dt&gt;sortedBy&lt;/dt&gt; &lt;dd&gt; &lt;dl&gt; &lt;dt&gt;sortedBy.key&lt;/dt&gt; &lt;dd&gt;{String} Key of sorted Column&lt;/dd&gt; &lt;dt&gt;sortedBy.dir&lt;/dt&gt; &lt;dd&gt;{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;selectedRows&lt;/dt&gt; &lt;dd&gt;Array of selected rows by Record ID.&lt;/dd&gt; &lt;dt&gt;selectedCells&lt;/dt&gt; &lt;dd&gt;Selected cells as an array of object literals: {recordId:sRecordId, columnKey:sColumnKey}&lt;/dd&gt; &lt;/dl&gt;</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>DataTable instance state object literal values.</return-description>
		</method>
		<method name="onEditorUnblockEvent" scope="instance">
			<description>Public handler of the editorUnblockEvent. By default, undisables DataTable UI.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSelectedTrEls" scope="instance">
			<description>Returns array of selected TR elements on the page.</description>
			<return-types>
			<return-type type="HTMLElement[]" />
			</return-types>
			<return-description>Array of selected TR elements.</return-description>
		</method>
		<method name="getThEl" scope="instance">
			<description>Returns DOM reference to a TH element.</description>
			<parameters>
			<parameter name="theadCell" type="YAHOO.widget.Column | HTMLElement | String" usage="required">
				<description> Column instance, DOM element reference, or string ID.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TH element.</return-description>
		</method>
		<method name="_handleCellRangeSelectionByMouse" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a mouse event when selection mode is set to &quot;cellrange&quot;.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focusEl" scope="instance" visibility="private">
			<description>Sets focus on the given element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> Element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getFirstTrEl" scope="instance">
			<description>Returns DOM reference to the first TR element in the DataTable page, or null.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TR element.</return-description>
		</method>
		<method name="_onEditorUnblockEvent" scope="instance" visibility="private">
			<description>Passes through unblockEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="hideColumn" scope="instance">
			<description>Hides given Column. NOTE: You cannot hide/show nested Columns. You can only hide/show non-nested Columns, and top-level parent Columns (which will hide/show all children Columns).</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDataReturnSetRecords" scope="instance">
			<description>Alias for onDataReturnSetRows for backward compatibility</description>
		</method>
		<method name="_onTableKeypress" scope="instance" visibility="private">
			<description>Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The key event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="refreshView" scope="instance">
		</method>
		<method name="focusTheadEl" scope="instance">
			<description>Brings focus to the THEAD element.</description>
		</method>
		<method name="getRecord" scope="instance">
			<description>For the given identifier, returns the associated Record instance.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | Number | String" usage="required">
				<description> DOM reference to a TR element (or child of a TR element), RecordSet position index, or Record ID.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>Record instance.</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>Returns unique id assigned to instance, which is a useful prefix for generating unique DOM ID strings.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique ID of the DataSource instance.</return-description>
		</method>
		<method name="_destroyMsgTbodyEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable message TBODY element, if available.</description>
		</method>
		<method name="initializeTable" scope="instance">
			<description>Resets a RecordSet with the given data and populates the page view with the new data. Any previous data, and selection and sort states are cleared. New data should be added as a separate step.</description>
		</method>
		<method name="_onEditorShowEvent" scope="instance" visibility="private">
			<description>Passes through showEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="highlightCell" scope="instance">
			<description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initResizeableColumns" scope="instance" visibility="private">
			<description>Initializes resizeability on key Column TH elements.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Nulls out the entire DataTable instance and related objects, removes attached event listeners, and clears out DOM elements inside the container. After calling this method, the instance reference should be expliclitly nulled by implementer, as in myDataTable = null. Use with caution!</description>
		</method>
		<method name="_handlePaginatorChange" scope="instance" visibility="private">
			<description>Update the UI infrastructure in response to a &quot;paginator&quot; attribute change.</description>
			<parameters>
			<parameter name="e" type="Object" usage="required">
				<description> Change event object containing keys 'type','newValue', and 'prevValue'</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatButton" scope="static">
			<description>Formats a BUTTON element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object | Boolean" usage="required">
				<description> Data value for the cell. By default, the value is what gets written to the BUTTON.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatDropdown" scope="static">
			<description>Formats SELECT elements.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Data value for the cell, or null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTableMouseup" scope="instance" visibility="private">
			<description>Handles mouseup events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The mouseup event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleSingleSelectionByMouse" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a mouse event when selection mode is set to &quot;single&quot;.</description>
			<parameters>
			<parameter name="oArgs.event" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			<parameter name="oArgs.target" type="HTMLElement" usage="required">
				<description> Target element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="selectCell" scope="instance">
			<description>Sets given cell to the selected state.</description>
			<parameters>
			<parameter name="cell" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string to DataTable page element or RecordSet index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEditorBlockEvent" scope="instance">
			<description>Public handler of the editorBlockEvent. By default, disables DataTable UI.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		<method name="cancelCellEditor" scope="instance">
			<description>Cancels active CellEditor.</description>
		</method>
		<method name="_unselectAllTrEls" scope="instance" visibility="private">
			<description>Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED from all TR elements on the page.</description>
		</method>
		<method name="_removeColgroupColEl" scope="instance" visibility="private">
			<description>Removes a COL element to COLGROUP at given index.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Index of removed COL element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initDomElements" scope="instance" visibility="private">
			<description>Initializes DOM elements.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement | String} HTML DIV element by reference|ID. return {Boolean" usage="required">
				<description> False in case of error, otherwise true</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.editDate" scope="instance">
		</method>
		<method name="render" scope="instance">
			<description>Renders the view with existing Records from the RecordSet while maintaining sort, pagination, and selection states. For performance, reuses existing DOM elements when possible while deleting extraneous elements.</description>
		</method>
		<method name="disable" scope="instance">
			<description>Disables DataTable UI.</description>
		</method>
		<method name="_destroyTableEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable TABLE element, if available.</description>
		</method>
		<method name="getBody" scope="instance">
		</method>
		<method name="doBeforePaginatorChange" scope="instance">
			<description>Overridable method gives implementers a hook to show loading message before changing Paginator value.</description>
			<parameters>
			<parameter name="oPaginatorState" type="Object" usage="required">
				<description> An object literal describing the proposed pagination state.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue changing Paginator value.</return-description>
		</method>
		<method name="_unsetFirstRow" scope="instance" visibility="private">
			<description>Removes the class YAHOO.widget.DataTable.CLASS_FIRST from the first TR element of the DataTable page and updates internal tracker.</description>
		</method>
		<method name="getRecordIndex" scope="instance">
			<description>Returns Record index for given TR element or page row index.</description>
			<parameters>
			<parameter name="row" type="YAHOO.widget.Record | HTMLElement | Number" usage="required">
				<description> Record instance, TR element reference or page row index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Record's RecordSet index, or null.</return-description>
		</method>
		<method name="_repaintOpera" scope="instance" visibility="private">
			<description>Forces Opera repaint.</description>
		</method>
		<method name="handleDataReturnPayload" scope="instance">
			<description>Hook to update oPayload before consumption.</description>
			<parameters>
			<parameter name="oRequest" type="MIXED" usage="required">
				<description> Original generated request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="required">
				<description> State values.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>oPayload  State values.</return-description>
		</method>
		<method name="doBeforeLoadData" scope="instance">
			<description>Overridable method gives implementers a hook to access data before it gets added to RecordSet and rendered to the TBODY.</description>
			<parameters>
			<parameter name="sRequest" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="required">
				<description> additional arguments</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue loading data into RecordSet and
updating DataTable with new Records, false to cancel.</return-description>
		</method>
		<method name="onDataReturnSetRows" scope="instance">
			<description>Callback function receives reponse from DataSource and populates the RecordSet with the results.</description>
			<parameters>
			<parameter name="oRequest" type="MIXED" usage="required">
				<description> Original generated request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="getContainerEl" scope="instance">
			<description>Returns DOM reference to the DataTable's container element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to DIV element.</return-description>
		</method>
		<method name="_onTableDblclick" scope="instance" visibility="private">
			<description>Handles dblclick events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The dblclick event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMsgTbodyEl" scope="instance">
			<description>Returns DOM reference to the DataTable's secondary TBODY element that is used to display messages.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TBODY element.</return-description>
		</method>
		<method name="getLastTdEl" scope="instance">
			<description>Returns DOM reference to the last TD element in the DataTable page (by default), the first TD element of the optionally given row, or null.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to last TD element.</return-description>
		</method>
		<method name="getSelectedColumns" scope="instance">
			<description>Returns an array selected Column instances.</description>
			<return-types>
			<return-type type="YAHOO.widget.Column[]" />
			</return-types>
			<return-description>Array of Column instances.</return-description>
		</method>
		<method name="_onTableMouseover" scope="instance" visibility="private">
			<description>Handles mouseover events on the DataTable instance.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The mouseover event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.wiget.DataTable" usage="required">
				<description> DataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataTable.formatDate" scope="static">
			<description>Formats JavaScript Dates.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to format with markup.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Data value for the cell, or null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncColWidths" scope="instance">
		</method>
		<method name="_initMsgTbodyEl" scope="instance" visibility="private">
			<description>Initializes TBODY element for messaging.</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create TBODY</description>
			</parameter>
			</parameters>
		</method>
		<method name="formatCell" scope="instance">
			<description>Outputs markup into the given TD based on given Record.</description>
			<parameters>
			<parameter name="elLiner" type="HTMLElement" usage="required">
				<description> The liner DIV element within the TD.</description>
			</parameter>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="optional">
				<description> (Optional) Record instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="optional">
				<description> (Optional) Column instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleSingleSelectionByKey" scope="instance" visibility="private">
			<description>Determines selection behavior resulting from a key event when selection mode is set to &quot;single&quot;.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> Event object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="highlightRow" scope="instance">
			<description>Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row.</description>
			<parameters>
			<parameter name="row" type="HTMLElement | String" usage="required">
				<description> DOM element reference or ID string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="unselectAllCells" scope="instance">
			<description>Clears out all cell selections.</description>
		</method>
		<method name="_onEditorBlockEvent" scope="instance" visibility="private">
			<description>Passes through blockEvent of the active CellEditor.</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description>  Custom Event args.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.PreviousPageLink">
		<description>ui Component to generate the link to jump to the previous page.</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the link to jump to the previous page.</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.PreviousPageLink" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="current" type="HTMLElement" scope="instance" visibility="private">
			<description>Currently placed HTMLElement node</description>
		</property>
		<property name="span" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node (inactive link)</description>
		</property>
		<property name="link" type="HTMLElement" scope="instance" visibility="private">
			<description>Link node</description>
		</property>
		</properties>
		<methods>
		<method name="onClick" scope="instance">
			<description>Listener for the link's onclick event. Passes to setPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the link/span node and clears event listeners</description>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Swap the link and span nodes if appropriate.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the appropriate node given the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ColorAnim" superclass="YAHOO.util.Anim">
		<description>Anim subclass for color transitions.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233, 
[255,255,255], or rgb(255,255,255)&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Anim subclass for color transitions.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233, 
[255,255,255], or rgb(255,255,255)&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.ColorAnim" />
			</return-types>
			<parameters>
			<parameter name="el" type="HTMLElement | String" usage="required">
				<description> Reference to the element that will be animated</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description> The attribute(s) to be animated.
Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.
Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).
All attribute names use camelCase.</description>
			</parameter>
			<parameter name="duration" type="Number" usage="required">
				<description> (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="parseColor" scope="instance">
			<description>Attempts to parse the given string and return a 3-tuple.</description>
			<parameters>
			<parameter name="s" type="String" usage="required">
				<description> The string to parse.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The 3-tuple of rgb values.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.lang.JSON">
		<description>Provides methods to parse JSON strings and convert objects to JSON strings.</description>
		<properties>
		<property name="_BRACKETS" type="{RegExp}" scope="static" visibility="private">
			<description>Third step in the safety evaluation. Regex used to remove all open square brackets following a colon, comma, or at the beginning of the string.</description>
		</property>
		<property name="_VALUES" type="{RegExp}" scope="static" visibility="private">
			<description>Second step in the safety evaluation. Regex used to replace all simple values with ']' characters.</description>
		</property>
		<property name="useNativeStringify" type="Boolean" scope="static">
			<description>Leverage native JSON stringify if the browser has a native implementation. In general, this is a good idea. See the Known Issues section in the JSON user guide for caveats. The default value is true for browsers with native JSON support.</description>
		</property>
		<property name="useNativeParse" type="Boolean" scope="static">
			<description>Leverage native JSON parse if the browser has a native implementation. In general, this is a good idea. See the Known Issues section in the JSON user guide for caveats. The default value is true for browsers with native JSON support.</description>
		</property>
		<property name="_SPECIAL_CHARS" type="{RegExp}" scope="static" visibility="private">
			<description>Regex used to replace special characters in strings for JSON stringification.</description>
		</property>
		<property name="_CHARS" type="{Object}" scope="static" visibility="private">
			<description>Character substitution map for common escapes and special characters.</description>
		</property>
		<property name="_UNSAFE" type="{RegExp}" scope="static" visibility="private">
			<description>Final step in the safety evaluation. Regex used to test the string left after all previous replacements for invalid characters.</description>
		</property>
		<property name="_ESCAPES" type="{RegExp}" scope="static" visibility="private">
			<description>First step in the safety evaluation. Regex used to replace all escape sequences (i.e. &quot;\\&quot;, etc) with '@' characters (a non-JSON character).</description>
		</property>
		<property name="_UNICODE_EXCEPTIONS" type="{RegExp}" scope="instance" visibility="private">
			<description>Replace certain Unicode characters that JavaScript may handle incorrectly during eval--either by deleting them or treating them as line endings--with escape sequences. IMPORTANT NOTE: This regex will be used to modify the input if a match is found.</description>
		</property>
		</properties>
		<methods>
		<method name="stringify" scope="static">
			<description>&lt;p&gt;Converts an arbitrary value to a JSON string representation.&lt;/p&gt; &lt;p&gt;Objects with cyclical references will trigger an exception.&lt;/p&gt; &lt;p&gt;If a whitelist is provided, only matching object keys will be included. Alternately, a replacer function may be passed as the second parameter. This function is executed on every value in the input, and its return value will be used in place of the original value. This is useful to serialize specialized objects or class instances.&lt;/p&gt; &lt;p&gt;If a positive integer or non-empty string is passed as the third parameter, the output will be formatted with carriage returns and indentation for readability. If a String is passed (such as &quot;\t&quot;) it will be used once for each indentation level. If a number is passed, that number of spaces will be used.&lt;/p&gt; &lt;p&gt;When lang.JSON.useNativeStringify is true, this will defer to the native JSON.stringify if the browser has a native implementation. Otherwise, a JavaScript implementation is used.&lt;/p&gt;</description>
			<parameters>
			<parameter name="o" type="MIXED" usage="required">
				<description> any arbitrary object to convert to JSON string</description>
			</parameter>
			<parameter name="w" type="Array|Function" usage="optional">
				<description> (optional) whitelist of acceptable object keys to include OR a function(value,key) to alter values before serialization</description>
			</parameter>
			<parameter name="space" type="Number|String" usage="optional">
				<description> (optional) indentation character(s) or depthy of spaces to format the output</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>JSON string representation of the input</return-description>
		</method>
		<method name="_prepare" scope="instance" visibility="private">
			<description>Replace certain Unicode characters that may be handled incorrectly by some browser implementations.</description>
			<parameters>
			<parameter name="s" type="String" usage="required">
				<description> parse input</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>sanitized JSON string ready to be validated/parsed</return-description>
		</method>
		<method name="isValid" scope="static">
			<description>&lt;p&gt;Four step determination whether a string is safe to eval. In three steps, escape sequences, safe values, and properly placed open square brackets are replaced with placeholders or removed. Then in the final step, the result of all these replacements is checked for invalid characters.&lt;/p&gt; &lt;p&gt;This is an alias for isSafe.&lt;/p&gt;</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> JSON string to be tested</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>is the string safe for eval?</return-description>
		</method>
		<method name="dateToString" scope="static">
			<description>Serializes a Date instance as a UTC date string. Used internally by the JavaScript implementation of stringify. If you need a different Date serialization format, override this method. If you change this, you should also set useNativeStringify to false, since native JSON implementations serialize Dates per the ECMAScript 5 spec. You've been warned.</description>
			<parameters>
			<parameter name="d" type="Date" usage="required">
				<description> The Date to serialize</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ</return-description>
		</method>
		<method name="parse" scope="static">
			<description>&lt;p&gt;Parse a JSON string, returning the native JavaScript representation.&lt;/p&gt; &lt;p&gt;When lang.JSON.useNativeParse is true, this will defer to the native JSON.parse if the browser has a native implementation. Otherwise, a JavaScript implementation based on http://www.json.org/json2.js is used.&lt;/p&gt;</description>
			<parameters>
			<parameter name="s" type="string" usage="required">
				<description> JSON string data</description>
			</parameter>
			<parameter name="reviver" type="function" usage="optional">
				<description> (optional) function(k,v) passed each key:value pair of object literals, allowing pruning or altering values</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>the native JavaScript representation of the JSON string</return-description>
		</method>
		<method name="isSafe" scope="static">
			<description>Four step determination whether a string is safe to eval. In three steps, escape sequences, safe values, and properly placed open square brackets are replaced with placeholders or removed. Then in the final step, the result of all these replacements is checked for invalid characters.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> JSON string to be tested</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>is the string safe for eval?</return-description>
		</method>
		<method name="stringToDate" scope="instance">
			<description>Reconstitute Date instances from the default JSON UTC serialization. Reference this from a reviver function to rebuild Dates during the parse operation.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> String serialization of a Date</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
		</method>
		<method name="_revive" scope="instance" visibility="private">
			<description>Traverses nested objects, applying a filter or reviver function to each value. The value returned from the function will replace the original value in the key:value pair. If the value returned is undefined, the key will be omitted from the returned object.</description>
			<parameters>
			<parameter name="data" type="MIXED" usage="required">
				<description> Any JavaScript data</description>
			</parameter>
			<parameter name="reviver" type="Function" usage="required">
				<description> filter or mutation function</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>The results of the filtered/mutated data structure</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ImageLoader.srcImgObj" superclass="YAHOO.util.ImageLoader.imgObj">
		<description>Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</description>
		<constructors>
		<constructor scope="instance">
			<description>Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</description>
			<return-types>
				<return-type type="YAHOO.util.ImageLoader.srcImgObj" />
			</return-types>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			<parameter name="width" type="Int" usage="required">
				<description>	pixel width of the image - defaults to image's natural size</description>
			</parameter>
			<parameter name="height" type="Int" usage="required">
				<description>	pixel height of the image - defaults to image's natural size</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="_applyUrl" scope="instance" visibility="private">
			<description>Inserts the image URL into the DOM so that the image is displayed. Sets src</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description>	HTML DOM element</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="LogMsg">
		<description>The LogMsg class defines a single log message.</description>
		<constructors>
		<constructor scope="instance">
			<description>The LogMsg class defines a single log message.</description>
			<return-types>
				<return-type type="LogMsg" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  Object literal of configuration params.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="msg" type="String" scope="instance">
			<description>Log message.</description>
		</property>
		<property name="category" type="String" scope="instance">
			<description>Log category.</description>
		</property>
		<property name="sourceDetail" type="String" scope="instance">
			<description>Log source detail. The remainder of the string passed in as the source argument, not including the first word (if any).</description>
		</property>
		<property name="source" type="String" scope="instance">
			<description>Log source. The first word passed in as the source argument.</description>
		</property>
		<property name="time" type="Date" scope="instance">
			<description>Log timestamp.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.tool.TestRunner">
		<description>Runs test suites and test cases, providing events to allowing for the
interpretation of test results.</description>
		<properties>
		<property name="_root" type="TestNode" scope="static" visibility="private">
			<description>Pointer to the root node in the test tree.</description>
		</property>
		<property name="_cur" type="TestNode" scope="static" visibility="private">
			<description>Pointer to the current node in the test tree.</description>
		</property>
		<property name="masterSuite" type="YAHOO.tool.TestSuite" scope="static" visibility="private">
			<description>Suite on which to attach all TestSuites and TestCases to be run.</description>
		</property>
		</properties>
		<methods>
		<method name="_run" scope="static" visibility="private">
			<description>Runs a test case or test suite, returning the results.</description>
			<parameters>
			<parameter name="testObject" type="YAHOO.tool.TestCase|YAHOO.tool.TestSuite" usage="required">
				<description> The test case or test suite to run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Results of the execution with properties passed, failed, and total.</return-description>
		</method>
		<method name="run" scope="static">
			<description>Runs the test suite.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="resume" scope="static">
			<description>Resumes the TestRunner after wait() was called.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="required">
				<description> The function to run as the rest of the haulted test.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_handleTestObjectComplete" scope="static" visibility="private">
			<description>Handles the completion of a test object's tests. Tallies test results from one level up to the next.</description>
			<parameters>
			<parameter name="node" type="TestNode" usage="required">
				<description> The TestNode representing the test object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_addTestCaseToTestTree" scope="static" visibility="private">
			<description>Adds a test case to the test tree as a child of the specified node.</description>
			<parameters>
			<parameter name="parentNode" type="TestNode" usage="required">
				<description> The node to add the test case to as a child.</description>
			</parameter>
			<parameter name="testCase" type="YAHOO.tool.TestCase" usage="required">
				<description> The test case to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="clear" scope="static">
			<description>Removes all test objects from the runner.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_buildTestTree" scope="static" visibility="private">
			<description>Builds the test tree based on items in the master suite. The tree is a hierarchical representation of the test suites, test cases, and test functions. The resulting tree is stored in _root and the pointer _cur is set to the root initially.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_addTestSuiteToTestTree" scope="static" visibility="private">
			<description>Adds a test suite to the test tree as a child of the specified node.</description>
			<parameters>
			<parameter name="parentNode" type="TestNode" usage="required">
				<description> The node to add the test suite to as a child.</description>
			</parameter>
			<parameter name="testSuite" type="YAHOO.tool.TestSuite" usage="required">
				<description> The test suite to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="add" scope="static">
			<description>Adds a test suite or test case to the list of test objects to run.</description>
			<parameters>
			<parameter name="testObject" type="" usage="required">
				<description> Either a TestCase or a TestSuite that should be run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_next" scope="static" visibility="private">
			<description>Retrieves the next node in the test tree.</description>
			<return-types>
			<return-type type="TestNode" />
			</return-types>
			<return-description>The next node in the test tree or null if the end is reached.</return-description>
		</method>
		<method name="fireEvent" scope="static">
			<description>Fires events for the TestRunner. This overrides the default fireEvent() method from EventProvider to add the type property to the data that is passed through on each event call.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to fire.</description>
			</parameter>
			<parameter name="data" type="Object" usage="optional">
				<description> (Optional) Data for the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_runTest" scope="static" visibility="private">
			<description>Runs a single test based on the data provided in the node.</description>
			<parameters>
			<parameter name="node" type="TestNode" usage="required">
				<description> The TestNode representing the test to run.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Layout" superclass="YAHOO.util.Element">
		<description>&lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.Layout" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to make contain a layout.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_sizes" type="Object" scope="instance" visibility="private">
			<description>A collection of the current sizes of all usable LayoutUnits to be used for calculations</description>
		</property>
		<property name="_units" type="Object" scope="instance" visibility="private">
			<description>An object literal that contains a list of units in the layout</description>
		</property>
		<property name="_doc" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to the root element</description>
		</property>
		<property name="_rendered" type="Boolean" scope="instance" visibility="private">
			<description>Set to true when the layout is rendered</description>
		</property>
		<property name="_zIndex" type="Number" scope="instance" visibility="private">
			<description>The zIndex to set all LayoutUnits to</description>
		</property>
		<property name="_instances" type="Object" scope="static" visibility="private">
			<description>Internal hash table for all layout instances</description>
		</property>
		<property name="_isBody" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if we are using the body as the root element.</description>
		</property>
		<property name="browser" type="Object" scope="instance">
			<description>A modified version of the YAHOO.env.ua object</description>
		</property>
		</properties>
		<methods>
		<method name="_stamp" scope="instance" visibility="private">
			<description>Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable.</description>
		</method>
		<method name="_setupElements" scope="instance" visibility="private">
			<description>Sets up the main doc element when not using the body as the main element.</description>
		</method>
		<method name="addUnit" scope="instance">
			<description>Add a unit to this layout and if the layout is rendered, resize the layout.</description>
			<parameters>
			<parameter name="cfg" type="Object" usage="required">
				<description> The config for the LayoutUnit that you want to add</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="render" scope="instance">
			<description>This method starts the render process, applying classnames and creating elements</description>
			<return-types>
			<return-type type="YAHOO.widget.Layout" />
			</return-types>
			<return-description>The Layout instance</return-description>
		</method>
		<method name="removeUnit" scope="instance">
			<description>Remove the unit from this layout and resize the layout.</description>
			<parameters>
			<parameter name="unit" type="Object" usage="required">
				<description> The LayoutUnit that you want to remove</description>
			</parameter>
			</parameters>
		</method>
		<method name="getUnitByPosition" scope="instance">
			<description>Get the LayoutUnit by it's position in this layout</description>
			<parameters>
			<parameter name="pos" type="String" usage="required">
				<description> The position of the unit in this layout</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="_setBodySize" scope="instance" visibility="private">
			<description>Used to set the body size of the layout, sets the height and width of the parent container</description>
			<parameters>
			<parameter name="set" type="Boolean" usage="required">
				<description> If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)</description>
			</parameter>
			</parameters>
		</method>
		<method name="getLayoutById" scope="static">
			<description>Get's a layout object by the HTML id of the element associated with the Layout object.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The Layout Object</return-description>
		</method>
		<method name="_setCenter" scope="instance" visibility="private">
			<description>Used to set the size and position of the center unit</description>
			<parameters>
			<parameter name="set" type="Boolean" usage="required">
				<description> If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createUnits" scope="instance" visibility="private">
			<description>Private method to create units from the config that was passed in.</description>
		</method>
		<method name="init" scope="instance" visibility="private">
			<description>The Layout class' initialization method</description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Processes the config</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the Layout.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="resize" scope="instance">
			<description>Starts the chain of resize routines that will resize all the units.</description>
			<parameters>
			<parameter name="Boolean/Event" type="" usage="required">
				<description> set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units). This can also have an attribute event passed to it.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Layout" />
			</return-types>
			<return-description>The Layout instance</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes this layout from the page and destroys all units that it contains. This will destroy all data inside the layout and it's children.</description>
		</method>
		<method name="getUnitById" scope="instance">
			<description>Get the LayoutUnit by it's HTML id</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> The HTML element id of the unit</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="_setupBodyElements" scope="instance" visibility="private">
			<description>Sets up the main doc element when using the body as the main element.</description>
		</method>
		<method name="_setSides" scope="instance" visibility="private">
			<description>Used to set the size and position of the left, right, top and bottom units</description>
			<parameters>
			<parameter name="set" type="Boolean" usage="required">
				<description> If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSizes" scope="instance">
			<description>Get a reference to the internal Layout Unit sizes object used to build the layout wireframe</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object of the layout unit sizes</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DDProxy" superclass="YAHOO.util.DD">
		<description>A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the &quot;frame&quot; element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description>
		<constructors>
		<constructor scope="instance">
			<description>A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the &quot;frame&quot; element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description>
			<return-types>
				<return-type type="YAHOO.util.DDProxy" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the linked html element</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related DragDrop objects</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> an object containing configurable attributes
Valid properties for DDProxy in addition to those in DragDrop: 
resizeFrame, centerFrame, dragElId</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.util.DDProxy.dragElId" type="String" scope="static">
			<description>The default drag frame div id</description>
		</property>
		<property name="resizeFrame" type="boolean" scope="instance">
			<description>By default we resize the drag frame to be the same size as the element we want to drag (this is to get the frame effect). We can turn it off if we want a different behavior.</description>
		</property>
		<property name="centerFrame" type="boolean" scope="instance">
			<description>By default the frame is positioned exactly where the drag element is, so we use the cursor offset provided by YAHOO.util.DD. Another option that works only if you do not have constraints on the obj is to have the drag frame centered around the cursor. Set centerFrame to true for this effect.</description>
		</property>
		</properties>
		<methods>
		<method name="createFrame" scope="instance">
			<description>Creates the proxy element if it does not yet exist</description>
		</method>
		<method name="initFrame" scope="instance">
			<description>Initialization for the drag frame element. Must be called in the constructor of all subclasses</description>
		</method>
		<method name="_resizeProxy" scope="instance" visibility="private">
			<description>The proxy is automatically resized to the dimensions of the linked element when a drag is initiated, unless resizeFrame is set to false</description>
		</method>
		<method name="showFrame" scope="instance" visibility="private">
			<description>Resizes the drag frame to the dimensions of the clicked object, positions it over the object, and finally displays it</description>
			<parameters>
			<parameter name="iPageX" type="int" usage="required">
				<description> X click position</description>
			</parameter>
			<parameter name="iPageY" type="int" usage="required">
				<description> Y click position</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.RecordSet">
		<description>A RecordSet defines and manages a set of Records.</description>
		<constructors>
		<constructor scope="instance">
			<description>A RecordSet defines and manages a set of Records.</description>
			<return-types>
				<return-type type="YAHOO.widget.RecordSet" />
			</return-types>
			<parameters>
			<parameter name="data" type="Object || Object[]" usage="required">
				<description>  An object literal or an array of data.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_length" type="Number" scope="instance" visibility="private">
			<description>Internal counter of how many Records are in the RecordSet.</description>
		</property>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Unique String identifier assigned at instantiation.</description>
		</property>
		<property name="RecordSet._nCount" type="Number" scope="static" visibility="private">
			<description>Internal class variable to name multiple Recordset instances.</description>
		</property>
		</properties>
		<methods>
		<method name="hasRecords" scope="instance">
			<description>Returns a boolean indicating whether Records exist in the RecordSet at the specified index range. Returns true if and only if a Record exists at each index in the range.</description>
			<parameters>
			<parameter name="index" type="" usage="required"/>
			<parameter name="range" type="" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if all indices are populated in the RecordSet</return-description>
		</method>
		<method name="updateRecord" scope="instance">
			<description>Updates given Record with given data.</description>
			<parameters>
			<parameter name="record" type="YAHOO.widget.Record | Number | String" usage="required">
				<description> A Record instance, a RecordSet position index, or a Record ID.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> Object literal of new data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>Updated Record, or null.</return-description>
		</method>
		<method name="replaceRecords" scope="instance">
			<description>Replaces all Records in RecordSet with new object literal data.</description>
			<parameters>
			<parameter name="data" type="Object || Object[]" usage="required">
				<description> An object literal of data or an array of data object literals.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record || YAHOO.widget.Record[]" />
			</return-types>
			<return-description>A Record instance or
an array of Records.</return-description>
		</method>
		<method name="addRecord" scope="instance">
			<description>Adds one Record to the RecordSet at the given index. If index is null, then adds the Record to the end of the RecordSet.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> An object literal of data.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>A Record instance.</return-description>
		</method>
		<method name="updateKey" scope="instance">
		</method>
		<method name="deleteRecord" scope="instance">
			<description>Removes the Record at the given position index from the RecordSet. If a range is also provided, removes that many Records, starting from the index. Length of RecordSet is correspondingly shortened.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Record's RecordSet position index.</description>
			</parameter>
			<parameter name="range" type="Number" usage="optional">
				<description> (optional) How many Records to delete.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A copy of the data held by the deleted Record.</return-description>
		</method>
		<method name="_setRecord" scope="instance" visibility="private">
			<description>Sets/replaces one Record to the RecordSet at the given index. Existing Records with higher indexes are not shifted. If no index specified, the Record is added to the end of the RecordSet.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> An object literal of data.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>A Record instance.</return-description>
		</method>
		<method name="getLength" scope="instance">
			<description>Returns the number of Records held in the RecordSet.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Number of records in the RecordSet.</return-description>
		</method>
		<method name="getRecord" scope="instance">
			<description>Returns Record by ID or RecordSet position index.</description>
			<parameters>
			<parameter name="record" type="YAHOO.widget.Record | Number | String" usage="required">
				<description> Record instance, RecordSet position index, or Record ID.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>Record object.</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>Returns unique name of the RecordSet instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the RecordSet instance.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the RecordSet instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the RecordSet instance.</return-description>
		</method>
		<method name="reverseRecords" scope="instance">
			<description>Reverses all Records, so [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] becomes [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;].</description>
			<return-types>
			<return-type type="YAHOO.widget.Record[]" />
			</return-types>
			<return-description>Reverse-sorted array of Records.</return-description>
		</method>
		<method name="addRecords" scope="instance">
			<description>Adds multiple Records at once to the RecordSet at the given index with the given object literal data. If index is null, then the new Records are added to the end of the RecordSet.</description>
			<parameters>
			<parameter name="aData" type="Object[]" usage="required">
				<description> An object literal data or an array of data object literals.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record[]" />
			</return-types>
			<return-description>An array of Record instances.</return-description>
		</method>
		<method name="setRecords" scope="instance">
			<description>Sets or replaces multiple Records at once to the RecordSet with the given data, starting at the given index. If index is not specified, then the new Records are added to the end of the RecordSet.</description>
			<parameters>
			<parameter name="aData" type="Object[]" usage="required">
				<description> An array of object literal data.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record[]" />
			</return-types>
			<return-description>An array of Record instances.</return-description>
		</method>
		<method name="reset" scope="instance">
			<description>Deletes all Records from the RecordSet.</description>
		</method>
		<method name="getRecords" scope="instance">
			<description>Returns an array of Records from the RecordSet.</description>
			<parameters>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Recordset position index of which Record to start at.</description>
			</parameter>
			<parameter name="range" type="Number" usage="optional">
				<description> (optional) Number of Records to get.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record[]" />
			</return-types>
			<return-description>Array of Records starting at given index and
length equal to given range. If index is not given, all Records are returned.</return-description>
		</method>
		<method name="sortRecords" scope="instance">
			<description>Sorts all Records by given function. Records keep their unique IDs but will have new RecordSet position indexes.</description>
			<parameters>
			<parameter name="fnSort" type="Function" usage="required">
				<description> Reference to a sort function.</description>
			</parameter>
			<parameter name="desc" type="Boolean" usage="required">
				<description> True if sort direction is descending, false if sort direction is ascending.</description>
			</parameter>
			<parameter name="field" type="String" usage="required">
				<description> The field to sort by, from sortOptions.field</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record[]" />
			</return-types>
			<return-description>Sorted array of Records.</return-description>
		</method>
		<method name="updateRecordValue" scope="instance">
			<description>Sets given Record at given key to given data.</description>
			<parameters>
			<parameter name="record" type="YAHOO.widget.Record | Number | String" usage="required">
				<description> A Record instance, a RecordSet position index, or a Record ID.</description>
			</parameter>
			<parameter name="sKey" type="String" usage="required">
				<description> Key name.</description>
			</parameter>
			<parameter name="oData" type="Object" usage="required">
				<description> New data.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getRecordIndex" scope="instance">
			<description>Returns current position index for the given Record.</description>
			<parameters>
			<parameter name="oRecord" type="YAHOO.widget.Record" usage="required">
				<description> Record instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Record's RecordSet position index.</return-description>
		</method>
		<method name="setRecord" scope="instance">
			<description>Sets or replaces one Record to the RecordSet at the given index. Unlike addRecord, an existing Record at that index is not shifted to preserve it. If no index is specified, it adds the Record to the end of the RecordSet.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> An object literal of data.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>A Record instance.</return-description>
		</method>
		<method name="_deleteRecord" scope="instance" visibility="private">
			<description>Deletes Records from the RecordSet at the given index. If range is null, then only one Record is deleted.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Position index.</description>
			</parameter>
			<parameter name="range" type="Number" usage="optional">
				<description> (optional) How many Records to delete</description>
			</parameter>
			</parameters>
		</method>
		<method name="deleteRecords" scope="instance">
			<description>Removes the Record at the given position index from the RecordSet. If a range is also provided, removes that many Records, starting from the index. Length of RecordSet is correspondingly shortened.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Record's RecordSet position index.</description>
			</parameter>
			<parameter name="range" type="Number" usage="optional">
				<description> (optional) How many Records to delete.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object[]" />
			</return-types>
			<return-description>An array of copies of the data held by the deleted Records.</return-description>
		</method>
		<method name="_addRecord" scope="instance" visibility="private">
			<description>Adds one Record to the RecordSet at the given index. If index is null, then adds the Record to the end of the RecordSet.</description>
			<parameters>
			<parameter name="oData" type="Object" usage="required">
				<description> An object literal of data.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) Position index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>A Record instance.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TextNode" superclass="YAHOO.widget.Node">
		<description>The default node presentation.  The first parameter should be
either a string that will be used as the node's label, or an object
that has at least a string property called label.  By default,  clicking the
label will toggle the expanded/collapsed state of the node.  By
setting the href property of the instance, this behavior can be
changed so that the label will go to the specified href.</description>
		<constructors>
		<constructor scope="instance">
			<description>The default node presentation.  The first parameter should be
either a string that will be used as the node's label, or an object
that has at least a string property called label.  By default,  clicking the
label will toggle the expanded/collapsed state of the node.  By
setting the href property of the instance, this behavior can be
changed so that the label will go to the specified href.</description>
			<return-types>
				<return-type type="YAHOO.widget.TextNode" />
			</return-types>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description>  a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
			</parameter>
			<parameter name="oParent" type="YAHOO.widget.Node" usage="required">
				<description>  this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description>  the initial expanded/collapsed state (deprecated; use oData.expanded)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_type" type="string" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		<property name="target" type="string" scope="instance">
			<description>The label href target, defaults to current window</description>
		</property>
		<property name="title" type="string" scope="instance">
			<description>The text for the title (tooltip) for the label element</description>
		</property>
		<property name="labelStyle" type="string" scope="instance">
			<description>The CSS class for the label href. Defaults to ygtvlabel, but can be overridden to provide a custom presentation for a specific node.</description>
		</property>
		<property name="label" type="string" scope="instance">
			<description>The text for the label. It is assumed that the oData parameter will either be a string that will be used as the label, or an object that has a property called &quot;label&quot; that we will use.</description>
		</property>
		<property name="href" type="string" scope="instance">
			<description>The href for the node's label. If one is not specified, the href will be set so that it toggles the node.</description>
		</property>
		<property name="labelElId" type="string" scope="instance">
			<description>The derived element id of the label for this node</description>
		</property>
		</properties>
		<methods>
		<method name="getEditorValue" scope="instance">
			<description>Returns the value from the input element. Overrides Node.getEditorValue.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>value entered</return-description>
		</method>
		<method name="fillEditorContainer" scope="instance">
			<description>Places an &amp;lt;input&amp;gt; textbox in the input container and loads the label text into it.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="displayEditedValue" scope="instance">
			<description>Finally displays the newly edited value in the tree. Overrides Node.displayEditedValue.</description>
			<parameters>
			<parameter name="value" type="string" usage="required">
				<description> value to be displayed and stored in the node</description>
			</parameter>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
		</method>
		<method name="getNodeDefinition" scope="instance">
			<description>Returns an object which could be used to build a tree out of this node and its children. It can be passed to the tree constructor to reproduce this node as a tree. It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the tree or false if this node or any descendant is defined as dynamic</return-description>
		</method>
		<method name="destroyEditorContents" scope="instance">
			<description>Destroys the contents of the inline editor panel. Overrides Node.destroyEditorContent. Since we didn't set any event listeners on this inline editor, it is more efficient to avoid the generic method in Node.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
		</method>
		<method name="getLabelEl" scope="instance">
			<description>Returns the label element</description>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>the element</return-description>
		</method>
		<method name="setUpLabel" scope="instance">
			<description>Sets up the node label</description>
			<parameters>
			<parameter name="oData" type="" usage="required">
				<description> string containing the label, or an object with a label property</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="EventProvider">
		<description>EventProvider is designed to be used with YAHOO.augment to wrap 
CustomEvents in an interface that allows events to be subscribed to 
and fired by name.  This makes it possible for implementing code to
subscribe to an event that either has not been created yet, or will
not be created at all.</description>
		<properties>
		<property name="__yui_subscribers" type="Object[]" scope="instance" visibility="private">
			<description>Private storage of custom event subscribers</description>
		</property>
		<property name="__yui_events" type="Object[]" scope="instance" visibility="private">
			<description>Private storage of custom events</description>
		</property>
		</properties>
		<methods>
		<method name="unsubscribeAll" scope="instance">
			<description>Removes all listeners from the specified event. If the event type is not specified, all listeners from all hosted custom events will be removed.</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description>  The type, or name of the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="subscribe" scope="instance">
			<description>Subscribe to a CustomEvent by event type</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description>    the type, or name of the event</description>
			</parameter>
			<parameter name="p_fn" type="function" usage="required">
				<description>    the function to exectute when the event fires</description>
			</parameter>
			<parameter name="p_obj" type="Object" usage="required">
				<description>     An object to be passed along when the event fires</description>
			</parameter>
			<parameter name="overrideContext" type="boolean" usage="required">
				<description>  If true, the obj passed in becomes the execution scope of the listener</description>
			</parameter>
			</parameters>
		</method>
		<method name="unsubscribe" scope="instance">
			<description>Unsubscribes one or more listeners the from the specified event</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description>  The type, or name of the event. If the type is not specified, it will attempt to remove the listener from all hosted events.</description>
			</parameter>
			<parameter name="p_fn" type="Function" usage="required">
				<description>  The subscribed function to unsubscribe, if not supplied, all subscribers will be removed.</description>
			</parameter>
			<parameter name="p_obj" type="Object" usage="required">
				<description>   The custom object passed to subscribe. This is optional, but if supplied will be used to disambiguate multiple listeners that are the same (e.g., you subscribe many object using a function that lives on the prototype)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the subscriber was found and detached.</return-description>
		</method>
		<method name="hasEvent" scope="instance">
			<description>Returns true if the custom event of the provided type has been created with createEvent.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type, or name of the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="fireEvent" scope="instance">
			<description>Fire a custom event by name. The callback functions will be executed from the scope specified when the event was created, and with the following parameters: &lt;ul&gt; &lt;li&gt;The first argument fire() was executed with&lt;/li&gt; &lt;li&gt;The custom object (if any) that was passed into the subscribe() method&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description>   the type, or name of the event</description>
			</parameter>
			<parameter name="arguments" type="Object*" usage="required">
				<description> an arbitrary set of parameters to pass to the handler.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>the return value from CustomEvent.fire</return-description>
		</method>
		<method name="createEvent" scope="instance">
			<description>Creates a new custom event of the specified type. If a custom event by that name already exists, it will not be re-created. In either case the custom event is returned.</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description> the type, or name of the event</description>
			</parameter>
			<parameter name="p_config" type="object" usage="required">
				<description> optional config params. Valid properties are: &lt;ul&gt; &lt;li&gt; scope: defines the default execution scope. If not defined the default scope will be this instance. &lt;/li&gt; &lt;li&gt; silent: if true, the custom event will not generate log messages. This is false by default. &lt;/li&gt; &lt;li&gt; fireOnce: if true, the custom event will only notify subscribers once regardless of the number of times the event is fired. In addition, new subscribers will be executed immediately if the event has already fired. This is false by default. &lt;/li&gt; &lt;li&gt; onSubscribeCallback: specifies a callback to execute when the event has a new subscriber. This will fire immediately for each queued subscriber if any exist prior to the creation of the event. &lt;/li&gt; &lt;/ul&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="CustomEvent" />
			</return-types>
			<return-description>the custom event</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ImageLoader.imgObj">
		<description>Base class for image objects to be registered with the groups</description>
		<constructors>
		<constructor scope="instance">
			<description>Base class for image objects to be registered with the groups</description>
			<return-types>
				<return-type type="YAHOO.util.ImageLoader.imgObj" />
			</return-types>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_fetched" type="Boolean" scope="instance" visibility="private">
			<description>Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice</description>
		</property>
		<property name="url" type="String" scope="instance">
			<description>URL for the image</description>
		</property>
		<property name="domId" type="String" scope="instance">
			<description>HTML DOM id of the image element</description>
		</property>
		<property name="height" type="Int" scope="instance">
			<description>Pixel height of the image. Will be set as a &quot;height&quot; attribute after the image is fetched. Detaults to the natural height of the image. Only appropriate with src images</description>
		</property>
		<property name="width" type="Int" scope="instance">
			<description>Pixel width of the image. Will be set as a &quot;width&quot; attribute after the image is fetched. Detaults to the natural width of the image. Only appropriate with src images</description>
		</property>
		<property name="setVisible" type="Boolean" scope="instance">
			<description>Whether the style.visibility should be set to &quot;visible&quot; after the image is fetched. Used when setting src images as visibility:hidden prior to image fetching</description>
		</property>
		</properties>
		<methods>
		<method name="fetch" scope="instance">
			<description>Displays the image; puts the URL into the DOM</description>
		</method>
		<method name="_applyUrl" scope="instance" visibility="private">
			<description>Inserts the image URL into the DOM so that the image is displayed. Must be overridden by child class</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description>	HTML DOM element</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ImageCropper" superclass="YAHOO.util.Element">
		<description>&lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.ImageCropper" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The image element to make croppable.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_resizeEl" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML Element used to create the Resize Oject</description>
		</property>
		<property name="CSS_RESIZE_MASK" type="String" scope="instance" visibility="private">
			<description>The CSS class for the mask inside the resize element</description>
		</property>
		<property name="_resizeMaskEl" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML Element used to create the Resize mask</description>
		</property>
		<property name="_active" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if the crop region is active</description>
		</property>
		<property name="_mask" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML Element created to &quot;mask&quot; the image being cropped</description>
		</property>
		<property name="_image" type="String" scope="instance" visibility="private">
			<description>The url of the image we are cropping</description>
		</property>
		<property name="_instances" type="Object" scope="static" visibility="private">
			<description>Internal hash table for all ImageCropper instances</description>
		</property>
		<property name="CSS_MASK" type="String" scope="instance" visibility="private">
			<description>The CSS class for the mask element</description>
		</property>
		<property name="_resize" type="Object" scope="instance" visibility="private">
			<description>A reference to the Resize Utility used in this Cropper Instance</description>
		</property>
		<property name="_wrap" type="HTMLElement" scope="instance" visibility="private">
			<description>The HTML Element created to wrap the image</description>
		</property>
		<property name="CSS_MAIN" type="String" scope="instance" visibility="private">
			<description>The CSS class used to wrap the element</description>
		</property>
		</properties>
		<methods>
		<method name="_handleStartResizeEvent" scope="instance" visibility="private">
			<description>Handles the Resize Utilitys startResize event</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the ImageCropper Object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_setBackgroundImage" scope="instance" visibility="private">
			<description>Sets the background image of the resize element</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> url The url of the image</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Initializes all of the configuration attributes used to create a croppable element.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the widget.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleResizeEvent" scope="instance" visibility="private">
			<description>Handles the Resize Utilitys Resize event</description>
			<parameters>
			<parameter name="Event" type="" usage="required">
				<description> ev The Resize Utilitys resize event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getResizeObject" scope="instance">
			<description>Get the Resize Utility object.</description>
			<return-types>
			<return-type type="YAHOO.util.Resize" />
			</return-types>
			<return-description>The Resize instance</return-description>
		</method>
		<method name="getResizeMaskEl" scope="instance">
			<description>Get the HTML reference for the resizable object's mask element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The resize objects mask element.</return-description>
		</method>
		<method name="_handleBeforeResizeEvent" scope="instance" visibility="private">
			<description>Handles the Resize Utilitys beforeResize event</description>
		</method>
		<method name="_syncBackgroundPosition" scope="instance" visibility="private">
			<description>Syncs the packground position of the resize element with the resize elements top and left style position</description>
		</method>
		<method name="_handleMouseOut" scope="instance" visibility="private">
			<description>Handles the mouseout event</description>
		</method>
		<method name="init" scope="instance" visibility="private">
			<description>The ImageCropper class's initialization method</description>
		</method>
		<method name="_moveEl" scope="instance" visibility="private">
			<description>Moves the resize element based on the arrow keys</description>
		</method>
		<method name="getCropperById" scope="static">
			<description>Get's an ImageCropper object by the HTML id of the image associated with the ImageCropper object.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The ImageCropper Object</return-description>
		</method>
		<method name="getEl" scope="instance">
			<description>Get the HTML reference for the image element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The image element</return-description>
		</method>
		<method name="_handleKeyPress" scope="instance" visibility="private">
			<description>Handles the keypress event</description>
		</method>
		<method name="getResizeEl" scope="instance">
			<description>Get the HTML reference for the resize element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The resize element</return-description>
		</method>
		<method name="_handleDragEvent" scope="instance" visibility="private">
			<description>Handles the DragDrop DragEvent event</description>
		</method>
		<method name="_createResize" scope="instance" visibility="private">
			<description>Creates the resize element and the instance of the Resize Utility</description>
		</method>
		<method name="_createWrap" scope="instance" visibility="private">
			<description>Creates the wrapper element used to wrap the image</description>
		</method>
		<method name="getMaskEl" scope="instance">
			<description>Get the HTML reference for the mask element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The mask element</return-description>
		</method>
		<method name="_handleB4DragEvent" scope="instance" visibility="private">
			<description>Handles the DragDrop b4DragEvent event</description>
		</method>
		<method name="getWrapEl" scope="instance">
			<description>Get the HTML reference for the wrap element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The wrap element</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the ImageCropper object and all of it's elements &amp; listeners.</description>
		</method>
		<method name="getCropCoords" scope="instance">
			<description>Returns the coordinates needed to crop the image</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The top, left, height, width and image url of the image being cropped</return-description>
		</method>
		<method name="_setBackgroundPosition" scope="instance" visibility="private">
			<description>Sets the background image position to the top and left position</description>
			<parameters>
			<parameter name="Number" type="" usage="required">
				<description> l The left position</description>
			</parameter>
			<parameter name="Number" type="" usage="required">
				<description> t The top position</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMouseOver" scope="instance" visibility="private">
			<description>Handles the mouseover event</description>
		</method>
		<method name="reset" scope="instance">
			<description>Resets the crop element back to it's original position</description>
			<return-types>
			<return-type type="YAHOO.widget.ImageCropper" />
			</return-types>
			<return-description>The ImageCropper instance</return-description>
		</method>
		<method name="_handleResizeMaskEl" scope="instance" visibility="private">
			<description>Resizes the inner mask element</description>
		</method>
		<method name="_setConstraints" scope="instance" visibility="private">
			<description>Set the DragDrop constraints to keep the element inside the crop area.</description>
			<parameters>
			<parameter name="Boolean" type="" usage="required">
				<description> inside Used when called from inside a resize event, false by default (dragging)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object containing Top, Right, Bottom and Left constraints</return-description>
		</method>
		<method name="_createMask" scope="instance" visibility="private">
			<description>Creates the mask element used to mask the image</description>
		</method>
		<method name="_handleEndResizeEvent" scope="instance" visibility="private">
			<description>Handles the Resize Utilitys endResize event</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.MenuItem">
		<description>Creates an item for a menu.</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates an item for a menu.</description>
			<return-types>
				<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
			<parameters>
			<parameter name="p_oObject" type="String" usage="required">
				<description> String specifying the text of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLLIElement" usage="required">
				<description> Object specifying 
the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptGroupElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptionElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the menu item. See configuration class documentation 
for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_oSubmenu" type="YAHOO.widget.Menu" scope="instance" visibility="private">
			<description>Object reference to the menu item's submenu.</description>
		</property>
		<property name="index" type="Number" scope="instance">
			<description>Number indicating the ordinal position of the menu item in its group.</description>
		</property>
		<property name="CSS_LABEL_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the menu item's &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item.</description>
		</property>
		<property name="parent" type="YAHOO.widget.Menu" scope="instance">
			<description>Object reference to the menu item's parent menu.</description>
		</property>
		<property name="SUBMENU_TYPE" type="YAHOO.widget.Menu" scope="instance">
			<description>Object representing the type of menu to instantiate and add when parsing the child nodes of the menu item's source HTML element.</description>
		</property>
		<property name="srcElement" type="HTMLLIElement|HTMLOptGroupElement|HTMLOptionElement" scope="instance">
			<description>Object reference to the HTML element (either &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;) used create the menu item.</description>
		</property>
		<property name="value" type="Object" scope="instance">
			<description>Object reference to the menu item's value.</description>
		</property>
		<property name="element" type="HTMLLIElement" scope="instance">
			<description>Object reference to the menu item's &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="_sClassName" type="String" scope="instance" visibility="private">
			<description>The current value of the &quot;classname&quot; configuration attribute.</description>
		</property>
		<property name="_oAnchor" type="HTMLAnchorElement" scope="instance" visibility="private">
			<description>Object reference to the menu item's &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="constructor" type="YAHOO.widget.MenuItem" scope="instance">
			<description>Object reference to the menu item's constructor function.</description>
		</property>
		<property name="groupIndex" type="Number" scope="instance">
			<description>Number indicating the index of the group to which the menu item belongs.</description>
		</property>
		<property name="browser" type="String" scope="instance">
			<description>String representing the browser.</description>
		</property>
		<property name="_oHelpTextEM" type="HTMLElement" scope="instance" visibility="private">
			<description>Object reference to the menu item's help text &lt;code&gt;&amp;#60;em&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>Id of the menu item's root &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element. This property should be set via the constructor using the configuration object literal. If an id is not specified, then one will be created using the &quot;generateId&quot; method of the Dom utility.</description>
		</property>
		<property name="_oOnclickAttributeValue" type="Object" scope="instance" visibility="private">
			<description>Object reference to the menu item's current value for the &quot;onclick&quot; configuration attribute.</description>
		</property>
		</properties>
		<methods>
		<method name="_createRootNodeStructure" scope="instance" visibility="private">
			<description>Creates the core DOM structure for the menu item.</description>
		</method>
		<method name="hasFocus" scope="instance">
			<description>Returns a boolean indicating whether or not the menu item has focus.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="configURL" scope="instance">
			<description>Event handler for when the &quot;url&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="focus" scope="instance">
			<description>Causes the menu item to receive the focus and fires the focus event.</description>
		</method>
		<method name="configEmphasis" scope="instance">
			<description>Event handler for when the &quot;emphasis&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_dispatchClickEvent" scope="instance" visibility="private">
			<description>Dispatches a DOM &quot;click&quot; event to the anchor element of a MenuItem instance.</description>
		</method>
		<method name="configTarget" scope="instance">
			<description>Event handler for when the &quot;target&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addClassNameForState" scope="instance" visibility="private">
			<description>Applies a class name to a MenuItem instance's &amp;#60;LI&amp;#62; and &amp;#60;A&amp;#62; elements that represents a MenuItem's state - &quot;disabled,&quot; &quot;checked,&quot; etc.</description>
			<parameters>
			<parameter name="state" type="String" usage="required">
				<description> String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getClassNameForState" scope="instance" visibility="private">
			<description>Returns a class name for the specified prefix and state. If the class name does not yet exist, it is created and stored in the CLASS_NAMES object to increase performance.</description>
			<parameters>
			<parameter name="prefix" type="String" usage="required">
				<description> String representing the prefix for the class name</description>
			</parameter>
			<parameter name="state" type="String" usage="required">
				<description> String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configStrongEmphasis" scope="instance">
			<description>Event handler for when the &quot;strongemphasis&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createKeyListener" scope="instance" visibility="private">
			<description>&quot;show&quot; event handler for a Menu instance - responsible for setting up the KeyListener instance for a MenuItem.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="keyData" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configSubmenu" scope="instance">
			<description>Event handler for when the &quot;submenu&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getNextSibling" scope="instance">
			<description>Finds the menu item's next sibling.</description>
			<return-description>YAHOO.widget.MenuItem</return-description>
		</method>
		<method name="configOnClick" scope="instance">
			<description>Event handler for when the &quot;onclick&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getPreviousEnabledSibling" scope="instance">
			<description>Finds the menu item's previous enabled sibling.</description>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="init" scope="instance">
			<description>The MenuItem class's initialization method. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="p_oObject" type="String" usage="required">
				<description> String specifying the text of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLLIElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptGroupElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptionElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu item.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the configuration for the menu item. See configuration class documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the menu item.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="removeClassNameForState" scope="instance" visibility="private">
			<description>Removes a class name from a MenuItem instance's &amp;#60;LI&amp;#62; and &amp;#60;A&amp;#62; elements that represents a MenuItem's state - &quot;disabled,&quot; &quot;checked,&quot; etc.</description>
			<parameters>
			<parameter name="state" type="String" usage="required">
				<description> String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onSubmenuBeforeHide" scope="instance" visibility="private">
			<description>&quot;beforehide&quot; Custom Event handler for a submenu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="blur" scope="instance">
			<description>Causes the menu item to lose focus and fires the blur event.</description>
		</method>
		<method name="configHelpText" scope="instance">
			<description>Event handler for when the &quot;helptext&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the menu item's &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element from its parent &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element.</description>
		</method>
		<method name="getNextEnabledSibling" scope="instance">
			<description>Finds the menu item's next enabled sibling.</description>
			<return-description>YAHOO.widget.MenuItem</return-description>
		</method>
		<method name="configChecked" scope="instance">
			<description>Event handler for when the &quot;checked&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configKeyListener" scope="instance">
			<description>Event handler for when the &quot;keylistener&quot; configuration property of a menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configDisabled" scope="instance">
			<description>Event handler for when the &quot;disabled&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configSelected" scope="instance">
			<description>Event handler for when the &quot;selected&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getPreviousSibling" scope="instance">
			<description>Finds the menu item's previous sibling.</description>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_initSubTree" scope="instance" visibility="private">
			<description>Iterates the source element's childNodes collection and uses the child nodes to instantiate other menus.</description>
		</method>
		<method name="configClassName" scope="instance">
			<description>Event handler for when the &quot;classname&quot; configuration property of a menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configText" scope="instance">
			<description>Event handler for when the &quot;text&quot; configuration property of the menu item changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes an item's configurable properties.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CheckboxCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The CheckboxCellEditor class provides functionality for inline editing
DataTable cell data with checkboxes.</description>
		<constructors>
		<constructor scope="instance">
			<description>The CheckboxCellEditor class provides functionality for inline editing
DataTable cell data with checkboxes.</description>
			<return-types>
				<return-type type="YAHOO.widget.CheckboxCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="checkboxOptions" type="String[] | Object[]" scope="instance">
			<description>Array of checkbox values. Can either be a simple array (e.g., [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;]) or a an array of objects (e.g., [{label:&quot;red&quot;, value:&quot;#FF0000&quot;}, {label:&quot;green&quot;, value:&quot;#00FF00&quot;}, {label:&quot;blue&quot;, value:&quot;#0000FF&quot;}]).</description>
		</property>
		<property name="checkboxes" type="HTMLElement[]" scope="instance">
			<description>Reference to the checkbox elements.</description>
		</property>
		<property name="value" type="String[]" scope="instance">
			<description>Array of checked values</description>
		</property>
		</properties>
		<methods>
		<method name="renderForm" scope="instance">
			<description>Render a form with input(s) type=checkbox.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from CheckboxCellEditor.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in CheckboxCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets CheckboxCellEditor UI to initial state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.Profiler">
		<description>Profiles functions in JavaScript.</description>
		<methods>
		<method name="getFunctionReport" scope="static">
			<description>Returns an object containing profiling data for a single function. The object has an entry for min, max, avg, calls, and points).</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing profile data for a given function.</return-description>
		</method>
		<method name="pause" scope="static">
			<description>Pauses profiling information for a given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getReport" scope="static">
			<description>Returns an object containing profiling data for a single function. The object has an entry for min, max, avg, calls, and points).</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing profile data for a given function.</return-description>
		</method>
		<method name="start" scope="static">
			<description>Start profiling information for a given name. The name cannot be the name of a registered function or object. This is used to start timing for a particular block of code rather than instrumenting the entire function.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getFullReport" scope="static">
			<description>Returns an object containing profiling data for all of the functions that were profiled. The object has an entry for each function and returns all information (min, max, average, calls, etc.) for each function.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing all profile data.</return-description>
		</method>
		<method name="unregisterFunction" scope="static">
			<description>Removes a constructor function from profiling. Reverses the registerConstructor() method.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The full name of the function including namespacing. This is the name of the function that is stored in the report.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="clear" scope="static">
			<description>Removes all report data from the profiler.</description>
			<parameters>
			<parameter name="name" type="String" usage="optional">
				<description> (Optional) The name of the report to clear. If omitted, then all report data is cleared.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="stop" scope="static">
			<description>Stops profiling information for a given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the data point.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getCallCount" scope="static">
			<description>Returns the number of times that the given function has been called.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>The number of times the function was called.</return-description>
		</method>
		<method name="saveDataPoint" scope="static" visibility="private">
			<description>Called when a method ends execution. Marks the start and end time of the method so it can calculate how long the function took to execute. Also updates min/max/avg calculations for the function.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function to mark as stopped.</description>
			</parameter>
			<parameter name="duration" type="int" usage="required">
				<description> The number of milliseconds it took the function to execute.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="registerFunction" scope="static">
			<description>Sets up a function for profiling. It essentially overwrites the function with one that has instrumentation data. This method also creates an entry for the function in the profile report. The original function is stored on the container object.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The full name of the function including namespacing. This is the name of the function that is stored in the report.</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object that owns the function. If the function isn't global then this argument is required. This could be the namespace that the function belongs to, such as YAHOO.util.Dom, or the object on which it's a method.</description>
			</parameter>
			<parameter name="registerPrototype" type="Boolean" usage="optional">
				<description> (Optional) Indicates that the prototype should also be instrumented. Setting to true has the same effect as calling registerConstructor().</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="instrument" scope="static">
			<description>Instruments a method to have profiling calls.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the report for the function.</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> The function to instrument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>An instrumented version of the function.</return-description>
		</method>
		<method name="getOriginal" scope="static">
			<description>Returns the uninstrumented version of a function/object.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function/object to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function|Object" />
			</return-types>
			<return-description>The uninstrumented version of a function/object.</return-description>
		</method>
		<method name="getAverage" scope="static">
			<description>Returns the average amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The average time it takes the function to execute.</return-description>
		</method>
		<method name="createReport" scope="instance" visibility="private">
			<description>Creates a report object with the given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name to store for the report object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getMin" scope="static">
			<description>Returns the minimum amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The minimum time it takes the function to execute.</return-description>
		</method>
		<method name="unregisterObject" scope="static">
			<description>Unregisters an object for profiling. It takes the object and looks for functions. When a function is found, unregisterMethod() is called on it. If set to recrusive mode, it will also unregister objects found inside of this object, using the same methodology.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the object to unregister.</description>
			</parameter>
			<parameter name="recurse" type="Boolean" usage="optional">
				<description> (Optional) Determines if subobject methods should also be unregistered.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="getMax" scope="static">
			<description>Returns the maximum amount of time (in milliseconds) that the function with the given name takes to execute.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the function whose data should be returned. If an object type method, it should be 'constructor.prototype.methodName'; a normal object method would just be 'object.methodName'.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="float" />
			</return-types>
			<return-description>The maximum time it takes the function to execute.</return-description>
		</method>
		<method name="registerConstructor" scope="static">
			<description>Sets up a constructor for profiling, including all properties and methods on the prototype.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> The fully-qualified name of the function including namespace information.</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object that owns the function (namespace or containing object).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="registerObject" scope="static">
			<description>Sets up an object for profiling. It takes the object and looks for functions. When a function is found, registerMethod() is called on it. If set to recrusive mode, it will also setup objects found inside of this object for profiling, using the same methodology.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the object to profile (shows up in report).</description>
			</parameter>
			<parameter name="owner" type="Object" usage="optional">
				<description> (Optional) The object represented by the name.</description>
			</parameter>
			<parameter name="recurse" type="Boolean" usage="optional">
				<description> (Optional) Determines if subobject methods are also profiled.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.OverlayManager">
		<description>OverlayManager is used for maintaining the focus status of 
multiple Overlays.</description>
		<constructors>
		<constructor scope="instance">
			<description>OverlayManager is used for maintaining the focus status of 
multiple Overlays.</description>
			<return-types>
				<return-type type="YAHOO.widget.OverlayManager" />
			</return-types>
			<parameters>
			<parameter name="overlays" type="Array" usage="optional">
				<description> Optional. A collection of Overlays to register 
with the manager.</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description>  The object literal representing the user 
configuration of the OverlayManager</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="activeOverlay" type="YAHOO.widget.Overlay" scope="instance" visibility="private">
			<description>The currently activated Overlay</description>
		</property>
		<property name="cfg" type="Config" scope="instance">
			<description>The OverlayManager's Config object used for monitoring configuration properties.</description>
		</property>
		<property name="contructor" type="Function" scope="instance">
			<description>The class's constructor function</description>
		</property>
		<property name="overlays" type="YAHOO.widget.Overlay[]" scope="instance">
			<description>The array of Overlays that are currently registered</description>
		</property>
		<property name="OverlayManager.CSS_FOCUSED" type="String" scope="static">
			<description>The CSS class representing a focused Overlay</description>
		</property>
		</properties>
		<methods>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the OverlayManager</return-description>
		</method>
		<method name="blurAll" scope="instance">
			<description>Removes focus from all registered Overlays in the manager</description>
		</method>
		<method name="focus" scope="instance">
			<description>Focuses the specified Overlay</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The Overlay to focus</description>
			</parameter>
			<parameter name="overlay" type="String" usage="required">
				<description> The id of the Overlay to focus</description>
			</parameter>
			</parameters>
		</method>
		<method name="_bindBlur" scope="instance">
			<description>Subscribes to the Overlay based instance's blurEvent to allow the OverlayManager to monitor blur state. If the instance already has a blurEvent (e.g. Menu), OverlayManager will subscribe to the existing blurEvent, however if a blurEvent or blur method does not exist on the instance, the _bindBlur method will add them, and the blur method update the OverlayManager's state directly.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay for which blur needs to be managed</description>
			</parameter>
			</parameters>
		</method>
		<method name="_manageBlur" scope="instance">
			<description>Updates the state of the OverlayManager and overlay, as a result of the overlay being blurred.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay instance which got blurred.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onOverlayBlurHandler" scope="instance" visibility="private">
			<description>blurEvent Handler, used to delegate to _manageBlur with the correct arguments.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oOverlay" type="Overlay" usage="required">
				<description> Object representing the overlay that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_manageFocus" scope="instance">
			<description>Updates the state of the OverlayManager and overlay, as a result of the overlay receiving focus.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay instance which got focus.</description>
			</parameter>
			</parameters>
		</method>
		<method name="find" scope="instance">
			<description>Attempts to locate an Overlay by instance or ID.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> An Overlay to locate within the manager</description>
			</parameter>
			<parameter name="overlay" type="String" usage="required">
				<description> An Overlay id to locate within the manager</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Overlay" />
			</return-types>
			<return-description>The requested Overlay, if found, or null if it 
cannot be located.</return-description>
		</method>
		<method name="bringToTop" scope="instance">
			<description>Places the specified Overlay instance on top of all other Overlay instances.</description>
			<parameters>
			<parameter name="p_oOverlay" type="YAHOO.widget.Overlay" usage="required">
				<description> Object representing an Overlay instance.</description>
			</parameter>
			<parameter name="p_oOverlay" type="String" usage="required">
				<description> String representing the id of an Overlay instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Initializes the OverlayManager</description>
			<parameters>
			<parameter name="overlays" type="Overlay[]" usage="optional">
				<description> Optional. A collection of Overlays to register with the manager.</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The object literal representing the user configuration of the OverlayManager</description>
			</parameter>
			</parameters>
		</method>
		<method name="getActive" scope="instance">
			<description>Returns the currently focused Overlay</description>
			<return-types>
			<return-type type="Overlay" />
			</return-types>
			<return-description>The currently focused Overlay</return-description>
		</method>
		<method name="_bindDestroy" scope="instance">
			<description>Subscribes to the Overlay based instance's destroyEvent, to allow the Overlay to be removed for the OverlayManager when destroyed.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay instance being managed</description>
			</parameter>
			</parameters>
		</method>
		<method name="showAll" scope="instance">
			<description>Shows all Overlays in the manager.</description>
		</method>
		<method name="_bindFocus" scope="instance">
			<description>Subscribes to the Overlay based instance focusEvent, to allow the OverlayManager to monitor focus state. If the instance already has a focusEvent (e.g. Menu), OverlayManager will subscribe to the existing focusEvent, however if a focusEvent or focus method does not exist on the instance, the _bindFocus method will add them, and the focus method will update the OverlayManager's state directly.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay for which focus needs to be managed</description>
			</parameter>
			</parameters>
		</method>
		<method name="hideAll" scope="instance">
			<description>Hides all Overlays in the manager.</description>
		</method>
		<method name="_syncZIndex" scope="instance">
			<description>Ensures the zIndex configuration property on the managed overlay based instance is set to the computed zIndex value from the DOM (with &quot;auto&quot; translating to 0).</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The overlay instance being managed</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onOverlayDestroy" scope="instance" visibility="private">
			<description>&quot;destroy&quot; event handler for the Overlay.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oOverlay" type="Overlay" usage="required">
				<description> Object representing the overlay that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onOverlayFocusHandler" scope="instance" visibility="private">
			<description>focusEvent Handler, used to delegate to _manageFocus with the correct arguments.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oOverlay" type="Overlay" usage="required">
				<description> Object representing the overlay that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="register" scope="instance">
			<description>Registers an Overlay or an array of Overlays with the manager. Upon registration, the Overlay receives functions for focus and blur, along with CustomEvents for each.</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> An Overlay to register with the manager.</description>
			</parameter>
			<parameter name="overlay" type="Overlay[]" usage="required">
				<description> An array of Overlays to register with the manager.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if any Overlays are registered.</return-description>
		</method>
		<method name="remove" scope="instance">
			<description>Removes the specified Overlay from the manager</description>
			<parameters>
			<parameter name="overlay" type="Overlay" usage="required">
				<description> The Overlay to remove</description>
			</parameter>
			<parameter name="overlay" type="String" usage="required">
				<description> The id of the Overlay to remove</description>
			</parameter>
			</parameters>
		</method>
		<method name="compareZIndexDesc" scope="instance" visibility="private">
			<description>Used for sorting the manager's Overlays by z-index.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>0, 1, or -1, depending on where the Overlay should 
fall in the stacking order.</return-description>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the default configuration of the OverlayManager</description>
		</method>
		<method name="_onOverlayElementFocus" scope="instance" visibility="private">
			<description>Event handler for the DOM event that is used to focus the Overlay instance as specified by the &quot;focusevent&quot; configuration property.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (Event).</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.SimpleEditor" superclass="YAHOO.util.Element">
		<description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
			<return-types>
				<return-type type="YAHOO.widget.SimpleEditor" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The textarea element to turn into an editor.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CLASS_EDITABLE_CONT" type="String" scope="instance">
			<description>Default CSS class to apply to the editors iframe's parent element</description>
		</property>
		<property name="_alwaysDisabled" type="Object" scope="instance" visibility="private">
			<description>The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.</description>
		</property>
		<property name="_blankImageLoaded" type="Boolean" scope="instance" visibility="private">
			<description>Don't load the blank image more than once..</description>
		</property>
		<property name="_showingHiddenElements" type="Boolean" scope="instance" visibility="private">
			<description>Status of the hidden elements button</description>
		</property>
		<property name="afterElement" type="HTMLElement" scope="instance">
			<description>A reference to the H2 placed after the editor for Accessibilty.</description>
		</property>
		<property name="CLASS_EDITABLE" type="String" scope="instance">
			<description>Default CSS class to apply to the editors iframe element</description>
		</property>
		<property name="_baseHREF" type="String" scope="instance" visibility="private">
			<description>The base location of the editable page (this page) so that relative paths for image work.</description>
		</property>
		<property name="operaEvent" type="Object" scope="instance" visibility="private">
			<description>setTimeout holder for Opera and Image DoubleClick event..</description>
		</property>
		<property name="SEP_DOMPATH" type="String" scope="instance">
			<description>The value to place in between the Dom path items</description>
		</property>
		<property name="_selection" type="Object" scope="instance" visibility="private">
			<description>Holder for caching iframe selections</description>
		</property>
		<property name="STR_BEFORE_EDITOR" type="String" scope="instance">
			<description>The accessibility string for the element before the iFrame</description>
		</property>
		<property name="_defaultCSS" type="String" scope="instance">
			<description>The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }</description>
		</property>
		<property name="_formButtons" type="Array" scope="instance" visibility="private">
			<description>Array of buttons that are in the Editor's parent form (for handleSubmit)</description>
		</property>
		<property name="DOMReady" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if DOM is ready or not</description>
		</property>
		<property name="_tag2cmd" type="Object" scope="instance" visibility="private">
			<description>A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.</description>
		</property>
		<property name="_resizeConfig" type="undefined" scope="instance" visibility="private">
			<description>The default config for the Resize Utility</description>
		</property>
		<property name="_lastNodeChangeEvent" type="Event" scope="instance" visibility="private">
			<description>Flag to determine the last event that fired a node change</description>
		</property>
		<property name="STOP_NODE_CHANGE" type="Boolean" scope="instance">
			<description>Set to true when you want the default nodeChange function to not process anything</description>
		</property>
		<property name="_textarea" type="Boolean" scope="instance">
			<description>Flag to determine if we are using a textarea or an HTML Node.</description>
		</property>
		<property name="currentEvent" type="Event" scope="instance">
			<description>A reference to the current editor event</description>
		</property>
		<property name="STR_TITLE" type="String" scope="instance">
			<description>The Title of the HTML document that is created in the iFrame</description>
		</property>
		<property name="_rendered" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if editor has been rendered or not</description>
		</property>
		<property name="STR_LINK_URL" type="String" scope="instance">
			<description>The label string for the Link URL.</description>
		</property>
		<property name="CLASS_PREFIX" type="String" scope="instance">
			<description>Default prefix for dynamically created class names</description>
		</property>
		<property name="CLASS_NOEDIT" type="String" scope="instance">
			<description>CSS class applied to elements that are not editable.</description>
		</property>
		<property name="_fixListRunning" type="Boolean" scope="instance" visibility="private">
			<description>Keeps more than one _fixListDupIds from running at the same time.</description>
		</property>
		<property name="toolbar" type="YAHOO.widget.Toolbar" scope="instance">
			<description>Local property containing the YAHOO.widget.Toolbar instance</description>
		</property>
		<property name="editorDirty" type="Boolean" scope="instance">
			<description>This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.</description>
		</property>
		<property name="_semantic" type="Object" scope="instance" visibility="private">
			<description>The Toolbar commands that we should attempt to make tags out of instead of using styles.</description>
		</property>
		<property name="_alwaysEnabled" type="Object" scope="instance" visibility="private">
			<description>The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.</description>
		</property>
		<property name="_contentTimerCounter" type="Number" scope="instance" visibility="private">
			<description>Counter to check the number of times the body is polled for before giving up</description>
		</property>
		<property name="_disabled" type="Array" scope="instance" visibility="private">
			<description>The Toolbar items that should be disabled if there is no selection present in the editor.</description>
		</property>
		<property name="STR_LEAVE_EDITOR" type="String" scope="instance">
			<description>The accessibility string for the element after the iFrame</description>
		</property>
		<property name="_lastImage" type="HTMLElement" scope="instance" visibility="private">
			<description>Safari reference for the last image selected (for styling as selected).</description>
		</property>
		<property name="_lastButton" type="Object" scope="instance" visibility="private">
			<description>The last button pressed, so we don't disable it.</description>
		</property>
		<property name="dd" type="YAHOO.util.DD|YAHOO.util.DDProxy" scope="instance">
			<description>A reference to the DragDrop object.</description>
		</property>
		<property name="currentFont" type="HTMLElement" scope="instance">
			<description>A reference to the last font selected from the Toolbar</description>
		</property>
		<property name="_lastNodeChange" type="Date" scope="instance" visibility="private">
			<description>Flag to determine when the last node change was fired</description>
		</property>
		<property name="_nodeChangeTimer" type="Number" scope="instance" visibility="private">
			<description>Holds a reference to the nodeChange setTimeout call</description>
		</property>
		<property name="_fixNodesTimer" type="Date" scope="instance" visibility="private">
			<description>Holder for the fixNodes timer</description>
		</property>
		<property name="_contentTimerMax" type="undefined" scope="instance" visibility="private">
			<description>The number of times the loaded content should be checked before giving up. Default: 500</description>
		</property>
		<property name="currentWindow" type="Object" scope="instance">
			<description>A reference to the currently open EditorWindow</description>
		</property>
		<property name="currentElement" type="Array" scope="instance">
			<description>A reference to the current working element in the editor</description>
		</property>
		<property name="_nodeChangeDelayTimer" type="Number" scope="instance" visibility="private">
			<description>Holds a reference to the nodeChangeDelay setTimeout call</description>
		</property>
		<property name="CLASS_CONTAINER" type="String" scope="instance">
			<description>Default CSS class to apply to the editors container element</description>
		</property>
		<property name="_keyMap" type="{Object|Mixed}" scope="instance" visibility="private">
			<description>Named key maps for various actions in the Editor. Example: &lt;code&gt;CLOSE_WINDOW: { key: 87, mods: ['shift', 'ctrl'] }&lt;/code&gt;. This entry shows that when key 87 (W) is found with the modifiers of shift and control, the window will close. You can customize this object to tweak keyboard shortcuts.</description>
		</property>
		<property name="_formButtonClicked" type="HTMLElement" scope="instance" visibility="private">
			<description>The form button that was clicked to submit the form.</description>
		</property>
		<property name="resize" type="YAHOO.util.Resize" scope="instance">
			<description>A reference to the Resize object</description>
		</property>
		<property name="_docType" type="String" scope="instance">
			<description>The DOCTYPE to use in the editable container.</description>
		</property>
		<property name="STR_IMAGE_URL" type="String" scope="instance">
			<description>The label string for Image URL</description>
		</property>
		<property name="STR_IMAGE_HERE" type="String" scope="instance">
			<description>The text to place in the URL textbox when using the blankimage.</description>
		</property>
		<property name="_lastCommand" type="String" scope="instance" visibility="private">
			<description>A cache of the last execCommand (used for Undo/Redo so they don't mark an undo level)</description>
		</property>
		<property name="_mask" type="Object" scope="instance" visibility="private">
			<description>DOM Element holder for the editor Mask when disabled</description>
		</property>
		<property name="dompath" type="HTMLElement" scope="instance">
			<description>A reference to the dompath container for writing the current working dom path to.</description>
		</property>
		<property name="beforeElement" type="HTMLElement" scope="instance">
			<description>A reference to the H2 placed before the editor for Accessibilty.</description>
		</property>
		<property name="STOP_EXEC_COMMAND" type="Boolean" scope="instance">
			<description>Set to true when you want the default execCommand function to not process anything</description>
		</property>
		<property name="_contentTimer" type="undefined" scope="instance" visibility="private">
			<description>setTimeout holder for documentReady check</description>
		</property>
		<property name="_focused" type="Boolean" scope="instance" visibility="private">
			<description>Holder for trapping focus/blur state and prevent double events</description>
		</property>
		<property name="_defaultToolbar" type="Object" scope="instance" visibility="private">
			<description>Default toolbar config.</description>
		</property>
		<property name="invalidHTML" type="Object" scope="instance">
			<description>Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to &quot;{ keepContents: true }&quot;, then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.</description>
		</property>
		<property name="browser" type="Object" scope="instance">
			<description>Standard browser detection</description>
		</property>
		</properties>
		<methods>
		<method name="_setCurrentEvent" scope="instance" visibility="private">
			<description>Sets the current event property</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event to cache</description>
			</parameter>
			</parameters>
		</method>
		<method name="show" scope="instance">
			<description>This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Attempt to set the focus of the iframes window.</description>
		</method>
		<method name="cmd_inserthtml" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to create the editor.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the editor.</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_bold" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('bold') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="filter_invalid_lists" scope="instance">
			<description>Filters invalid ol and ul list markup, converts this: &lt;li&gt;&lt;/li&gt;&lt;ol&gt;..&lt;/ol&gt; to this: &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;ol&gt;..&lt;/ol&gt;&lt;/li&gt;</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML string to filter</description>
			</parameter>
			</parameters>
		</method>
		<method name="_checkLoaded" scope="instance" visibility="private">
			<description>Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.</description>
			<parameters>
			<parameter name="raw" type="Boolean" usage="required">
				<description> Don't add events.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_removeEditorEvents" scope="instance" visibility="private">
			<description>This method removes the listeners on the Editors document (for disabling).</description>
		</method>
		<method name="_toggleDesignMode" scope="instance" visibility="private">
			<description>Toggles the designMode property of the iFrame document on and off.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The state that it was set to.</return-description>
		</method>
		<method name="_setupDD" scope="instance" visibility="private">
			<description>Sets up the DD instance used from the 'drag' config option.</description>
		</method>
		<method name="render" scope="instance">
			<description>Calls the private method _render in a setTimeout to allow for other things on the page to continue to load.</description>
		</method>
		<method name="_handleAfterNodeChange" scope="instance" visibility="private">
			<description>Fires after a nodeChange happens to setup the things that where reset on the node change (button state).</description>
		</method>
		<method name="_fixListDupIds" scope="instance" visibility="private">
			<description>Some browsers will duplicate the id of an LI when created in designMode. This method will fix the duplicate id issue. However it will only preserve the first element in the document list with the unique id.</description>
		</method>
		<method name="init" scope="instance">
			<description>The Editor class' initialization method</description>
		</method>
		<method name="closeWindow" scope="instance">
			<description>Override Method for Advanced Editor</description>
		</method>
		<method name="_handleFormSubmit" scope="instance" visibility="private">
			<description>Handles the form submission.</description>
			<parameters>
			<parameter name="ev" type="Object" usage="required">
				<description> The Form Submit Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMouseDown" scope="instance" visibility="private">
			<description>Handles all mousedown events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleFocus" scope="instance" visibility="private">
			<description>Handles the focus of the iframe. Note, this is window focus event, not an Editor focus event.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleFontSize" scope="instance" visibility="private">
			<description>Handles the font size button in the toolbar.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> Object returned from Toolbar's buttonClick Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initEditorEvents" scope="instance" visibility="private">
			<description>This method sets up the listeners on the Editors document.</description>
		</method>
		<method name="nodeChange" scope="instance">
			<description>Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> Optional paramenter to skip the threshold counter</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateMenuChecked" scope="instance" visibility="private">
			<description>Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.</description>
			<parameters>
			<parameter name="button" type="Object" usage="required">
				<description> The command identifier of the button you want to check</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value of the menu item you want to check</description>
			</parameter>
			<parameter name="The" type="YAHOO.widget.Toolbar" usage="required">
				<description> Toolbar instance the button belongs to (defaults to this.toolbar)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cleanClassName" scope="instance" visibility="private">
			<description>Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The classname to clean up</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_setDesignMode" scope="instance" visibility="private">
			<description>Sets the designMode property of the iFrame document's body.</description>
			<parameters>
			<parameter name="state" type="String" usage="required">
				<description> This should be either on or off</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_fontname" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMouseUp" scope="instance" visibility="private">
			<description>Handles all mouseup events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_render" scope="instance" visibility="private">
			<description>Causes the toolbar and the editor to render and replace the textarea.</description>
		</method>
		<method name="_getSelection" scope="instance" visibility="private">
			<description>Handles the different selection objects across the A-Grade list.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Selection Object</return-description>
		</method>
		<method name="_createIframe" scope="instance" visibility="private">
			<description>_createIframe</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> The string ID to prefix the iframe with</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>iFrame object</return-description>
		</method>
		<method name="cmd_forecolor" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleBlur" scope="instance" visibility="private">
			<description>Handles the blur of the iframe. Note, this is window blur event, not an Editor blur event.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getDoc" scope="instance" visibility="private">
			<description>Get the Document of the IFRAME</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="filter_all_rgb" scope="instance">
			<description>Converts all RGB color strings found in passed string to a hex color, example: style=&quot;color: rgb(0, 255, 0)&quot; converts to style=&quot;color: #00ff00&quot;</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> str The HTML string to filter</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="cmd_italic" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('italic') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleInsertImageWindowClose" scope="instance" visibility="private">
			<description>Handles the closing of the Image Properties Window.</description>
		</method>
		<method name="_handleToolbarClick" scope="instance" visibility="private">
			<description>This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event that triggered the button click</description>
			</parameter>
			</parameters>
		</method>
		<method name="filter_rgb" scope="instance">
			<description>Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> css The CSS string containing rgb(#,#,#);</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="cmd_createlink" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_insertorderedlist" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_disableEditor" scope="instance" visibility="private">
			<description>Creates a mask to place over the Editor.</description>
			<parameters>
			<parameter name="disabled" type="Boolean" usage="required">
				<description> Pass true to disable, false to enable</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_insertunorderedlist" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the editor.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="cmd_insertimage" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="getEditorHTML" scope="instance">
			<description>Gets the unprocessed/unfiltered HTML from the editor</description>
		</method>
		<method name="saveHTML" scope="instance">
			<description>Cleans the HTML with the cleanHTML method then places that string back into the textarea.</description>
			<return-description>String</return-description>
		</method>
		<method name="_setupAfterElement" scope="instance" visibility="private">
			<description>Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.</description>
		</method>
		<method name="cmd_underline" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('underline') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getDomPath" scope="instance" visibility="private">
			<description>This method will attempt to build the DOM path from the currently selected element.</description>
			<parameters>
			<parameter name="HTMLElement" type="" usage="required">
				<description> el The element to start with, if not provided _getSelectedElement is used</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of node references that will create the DOM Path.</return-description>
		</method>
		<method name="_hasParent" scope="instance" visibility="private">
			<description>_hasParent</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="tag" type="String" usage="required">
				<description> The tag that the element needs to be</description>
			</parameter>
			</parameters>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="_listFix" scope="instance" visibility="private">
			<description>Handles the Enter key, Tab Key and Shift + Tab keys for List Items.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createCurrentElement" scope="instance" visibility="private">
			<description>This is a work around for the various browser issues with execCommand. This method will run &lt;code&gt;execCommand('fontname', false, 'yui-tmp')&lt;/code&gt; on the given selection. It will then search the document for an element with the font-family set to &lt;strong&gt;yui-tmp&lt;/strong&gt; and replace that with another span that has other information in it, then assign the new span to the &lt;code&gt;this.currentElement&lt;/code&gt; array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.</description>
			<parameters>
			<parameter name="tagName" type="String" usage="required">
				<description> (optional defaults to a) The tagname of the element that you wish to create</description>
			</parameter>
			<parameter name="tagStyle" type="Object" usage="optional">
				<description> (optional) Object literal containing styles to apply to the new element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focusWindow" scope="instance" visibility="private">
			<description>Attempt to set the focus of the iframes window.</description>
		</method>
		<method name="_handleKeyDown" scope="instance" visibility="private">
			<description>Handles all keydown events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_closeWindow" scope="instance" visibility="private">
			<description>Override Method for Advanced Editor</description>
		</method>
		<method name="_nodeChange" scope="instance" visibility="private">
			<description>Fired from nodeChange in a setTimeout.</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> Optional paramenter to skip the threshold counter</description>
			</parameter>
			</parameters>
		</method>
		<method name="_fixNodes" scope="instance" visibility="private">
			<description>Fix href and imgs as well as remove invalid HTML.</description>
		</method>
		<method name="setEditorHTML" scope="instance">
			<description>Loads HTML into the editors body</description>
			<parameters>
			<parameter name="incomingHTML" type="String" usage="required">
				<description> The html content to load into the editor</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cleanIncomingHTML" scope="instance">
			<description>Process the HTML with a few regexes to clean it up and stabilize the input</description>
			<parameters>
			<parameter name="html" type="String" usage="required">
				<description> The unfiltered HTML</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The filtered HTML</return-description>
		</method>
		<method name="_isLocalFile" scope="instance" visibility="private">
			<description>Checks to see if a string (href or img src) is possibly a local file reference..</description>
			<parameters>
			<parameter name="url" type="String" usage="required">
				<description> THe url/string to check</description>
			</parameter>
			</parameters>
		</method>
		<method name="_swapEl" scope="instance" visibility="private">
			<description>This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to swap with</description>
			</parameter>
			<parameter name="tagName" type="String" usage="required">
				<description> The tagname of the element that you wish to create</description>
			</parameter>
			<parameter name="callback" type="Function" usage="optional">
				<description> (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function.</description>
			</parameter>
			</parameters>
		</method>
		<method name="openWindow" scope="instance">
			<description>Override Method for Advanced Editor</description>
		</method>
		<method name="pre_filter_linebreaks" scope="instance">
			<description>HTML Pre Filter</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML to filter</description>
			</parameter>
			<parameter name="String" type="" usage="required">
				<description> markup The markup type to filter to</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="_getSelectedElement" scope="instance" visibility="private">
			<description>This method will attempt to locate the element that was last interacted with, either via selection, location or event.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The currently selected element.</return-description>
		</method>
		<method name="clearEditorDoc" scope="instance">
			<description>Clear the doc of the Editor</description>
		</method>
		<method name="_handleInsertImageClick" scope="instance" visibility="private">
			<description>Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.</description>
		</method>
		<method name="_handleKeyPress" scope="instance" visibility="private">
			<description>Handles all keypress events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_hasSelection" scope="instance" visibility="private">
			<description>Determines if there is a selection in the editor document.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_handleColorPicker" scope="instance" visibility="private">
			<description>Handles the colorpicker buttons in the toolbar.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> Object returned from Toolbar's buttonClick Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_selectNode" scope="instance" visibility="private">
			<description>Places the highlight around a given node</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The node to select</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleAutoHeight" scope="instance" visibility="private">
			<description>Handles resizing the editor's height based on the content</description>
		</method>
		<method name="_handleAlign" scope="instance" visibility="private">
			<description>Handles the alignment buttons in the toolbar.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> Object returned from Toolbar's buttonClick Event</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_backcolor" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="moveWindow" scope="instance">
			<description>Override Method for Advanced Editor</description>
		</method>
		<method name="cleanHTML" scope="instance">
			<description>Process the HTML with a few regexes to clean it up and stabilize the output</description>
			<parameters>
			<parameter name="html" type="String" usage="required">
				<description> The unfiltered HTML</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The filtered HTML</return-description>
		</method>
		<method name="_createInsertElement" scope="instance" visibility="private">
			<description>Creates a new &quot;currentElement&quot; then adds some text (and other things) to make it selectable and stylable. Then the user can continue typing.</description>
			<parameters>
			<parameter name="css" type="Object" usage="optional">
				<description> (optional) Object literal containing styles to apply to the new element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="_isNonEditable" scope="instance" visibility="private">
			<description>Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied. If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also disable and enable the Editor's toolbar based on the noedit state.</description>
			<parameters>
			<parameter name="Event" type="" usage="required">
				<description> ev The Dom event being checked</description>
			</parameter>
			</parameters>
			<return-description>Boolean</return-description>
		</method>
		<method name="_isElement" scope="instance" visibility="private">
			<description>_isElement</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="tag" type="String" usage="required">
				<description> The tag that the element needs to be</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_initEditor" scope="instance" visibility="private">
			<description>This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.</description>
			<parameters>
			<parameter name="raw" type="Boolean" usage="required">
				<description> Don't add events.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleKeyUp" scope="instance" visibility="private">
			<description>Handles all keyup events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleFormButtonClick" scope="instance" visibility="private">
			<description>The click listener assigned to each submit button in the Editor's parent form.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleCreateLinkClick" scope="instance" visibility="private">
			<description>Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.</description>
		</method>
		<method name="_getBlankImage" scope="instance" visibility="private">
			<description>Retrieves the full url of the image to use as the blank image.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The URL to the blank image</return-description>
		</method>
		<method name="_setMarkupType" scope="instance" visibility="private">
			<description>This method will turn on/off the useCSS execCommand.</description>
			<parameters>
			<parameter name="action" type="String" usage="required">
				<description> The action to take. Possible values are: css, default or semantic</description>
			</parameter>
			</parameters>
		</method>
		<method name="filter_safari" scope="instance">
			<description>Filters strings specific to Safari</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML string to filter</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the editor, all of it's elements and objects.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_handleCreateLinkWindowClose" scope="instance" visibility="private">
			<description>Handles the closing of the Link Properties Window.</description>
		</method>
		<method name="filter_internals" scope="instance">
			<description>Filters internal RTE strings and bogus attrs we don't want</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML string to filter</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="cmd_list" scope="instance">
			<description>This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.</description>
			<parameters>
			<parameter name="tag" type="" usage="required">
				<description> The tag of the list you want to create (eg, ul or ol)</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_fontsize" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setInitialContent" scope="instance" visibility="private">
			<description>This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.</description>
			<parameters>
			<parameter name="raw" type="Boolean" usage="required">
				<description> Don't add events.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleDoubleClick" scope="instance" visibility="private">
			<description>Handles all doubleclick events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="filter_msword" scope="instance">
			<description>Filters out msword html attributes and other junk. Activate with filterWord: true in config</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML string to filter</description>
			</parameter>
			</parameters>
		</method>
		<method name="hide" scope="instance">
			<description>This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.</description>
		</method>
		<method name="post_filter_linebreaks" scope="instance">
			<description>HTML Pre Filter</description>
			<parameters>
			<parameter name="String" type="" usage="required">
				<description> html The HTML to filter</description>
			</parameter>
			<parameter name="String" type="" usage="required">
				<description> markup The markup type to filter to</description>
			</parameter>
			</parameters>
			<return-description>String</return-description>
		</method>
		<method name="cmd_unlink" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getWindow" scope="instance" visibility="private">
			<description>Get the Window of the IFRAME</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="_writeDomPath" scope="instance" visibility="private">
			<description>Write the current DOM path out to the dompath container below the editor.</description>
		</method>
		<method name="_handleClick" scope="instance" visibility="private">
			<description>Handles all click events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="execCommand" scope="instance">
			<description>This method attempts to try and level the differences in the various browsers and their support for execCommand actions</description>
			<parameters>
			<parameter name="action" type="String" usage="required">
				<description> The &quot;execCommand&quot; action to try to execute (Example: bold, insertimage, inserthtml)</description>
			</parameter>
			<parameter name="value" type="String" usage="optional">
				<description> (optional) The value for a given action such as action: fontname value: 'Verdana'</description>
			</parameter>
			</parameters>
		</method>
		<method name="_checkKey" scope="instance" visibility="private">
			<description>Checks a keyMap entry against a key event</description>
			<parameters>
			<parameter name="k" type="Object" usage="required">
				<description> The _keyMap object</description>
			</parameter>
			<parameter name="e" type="Event" usage="required">
				<description> The Mouse Event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_getRange" scope="instance" visibility="private">
			<description>Handles the different range objects across the A-Grade list.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Range Object</return-description>
		</method>
		<method name="_setupResize" scope="instance" visibility="private">
			<description>Creates the Resize instance and binds its events.</description>
		</method>
		<method name="_setEditorStyle" scope="instance">
			<description>Set the editor to use CSS instead of HTML</description>
			<parameters>
			<parameter name="stat" type="Booleen" usage="required">
				<description> True/False</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Get">
		<description>Fetches and inserts one or more script or link nodes into the document</description>
		<properties>
		<property name="POLL_FREQ" type="int" scope="static">
			<description>The default poll freqency in ms, when needed</description>
		</property>
		<property name="qidx" type="int" scope="instance" visibility="private">
			<description>queue index used to generate transaction ids</description>
		</property>
		<property name="queues" type="undefined" scope="instance" visibility="private">
			<description>hash of queues to manage multiple requests</description>
		</property>
		<property name="purging" type="boolean" scope="instance" visibility="private">
			<description>interal property used to prevent multiple simultaneous purge processes</description>
		</property>
		<property name="TIMEOUT" type="int" scope="static">
			<description>The length time to poll for varName when loading a script in Safari 2.x before the transaction fails. property TIMEOUT</description>
		</property>
		<property name="nidx" type="int" scope="instance" visibility="private">
			<description>node index used to generate unique node ids</description>
		</property>
		<property name="PURGE_THRESH" type="int" scope="static">
			<description>The number of request required before an automatic purge. property PURGE_THRESH</description>
		</property>
		</properties>
		<methods>
		<method name="_purge" scope="instance" visibility="private">
			<description>Removes the nodes for the specified queue</description>
		</method>
		<method name="_finalize" scope="instance" visibility="private">
			<description>Called by the the helper for detecting script load in Safari</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the transaction id</description>
			</parameter>
			</parameters>
		</method>
		<method name="_autoPurge" scope="instance" visibility="private">
			<description>Removes processed queues and corresponding nodes</description>
		</method>
		<method name="_finish" scope="instance" visibility="private">
			<description>The request is complete, so executing the requester's callback</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_linkNode" scope="instance" visibility="private">
			<description>Generates a link node</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url for the css file</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the node in</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="script" scope="static">
			<description>Fetches and inserts one or more script nodes into the head of the current document or the document in a specified window.</description>
			<parameters>
			<parameter name="url" type="string|string[]" usage="required">
				<description> the url or urls to the script(s)</description>
			</parameter>
			<parameter name="opts" type="object" usage="required">
				<description> Options: &lt;dl&gt; &lt;dt&gt;onSuccess&lt;/dt&gt; &lt;dd&gt; callback to execute when the script(s) are finished loading The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;onFailure&lt;/dt&gt; &lt;dd&gt; callback to execute when the script load operation fails The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted successfully&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove any nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;onTimeout&lt;/dt&gt; &lt;dd&gt; callback to execute when a timeout occurs. The callback receives an object back with the following data: &lt;dl&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;scope&lt;/dt&gt; &lt;dd&gt;the execution context for the callbacks&lt;/dd&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt; &lt;dt&gt;autopurge&lt;/dt&gt; &lt;dd&gt; setting to true will let the utilities cleanup routine purge the script once loaded &lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt; data that is supplied to the callback when the script(s) are loaded. &lt;/dd&gt; &lt;dt&gt;varName&lt;/dt&gt; &lt;dd&gt; variable that should be available when a script is finished loading. Used to help Safari 2.x and below with script load detection. The type of this property should match what was passed into the url parameter: if loading a single url, a string can be supplied. If loading multiple scripts, you must supply an array that contains the variable name for each script. &lt;/dd&gt; &lt;dt&gt;insertBefore&lt;/dt&gt; &lt;dd&gt;node or node id that will become the new node's nextSibling&lt;/dd&gt; &lt;/dl&gt; &lt;dt&gt;charset&lt;/dt&gt; &lt;dd&gt;Node charset, deprecated, use 'attributes'&lt;/dd&gt; &lt;dt&gt;attributes&lt;/dt&gt; &lt;dd&gt;A hash of attributes to apply to dynamic nodes.&lt;/dd&gt; &lt;dt&gt;timeout&lt;/dt&gt; &lt;dd&gt;Number of milliseconds to wait before aborting and firing the timeout event&lt;/dd&gt; &lt;pre&gt; // assumes yahoo, dom, and event are already on the page &amp;nbsp;&amp;nbsp;YAHOO.util.Get.script( &amp;nbsp;&amp;nbsp;[&quot;http://yui.yahooapis.com/2.7.0/build/dragdrop/dragdrop-min.js&quot;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;http://yui.yahooapis.com/2.7.0/build/animation/animation-min.js&quot;], &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onSuccess: function(o) &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;YAHOO.log(o.data); // foo &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new YAHOO.util.DDProxy(&quot;dd1&quot;); // also new o.reference(&quot;dd1&quot;); would work &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.log(&quot;won't cause error because YAHOO is the scope&quot;); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.log(o.nodes.length === 2) // true &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// o.purge(); // optionally remove the script nodes immediately &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onFailure: function(o) &amp;#123; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;YAHOO.log(&quot;transaction failed&quot;); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data: &quot;foo&quot;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;timeout: 10000, // 10 second timeout &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;scope: YAHOO, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// win: otherframe // target another window/frame &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;autopurge: true // allow the utility to choose when to remove the nodes &amp;nbsp;&amp;nbsp;&amp;#125;); &lt;/pre&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="tId: string" />
			</return-types>
			<return-description>an object containing info about the transaction</return-description>
		</method>
		<method name="_returnData" scope="instance" visibility="private">
			<description>Returns the data payload for callback functions</description>
		</method>
		<method name="queue" scope="instance" visibility="private">
			<description>Saves the state for the request and begins loading the requested urls</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of node to insert</description>
			</parameter>
			<parameter name="url" type="string" usage="required">
				<description> the url to load</description>
			</parameter>
			<parameter name="opts" type="" usage="required">
				<description> the hash of options for this request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_scriptNode" scope="instance" visibility="private">
			<description>Generates a script node</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url for the script file</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the node in</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="_node" scope="instance" visibility="private">
			<description>Generates an HTML element, this is not appended to a document</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of element</description>
			</parameter>
			<parameter name="attr" type="string" usage="required">
				<description> the attributes</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> optional window to create the element in</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the generated node</return-description>
		</method>
		<method name="abort" scope="instance">
			<description>Abort a transaction</description>
			<parameters>
			<parameter name="either" type="string|object" usage="required">
				<description> the tId or the object returned from script() or css()</description>
			</parameter>
			</parameters>
		</method>
		<method name="_next" scope="instance" visibility="private">
			<description>Loads the next item for a given request</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			<parameter name="loaded" type="string" usage="required">
				<description> the url that was just loaded, if any</description>
			</parameter>
			</parameters>
		</method>
		<method name="_timeout" scope="instance" visibility="private">
			<description>Timeout detected</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			</parameters>
		</method>
		<method name="_track" scope="instance" visibility="private">
			<description>Detects when a node has been loaded. In the case of script nodes, this does not guarantee that contained script is ready to use.</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of node to track</description>
			</parameter>
			<parameter name="n" type="HTMLElement" usage="required">
				<description> the node to track</description>
			</parameter>
			<parameter name="id" type="string" usage="required">
				<description> the id of the request</description>
			</parameter>
			<parameter name="url" type="string" usage="required">
				<description> the url that is being loaded</description>
			</parameter>
			<parameter name="win" type="Window" usage="required">
				<description> the targeted window</description>
			</parameter>
			<parameter name="qlength" type="" usage="required">
				<description> the number of remaining items in the queue, including this one</description>
			</parameter>
			<parameter name="trackfn" type="Function" usage="required">
				<description> function to execute when finished the default is _next</description>
			</parameter>
			</parameters>
		</method>
		<method name="css" scope="static">
			<description>Fetches and inserts one or more css link nodes into the head of the current document or the document in a specified window.</description>
			<parameters>
			<parameter name="url" type="string" usage="required">
				<description> the url or urls to the css file(s)</description>
			</parameter>
			<parameter name="opts" type="" usage="required">
				<description> Options: &lt;dl&gt; &lt;dt&gt;onSuccess&lt;/dt&gt; &lt;dd&gt; callback to execute when the css file(s) are finished loading The callback receives an object back with the following data: &lt;dl&gt;win&lt;/dl&gt; &lt;dd&gt;the window the link nodes(s) were inserted into&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt; &lt;dt&gt;nodes&lt;/dt&gt; &lt;dd&gt;An array containing references to the nodes that were inserted&lt;/dd&gt; &lt;dt&gt;purge&lt;/dt&gt; &lt;dd&gt;A function that, when executed, will remove the nodes that were inserted&lt;/dd&gt; &lt;dt&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;scope&lt;/dt&gt; &lt;dd&gt;the execution context for the callbacks&lt;/dd&gt; &lt;dt&gt;win&lt;/dt&gt; &lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt; &lt;dt&gt;data&lt;/dt&gt; &lt;dd&gt; data that is supplied to the callbacks when the nodes(s) are loaded. &lt;/dd&gt; &lt;dt&gt;insertBefore&lt;/dt&gt; &lt;dd&gt;node or node id that will become the new node's nextSibling&lt;/dd&gt; &lt;dt&gt;charset&lt;/dt&gt; &lt;dd&gt;Node charset, deprecated, use 'attributes'&lt;/dd&gt; &lt;dt&gt;attributes&lt;/dt&gt; &lt;dd&gt;A hash of attributes to apply to dynamic nodes.&lt;/dd&gt; &lt;/dl&gt; &lt;pre&gt; YAHOO.util.Get.css(&quot;http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css&quot;); &lt;/pre&gt; &lt;pre&gt; YAHOO.util.Get.css([&quot;http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css&quot;, &quot;http://yui.yahooapis.com/2.7.0/build/logger/assets/skins/sam/logger.css&quot;]); &lt;/pre&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="tId: string" />
			</return-types>
			<return-description>an object containing info about the transaction</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.BaseCellEditor">
		<description>The BaseCellEditor class provides base functionality common to all inline cell
editors for a DataTable widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>The BaseCellEditor class provides base functionality common to all inline cell
editors for a DataTable widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.BaseCellEditor" />
			</return-types>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description>  Type indicator, to map to YAHOO.widget.DataTable.Editors.</description>
			</parameter>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="LABEL_SAVE" type="String" scope="instance">
			<description>Text to display on Save button.</description>
		</property>
		<property name="CellEditor._nCount" type="Number" scope="static" visibility="private">
			<description>Global instance counter.</description>
		</property>
		<property name="_sType" type="String" scope="instance" visibility="private">
			<description>Editor type.</description>
		</property>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Unique id assigned to instance &quot;yui-ceditorN&quot;, useful prefix for generating unique DOM ID strings and log messages.</description>
		</property>
		<property name="defaultValue" type="MIXED" scope="instance">
			<description>Default value in case Record data is undefined. NB: Null values will not trigger the default value.</description>
		</property>
		<property name="resetInvalidData" type="Boolean" scope="instance">
			<description>If validation is enabled, resets input field of invalid data.</description>
		</property>
		<property name="_oColumn" type="YAHOO.widget.Column" scope="instance" visibility="private">
			<description>Column instance.</description>
		</property>
		<property name="_elContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>Container for inline editor.</description>
		</property>
		<property name="value" type="MIXED" scope="instance">
			<description>Current value.</description>
		</property>
		<property name="_elCancelBtn" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to Cancel button, if available.</description>
		</property>
		<property name="asyncSubmitter" type="HTMLFunction" scope="instance">
			<description>Implementer defined function that can submit the input value to a server. This function must accept the arguments fnCallback and oNewValue. When the submission is complete, the function must also call fnCallback(bSuccess, oNewValue) to finish the save routine in the CellEditor. This function can also be used to perform extra validation or input value manipulation.</description>
		</property>
		<property name="disableBtns" type="Boolean" scope="instance">
			<description>True if Save/Cancel buttons should not be displayed in the CellEditor.</description>
		</property>
		<property name="_oDataTable" type="YAHOO.widget.DataTable" scope="instance" visibility="private">
			<description>DataTable instance.</description>
		</property>
		<property name="_elTd" type="HTMLElement" scope="instance" visibility="private">
			<description>TD element.</description>
		</property>
		<property name="CellEditor.CLASS_CELLEDITOR" type="String" scope="static">
			<description>Class applied to CellEditor container.</description>
		</property>
		<property name="_oRecord" type="YAHOO.widget.Record" scope="instance" visibility="private">
			<description>Record instance.</description>
		</property>
		<property name="_elSaveBtn" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to Save button, if available.</description>
		</property>
		<property name="LABEL_CANCEL" type="String" scope="instance">
			<description>Text to display on Cancel button.</description>
		</property>
		<property name="isActive" type="Boolean" scope="instance">
			<description>True if currently active.</description>
		</property>
		<property name="validator" type="HTMLFunction" scope="instance">
			<description>Validator function for input data, called from the DataTable instance scope, receives the arguments (inputValue, currentValue, editorInstance) and returns either the validated (or type-converted) value or undefined.</description>
		</property>
		</properties>
		<methods>
		<method name="_initEvents" scope="instance" visibility="private">
			<description>Initialize Custom Events.</description>
		</method>
		<method name="getColumn" scope="instance">
			<description>Returns reference to associated Column instance.</description>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column instance.</return-description>
		</method>
		<method name="getDataTable" scope="instance">
			<description>Returns reference to associated DataTable instance.</description>
			<return-types>
			<return-type type="YAHOO.widget.DataTable" />
			</return-types>
			<return-description>DataTable instance.</return-description>
		</method>
		<method name="render" scope="instance">
			<description>Renders DOM elements and attaches event listeners.</description>
		</method>
		<method name="show" scope="instance">
			<description>Displays CellEditor UI in the correct position.</description>
		</method>
		<method name="move" scope="instance">
			<description>Moves container into position for display.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in CellEditor.</description>
		</method>
		<method name="renderBtns" scope="instance">
			<description>Renders Save/Cancel buttons.</description>
		</method>
		<method name="unblock" scope="instance">
			<description>Fires unblockEvent</description>
		</method>
		<method name="cancel" scope="instance">
			<description>Cancels CellEditor input and hides UI.</description>
		</method>
		<method name="doAfterRender" scope="instance">
			<description>Access to add additional event listeners.</description>
		</method>
		<method name="renderForm" scope="instance">
			<description>Renders form elements.</description>
		</method>
		<method name="getRecord" scope="instance">
			<description>Returns reference to associated Record instance.</description>
			<return-types>
			<return-type type="YAHOO.widget.Record" />
			</return-types>
			<return-description>Record instance.</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>CellEditor unique ID.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique ID of the CellEditor instance.</return-description>
		</method>
		<method name="attach" scope="instance">
			<description>Attach CellEditor for a new interaction.</description>
			<parameters>
			<parameter name="oDataTable" type="YAHOO.widget.DataTable" usage="required">
				<description> Associated DataTable instance.</description>
			</parameter>
			<parameter name="elCell" type="HTMLElement" usage="required">
				<description> Cell to edit.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>CellEditor instance name, for logging.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the CellEditor instance.</return-description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from CellEditor.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Nulls out the entire CellEditor instance and related objects, removes attached event listeners, and clears out DOM elements inside the container, removes container from the DOM.</description>
		</method>
		<method name="save" scope="instance">
			<description>Saves value of CellEditor and hides UI.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets CellEditor UI to initial state.</description>
		</method>
		<method name="getContainerEl" scope="instance">
			<description>Returns container element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to container element.</return-description>
		</method>
		<method name="getTdEl" scope="instance">
			<description>Returns reference to associated TD element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>TD element.</return-description>
		</method>
		<method name="_initConfigs" scope="instance" visibility="private">
			<description>Initialize configs.</description>
		</method>
		<method name="block" scope="instance">
			<description>Fires blockEvent</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TVFadeIn">
		<description>A 1/2 second fade-in animation.</description>
		<constructors>
		<constructor scope="instance">
			<description>A 1/2 second fade-in animation.</description>
			<return-types>
				<return-type type="YAHOO.widget.TVFadeIn" />
			</return-types>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>  the element to animate</description>
			</parameter>
			<parameter name="callback" type="function" usage="required">
				<description>  function to invoke when the animation is finished</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="el" type="HTMLElement" scope="instance">
			<description>The element to animate</description>
		</property>
		<property name="callback" type="function" scope="instance">
			<description>the callback to invoke when the animation is complete</description>
		</property>
		</properties>
		<methods>
		<method name="onComplete" scope="instance">
			<description>Clean up and invoke callback</description>
		</method>
		<method name="animate" scope="instance">
			<description>Performs the animation</description>
		</method>
		<method name="toString" scope="instance">
			<description>toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the string representation of the instance</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CalendarGroup">
		<description>YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
the ability to have multi-page calendar views that share a single dataset and are
dependent on each other.
The calendar group instance will refer to each of its elements using a 0-based index.
For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and
containerId of &quot;cal1Container&quot;, the markup would be as follows:
&lt;xmp&gt;
&lt;div id=&quot;cal1Container_0&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;cal1Container_1&quot;&gt;&lt;/div&gt;
&lt;/xmp&gt;
The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers.
&lt;p&gt;
&lt;strong&gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&lt;/strong&gt;
The CalendarGroup can be constructed by simply providing a container ID string, 
or a reference to a container DIV HTMLElement (the element needs to exist 
in the document).
E.g.:
&lt;xmp&gt;
var c = new YAHOO.widget.CalendarGroup(&quot;calContainer&quot;, configOptions);
&lt;/xmp&gt;
or:
&lt;xmp&gt;
var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);
var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.
For example if an ID is not provided, and the container's ID is &quot;calContainer&quot;, the CalendarGroup's ID will be set to &quot;calContainer_t&quot;.
&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
the ability to have multi-page calendar views that share a single dataset and are
dependent on each other.
The calendar group instance will refer to each of its elements using a 0-based index.
For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and
containerId of &quot;cal1Container&quot;, the markup would be as follows:
&lt;xmp&gt;
&lt;div id=&quot;cal1Container_0&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;cal1Container_1&quot;&gt;&lt;/div&gt;
&lt;/xmp&gt;
The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers.
&lt;p&gt;
&lt;strong&gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&lt;/strong&gt;
The CalendarGroup can be constructed by simply providing a container ID string, 
or a reference to a container DIV HTMLElement (the element needs to exist 
in the document).
E.g.:
&lt;xmp&gt;
var c = new YAHOO.widget.CalendarGroup(&quot;calContainer&quot;, configOptions);
&lt;/xmp&gt;
or:
&lt;xmp&gt;
var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);
var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.
For example if an ID is not provided, and the container's ID is &quot;calContainer&quot;, the CalendarGroup's ID will be set to &quot;calContainer_t&quot;.
&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.CalendarGroup" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.</description>
			</parameter>
			<parameter name="container" type="String | HTMLElement" usage="required">
				<description> The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> optional The configuration object containing the initial configuration values for the CalendarGroup.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Options" type="Object" scope="instance">
			<description>The local object which contains the CalendarGroup's options</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup.CSS_2UPCLOSE" type="String" scope="static">
			<description>CSS class representing the close icon for the 2-up calendar</description>
		</property>
		<property name="containerId" type="String" scope="instance">
			<description>The unique id associated with the CalendarGroup container</description>
		</property>
		<property name="Locale" type="Object" scope="instance">
			<description>The local object which contains the CalendarGroup's locale settings</description>
		</property>
		<property name="cfg" type="YAHOO.util.Config" scope="instance">
			<description>The Config object used to hold the configuration variables for the CalendarGroup</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup.CSS_2UPTITLE" type="String" scope="static">
			<description>CSS class representing the title for the 2-up calendar</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The unique id associated with the CalendarGroup</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup.DEFAULT_CONFIG" type="Object An object with key|value pairs, the key being the uppercase configuration property name and the value being an objec literal with a key string property, and a value property, specifying the default value of the property" scope="static">
			<description>The set of default Config property keys and values for the CalendarGroup. &lt;p&gt; NOTE: This property is made public in order to allow users to change the default values of configuration properties. Users should not modify the key string, unless they are overriding the Calendar implementation &lt;/p&gt;</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup.CSS_CONTAINER" type="String" scope="static">
			<description>CSS class representing the container for the calendar</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup.CSS_MULTI_UP" type="String" scope="static">
			<description>CSS class representing the container for the calendar</description>
		</property>
		<property name="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG" type="Object" scope="static" visibility="private">
			<description>The set of default Config property keys and values for the CalendarGroup</description>
		</property>
		<property name="pages" type="YAHOO.widget.Calendar[]" scope="instance">
			<description>The collection of Calendar pages contained within the CalendarGroup</description>
		</property>
		</properties>
		<methods>
		<method name="deselectCell" scope="instance">
			<description>Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly. deselectCell will deselect the cell at the specified index on each displayed Calendar page.</description>
			<parameters>
			<parameter name="cellIndex" type="Number" usage="required">
				<description> The index of the cell to deselect.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="addWeekdayRenderer" scope="instance">
			<description>Adds a weekday to the render stack. The function reference passed to this method will be executed when a date cell matches the weekday passed to this method.</description>
			<parameters>
			<parameter name="weekday" type="Number" usage="required">
				<description> The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc.</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Calls the render function of all child calendars within the group.</description>
		</method>
		<method name="nextYear" scope="instance">
			<description>Navigates to the next year in the currently selected month in the calendar widget.</description>
		</method>
		<method name="delegateConfig" scope="instance">
			<description>Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configPages" scope="instance">
			<description>The default Config handler for the &quot;pages&quot; property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="subtractYears" scope="instance">
			<description>Subtcats the designated number of years from the current calendar, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of years to subtract from the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="previousMonth" scope="instance">
			<description>Navigates to the previous month page in the calendar widget.</description>
		</method>
		<method name="select" scope="instance">
			<description>Selects a date or a collection of dates on the current calendar. This method, by default, does not call the render method explicitly. Once selection has completed, render must be called for the changes to be reflected visually.</description>
			<parameters>
			<parameter name="date" type="String|Date|Date[]" usage="required">
				<description>  The date string of dates to select in the current calendar. Valid formats are individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006). Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005). This method can also take a JavaScript Date object or an array of Date objects.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="callChildFunction" scope="instance">
			<description>Calls a function within all child Calendars within this CalendarGroup.</description>
			<parameters>
			<parameter name="fnName" type="String" usage="required">
				<description> The name of the function</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> The arguments to pass to the function</description>
			</parameter>
			</parameters>
		</method>
		<method name="deselect" scope="instance">
			<description>Deselects a date or a collection of dates on the current calendar. This method, by default, does not call the render method explicitly. Once deselection has completed, render must be called for the changes to be reflected visually.</description>
			<parameters>
			<parameter name="date" type="String|Date|Date[]" usage="required">
				<description> The date string of dates to deselect in the current calendar. Valid formats are individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006). Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005). This method can also take a JavaScript Date object or an array of Date objects.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="sub" scope="instance" visibility="private">
			<description>Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to subscribe to this CustomEvent</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The CustomEvent's scope object</description>
			</parameter>
			<parameter name="bOverride" type="Boolean" usage="required">
				<description> Whether or not to apply scope correction</description>
			</parameter>
			</parameters>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes CalendarGroup's built-in CustomEvents</description>
		</method>
		<method name="previousYear" scope="instance">
			<description>Navigates to the previous year in the currently selected month in the calendar widget.</description>
		</method>
		<method name="nextMonth" scope="instance">
			<description>Navigates to the next month page in the calendar widget.</description>
		</method>
		<method name="configPageDate" scope="instance">
			<description>The default Config handler for the &quot;pagedate&quot; property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setChildFunction" scope="instance">
			<description>Adds a function to all child Calendars within this CalendarGroup.</description>
			<parameters>
			<parameter name="fnName" type="String" usage="required">
				<description> The name of the function</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>  The function to apply to each Calendar page object</description>
			</parameter>
			</parameters>
		</method>
		<method name="addMonthRenderer" scope="instance">
			<description>Adds a month to the render stack. The function reference passed to this method will be executed when a date cell matches the month passed to this method.</description>
			<parameters>
			<parameter name="month" type="Number" usage="required">
				<description> The month (1-12) to associate with this renderer</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Initializes the calendar group. All subclasses must call this method in order for the group to be initialized properly.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.</description>
			</parameter>
			<parameter name="container" type="String | HTMLElement" usage="required">
				<description> The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> optional The configuration object containing the initial configuration values for the CalendarGroup.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string representation of the CalendarGroup object.</return-description>
		</method>
		<method name="_setMonthOnDate" scope="instance" visibility="private">
			<description>Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11. The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The Date object on which to set the month index</description>
			</parameter>
			<parameter name="iMonth" type="Number" usage="required">
				<description> The month index to set</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeRenderers" scope="instance">
			<description>Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and addWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers to see the changes applied.</description>
		</method>
		<method name="selectCell" scope="instance">
			<description>Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly. The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. &lt;ul&gt; &lt;li&gt;If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.&lt;/li&gt; &lt;li&gt;If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="cellIndex" type="Number" usage="required">
				<description> The index of the cell to be selected.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="renderFooter" scope="instance">
			<description>Renders a footer for the 2-up calendar container. By default, this method is unimplemented.</description>
		</method>
		<method name="configSelected" scope="instance">
			<description>The default Config handler for the CalendarGroup &quot;selected&quot; property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_fixWidth" scope="instance" visibility="private">
			<description>Fixes the width of the CalendarGroup container element, to account for miswrapped floats</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the CalendarGroup instance. The method will remove references to HTML elements, remove any event listeners added by the CalendarGroup. It will also destroy the Config and CalendarNavigator instances created by the CalendarGroup and the individual Calendar instances created for each page.</description>
		</method>
		<method name="unsub" scope="instance" visibility="private">
			<description>Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to subscribe to this CustomEvent</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The CustomEvent's scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSelectedDates" scope="instance">
			<description>Gets the list of currently selected dates from the calendar.</description>
			<return-description>An array of currently selected JavaScript Date objects.</return-description>
		</method>
		<method name="addRenderer" scope="instance">
			<description>Adds a renderer to the render stack. The function reference passed to this method will be executed when a date cell matches the conditions specified in the date string for this renderer.</description>
			<parameters>
			<parameter name="sDates" type="String" usage="required">
				<description> A date string to associate with the specified renderer. Valid formats include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="reset" scope="instance">
			<description>Resets the calendar widget to the originally selected month and year, and sets the calendar to the initial selection(s).</description>
		</method>
		<method name="deselectAll" scope="instance">
			<description>Deselects all dates on the current calendar.</description>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.
Assuming that this function executes properly, the return value should be an empty array.
However, the empty array is returned for the sake of being able to check the selection status
of the calendar.</return-description>
		</method>
		<method name="setMonth" scope="instance">
			<description>Sets the calendar group's month explicitly. This month will be set into the first page of the multi-page calendar, and all other months will be iterated appropriately.</description>
			<parameters>
			<parameter name="month" type="Number" usage="required">
				<description> The numeric month, from 0 (January) to 11 (December)</description>
			</parameter>
			</parameters>
		</method>
		<method name="clear" scope="instance">
			<description>Clears the selected dates in the current calendar widget and sets the calendar to the current month and year.</description>
		</method>
		<method name="getCalendarPage" scope="instance">
			<description>Returns the Calendar page instance which has a pagedate (month/year) matching the given date. Returns null if no match is found.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date object for which a Calendar page is to be found.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Calendar" />
			</return-types>
			<return-description>The Calendar page instance representing the month to which the date 
belongs.</return-description>
		</method>
		<method name="addMonths" scope="instance">
			<description>Adds the designated number of months to the current calendar month, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of months to add to the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="subtractMonths" scope="instance">
			<description>Subtracts the designated number of months from the current calendar month, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of months to subtract from the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="constructChild" scope="instance">
			<description>Constructs a child calendar. This method can be overridden if a subclassed version of the default calendar is to be used.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description>  The id of the table element that will represent the calendar widget</description>
			</parameter>
			<parameter name="containerId" type="String" usage="required">
				<description> The id of the container div element that will wrap the calendar table</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> The configuration object containing the Calendar's arguments</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Calendar" />
			</return-types>
			<return-description>The YAHOO.widget.Calendar instance that is constructed</return-description>
		</method>
		<method name="setYear" scope="instance">
			<description>Sets the calendar group's year explicitly. This year will be set into the first page of the multi-page calendar, and all other months will be iterated appropriately.</description>
			<parameters>
			<parameter name="year" type="Number" usage="required">
				<description> The numeric 4-digit year</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderHeader" scope="instance">
			<description>Renders the header for the CalendarGroup.</description>
		</method>
		<method name="addYears" scope="instance">
			<description>Adds the designated number of years to the current calendar, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of years to add to the current calendar</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CategoryAxis">
		<description>A type of axis that displays items in categories.</description>
		<constructors>
		<constructor scope="instance">
			<description>A type of axis that displays items in categories.</description>
			<return-types>
				<return-type type="YAHOO.widget.CategoryAxis" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="categoryNames" type="Array" scope="instance">
			<description>A list of category names to display along this axis.</description>
		</property>
		<property name="calculateCategoryCount" type="Boolean" scope="instance">
			<description>Indicates whether or not to calculate the number of categories (ticks and labels) when there is not enough room to display all labels on the axis. If set to true, the axis will determine the number of categories to plot. If not, all categories will be plotted.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.Assert">
		<description>The Assert object provides functions to test JavaScript values against
known and expected results. Whenever a comparison (assertion) fails,
an error is thrown.</description>
		<methods>
		<method name="isTrue" scope="static">
			<description>Asserts that a value is true. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFalse" scope="static">
			<description>Asserts that a value is false. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotNull" scope="static">
			<description>Asserts that a value is not null. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="fail" scope="static">
			<description>Forces an assertion error to occur.</description>
			<parameters>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display with the failure.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFunction" scope="static">
			<description>Asserts that a value is a function.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNaN" scope="static">
			<description>Asserts that a value is not a number.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isBoolean" scope="static">
			<description>Asserts that a value is a Boolean.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areNotSame" scope="static">
			<description>Asserts that a value is not the same as another. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotNaN" scope="static">
			<description>Asserts that a value is not the special NaN value.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areNotEqual" scope="static">
			<description>Asserts that a value is not equal to another. This uses the double equals sign so type cohersion may occur.</description>
			<parameters>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="areSame" scope="static">
			<description>Asserts that a value is the same as another. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isUndefined" scope="static">
			<description>Asserts that a value is undefined. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isArray" scope="static">
			<description>Asserts that a value is an array.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isTypeOf" scope="static">
			<description>Asserts that a value is of a particular type.</description>
			<parameters>
			<parameter name="expectedType" type="String" usage="required">
				<description> The expected type of the variable.</description>
			</parameter>
			<parameter name="actualValue" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_formatMessage" scope="static">
			<description>Formats a message so that it can contain the original assertion message in addition to the custom message.</description>
			<parameters>
			<parameter name="customMessage" type="String" usage="required">
				<description> The message passed in by the developer.</description>
			</parameter>
			<parameter name="defaultMessage" type="String" usage="required">
				<description> The message created by the error by default.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The final error message, containing either or both.</return-description>
		</method>
		<method name="areEqual" scope="static">
			<description>Asserts that a value is equal to another. This uses the double equals sign so type cohersion may occur.</description>
			<parameters>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNumber" scope="static">
			<description>Asserts that a value is a number.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isObject" scope="static">
			<description>Asserts that a value is an object.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isString" scope="static">
			<description>Asserts that a value is a string.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotUndefined" scope="static">
			<description>Asserts that a value is not undefined. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNull" scope="static">
			<description>Asserts that a value is null. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isInstanceOf" scope="static">
			<description>Asserts that a value is an instance of a particular object. This may return incorrect results when comparing objects from one frame to constructors in another frame. For best results, don't use in a cross-frame manner.</description>
			<parameters>
			<parameter name="expected" type="Function" usage="required">
				<description> The function that the object should be an instance of.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The object to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.DropdownCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The DropdownCellEditor class provides functionality for inline editing
DataTable cell data a SELECT element.</description>
		<constructors>
		<constructor scope="instance">
			<description>The DropdownCellEditor class provides functionality for inline editing
DataTable cell data a SELECT element.</description>
			<return-types>
				<return-type type="YAHOO.widget.DropdownCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="dropdownOptions" type="String[] | Object[]" scope="instance">
			<description>Array of dropdown values. Can either be a simple array (e.g., [&quot;Alabama&quot;,&quot;Alaska&quot;,&quot;Arizona&quot;,&quot;Arkansas&quot;]) or a an array of objects (e.g., [{label:&quot;Alabama&quot;, value:&quot;AL&quot;}, {label:&quot;Alaska&quot;, value:&quot;AK&quot;}, {label:&quot;Arizona&quot;, value:&quot;AZ&quot;}, {label:&quot;Arkansas&quot;, value:&quot;AR&quot;}]).</description>
		</property>
		<property name="size" type="Number" scope="instance">
			<description>Specifies number of visible options.</description>
		</property>
		<property name="multiple" type="Boolean" scope="instance">
			<description>Enables multi-select.</description>
		</property>
		<property name="dropdown" type="HTMLElement" scope="instance">
			<description>Reference to Dropdown element.</description>
		</property>
		</properties>
		<methods>
		<method name="renderForm" scope="instance">
			<description>Render a form with select element.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from DropdownCellEditor.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in DropdownCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets DropdownCellEditor UI to initial state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TextboxCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The TextboxCellEditor class provides functionality for inline editing
DataTable cell data with an INPUT TYPE=TEXT element.</description>
		<constructors>
		<constructor scope="instance">
			<description>The TextboxCellEditor class provides functionality for inline editing
DataTable cell data with an INPUT TYPE=TEXT element.</description>
			<return-types>
				<return-type type="YAHOO.widget.TextboxCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DataTable.Editors" type="Object" scope="static">
			<description>CellEditor subclasses.</description>
		</property>
		<property name="textbox" type="undefined" scope="instance">
			<description>Reference to the textbox element.</description>
		</property>
		</properties>
		<methods>
		<method name="renderForm" scope="instance">
			<description>Render a form with input type=text.</description>
		</method>
		<method name="move" scope="instance">
			<description>Moves TextboxCellEditor UI to a cell.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Returns new value for TextboxCellEditor.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in TextboxCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets TextboxCellEditor UI to initial state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.CurrentPageReport">
		<description>ui Component to generate the textual report of current pagination status.
E.g. &quot;Now viewing page 1 of 13&quot;.</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the textual report of current pagination status.
E.g. &quot;Now viewing page 1 of 13&quot;.</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.CurrentPageReport" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="span" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node containing the formatted info</description>
		</property>
		</properties>
		<methods>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the link/span node and clears event listeners removal.</description>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="sprintf" scope="static">
			<description>Replace place holders in a string with the named values found in an object literal.</description>
			<parameters>
			<parameter name="template" type="string" usage="required">
				<description> The content string containing place holders</description>
			</parameter>
			<parameter name="values" type="object" usage="required">
				<description> The key:value pairs used to replace the place holders</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
		</method>
		<method name="render" scope="instance">
			<description>Generate the span containing info formatted per the pageReportTemplate attribute.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="update" scope="instance">
			<description>Regenerate the content of the span if appropriate. Calls CurrentPageReport.sprintf with the value of the pageReportTemplate attribute and the value map returned from pageReportValueGenerator function.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Bezier">
		<description>Used to calculate Bezier splines for any number of control points.</description>
		<methods>
		<method name="getPosition" scope="instance">
			<description>Get the current position of the animated element based on t. Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y) At least 2 points are required (start and end). First point is start. Last point is end. Additional control points are optional.</description>
			<parameters>
			<parameter name="points" type="Array" usage="required">
				<description> An array containing Bezier points</description>
			</parameter>
			<parameter name="t" type="Number" usage="required">
				<description> A number between 0 and 1 which is the basis for determining current position</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array containing int x and y member data</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.StorageEngineGears">
		<description>The StorageEngineGears class implements the Google Gears storage engine.</description>
		<constructors>
		<constructor scope="instance">
			<description>The StorageEngineGears class implements the Google Gears storage engine.</description>
			<return-types>
				<return-type type="YAHOO.util.StorageEngineGears" />
			</return-types>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description>  Required. The storage location.</description>
			</parameter>
			<parameter name="conf" type="Object" usage="required">
				<description>  Required. A configuration object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.Subscriber">
		<description>Stores the subscriber information to be used when the event fires.</description>
		<constructors>
		<constructor scope="instance">
			<description>Stores the subscriber information to be used when the event fires.</description>
			<return-types>
				<return-type type="YAHOO.util.Subscriber" />
			</return-types>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>       The function to execute</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>      An object to be passed along when the event fires</description>
			</parameter>
			<parameter name="overrideContext" type="boolean" usage="required">
				<description> If true, the obj passed in becomes the execution
context of the listener</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="obj" type="object" scope="instance">
			<description>An optional custom object that will passed to the callback when the event fires</description>
		</property>
		<property name="overrideContext" type="boolean|object" scope="instance">
			<description>The default execution context for the event listener is defined when the event is created (usually the object which contains the event). By setting overrideContext to true, the execution context becomes the custom object passed in by the subscriber. If overrideContext is an object, that object becomes the context.</description>
		</property>
		<property name="fn" type="function" scope="instance">
			<description>The callback that will be execute when the event fires</description>
		</property>
		</properties>
		<methods>
		<method name="getScope" scope="instance">
			<description>Returns the execution context for this listener. If overrideContext was set to true the custom obj will be the context. If overrideContext is an object, that is the context, otherwise the default context will be used.</description>
			<parameters>
			<parameter name="defaultScope" type="Object" usage="required">
				<description> the context to use if this listener does not override it.</description>
			</parameter>
			</parameters>
		</method>
		<method name="contains" scope="instance">
			<description>Returns true if the fn and obj match this objects properties. Used by the unsubscribe method to match the right subscriber.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description> the function to execute</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> an object to be passed along when the event fires</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the supplied arguments match this 
subscriber's signature.</return-description>
		</method>
		<method name="toString" scope="instance">
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.StorageEngineSWF">
		<description>The StorageEngineSWF class implements the SWF storage engine.</description>
		<constructors>
		<constructor scope="instance">
			<description>The StorageEngineSWF class implements the SWF storage engine.</description>
			<return-types>
				<return-type type="YAHOO.util.StorageEngineSWF" />
			</return-types>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description>  Required. The storage location.</description>
			</parameter>
			<parameter name="conf" type="Object" usage="required">
				<description>  Required. A configuration object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_swf" type="{Object}" scope="instance">
			<description>The underlying SWF of the engine, exposed so developers can modify the adapter behavior.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.Paginator.ui.PageLinks">
		<description>ui Component to generate the page links</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the page links</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.PageLinks" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="current" type="number" scope="instance" visibility="private">
			<description>Current page</description>
		</property>
		<property name="container" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node containing the page links</description>
		</property>
		</properties>
		<methods>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the container node containing page links appropriate to the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="rebuild" scope="instance">
			<description>Force a rebuild of the page links.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Update the links if appropriate</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="onClick" scope="instance">
			<description>Listener for the container's onclick event. Looks for qualifying link clicks, and pulls the page number from the link's page attribute. Sends link's page attribute to the Paginator's setPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the page links container node and clears event listeners</description>
		</method>
		<method name="calculateRange" scope="static">
			<description>Calculates start and end page numbers given a current page, attempting to keep the current page in the middle</description>
			<parameters>
			<parameter name="currentPage" type="int" usage="required">
				<description> The current page</description>
			</parameter>
			<parameter name="totalPages" type="int" usage="optional">
				<description>  (optional) Maximum number of pages</description>
			</parameter>
			<parameter name="numPages" type="int" usage="optional">
				<description>   (optional) Preferred number of pages in range</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>[start_page_number, end_page_number]</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.MenuBar" superclass="YAHOO.widget.Menu">
		<description>Horizontal collection of items, each of which can contain a submenu.</description>
		<constructors>
		<constructor scope="instance">
			<description>Horizontal collection of items, each of which can contain a submenu.</description>
			<return-types>
				<return-type type="YAHOO.widget.MenuBar" />
			</return-types>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the 
menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying 
the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data 
source for the menu bar.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the menu bar. See configuration class documentation for
more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="SUBMENU_TOGGLE_REGION_WIDTH" type="Number" scope="instance">
			<description>Width (in pixels) of the area of a MenuBarItem that, when pressed, will toggle the display of the MenuBarItem's submenu.</description>
		</property>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the menu bar's &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element.</description>
		</property>
		</properties>
		<methods>
		<method name="configSubmenuToggle" scope="instance">
			<description>Event handler for when the &quot;submenutoggleregion&quot; configuration property of a MenuBar changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The MenuBar class's initialization method. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the menu bar.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the configuration for the menu bar. See configuration class documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the menu bar.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_onClick" scope="instance">
			<description>&quot;click&quot; event handler for the menu bar.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenuBar" type="YAHOO.widget.MenuBar" usage="required">
				<description> Object representing the menu bar that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="checkPosition" scope="instance" visibility="private">
			<description>Checks to make sure that the value of the &quot;position&quot; property is one of the supported strings. Returns true if the position is supported.</description>
			<parameters>
			<parameter name="p_sPosition" type="Object" usage="required">
				<description> String specifying the position of the menu.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_onKeyDown" scope="instance" visibility="private">
			<description>&quot;keydown&quot; Custom Event handler for the menu bar.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenuBar" type="YAHOO.widget.MenuBar" usage="required">
				<description> Object representing the menu bar that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the menu bar's Config object (&quot;cfg&quot;).</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.env">
		<description>YAHOO.env is used to keep track of what is known about the YUI library and
the browsing environment</description>
		<properties>
		<property name="listeners" type="Function[]" scope="instance">
			<description>List of functions that should be executed every time a YUI module reports itself.</description>
		</property>
		<property name="modules" type="Object[]" scope="instance">
			<description>Keeps the version info for all YUI modules that have reported themselves</description>
		</property>
		</properties>
		<methods>
		<method name="getVersion" scope="static">
			<description>Returns the version data for the specified module: &lt;dl&gt; &lt;dt&gt;name:&lt;/dt&gt;   &lt;dd&gt;The name of the module&lt;/dd&gt; &lt;dt&gt;version:&lt;/dt&gt;  &lt;dd&gt;The version in use&lt;/dd&gt; &lt;dt&gt;build:&lt;/dt&gt;   &lt;dd&gt;The build number in use&lt;/dd&gt; &lt;dt&gt;versions:&lt;/dt&gt; &lt;dd&gt;All versions that were registered&lt;/dd&gt; &lt;dt&gt;builds:&lt;/dt&gt;  &lt;dd&gt;All builds that were registered.&lt;/dd&gt; &lt;dt&gt;mainClass:&lt;/dt&gt; &lt;dd&gt;An object that was was stamped with the current version and build. If mainClass.VERSION != version or mainClass.BUILD != build, multiple versions of pieces of the library have been loaded, potentially causing issues.&lt;/dd&gt; &lt;/dl&gt;</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> the name of the module (event, slider, etc)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The version info</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ShouldFail" superclass="YAHOO.util.AssertionError">
		<description>ShouldFail is subclass of AssertionError that is thrown whenever
a test was expected to fail but did not.</description>
		<constructors>
		<constructor scope="instance">
			<description>ShouldFail is subclass of AssertionError that is thrown whenever
a test was expected to fail but did not.</description>
			<return-types>
				<return-type type="YAHOO.util.ShouldFail" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.TextareaCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The TextareaCellEditor class provides functionality for inline editing
DataTable cell data with a TEXTAREA element.</description>
		<constructors>
		<constructor scope="instance">
			<description>The TextareaCellEditor class provides functionality for inline editing
DataTable cell data with a TEXTAREA element.</description>
			<return-types>
				<return-type type="YAHOO.widget.TextareaCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="textarea" type="HTMLElement" scope="instance">
			<description>Reference to textarea element.</description>
		</property>
		</properties>
		<methods>
		<method name="move" scope="instance">
			<description>Moves TextareaCellEditor UI to a cell.</description>
		</method>
		<method name="renderForm" scope="instance">
			<description>Render a form with textarea.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in TextareaCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets TextareaCellEditor UI to initial state.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from TextareaCellEditor.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.SliderThumb" superclass="YAHOO.util.DD">
		<description>A drag and drop implementation to be used as the thumb of a slider.</description>
		<constructors>
		<constructor scope="instance">
			<description>A drag and drop implementation to be used as the thumb of a slider.</description>
			<return-types>
				<return-type type="YAHOO.widget.SliderThumb" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the slider html element</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related DragDrop items</description>
			</parameter>
			<parameter name="iLeft" type="int" usage="required">
				<description> the number of pixels the element can move left</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> the number of pixels the element can move right</description>
			</parameter>
			<parameter name="iUp" type="int" usage="required">
				<description> the number of pixels the element can move up</description>
			</parameter>
			<parameter name="iDown" type="int" usage="required">
				<description> the number of pixels the element can move down</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element 
should move a certain number pixels at a time.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="isTarget" type="undefined" scope="instance" visibility="private">
			<description>Overrides the isTarget property in YAHOO.util.DragDrop</description>
		</property>
		<property name="maintainOffset" type="boolean" scope="instance" visibility="private">
			<description>Informs the drag and drop util that the offsets should remain when resetting the constraints. This preserves the slider value when the constraints are reset</description>
		</property>
		<property name="parentElId" type="string" scope="instance">
			<description>The id of the thumbs parent HTML element (the slider background element).</description>
		</property>
		<property name="_isHoriz" type="boolean" scope="instance" visibility="private">
			<description>Flag used to figure out if this is a horizontal or vertical slider</description>
		</property>
		<property name="tickSize" type="int" scope="instance" visibility="private">
			<description>The tick size for this slider</description>
		</property>
		<property name="_prevVal" type="int" scope="instance" visibility="private">
			<description>Cache the last value so we can check for change</description>
		</property>
		<property name="startOffset" type="[int, int]" scope="instance">
			<description>The (X and Y) difference between the thumb location and its parent (the slider background) when the control is instantiated.</description>
		</property>
		<property name="dragOnly" type="boolean" scope="instance">
			<description>Override the default setting of dragOnly to true.</description>
		</property>
		<property name="_graduated" type="boolean" scope="instance" visibility="private">
			<description>The slider is _graduated if there is a tick interval defined</description>
		</property>
		<property name="scroll" type="undefined" scope="instance" visibility="private">
			<description>Turns off the autoscroll feature in drag and drop</description>
		</property>
		</properties>
		<methods>
		<method name="onChange" scope="instance" visibility="private">
			<description>The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider instance it belongs to.</description>
		</method>
		<method name="getValue" scope="instance">
			<description>Gets the current offset from the element's start position in pixels.</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the number of pixels (positive or negative) the
slider has moved from the start position.</return-description>
		</method>
		<method name="getOffsetFromParent" scope="instance">
			<description>Returns the difference between the location of the thumb and its parent.</description>
			<parameters>
			<parameter name="parentPos" type="[int, int]" usage="required">
				<description> Optionally accepts the position of the parent</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Thumb toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string representation of the instance</return-description>
		</method>
		<method name="getYValue" scope="instance">
			<description>Gets the current Y offset from the element's start position in pixels.</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the number of pixels (positive or negative) the
slider has moved vertically from the start position.</return-description>
		</method>
		<method name="initSlider" scope="instance">
			<description>Set up the slider, must be called in the constructor of all subclasses</description>
			<parameters>
			<parameter name="iLeft" type="int" usage="required">
				<description> the number of pixels the element can move left</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> the number of pixels the element can move right</description>
			</parameter>
			<parameter name="iUp" type="int" usage="required">
				<description> the number of pixels the element can move up</description>
			</parameter>
			<parameter name="iDown" type="int" usage="required">
				<description> the number of pixels the element can move down</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> the width of the tick interval.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getXValue" scope="instance">
			<description>Gets the current X offset from the element's start position in pixels.</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the number of pixels (positive or negative) the
slider has moved horizontally from the start position.</return-description>
		</method>
		<method name="clearTicks" scope="instance">
			<description>Clear's the slider's ticks</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.AttributeProvider">
		<description>Provides and manages YAHOO.util.Attribute instances</description>
		<properties>
		<property name="_configs" type="{Object}" scope="instance" visibility="private">
			<description>A key-value map of Attribute configurations</description>
		</property>
		</properties>
		<methods>
		<method name="set" scope="instance">
			<description>Sets the value of a config.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			<parameter name="value" type="Any" usage="required">
				<description> The value to apply to the attribute</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Whether or not to suppress change events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the value was set.</return-description>
		</method>
		<method name="fireBeforeChangeEvent" scope="instance">
			<description>Fires the attribute's beforeChange event.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name.</description>
			</parameter>
			<parameter name="e" type="Obj" usage="required">
				<description> The event object to pass to handlers.</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetValue" scope="instance">
			<description>Resets the specified attribute's value to its initial value.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The name of the attribute</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Whether or not to suppress change events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the value was set</return-description>
		</method>
		<method name="get" scope="instance">
			<description>Returns the current value of the attribute.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute whose value will be returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any" />
			</return-types>
			<return-description>The current value of the attribute.</return-description>
		</method>
		<method name="setAttributeConfig" scope="instance">
			<description>Sets or updates an Attribute instance's properties.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name.</description>
			</parameter>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of attribute properties</description>
			</parameter>
			<parameter name="init" type="Boolean" usage="required">
				<description> Whether or not this should become the intial config.</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetAttributeConfig" scope="instance" visibility="private">
			<description>Resets an attribute to its intial configuration.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="register" scope="instance">
			<description>Adds an Attribute to the AttributeProvider instance.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name</description>
			</parameter>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map containing the attribute's properties.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAttributeConfig" scope="instance" visibility="private">
			<description>Returns the attribute's properties.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>A key-value map containing all of the
attribute's properties.</return-description>
		</method>
		<method name="refresh" scope="instance">
			<description>Sets the attribute's value to its current value.</description>
			<parameters>
			<parameter name="key" type="String | Array" usage="required">
				<description> The attribute(s) to refresh</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Whether or not to suppress change events</description>
			</parameter>
			</parameters>
		</method>
		<method name="configureAttribute" scope="instance">
			<description>Sets or updates an Attribute instance's properties.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name.</description>
			</parameter>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of attribute properties</description>
			</parameter>
			<parameter name="init" type="Boolean" usage="required">
				<description> Whether or not this should become the intial config.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getAttributeKeys" scope="instance">
			<description>Returns an array of attribute names.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of attribute names.</return-description>
		</method>
		<method name="fireChangeEvent" scope="instance">
			<description>Fires the attribute's change event.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> The attribute's name.</description>
			</parameter>
			<parameter name="e" type="Obj" usage="required">
				<description> The event object to pass to the handlers.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setAttributes" scope="instance">
			<description>Sets multiple attribute values.</description>
			<parameters>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of attributes</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> Whether or not to suppress change events</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Column">
		<description>The Column class defines and manages attributes of DataTable Columns</description>
		<constructors>
		<constructor scope="instance">
			<description>The Column class defines and manages attributes of DataTable Columns</description>
			<return-types>
				<return-type type="YAHOO.widget.Column" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  Object literal of definitions.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="sortOptions.sortFunction" type="Function" scope="instance">
			<description>Custom sort handler. Signature: sortFunction(a, b, desc, field) where field is the sortOptions.field value</description>
		</property>
		<property name="_nTreeIndex" type="Number" scope="instance" visibility="private">
			<description>Reference to Column's current position index within its ColumnSet's tree array, if applicable. This property only applies to non-nested and top- level parent Columns.</description>
		</property>
		<property name="_elResizer" type="HTMLElement" scope="instance" visibility="private">
			<description>The DOM reference to the associated resizerelement (if any).</description>
		</property>
		<property name="sortOptions.defaultOrder" type="undefined" scope="instance"/>
		<property name="resizeable" type="Boolean" scope="instance">
			<description>True if Column is resizeable, false otherwise. The Drag &amp; Drop Utility is required to enable this feature. Only bottom-level and non-nested Columns are resizeble.</description>
		</property>
		<property name="children" type="Object[]" scope="instance">
			<description>Array of object literals that define children (nested headers) of a Column.</description>
		</property>
		<property name="dropdownOptions" type="String[] | Object[]" scope="instance">
			<description>Array of dropdown values for formatter:&quot;dropdown&quot; cases. Can either be a simple array (e.g., [&quot;Alabama&quot;,&quot;Alaska&quot;,&quot;Arizona&quot;,&quot;Arkansas&quot;]) or a an array of objects (e.g., [{label:&quot;Alabama&quot;, value:&quot;AL&quot;}, {label:&quot;Alaska&quot;, value:&quot;AK&quot;}, {label:&quot;Arizona&quot;, value:&quot;AZ&quot;}, {label:&quot;Arkansas&quot;, value:&quot;AR&quot;}]).</description>
		</property>
		<property name="_elThLiner" type="HTMLElement" scope="instance" visibility="private">
			<description>The DOM reference to the associated TH element's liner DIV element.</description>
		</property>
		<property name="_elTh" type="HTMLElement" scope="instance" visibility="private">
			<description>The DOM reference to the associated TH element.</description>
		</property>
		<property name="width" type="Number" scope="instance">
			<description>Column width (in pixels).</description>
		</property>
		<property name="sortOptions.field" type="String" scope="instance">
			<description>Custom field to sort on.</description>
		</property>
		<property name="selected" type="Boolean" scope="instance">
			<description>True if Column is in selected state.</description>
		</property>
		<property name="sortOptions.defaultDir" type="String" scope="instance">
			<description>Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC.</description>
		</property>
		<property name="label" type="String" scope="instance">
			<description>Text or HTML for display as Column's label in the TH element.</description>
		</property>
		<property name="minWidth" type="Number" scope="instance">
			<description>Minimum Column width (in pixels).</description>
		</property>
		<property name="field" type="String" scope="instance">
			<description>Associated database field, or null.</description>
		</property>
		<property name="editor" type="YAHOO.widget.CellEditor" scope="instance">
			<description>A CellEditor instance, otherwise Column is not editable.</description>
		</property>
		<property name="_nRowspan" type="Number" scope="instance" visibility="private">
			<description>Number of table rows the Column spans.</description>
		</property>
		<property name="_nColspan" type="Number" scope="instance" visibility="private">
			<description>Number of table cells the Column spans.</description>
		</property>
		<property name="formatter" type="String || HTMLFunction" scope="instance">
			<description>Defines a format function.</description>
		</property>
		<property name="Column._nCount" type="Number" scope="static" visibility="private">
			<description>Internal class variable to index multiple Column instances.</description>
		</property>
		<property name="_dd" type="YAHOO.util.DragDrop" scope="instance" visibility="private">
			<description>For unreg() purposes, a reference to the Column's DragDrop instance.</description>
		</property>
		<property name="currencyOptions" type="Object" scope="instance">
			<description>Config passed to YAHOO.util.Number.format() by the 'currency' Column formatter.</description>
		</property>
		<property name="_nKeyIndex" type="Number" scope="instance" visibility="private">
			<description>Reference to Column's current position index within its ColumnSet's keys array, if applicable. This property only applies to non-nested and bottom- level child Columns.</description>
		</property>
		<property name="abbr" type="String" scope="instance">
			<description>Column head cell ABBR for accessibility.</description>
		</property>
		<property name="key" type="String" scope="instance">
			<description>Unique name, required.</description>
		</property>
		<property name="hidden" type="Boolean" scope="instance">
			<description>True if Column is in hidden state.</description>
		</property>
		<property name="_elThLabel" type="HTMLElement" scope="instance" visibility="private">
			<description>The DOM reference to the associated TH element's label SPAN element.</description>
		</property>
		<property name="_ddResizer" type="YAHOO.util.DragDrop" scope="instance" visibility="private">
			<description>For unreg() purposes, a reference to the Column resizer's DragDrop instance.</description>
		</property>
		<property name="sortable" type="Boolean" scope="instance">
			<description>True if Column is sortable, false otherwise.</description>
		</property>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Unique String identifier assigned at instantiation.</description>
		</property>
		<property name="className" type="String || String[]" scope="instance">
			<description>Custom CSS class or array of classes to be applied to every cell in the Column.</description>
		</property>
		<property name="dateOptions" type="Object" scope="instance">
			<description>Config passed to YAHOO.util.Date.format() by the 'date' Column formatter.</description>
		</property>
		<property name="_nWidth" type="Number" scope="instance" visibility="private">
			<description>Internal width tracker.</description>
		</property>
		<property name="_oParent" type="YAHOO.widget.Column" scope="instance" visibility="private">
			<description>Column's parent Column instance, or null.</description>
		</property>
		<property name="maxAutoWidth" type="Number" scope="instance">
			<description>When a width is not defined for a Column, maxAutoWidth defines an upper limit that the Column should be auto-sized to. If resizeable is enabled, users may still resize to a greater width. Most useful for Columns intended to hold long unbroken, unwrapped Strings, such as URLs, to prevent very wide Columns from disrupting visual readability by inducing truncation.</description>
		</property>
		</properties>
		<methods>
		<method name="getSanitizedKey" scope="instance">
			<description>Returns Column key which has been sanitized for DOM (class and ID) usage starts with letter, contains only letters, numbers, hyphen, or period.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Sanitized Column key.</return-description>
		</method>
		<method name="getTreeIndex" scope="instance">
			<description>Public accessor returns Column's current position index within its ColumnSet's tree array, if applicable. Only non-nested and top-level parent Columns will return a value;</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Position index, or null.</return-description>
		</method>
		<method name="getParent" scope="instance">
			<description>Public accessor returns Column's parent instance if any, or null otherwise.</description>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column's parent instance.</return-description>
		</method>
		<method name="getField" scope="instance">
			<description>Returns field.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Column field.</return-description>
		</method>
		<method name="getDefinition" scope="instance">
			<description>Returns object literal definition.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal definition.</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>Returns unique ID string.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique ID string.</return-description>
		</method>
		<method name="getKey" scope="instance">
			<description>Returns unique Column key.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Column key.</return-description>
		</method>
		<method name="getKeyIndex" scope="instance">
			<description>Public accessor returns Column's current position index within its ColumnSet's keys array, if applicable. Only non-nested and bottom-level child Columns will return a value.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Position index, or null.</return-description>
		</method>
		<method name="getColspan" scope="instance">
			<description>Public accessor returns Column's calculated COLSPAN value.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Column's COLSPAN value.</return-description>
		</method>
		<method name="getRowspan" scope="instance">
			<description>Public accessor returns Column's calculated ROWSPAN value.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Column's ROWSPAN value.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Column instance name, for logging.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Column's unique name.</return-description>
		</method>
		<method name="getColEl" scope="instance">
		</method>
		<method name="getThLInerEl" scope="instance">
			<description>Returns DOM reference to the TH's liner DIV element. Introduced since resizeable Columns may have an extra resizer liner, making the DIV liner not reliably the TH element's first child.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>TH element.</return-description>
		</method>
		<method name="getThEl" scope="instance">
			<description>Returns DOM reference to the key TH element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>TH element.</return-description>
		</method>
		<method name="getResizerEl" scope="instance">
			<description>Returns DOM reference to the resizer element, or null.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>DIV element.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.LocalDataSource" superclass="YAHOO.util.DataSourceBase">
		<description>LocalDataSource class for in-memory data structs including JavaScript arrays,
JavaScript object literals (JSON), XML documents, and HTML tables.</description>
		<constructors>
		<constructor scope="instance">
			<description>LocalDataSource class for in-memory data structs including JavaScript arrays,
JavaScript object literals (JSON), XML documents, and HTML tables.</description>
			<return-types>
				<return-type type="YAHOO.util.LocalDataSource" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.env.ua">
		<description>Do not fork for a browser if it can be avoided.  Use feature detection when
you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version
number for the browser engine, 0 otherwise.  This value may or may not map
to the version number of the browser using the engine.  The value is 
presented as a float so that it can easily be used for boolean evaluation 
as well as for looking for a particular range of versions.  Because of this, 
some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 
reports 1.8).</description>
		<properties>
		<property name="secure" type="boolean" scope="static">
			<description>Set to true if the page appears to be in SSL</description>
		</property>
		<property name="opera" type="float" scope="instance">
			<description>Opera version number or 0. Example: 9.2</description>
		</property>
		<property name="ie" type="float" scope="instance">
			<description>Internet Explorer version number or 0. Example: 6</description>
		</property>
		<property name="air" type="float" scope="instance">
			<description>Adobe AIR version number or 0. Only populated if webkit is detected. Example: 1.0</description>
		</property>
		<property name="mobile" type="string" scope="instance">
			<description>The mobile property will be set to a string containing any relevant user agent information when a modern mobile browser is detected. Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series devices with the WebKit-based browser, and Opera Mini.</description>
		</property>
		<property name="caja" type="float" scope="instance">
			<description>Google Caja version number or 0.</description>
		</property>
		<property name="os" type="string" scope="static">
			<description>The operating system. Currently only detecting windows or macintosh</description>
		</property>
		<property name="webkit" type="float" scope="instance">
			<description>AppleWebKit version. KHTML browsers that are not WebKit browsers will evaluate to 1, other browsers 0. Example: 418.9.1 &lt;pre&gt; Safari 1.3.2 (312.6): 312.8.1 &lt;-- Reports 312.8 -- currently the latest available for Mac OSX 10.3. Safari 2.0.2:     416   &lt;-- hasOwnProperty introduced Safari 2.0.4:     418   &lt;-- preventDefault fixed Safari 2.0.4 (419.3): 418.9.1 &lt;-- One version of Safari may run different versions of webkit Safari 2.0.4 (419.3): 419   &lt;-- Tiger installations that have been updated, but not updated to the latest patch. Webkit 212 nightly:  522+  &lt;-- Safari 3.0 precursor (with native SVG and many major issues fixed).  3.x yahoo.com, flickr:422   &lt;-- Safari 3.x hacks the user agent string when hitting yahoo.com and flickr.com. Safari 3.0.4 (523.12):523.12 &lt;-- First Tiger release - automatic update from 2.x via the 10.4.11 OS patch Webkit nightly 1/2008:525+  &lt;-- Supports DOMContentLoaded event. yahoo.com user agent hack removed. &lt;/pre&gt; http://developer.apple.com/internet/safari/uamatrix.html</description>
		</property>
		<property name="gecko" type="float" scope="instance">
			<description>Gecko engine revision number. Will evaluate to 1 if Gecko is detected but the revision could not be found. Other browsers will be 0. Example: 1.8 &lt;pre&gt; Firefox 1.0.0.4: 1.7.8  &lt;-- Reports 1.7 Firefox 1.5.0.9: 1.8.0.9 &lt;-- Reports 1.8 Firefox 2.0.0.3: 1.8.1.3 &lt;-- Reports 1.8 Firefox 3 alpha: 1.9a4  &lt;-- Reports 1.9 &lt;/pre&gt;</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.StorageManager">
		<description>The StorageManager class is a singleton that registers DataStorage objects and returns instances of those objects.</description>
		<properties>
		<property name="LOCATION_SESSION" type="{String}" scope="static">
			<description>The storage location - session; data cleared at the end of a user's session.</description>
		</property>
		<property name="LOCATION_LOCAL" type="{String}" scope="static">
			<description>The storage location - local; data cleared on demand.</description>
		</property>
		</properties>
		<methods>
		<method name="register" scope="static">
			<description>Registers a engineType Class with the StorageManager singleton; first in is the first out.</description>
			<parameters>
			<parameter name="engineConstructor" type="Function" usage="required">
				<description> Required. The engine constructor function, see engines.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>When successfully registered.</return-description>
		</method>
		<method name="_getClass" scope="instance" visibility="private">
			<description>Fetches a storage constructor if it is available, otherwise returns NULL.</description>
			<parameters>
			<parameter name="klass" type="Function" usage="required">
				<description> Required. The storage constructor to test.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>An available storage constructor or NULL.</return-description>
		</method>
		<method name="_getStorageEngine" scope="instance" visibility="private">
			<description>Fetches the storage engine from the cache, or creates and caches it.</description>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description> Required. The location to store.</description>
			</parameter>
			<parameter name="klass" type="Function" usage="required">
				<description> Required. A pointer to the engineType Class.</description>
			</parameter>
			<parameter name="conf" type="Object" usage="optional">
				<description> Optional. Additional configuration for the data source engine.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getValidLocation" scope="instance" visibility="private">
			<description>Ensures that the location is valid before returning it or a default value.</description>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description> Required. The location to evaluate.</description>
			</parameter>
			</parameters>
		</method>
		<method name="get" scope="static">
			<description>Fetches the desired engine type or first available engine type.</description>
			<parameters>
			<parameter name="engineType" type="String" usage="optional">
				<description> Optional. The engine type, see engines.</description>
			</parameter>
			<parameter name="location" type="String" usage="optional">
				<description> Optional. The storage location - LOCATION_SESSION &amp; LOCATION_LOCAL; default is LOCAL.</description>
			</parameter>
			<parameter name="conf" type="Object} Optional. Additional configuration for the getting the storage engine. { engine: {Object} configuration parameters for the desired engine order: {Array} an array of storage engine names; the desired order to try engines} " usage="required"/>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.PieSeries">
		<description>PieSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>PieSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.PieSeries" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="categoryField" type="String" scope="instance">
			<description>The field used to access the category value from the items from the data source.</description>
		</property>
		<property name="labelFunction" type="String" scope="instance">
			<description>A string reference to the globally-accessible function that may be called to determine each of the label values for this series. Also accepts function references.</description>
		</property>
		<property name="dataField" type="String" scope="instance">
			<description>The field used to access the data value from the items from the data source.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.ScrollingDataTable" superclass="YAHOO.widget.DataTable">
		<description>The ScrollingDataTable class extends the DataTable class to provide
functionality for x-scrolling, y-scrolling, and xy-scrolling.</description>
		<constructors>
		<constructor scope="instance">
			<description>The ScrollingDataTable class extends the DataTable class to provide
functionality for x-scrolling, y-scrolling, and xy-scrolling.</description>
			<return-types>
				<return-type type="YAHOO.widget.ScrollingDataTable" />
			</return-types>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description>  Container element for the TABLE.</description>
			</parameter>
			<parameter name="aColumnDefs" type="Object[]" usage="required">
				<description>  Array of object literal Column definitions.</description>
			</parameter>
			<parameter name="oDataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DataTable.CLASS_BODY" type="String" scope="static">
			<description>Class name assigned to inner DataTable body container.</description>
		</property>
		<property name="_elBdThead" type="HTMLElement" scope="instance" visibility="private">
			<description>Body THEAD element.</description>
		</property>
		<property name="DataTable.CLASS_HEADER" type="String" scope="static">
			<description>Class name assigned to inner DataTable header container.</description>
		</property>
		<property name="_elHdContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>Container for fixed header TABLE element.</description>
		</property>
		<property name="_elHdTable" type="HTMLElement" scope="instance" visibility="private">
			<description>Fixed header TABLE element.</description>
		</property>
		<property name="_bScrollbarX" type="Boolean" scope="instance" visibility="private">
			<description>True if x-scrollbar is currently visible.</description>
		</property>
		<property name="_elTmpTable" type="HTMLElement" scope="instance" visibility="private">
			<description>Offscreen TABLE element for auto-width calculation.</description>
		</property>
		<property name="_elBdContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>Container for scrolling body TABLE element.</description>
		</property>
		<property name="_elTmpContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>Offscreen container to temporarily clone SDT for auto-width calculation.</description>
		</property>
		</properties>
		<methods>
		<method name="_onTheadKeydown" scope="instance" visibility="private">
			<description>Handles keydown events on the THEAD element.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The key event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.ScrollingDataTable" usage="required">
				<description> ScrollingDataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onColumnChange" scope="instance">
			<description>Handles Column mutations</description>
			<parameters>
			<parameter name="oArgs" type="Object" usage="required">
				<description> Custom Event data.</description>
			</parameter>
			</parameters>
		</method>
		<method name="scrollTo" scope="instance">
			<description>Scrolls to given row or cell</description>
			<parameters>
			<parameter name="to" type="YAHOO.widget.Record | HTMLElement " usage="required">
				<description> Itme to scroll to.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setColumnWidth" scope="instance">
			<description>Sets given Column to given pixel width. If new width is less than minWidth width, sets to minWidth. Updates oColumn.width value.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="nWidth" type="Number" usage="required">
				<description> New width in pixels.</description>
			</parameter>
			</parameters>
		</method>
		<method name="validateColumnWidths" scope="instance">
			<description>For one or all Columns of a ScrollingDataTable, when Column is not hidden, and width is not set, syncs widths of header and body cells and validates that width against minWidth and/or maxAutoWidth as necessary.</description>
			<parameters>
			<parameter name="oArg.column" type="YAHOO.widget.Column" usage="optional">
				<description> (optional) One Column to validate. If null, all Columns' widths are validated.</description>
			</parameter>
			</parameters>
		</method>
		<method name="insertColumn" scope="instance">
			<description>Inserts given Column at the index if given, otherwise at the end. NOTE: You can only add non-nested Columns and top-level parent Columns. You cannot add a nested Column to an existing parent.</description>
			<parameters>
			<parameter name="oColumn" type="Object | YAHOO.widget.Column" usage="required">
				<description> Object literal Column definition or a Column instance.</description>
			</parameter>
			<parameter name="index" type="Number" usage="optional">
				<description> (optional) New tree index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>oColumn  Inserted Column instance.</return-description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Implementation of Element's abstract method. Sets up config values.</description>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description> (Optional) Object literal definition of configuration values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateColumnWidth" scope="instance" visibility="private">
			<description>Helper function calculates and sets a validated width for a Column in a ScrollingDataTable.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="elTd" type="HTMLElement" usage="required">
				<description> TD element to validate against.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncScrollY" scope="instance" visibility="private">
			<description>Snaps container width for y-scrolling tables.</description>
		</method>
		<method name="_syncScrollX" scope="instance" visibility="private">
			<description>Snaps container height for x-scrolling tables in IE. Syncs message TBODY width.</description>
		</method>
		<method name="_initBdThEl" scope="instance" visibility="private">
			<description>Populates TH element for the body THEAD element.</description>
			<parameters>
			<parameter name="elTh" type="HTMLElement" usage="required">
				<description> TH element reference.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_destroyBdTheadEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable body THEAD element, if available.</description>
		</method>
		<method name="_initTableEl" scope="instance" visibility="private">
			<description>Initializes ScrollingDataTable TABLE elements into the two inner containers.</description>
		</method>
		<method name="_initTheadEl" scope="instance" visibility="private">
			<description>Initializes ScrollingDataTable THEAD elements into the two inner containers.</description>
			<parameters>
			<parameter name="elHdTable" type="HTMLElement" usage="optional">
				<description> (optional) Fixed header TABLE element reference.</description>
			</parameter>
			<parameter name="elTable" type="HTMLElement" usage="optional">
				<description> (optional) TABLE element reference.</description>
			</parameter>
			</parameters>
		</method>
		<method name="showTableMessage" scope="instance">
			<description>Displays message within secondary TBODY.</description>
			<parameters>
			<parameter name="sHTML" type="String" usage="optional">
				<description> (optional) Value for innerHTMlang.</description>
			</parameter>
			<parameter name="sClassName" type="String" usage="optional">
				<description> (optional) Classname.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focusEl" scope="instance" visibility="private">
			<description>Sets focus on the given element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> Element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_destroyHdTableEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable head TABLE element, if available.</description>
		</method>
		<method name="getHdTableEl" scope="instance">
			<description>Returns DOM reference to the DataTable's fixed header TABLE element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TABLE element.</return-description>
		</method>
		<method name="clearScrollPositions" scope="instance" visibility="private">
			<description>Clears stored scroll positions to interrupt the automatic restore mechanism. Useful for setting scroll positions programmatically rather than as part of the post-render cleanup process.</description>
		</method>
		<method name="getBdContainerEl" scope="instance">
			<description>Returns DOM reference to the DataTable's scrolling body container element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to DIV element.</return-description>
		</method>
		<method name="_initDomElements" scope="instance" visibility="private">
			<description>Initializes DOM elements for a ScrollingDataTable, including creation of two separate TABLE elements.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement | String} HTML DIV element by reference|ID. return {Boolean" usage="required">
				<description> False in case of error, otherwise true</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncScroll" scope="instance" visibility="private">
			<description>Syncs padding around scrollable tables, including Column header right-padding and container width and height.</description>
		</method>
		<method name="disable" scope="instance">
			<description>Disables ScrollingDataTable UI.</description>
		</method>
		<method name="_setOverhangValue" scope="instance" visibility="private">
			<description>Sets Column header overhang to given width.</description>
			<parameters>
			<parameter name="nBorderWidth" type="Number" usage="required">
				<description> Value of new border for overhang.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initCaptionEl" scope="instance" visibility="private">
			<description>Creates HTML markup CAPTION element.</description>
			<parameters>
			<parameter name="sCaption" type="String" usage="required">
				<description> Text for caption.</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeColumn" scope="instance">
			<description>Removes given Column. NOTE: You cannot remove nested Columns. You can only remove non-nested Columns, and top-level parent Columns (which will remove all children Columns).</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>oColumn  Removed Column instance.</return-description>
		</method>
		<method name="_runRenderChain" scope="instance" visibility="private">
			<description>Internal wrapper calls run() on render Chain instance.</description>
		</method>
		<method name="_destroyContainerEl" scope="instance" visibility="private">
			<description>Destroy's the DataTable outer and inner container elements, if available.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description> Reference to the container element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getBdTableEl" scope="instance">
			<description>Returns DOM reference to the DataTable's scrolling body TABLE element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to TABLE element.</return-description>
		</method>
		<method name="getHdContainerEl" scope="instance">
			<description>Returns DOM reference to the DataTable's fixed header container element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Reference to DIV element.</return-description>
		</method>
		<method name="_onScroll" scope="instance" visibility="private">
			<description>Syncs scrolltop and scrollleft of all TABLEs.</description>
			<parameters>
			<parameter name="e" type="HTMLEvent" usage="required">
				<description> The scroll event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.ScrollingDataTable" usage="required">
				<description> ScrollingDataTable instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_retoreScrollPositions" scope="instance" visibility="private">
			<description>Restores scroll positions to stored value.</description>
		</method>
		<method name="_initBdTheadEl" scope="instance" visibility="private">
			<description>Initializes body THEAD element.</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create THEAD.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Initialized THEAD element.</return-description>
		</method>
		<method name="_initTbodyEl" scope="instance" visibility="private">
			<description>Initializes ScrollingDataTable TBODY element for data</description>
			<parameters>
			<parameter name="elTable" type="HTMLElement" usage="required">
				<description> TABLE element into which to create TBODY .</description>
			</parameter>
			</parameters>
		</method>
		<method name="_storeScrollPositions" scope="instance" visibility="private">
			<description>Stores scroll positions so they can be restored after a render.</description>
		</method>
		<method name="_initContainerEl" scope="instance" visibility="private">
			<description>Initializes the DataTable outer container element and creates inner header and body container elements.</description>
			<parameters>
			<parameter name="elContainer" type="HTMLElement | String" usage="required">
				<description> HTML DIV element by reference or ID.</description>
			</parameter>
			</parameters>
		</method>
		<method name="reorderColumn" scope="instance">
			<description>Removes given Column and inserts into given tree index. NOTE: You can only reorder non-nested Columns and top-level parent Columns. You cannot reorder a nested Column to an existing parent.</description>
			<parameters>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column instance.</description>
			</parameter>
			<parameter name="index" type="Number" usage="required">
				<description> New tree index.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initThEl" scope="instance" visibility="private">
			<description>SDT changes ID so as not to duplicate the accessibility TH IDs.</description>
			<parameters>
			<parameter name="elTh" type="HTMLElement" usage="required">
				<description> TH element reference.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description> Column object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncScrollOverhang" scope="instance" visibility="private">
			<description>Adds/removes Column header overhang as necesary.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO_config">
		<description>YAHOO_config is not included as part of the library.  Instead it is an 
object that can be defined by the implementer immediately before 
including the YUI library.  The properties included in this object
will be used to configure global properties needed as soon as the 
library begins to load.</description>
		<properties>
		<property name="listener" type="Function" scope="static">
			<description>A reference to a function that will be executed every time a YAHOO module is loaded. As parameter, this function will receive the version information for the module. See YAHOO.env.getVersion for the description of the version data structure.</description>
		</property>
		<property name="load" type="undefined" scope="static">
			<description>Instructs the yuiloader component to dynamically load yui components and their dependencies. See the yuiloader documentation for more information about dynamic loading</description>
		</property>
		<property name="locale" type="string" scope="static">
			<description>Forces the use of the supplied locale where applicable in the library</description>
		</property>
		<property name="injecting" type="boolean" scope="static">
			<description>Set to true if the library will be dynamically loaded after window.onload. Defaults to false</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.FunctionDataSource" superclass="YAHOO.util.DataSourceBase">
		<description>FunctionDataSource class for JavaScript functions.</description>
		<constructors>
		<constructor scope="instance">
			<description>FunctionDataSource class for JavaScript functions.</description>
			<return-types>
				<return-type type="YAHOO.util.FunctionDataSource" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="scope" type="Object" scope="instance">
			<description>Context in which to execute the function. By default, is the DataSource instance itself. If set, the function will receive the DataSource instance as an additional argument.</description>
		</property>
		</properties>
		<methods>
		<method name="makeConnection" scope="instance">
			<description>Overriding method passes query to a function. The returned response is then forwarded to the handleResponse function.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object literal.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.DateMath">
		<description>YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility
used for adding, subtracting, and comparing dates.</description>
		<properties>
		<property name="WEEK" type="String" scope="static">
			<description>Constant field representing Week</description>
		</property>
		<property name="YEAR" type="String" scope="static">
			<description>Constant field representing Year</description>
		</property>
		<property name="MONTH" type="String" scope="static">
			<description>Constant field representing Month</description>
		</property>
		<property name="ONE_DAY_MS" type="Number" scope="static">
			<description>Constant field representing one day, in milliseconds</description>
		</property>
		<property name="WEEK_ONE_JAN_DATE" type="Number" scope="static">
			<description>Constant field representing the date in first week of January which identifies the first week of the year. &lt;p&gt; In the U.S, Jan 1st is normally used based on a Sunday start of week. ISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week. &lt;/p&gt;</description>
		</property>
		<property name="DAY" type="String" scope="static">
			<description>Constant field representing Day</description>
		</property>
		</properties>
		<methods>
		<method name="isYearOverlapWeek" scope="instance">
			<description>Determines if a given week overlaps two different years.</description>
			<parameters>
			<parameter name="weekBeginDate" type="Date" usage="required">
				<description> The JavaScript Date representing the first day of the week.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date overlaps two different years.</return-description>
		</method>
		<method name="getWeekNumber" scope="instance">
			<description>Calculates the week number for the given date. Can currently support standard U.S. week numbers, based on Jan 1st defining the 1st week of the year, and ISO8601 week numbers, based on Jan 4th defining the 1st week of the year.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript date for which to find the week number</description>
			</parameter>
			<parameter name="firstDayOfWeek" type="Number" usage="required">
				<description> The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat). Defaults to 0</description>
			</parameter>
			<parameter name="janDate" type="Number" usage="required">
				<description> The date in the first week of January which defines week one for the year Defaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st). For the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The number of the week containing the given date.</return-description>
		</method>
		<method name="getDayOffset" scope="instance">
			<description>Calculates the number of days the specified date is from January 1 of the specified calendar year. Passing January 1 to this function would return an offset value of zero.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript date for which to find the offset</description>
			</parameter>
			<parameter name="calendarYear" type="Number" usage="required">
				<description> The calendar year to use for determining the offset</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The number of days since January 1 of the given year</return-description>
		</method>
		<method name="findMonthEnd" scope="instance">
			<description>Gets the last day of a month containing a given date.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date used to calculate the month end</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The JavaScript Date representing the last day of the month</return-description>
		</method>
		<method name="getFirstDayOfWeek" scope="instance">
			<description>Get the first day of the week, for the give date.</description>
			<parameters>
			<parameter name="dt" type="Date" usage="required">
				<description> The date in the week for which the first day is required.</description>
			</parameter>
			<parameter name="startOfWeek" type="Number" usage="required">
				<description> The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The first day of the week</return-description>
		</method>
		<method name="after" scope="instance">
			<description>Determines whether a given date is after another date on the calendar.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The Date object to compare with the compare argument</description>
			</parameter>
			<parameter name="compareTo" type="Date" usage="required">
				<description> The Date object to use for the comparison</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date occurs after the compared date; false if not.</return-description>
		</method>
		<method name="clearTime" scope="instance">
			<description>Clears the time fields from a given date, effectively setting the time to 12 noon.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date for which the time fields will be cleared</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The JavaScript Date cleared of all time fields</return-description>
		</method>
		<method name="isMonthOverlapWeek" scope="instance">
			<description>Determines if a given week overlaps two different months.</description>
			<parameters>
			<parameter name="weekBeginDate" type="Date" usage="required">
				<description> The JavaScript Date representing the first day of the week.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date overlaps two different months.</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Adds the specified amount of time to the this instance.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date object to perform addition on</description>
			</parameter>
			<parameter name="field" type="String" usage="required">
				<description> The field constant to be used for performing addition.</description>
			</parameter>
			<parameter name="amount" type="Number" usage="required">
				<description> The number of units (measured in the field constant) to add to the date.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The resulting Date object</return-description>
		</method>
		<method name="getJan1" scope="instance">
			<description>Retrieves a JavaScript Date object representing January 1 of any given year.</description>
			<parameters>
			<parameter name="calendarYear" type="Number" usage="required">
				<description> The calendar year for which to retrieve January 1</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>January 1 of the calendar year specified.</return-description>
		</method>
		<method name="between" scope="instance">
			<description>Determines whether a given date is between two other dates on the calendar.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The date to check for</description>
			</parameter>
			<parameter name="dateBegin" type="Date" usage="required">
				<description> The start of the range</description>
			</parameter>
			<parameter name="dateEnd" type="Date" usage="required">
				<description> The end of the range</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date occurs between the compared dates; false if not.</return-description>
		</method>
		<method name="findMonthStart" scope="instance">
			<description>Gets the first day of a month containing a given date.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date used to calculate the month start</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The JavaScript Date representing the first day of the month</return-description>
		</method>
		<method name="getDate" scope="instance">
			<description>Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object are set to 0. The method allows Date instances to be created with the a year less than 100. &quot;new Date(year, month, date)&quot; implementations set the year to 19xx if a year (xx) which is less than 100 is provided. &lt;p&gt; &lt;em&gt;NOTE:&lt;/em&gt;Validation on argument values is not performed. It is the caller's responsibility to ensure arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor. &lt;/p&gt;</description>
			<parameters>
			<parameter name="y" type="Number" usage="required">
				<description> Year.</description>
			</parameter>
			<parameter name="m" type="Number" usage="required">
				<description> Month index from 0 (Jan) to 11 (Dec).</description>
			</parameter>
			<parameter name="d" type="Number" usage="optional">
				<description> (optional) Date from 1 to 31. If not provided, defaults to 1.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The JavaScript date object with year, month, date set as provided.</return-description>
		</method>
		<method name="subtract" scope="instance">
			<description>Subtracts the specified amount of time from the this instance.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date object to perform subtraction on</description>
			</parameter>
			<parameter name="field" type="Number" usage="required">
				<description> The this field constant to be used for performing subtraction.</description>
			</parameter>
			<parameter name="amount" type="Number" usage="required">
				<description> The number of units (measured in the field constant) to subtract from the date.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The resulting Date object</return-description>
		</method>
		<method name="_addDays" scope="instance" visibility="private">
			<description>Private helper method to account for bug in Safari 2 (webkit &lt; 420) when Date.setDate(n) is called with n less than -128 or greater than 127. &lt;p&gt; Fix approach and original findings are available here: http://brianary.blogspot.com/2006/03/safari-date-bug.html &lt;/p&gt;</description>
			<parameters>
			<parameter name="d" type="Date" usage="required">
				<description> JavaScript date object</description>
			</parameter>
			<parameter name="nDays" type="Number" usage="required">
				<description> The number of days to add to the date object (can be negative)</description>
			</parameter>
			</parameters>
		</method>
		<method name="before" scope="instance">
			<description>Determines whether a given date is before another date on the calendar.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The Date object to compare with the compare argument</description>
			</parameter>
			<parameter name="compareTo" type="Date" usage="required">
				<description> The Date object to use for the comparison</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date occurs before the compared date; false if not.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DateLocale">
		<description>The DateLocale class is a container and base class for all
localised date strings used by YAHOO.util.Date. It is used
internally, but may be extended to provide new date localisations.
To create your own DateLocale, follow these steps:
&lt;ol&gt;
&lt;li&gt;Find an existing locale that matches closely with your needs&lt;/li&gt;
&lt;li&gt;Use this as your base class.  Use YAHOO.util.DateLocale if nothing
matches.&lt;/li&gt;
&lt;li&gt;Create your own class as an extension of the base class using
YAHOO.lang.merge, and add your own localisations where needed.&lt;/li&gt;
&lt;/ol&gt;
See the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']
classes which extend YAHOO.util.DateLocale['en'].
For example, to implement locales for French french and Canadian french,
we would do the following:
&lt;ol&gt;
&lt;li&gt;For French french, we have no existing similar locale, so use
YAHOO.util.DateLocale as the base, and extend it:
&lt;pre&gt;
YAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {
a: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],
A: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],
b: ['jan', 'f&amp;eacute;v', 'mar', 'avr', 'mai', 'jun', 'jui', 'ao&amp;ucirc;', 'sep', 'oct', 'nov', 'd&amp;eacute;c'],
B: ['janvier', 'f&amp;eacute;vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao&amp;ucirc;t', 'septembre', 'octobre', 'novembre', 'd&amp;eacute;cembre'],
c: '%a %d %b %Y %T %Z',
p: ['', ''],
P: ['', ''],
x: '%d.%m.%Y',
X: '%T'
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;For Canadian french, we start with French french and change the meaning of \%x:
&lt;pre&gt;
YAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {
x: '%Y-%m-%d'
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
With that, you can use your new locales:
&lt;pre&gt;
var d = new Date(&quot;2008/04/22&quot;);
YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr&quot;);
&lt;/pre&gt;
will return:
&lt;pre&gt;
mardi, 22 avril == 22.04.2008
&lt;/pre&gt;
And
&lt;pre&gt;
YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr-CA&quot;);
&lt;/pre&gt;
Will return:
&lt;pre&gt;
mardi, 22 avril == 2008-04-22
&lt;/pre&gt;</description>
	</class>
	<class type="YAHOO.util.StorageEngineKeyed">
		<description>The StorageEngineKeyed class implements the interface necessary for managing keys.</description>
		<constructors>
		<constructor scope="instance">
			<description>The StorageEngineKeyed class implements the interface necessary for managing keys.</description>
			<return-types>
				<return-type type="YAHOO.util.StorageEngineKeyed" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_keyMap" type="{Object}" scope="instance">
			<description>A map of keys to their applicable position in keys array. This should never be edited by the developer.</description>
		</property>
		<property name="_keys" type="{Array}" scope="instance">
			<description>A collection of keys applicable to the current location. This should never be edited by the developer.</description>
		</property>
		</properties>
		<methods>
		<method name="_indexOfKey" scope="instance">
			<description>Evaluates if a key exists in the keys array; indexOf does not work in all flavors of IE.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to evaluate.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_removeKey" scope="instance">
			<description>Removes a key from the keys array.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to remove.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addKey" scope="instance">
			<description>Adds the key to the set.</description>
			<parameters>
			<parameter name="key" type="String" usage="required">
				<description> Required. The key to evaluate.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.TestSuite">
		<description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
		<constructors>
		<constructor scope="instance">
			<description>A test suite that can contain a collection of TestCase and TestSuite objects.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestSuite" />
			</return-types>
			<parameters>
			<parameter name="data" type="String||Object" usage="required">
				<description> The name of the test suite or an object containing
a name property as well as setUp and tearDown methods.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the test suite.</description>
		</property>
		</properties>
		<methods>
		<method name="tearDown" scope="instance">
			<description>Function to run after each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="XML" scope="static">
			<description>Returns test results formatted as an XML string.</description>
			<parameters>
			<parameter name="result" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>An XML-formatted string of results.</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Adds a test suite or test case to the test suite.</description>
			<parameters>
			<parameter name="testObject" type="YAHOO.tool.TestSuite||YAHOO.tool.TestCase" usage="required">
				<description> The test suite or test case to add.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="JSON" scope="static">
			<description>Returns test results formatted as a JSON string. Requires JSON utility.</description>
			<parameters>
			<parameter name="result" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>An XML-formatted string of results.</return-description>
		</method>
		<method name="setUp" scope="instance">
			<description>Function to run before each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DragDropMgr.ElementWrapper">
		<description>Inner class for cached elements</description>
		<properties>
		<property name="el" type="undefined" scope="instance">
			<description>The element</description>
		</property>
		<property name="id" type="undefined" scope="instance">
			<description>The element id</description>
		</property>
		<property name="css" type="undefined" scope="instance">
			<description>A reference to the style property</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.LineChart">
		<description>LineChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>LineChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.LineChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.StorageEngineHTML5">
		<description>The StorageEngineHTML5 class implements the HTML5 storage engine.</description>
		<constructors>
		<constructor scope="instance">
			<description>The StorageEngineHTML5 class implements the HTML5 storage engine.</description>
			<return-types>
				<return-type type="YAHOO.util.StorageEngineHTML5" />
			</return-types>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description>  Required. The storage location.</description>
			</parameter>
			<parameter name="conf" type="Object" usage="required">
				<description>  Required. A configuration object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.DualSlider">
		<description>A slider with two thumbs, one that represents the min value and 
the other the max.  Actually a composition of two sliders, both with
the same background.  The constraints for each slider are adjusted
dynamically so that the min value of the max slider is equal or greater
to the current value of the min slider, and the max value of the min
slider is the current value of the max slider.
Constructor assumes both thumbs are positioned absolutely at the 0 mark on
the background.</description>
		<constructors>
		<constructor scope="instance">
			<description>A slider with two thumbs, one that represents the min value and 
the other the max.  Actually a composition of two sliders, both with
the same background.  The constraints for each slider are adjusted
dynamically so that the min value of the max slider is equal or greater
to the current value of the min slider, and the max value of the min
slider is the current value of the max slider.
Constructor assumes both thumbs are positioned absolutely at the 0 mark on
the background.</description>
			<return-types>
				<return-type type="YAHOO.widget.DualSlider" />
			</return-types>
			<parameters>
			<parameter name="minSlider" type="Slider" usage="required">
				<description> The Slider instance used for the min value thumb</description>
			</parameter>
			<parameter name="maxSlider" type="Slider" usage="required">
				<description> The Slider instance used for the max value thumb</description>
			</parameter>
			<parameter name="range" type="int" usage="required">
				<description> The number of pixels the thumbs may move within</description>
			</parameter>
			<parameter name="initVals" type="Array" usage="optional">
				<description> (optional) [min,max] Initial thumb placement</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="maxVal" type="int" scope="instance">
			<description>The current value of the max thumb. &lt;strong&gt;read only&lt;/strong&gt;.</description>
		</property>
		<property name="minRange" type="int" scope="instance">
			<description>Pixel distance to maintain between thumbs.</description>
		</property>
		<property name="minVal" type="int" scope="instance">
			<description>The current value of the min thumb. &lt;strong&gt;read only&lt;/strong&gt;.</description>
		</property>
		<property name="maxSlider" type="Slider" scope="instance">
			<description>A slider instance that keeps track of the upper value of the range. &lt;strong&gt;read only&lt;/strong&gt;</description>
		</property>
		<property name="minSlider" type="Slider" scope="instance">
			<description>A slider instance that keeps track of the lower value of the range. &lt;strong&gt;read only&lt;/strong&gt;</description>
		</property>
		<property name="isHoriz" type="boolean" scope="instance">
			<description>Is the DualSlider oriented horizontally or vertically? &lt;strong&gt;read only&lt;/strong&gt;</description>
		</property>
		<property name="activeSlider" type="Slider" scope="instance">
			<description>The currently active slider (min or max). &lt;strong&gt;read only&lt;/strong&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="_handleSlideStart" scope="instance" visibility="private">
			<description>Executed when one of the sliders fires the slideStart event</description>
		</method>
		<method name="_handleMouseDown" scope="instance">
			<description>Delegates the onMouseDown to the appropriate Slider</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> mouseup event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_oneTimeCallback" scope="instance" visibility="private">
			<description>Schedule an event callback that will execute once, then unsubscribe itself.</description>
			<parameters>
			<parameter name="o" type="EventProvider" usage="required">
				<description> Object to attach the event to</description>
			</parameter>
			<parameter name="evt" type="string" usage="required">
				<description> Name of the event</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> function to execute once</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleSlideEnd" scope="instance" visibility="private">
			<description>Executed when one of the sliders fires the slideEnd event</description>
		</method>
		<method name="_handleDrag" scope="instance" visibility="private">
			<description>Overrides the onDrag method for both sliders</description>
		</method>
		<method name="_bindKeyEvents" scope="instance">
			<description>Set up the listeners for the keydown and keypress events.</description>
		</method>
		<method name="selectActiveSlider" scope="instance" visibility="private">
			<description>A background click will move the slider thumb nearest to the click. Override if you need different behavior.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousedown event</description>
			</parameter>
			</parameters>
		</method>
		<method name="setMinValue" scope="instance">
			<description>Set the min thumb position to a new value.</description>
			<parameters>
			<parameter name="min" type="int" usage="required">
				<description> Pixel offset for min thumb</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="optional">
				<description> (optional) Set to true to skip thumb animation. Default false</description>
			</parameter>
			<parameter name="force" type="boolean" usage="optional">
				<description> (optional) ignore the locked setting and set value anyway. Default false</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="optional">
				<description> (optional) Set to true to skip firing change events. Default false</description>
			</parameter>
			</parameters>
		</method>
		<method name="setMaxValue" scope="instance">
			<description>Set the max thumb position to a new value.</description>
			<parameters>
			<parameter name="max" type="int" usage="required">
				<description> Pixel offset for max thumb</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="optional">
				<description> (optional) Set to true to skip thumb animation. Default false</description>
			</parameter>
			<parameter name="force" type="boolean" usage="optional">
				<description> (optional) ignore the locked setting and set value anyway. Default false</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="optional">
				<description> (optional) Set to true to skip firing change events. Default false</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cleanEvent" scope="instance" visibility="private">
			<description>Clean up the slideEnd event subscribers array, since each one-time callback will be replaced in the event's subscribers property with null. This will cause memory bloat and loss of performance.</description>
			<parameters>
			<parameter name="o" type="EventProvider" usage="required">
				<description> object housing the CustomEvent</description>
			</parameter>
			<parameter name="evt" type="string" usage="required">
				<description> name of the CustomEvent</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleKeyDown" scope="instance">
			<description>Delegate event handling to the active Slider. See Slider.handleKeyDown.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousedown DOM event</description>
			</parameter>
			</parameters>
		</method>
		<method name="updateValue" scope="instance" visibility="private">
			<description>Executed when one of the sliders is moved</description>
			<parameters>
			<parameter name="silent" type="boolean" usage="optional">
				<description> (optional) Set to true to skip firing change events. Default false</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleKeyPress" scope="instance">
			<description>Delegate event handling to the active Slider. See Slider.handleKeyPress.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousedown DOM event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMinChange" scope="instance" visibility="private">
			<description>Executed when the min slider fires the change event</description>
		</method>
		<method name="setValues" scope="instance">
			<description>Sets the min and max thumbs to new values.</description>
			<parameters>
			<parameter name="min" type="int" usage="required">
				<description> Pixel offset to assign to the min thumb</description>
			</parameter>
			<parameter name="max" type="int" usage="required">
				<description> Pixel offset to assign to the max thumb</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="optional">
				<description> (optional) Set to true to skip thumb animation. Default false</description>
			</parameter>
			<parameter name="force" type="boolean" usage="optional">
				<description> (optional) ignore the locked setting and set value anyway. Default false</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="optional">
				<description> (optional) Set to true to skip firing change events. Default false</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleMaxChange" scope="instance" visibility="private">
			<description>Executed when the max slider fires the change event</description>
		</method>
		<method name="_handleMouseUp" scope="instance">
			<description>Delegates the onMouseUp to the active Slider</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> mouseup event</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.DateCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The DataCellEditor class provides functionality for inline editing
DataTable cell data with a YUI Calendar.</description>
		<constructors>
		<constructor scope="instance">
			<description>The DataCellEditor class provides functionality for inline editing
DataTable cell data with a YUI Calendar.</description>
			<return-types>
				<return-type type="YAHOO.widget.DateCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="calendar" type="YAHOO.widget.Calendar" scope="instance">
			<description>Reference to Calendar instance.</description>
		</property>
		<property name="defaultValue" type="Date" scope="instance">
			<description>Default value.</description>
		</property>
		<property name="calendarOptions" type="Object" scope="instance">
			<description>Configs for the calendar instance, to be passed to Calendar constructor.</description>
		</property>
		</properties>
		<methods>
		<method name="renderForm" scope="instance">
			<description>Render a Calendar.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from DateCellEditor.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in DateCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets DateCellEditor UI to initial state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Element">
		<description>Element provides an wrapper object to simplify adding
event listeners, using dom methods, and managing attributes.</description>
		<constructors>
		<constructor scope="instance">
			<description>Element provides an wrapper object to simplify adding
event listeners, using dom methods, and managing attributes.</description>
			<return-types>
				<return-type type="YAHOO.util.Element" />
			</return-types>
			<parameters>
			<parameter name="el" type="HTMLElement | String" usage="required">
				<description>  The html element that 
represents the Element.</description>
			</parameter>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of initial config names and values</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DOM_EVENTS" type="Object" scope="instance">
			<description>Dom events supported by the Element instance.</description>
		</property>
		</properties>
		<methods>
		<method name="appendChild" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<parameters>
			<parameter name="child" type="YAHOO.util.Element || HTMLElement" usage="required">
				<description> The element to append.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The appended DOM element.</return-description>
		</method>
		<method name="setStyle" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="property" type="String" usage="required">
				<description> The style property to set</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value to apply to the style property</description>
			</parameter>
			</parameters>
		</method>
		<method name="subscribe" scope="instance">
			<description>Alias for addListener</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function call when the event fires</description>
			</parameter>
			<parameter name="obj" type="Any" usage="required">
				<description> A variable to pass to the handler</description>
			</parameter>
			<parameter name="scope" type="Object" usage="required">
				<description> The object to use for the scope of the handler</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Registers Element specific attributes.</description>
			<parameters>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of initial attribute configs</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeDelegate" scope="instance">
			<description>Remove a delegated event listener</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function call when the event fires</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Returns true if the unbind was successful, false 
otherwise.</return-description>
		</method>
		<method name="getElementsByClassName" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> The className to collect</description>
			</parameter>
			<parameter name="tag" type="String" usage="optional">
				<description> (optional) The tag to use in conjunction with class name</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Array of HTMLElements</return-description>
		</method>
		<method name="replaceClass" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="oldClassName" type="String" usage="required">
				<description> The className to replace</description>
			</parameter>
			<parameter name="newClassName" type="String" usage="required">
				<description> The className to add</description>
			</parameter>
			</parameters>
		</method>
		<method name="appendTo" scope="instance">
			<description>Appends the HTMLElement into either the supplied parentNode.</description>
			<parameters>
			<parameter name="parentNode" type="HTMLElement | Element" usage="required">
				<description> The node to append to</description>
			</parameter>
			<parameter name="before" type="HTMLElement | Element" usage="required">
				<description> An optional node to insert before</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The appended DOM element.</return-description>
		</method>
		<method name="hasChildNodes" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element has childNodes</return-description>
		</method>
		<method name="_setHTMLAttrConfig" scope="instance" visibility="private">
			<description>Sets the value of the property and fires beforeChange and change events.</description>
			<parameters>
			<parameter name="element" type="YAHOO.util.Element" usage="required">
				<description> The Element instance to register the config to.</description>
			</parameter>
			<parameter name="key" type="String" usage="required">
				<description> The name of the config to register</description>
			</parameter>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of the config's params</description>
			</parameter>
			</parameters>
		</method>
		<method name="fireQueue" scope="instance">
			<description>Apply any queued set calls.</description>
		</method>
		<method name="addListener" scope="instance">
			<description>Adds a listener for the given event. These may be DOM or customEvent listeners. Any event that is fired via fireEvent can be listened for. All handlers receive an event object.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler to call when the event fires</description>
			</parameter>
			<parameter name="obj" type="Any" usage="required">
				<description> A variable to pass to the handler</description>
			</parameter>
			<parameter name="scope" type="Object" usage="required">
				<description> The object to use for the scope of the handler</description>
			</parameter>
			</parameters>
		</method>
		<method name="insertBefore" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> The HTMLElement to insert</description>
			</parameter>
			<parameter name="before" type="HTMLElement" usage="required">
				<description> The HTMLElement to insert the element before.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The inserted DOM element.</return-description>
		</method>
		<method name="getElementsByTagName" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<parameters>
			<parameter name="tag" type="String" usage="required">
				<description> The tagName to collect</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLCollection" />
			</return-types>
			<return-description>A collection of DOM elements.</return-description>
		</method>
		<method name="removeClass" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> The className to remove</description>
			</parameter>
			</parameters>
		</method>
		<method name="getStyle" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="property" type="String" usage="required">
				<description> The style property to retrieve</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The current value of the property</return-description>
		</method>
		<method name="replaceChild" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<parameters>
			<parameter name="newNode" type="HTMLElement" usage="required">
				<description> The HTMLElement to insert</description>
			</parameter>
			<parameter name="oldNode" type="HTMLElement" usage="required">
				<description> The HTMLElement to replace</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The replaced DOM element.</return-description>
		</method>
		<method name="removeListener" scope="instance">
			<description>Remove an event listener</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function call when the event fires</description>
			</parameter>
			</parameters>
		</method>
		<method name="on" scope="instance">
			<description>Alias for addListener</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function call when the event fires</description>
			</parameter>
			<parameter name="obj" type="Any" usage="required">
				<description> A variable to pass to the handler</description>
			</parameter>
			<parameter name="scope" type="Object" usage="required">
				<description> The object to use for the scope of the handler</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeChild" scope="instance">
			<description>Wrapper for HTMLElement method.</description>
			<parameters>
			<parameter name="child" type="HTMLElement" usage="required">
				<description> The HTMLElement to remove</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The removed DOM element.</return-description>
		</method>
		<method name="delegate" scope="instance">
			<description>Appends a delegated event listener. Delegated event listeners receive two arguments by default: the DOM event and the element  specified by the filtering function or CSS selector. (Note: Using the delegate method requires the element-delegate module. Using CSS selectors as the filtering criteria for delegated event listeners requires inclusion of the Selector Utility.)</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The name of the event to listen for</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The handler to call when the event fires</description>
			</parameter>
			<parameter name="filter" type="Function|string" usage="required">
				<description> Function or CSS selector used to determine for what element(s) the event listener should be called. When a function is specified, the function should return an HTML element. Using a CSS Selector requires the inclusion of the CSS Selector Utility.</description>
			</parameter>
			<parameter name="obj" type="Any" usage="required">
				<description> A variable to pass to the handler</description>
			</parameter>
			<parameter name="scope" type="Object" usage="required">
				<description> The object to use for the scope of the handler</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Returns true if the delegated event listener 
was added successfully</return-description>
		</method>
		<method name="hasClass" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> The className to add</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element has the class name</return-description>
		</method>
		<method name="addClass" scope="instance">
			<description>Wrapper for Dom method.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> The className to add</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DragDrop">
		<description>Defines the interface and base operation of items that that can be 
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver, onDragOut.
Up to three html elements can be associated with a DragDrop instance:
&lt;ul&gt;
&lt;li&gt;linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with 
other DragDrop objects.&lt;/li&gt;
&lt;li&gt;handle element(s): The drag operation only occurs if the element that 
was clicked matches a handle element.  By default this is the linked 
element, but there are times that you will want only a portion of the 
linked element to initiate the drag operation, and the setHandleElId() 
method provides a way to define this.&lt;/li&gt;
&lt;li&gt;drag element: this represents an the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link YAHOO.util.DDProxy}
&lt;/li&gt;
&lt;/ul&gt;
This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any 
other DragDrop obj in the &quot;group1&quot; group:
&lt;pre&gt;
dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);
&lt;/pre&gt;
Since none of the event handlers have been implemented, nothing would 
actually happen if you were to run the code above.  Normally you would 
override this class or one of the default implementations, but you can 
also override the methods you want on an instance of the class...
&lt;pre&gt;
dd.onDragDrop = function(e, id) {
&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);
}
&lt;/pre&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Defines the interface and base operation of items that that can be 
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver, onDragOut.
Up to three html elements can be associated with a DragDrop instance:
&lt;ul&gt;
&lt;li&gt;linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with 
other DragDrop objects.&lt;/li&gt;
&lt;li&gt;handle element(s): The drag operation only occurs if the element that 
was clicked matches a handle element.  By default this is the linked 
element, but there are times that you will want only a portion of the 
linked element to initiate the drag operation, and the setHandleElId() 
method provides a way to define this.&lt;/li&gt;
&lt;li&gt;drag element: this represents an the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link YAHOO.util.DDProxy}
&lt;/li&gt;
&lt;/ul&gt;
This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any 
other DragDrop obj in the &quot;group1&quot; group:
&lt;pre&gt;
dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);
&lt;/pre&gt;
Since none of the event handlers have been implemented, nothing would 
actually happen if you were to run the code above.  Normally you would 
override this class or one of the default implementations, but you can 
also override the methods you want on an instance of the class...
&lt;pre&gt;
dd.onDragDrop = function(e, id) {
&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);
}
&lt;/pre&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.DragDrop" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> of the element that is linked to this instance</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related DragDrop objects</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> an object containing configurable attributes
Valid properties for DragDrop: 
padding, isTarget, maintainOffset, primaryButtonOnly,</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="maxX" type="int" scope="instance" visibility="private">
			<description>The right constraint</description>
		</property>
		<property name="maxY" type="int" scope="instance" visibility="private">
			<description>The down constraint</description>
		</property>
		<property name="hasOuterHandles" type="boolean" scope="instance">
			<description>By default, drags can only be initiated if the mousedown occurs in the region the linked element is. This is done in part to work around a bug in some browsers that mis-report the mousedown if the previous mouseup happened outside of the window. This property is set to true if outer handles are defined.</description>
		</property>
		<property name="_domRef" type="undefined" scope="instance" visibility="private">
			<description>Cached reference to the linked element</description>
		</property>
		<property name="yTicks" type="int[]" scope="instance">
			<description>Array of pixel locations the element will snap to if we specified a vertical graduation/interval. This array is generated automatically when you define a tick interval.</description>
		</property>
		<property name="startPageY" type="int" scope="instance" visibility="private">
			<description>The linked element's absolute X position at the time the drag was started</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The id of the element associated with this object. This is what we refer to as the &quot;linked element&quot; because the size and position of this element is used to determine when the drag and drop objects have interacted.</description>
		</property>
		<property name="deltaX" type="int" scope="instance" visibility="private">
			<description>The difference between the click position and the source element's location</description>
		</property>
		<property name="deltaY" type="int" scope="instance" visibility="private">
			<description>The difference between the click position and the source element's location</description>
		</property>
		<property name="__ygDragDrop" type="undefined" scope="instance" visibility="private">
			<description>Internal typeof flag</description>
		</property>
		<property name="overlap" type="YAHOO.util.Region" scope="instance">
			<description>Property that is assigned to a drag and drop object when testing to see if it is being targeted by another dd object. This is a region that represents the area the draggable element overlaps this target. DDM.getBestMatch uses this property to compare the size of the overlap to that of other targets in order to determine the closest match in INTERSECT mode when multiple targets are part of the same interaction.</description>
		</property>
		<property name="minX" type="int" scope="instance" visibility="private">
			<description>The left constraint</description>
		</property>
		<property name="minY" type="int" scope="instance" visibility="private">
			<description>The up constraint</description>
		</property>
		<property name="invalidHandleIds" type="{string: string}" scope="instance">
			<description>An associative array of ids for elements that will be ignored if clicked</description>
		</property>
		<property name="config" type="object" scope="instance">
			<description>Configuration attributes passed into the constructor</description>
		</property>
		<property name="dragElId" type="String" scope="instance" visibility="private">
			<description>The id of the element that will be dragged. By default this is same as the linked element , but could be changed to another element. Ex: YAHOO.util.DDProxy</description>
		</property>
		<property name="available" type="boolean" scope="instance">
			<description>The availabe property is false until the linked dom element is accessible.</description>
		</property>
		<property name="invalidHandleClasses" type="string[]" scope="instance">
			<description>An indexted array of css class names for elements that will be ignored if clicked.</description>
		</property>
		<property name="isTarget" type="boolean" scope="instance">
			<description>By default, all instances can be a drop target. This can be disabled by setting isTarget to false.</description>
		</property>
		<property name="invalidHandleTypes" type="{string: string}" scope="instance">
			<description>An associative array of HTML tags that will be ignored if clicked.</description>
		</property>
		<property name="startPageX" type="int" scope="instance" visibility="private">
			<description>The linked element's absolute X position at the time the drag was started</description>
		</property>
		<property name="cursorIsOver" type="boolean" scope="instance">
			<description>Property that is assigned to a drag and drop object when testing to see if it is being targeted by another dd object. This property can be used in intersect mode to help determine the focus of the mouse interaction. DDM.getBestMatch uses this property first to determine the closest match in INTERSECT mode when multiple targets are part of the same interaction.</description>
		</property>
		<property name="constrainY" type="boolean" scope="instance" visibility="private">
			<description>Set to true when vertical contraints are applied</description>
		</property>
		<property name="constrainX" type="boolean" scope="instance" visibility="private">
			<description>Set to true when horizontal contraints are applied</description>
		</property>
		<property name="padding" type="int[]" scope="instance">
			<description>The padding configured for this drag and drop object for calculating the drop zone intersection with this object.</description>
		</property>
		<property name="dragOnly" type="Boolean" scope="instance">
			<description>If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)</description>
		</property>
		<property name="groups" type="{string: string}" scope="instance">
			<description>The group defines a logical collection of DragDrop objects that are related. Instances only get events when interacting with other DragDrop object in the same group. This lets us define multiple groups using a single DragDrop subclass if we want.</description>
		</property>
		<property name="maintainOffset" type="boolean" scope="instance">
			<description>Maintain offsets when we resetconstraints. Set to true when you want the position of the element relative to its parent to stay the same when the page changes</description>
		</property>
		<property name="handleElId" type="String" scope="instance" visibility="private">
			<description>the id of the element that initiates the drag operation. By default this is the linked element, but could be changed to be a child of this element. This lets us do things like only starting the drag when the header element within the linked html element is clicked.</description>
		</property>
		<property name="xTicks" type="int[]" scope="instance">
			<description>Array of pixel locations the element will snap to if we specified a horizontal graduation/interval. This array is generated automatically when you define a tick interval.</description>
		</property>
		<property name="locked" type="boolean" scope="instance" visibility="private">
			<description>Individual drag/drop instances can be locked. This will prevent onmousedown start drag.</description>
		</property>
		<property name="useShim" type="Boolean" scope="instance">
			<description>If this flag is true, a shim will be placed over the screen/viewable area to track mouse events. Should help with dragging elements over iframes and other controls.</description>
		</property>
		<property name="events" type="object" scope="instance">
			<description>An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop By setting any of these to false, then event will not be fired.</description>
		</property>
		<property name="primaryButtonOnly" type="boolean" scope="instance">
			<description>By default the drag and drop instance will only respond to the primary button click (left button for a right-handed mouse). Set to true to allow drag and drop to start with any mouse click that is propogated by the browser</description>
		</property>
		</properties>
		<methods>
		<method name="addToGroup" scope="instance">
			<description>Add this instance to a group of related drag/drop objects. All instances belong to at least one group, and can belong to as many groups as needed.</description>
			<parameters>
			<parameter name="sGroup" type="string" usage="required">
				<description> the name of the group</description>
			</parameter>
			</parameters>
		</method>
		<method name="startDrag" scope="instance">
			<description>Abstract method called after a drag/drop object is clicked and the drag or mousedown time thresholds have beeen met.</description>
			<parameters>
			<parameter name="X" type="int" usage="required">
				<description> click location</description>
			</parameter>
			<parameter name="Y" type="int" usage="required">
				<description> click location</description>
			</parameter>
			</parameters>
		</method>
		<method name="isValidHandleChild" scope="instance">
			<description>Checks the tag exclusion list to see if this click should be ignored</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> the HTMLElement to evaluate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this is a valid tag type, false if not</return-description>
		</method>
		<method name="b4Drag" scope="instance" visibility="private">
			<description>Code that executes immediately before the onDrag event</description>
		</method>
		<method name="lock" scope="instance">
			<description>Lock this instance</description>
		</method>
		<method name="onDragEnter" scope="instance">
			<description>Abstract method called when this element fist begins hovering over another DragDrop obj</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousemove event</description>
			</parameter>
			<parameter name="id" type="String|DragDrop[]" usage="required">
				<description> In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of one or more dragdrop items being hovered over.</description>
			</parameter>
			</parameters>
		</method>
		<method name="b4StartDrag" scope="instance" visibility="private">
			<description>Code that executes immediately before the startDrag event</description>
		</method>
		<method name="onMouseDown" scope="instance">
			<description>Event handler that fires when a drag/drop obj gets a mousedown</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousedown event</description>
			</parameter>
			</parameters>
		</method>
		<method name="setOuterHandleElId" scope="instance">
			<description>Allows you to set an element outside of the linked element as a drag handle</description>
			<parameters>
			<parameter name="id" type="" usage="required">
				<description> the id of the element that will be used to initiate the drag</description>
			</parameter>
			</parameters>
		</method>
		<method name="unlock" scope="instance">
			<description>Unlock this instace</description>
		</method>
		<method name="clearTicks" scope="instance">
			<description>Clears any tick interval defined for this instance</description>
		</method>
		<method name="setStartPosition" scope="instance" visibility="private">
			<description>Sets the start position of the element. This is set when the obj is initialized, the reset when a drag is started.</description>
			<parameters>
			<parameter name="pos" type="" usage="required">
				<description> current position (from previous lookup)</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetConstraints" scope="instance">
			<description>resetConstraints must be called if you manually reposition a dd element.</description>
		</method>
		<method name="clickValidator" scope="instance">
			<description>Method validates that the clicked element was indeed the handle or a valid child of the handle</description>
			<parameters>
			<parameter name="e" type="Event" usage="required"/>
			</parameters>
		</method>
		<method name="handleMouseDown" scope="instance" visibility="private">
			<description>Fired when this object is clicked</description>
			<parameters>
			<parameter name="e" type="Event" usage="required"/>
			<parameter name="oDD" type="YAHOO.util.DragDrop" usage="required">
				<description> the clicked dd object (this dd obj)</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDragOver" scope="instance">
			<description>Abstract method called when this element is hovering over another DragDrop obj</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousemove event</description>
			</parameter>
			<parameter name="id" type="String|DragDrop[]" usage="required">
				<description> In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of dd items being hovered over.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addInvalidHandleType" scope="instance">
			<description>Allows you to specify a tag name that should not start a drag operation when clicked. This is designed to facilitate embedding links within a drag handle that do something other than start the drag.</description>
			<parameters>
			<parameter name="tagName" type="string" usage="required">
				<description> the type of element to exclude</description>
			</parameter>
			</parameters>
		</method>
		<method name="setDragElId" scope="instance">
			<description>Allows you to specify that an element other than the linked element will be moved with the cursor during a drag</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the element that will be used to initiate the drag</description>
			</parameter>
			</parameters>
		</method>
		<method name="setXConstraint" scope="instance">
			<description>By default, the element can be dragged any place on the screen. Use this method to limit the horizontal travel of the element. Pass in 0,0 for the parameters if you want to lock the drag to the y axis.</description>
			<parameters>
			<parameter name="iLeft" type="int" usage="required">
				<description> the number of pixels the element can move to the left</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> the number of pixels the element can move to the right</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element should move iTickSize pixels at a time.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTick" scope="instance" visibility="private">
			<description>Normally the drag element is moved pixel by pixel, but we can specify that it move a number of pixels at a time. This method resolves the location when we have it set up like this.</description>
			<parameters>
			<parameter name="val" type="int" usage="required">
				<description> where we want to place the object</description>
			</parameter>
			<parameter name="tickArray" type="int[]" usage="required">
				<description> sorted array of valid points</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the closest tick</return-description>
		</method>
		<method name="init" scope="instance">
			<description>Sets up the DragDrop object. Must be called in the constructor of any YAHOO.util.DragDrop subclass</description>
			<parameters>
			<parameter name="id" type="" usage="required">
				<description> the id of the linked element</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related items</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> configuration attributes</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearConstraints" scope="instance">
			<description>Clears any constraints applied to this instance. Also clears ticks since they can't exist independent of a constraint at this time.</description>
		</method>
		<method name="getEl" scope="instance">
			<description>Returns a reference to the linked element</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the html element</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>toString method</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string representation of the dd obj</return-description>
		</method>
		<method name="onMouseUp" scope="instance">
			<description>Event handler that fires when a drag/drop obj gets a mouseup</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mouseup event</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeInvalidHandleType" scope="instance">
			<description>Unsets an excluded tag name set by addInvalidHandleType</description>
			<parameters>
			<parameter name="tagName" type="string" usage="required">
				<description> the type of element to unexclude</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTargetCoord" scope="instance" visibility="private">
			<description>Finds the location the element should be placed if we want to move it to where the mouse location less the click offset would place us.</description>
			<parameters>
			<parameter name="iPageX" type="int" usage="required">
				<description> the X coordinate of the click</description>
			</parameter>
			<parameter name="iPageY" type="int" usage="required">
				<description> the Y coordinate of the click</description>
			</parameter>
			</parameters>
			<return-description>an object that contains the coordinates (Object.x and Object.y)</return-description>
		</method>
		<method name="setHandleElId" scope="instance">
			<description>Allows you to specify a child of the linked element that should be used to initiate the drag operation. An example of this would be if you have a content div with text and links. Clicking anywhere in the content area would normally start the drag operation. Use this method to specify that an element inside of the content div is the element that starts the drag operation.</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the element that will be used to initiate the drag.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDragOut" scope="instance">
			<description>Abstract method called when we are no longer hovering over an element</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousemove event</description>
			</parameter>
			<parameter name="id" type="String|DragDrop[]" usage="required">
				<description> In POINT mode, the element id this was hovering over. In INTERSECT mode, an array of dd items that the mouse is no longer over.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onInvalidDrop" scope="instance">
			<description>Abstract method called when this item is dropped on an area with no drop target</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mouseup event</description>
			</parameter>
			</parameters>
		</method>
		<method name="setInitialPosition" scope="instance" visibility="private">
			<description>Stores the initial placement of the linked element.</description>
			<parameters>
			<parameter name="diffX" type="int" usage="required">
				<description>  the X offset, default 0</description>
			</parameter>
			<parameter name="diffY" type="int" usage="required">
				<description>  the Y offset, default 0</description>
			</parameter>
			</parameters>
		</method>
		<method name="b4DragDrop" scope="instance" visibility="private">
			<description>Code that executes immediately before the onDragDrop event</description>
		</method>
		<method name="removeFromGroup" scope="instance">
			<description>Remove's this instance from the supplied interaction group</description>
			<parameters>
			<parameter name="sGroup" type="string" usage="required">
				<description> The group to drop</description>
			</parameter>
			</parameters>
		</method>
		<method name="initTarget" scope="instance">
			<description>Initializes Targeting functionality only... the object does not get a mousedown handler.</description>
			<parameters>
			<parameter name="id" type="" usage="required">
				<description> the id of the linked element</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related items</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> configuration attributes</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeInvalidHandleClass" scope="instance">
			<description>Unsets an invalid css class</description>
			<parameters>
			<parameter name="cssClass" type="string" usage="required">
				<description> the class of the element(s) you wish to re-enable</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDragDrop" scope="instance">
			<description>Abstract method called when this item is dropped on another DragDrop obj</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mouseup event</description>
			</parameter>
			<parameter name="id" type="String|DragDrop[]" usage="required">
				<description> In POINT mode, the element id this was dropped on. In INTERSECT mode, an array of dd items this was dropped on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setYTicks" scope="instance" visibility="private">
			<description>Create the array of vertical tick marks if an interval was specified in setYConstraint().</description>
		</method>
		<method name="b4EndDrag" scope="instance" visibility="private">
			<description>Code that executes immediately before the endDrag event</description>
		</method>
		<method name="removeInvalidHandleId" scope="instance">
			<description>Unsets an invalid handle id</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the element to re-enable</description>
			</parameter>
			</parameters>
		</method>
		<method name="onAvailable" scope="instance">
			<description>Override the onAvailable method to do what is needed after the initial position was determined.</description>
		</method>
		<method name="getDragEl" scope="instance">
			<description>Returns a reference to the actual element to drag. By default this is the same as the html element, but it can be assigned to another element. An example of this can be found in YAHOO.util.DDProxy</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the html element</return-description>
		</method>
		<method name="onDrag" scope="instance">
			<description>Abstract method called during the onMouseMove event while dragging an object.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousemove event</description>
			</parameter>
			</parameters>
		</method>
		<method name="applyConfig" scope="instance">
			<description>Applies the configuration parameters that were passed into the constructor. This is supposed to happen at each level through the inheritance chain. So a DDProxy implentation will execute apply config on DDProxy, DD, and DragDrop in order to get all of the parameters that are available in each object.</description>
		</method>
		<method name="on" scope="instance">
			<description>Shortcut for EventProvider.subscribe, see YAHOO.util.EventProvider.subscribe</description>
		</method>
		<method name="b4DragOver" scope="instance" visibility="private">
			<description>Code that executes immediately before the onDragOver event</description>
		</method>
		<method name="setYConstraint" scope="instance">
			<description>By default, the element can be dragged any place on the screen. Set this to limit the vertical travel of the element. Pass in 0,0 for the parameters if you want to lock the drag to the x axis.</description>
			<parameters>
			<parameter name="iUp" type="int" usage="required">
				<description> the number of pixels the element can move up</description>
			</parameter>
			<parameter name="iDown" type="int" usage="required">
				<description> the number of pixels the element can move down</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element should move iTickSize pixels at a time.</description>
			</parameter>
			</parameters>
		</method>
		<method name="endDrag" scope="instance">
			<description>Fired when we are done dragging the object</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mouseup event</description>
			</parameter>
			</parameters>
		</method>
		<method name="isLocked" scope="instance">
			<description>Returns true if this instance is locked, or the drag drop mgr is locked (meaning that all drag/drop is disabled on the page.)</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this obj or all drag/drop is locked, else 
false</return-description>
		</method>
		<method name="addInvalidHandleClass" scope="instance">
			<description>Lets you specify a css class of elements that will not initiate a drag</description>
			<parameters>
			<parameter name="cssClass" type="string" usage="required">
				<description> the class of the elements you wish to ignore</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleOnAvailable" scope="instance" visibility="private">
			<description>Executed when the linked element is available</description>
		</method>
		<method name="setPadding" scope="instance">
			<description>Configures the padding for the target zone in px. Effectively expands (or reduces) the virtual object size for targeting calculations.  Supports css-style shorthand; if only one parameter is passed, all sides will have that padding, and if only two are passed, the top and bottom will have the first param, the left and right the second.</description>
			<parameters>
			<parameter name="iTop" type="int" usage="required">
				<description>  Top pad</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> Right pad</description>
			</parameter>
			<parameter name="iBot" type="int" usage="required">
				<description>  Bot pad</description>
			</parameter>
			<parameter name="iLeft" type="int" usage="required">
				<description>  Left pad</description>
			</parameter>
			</parameters>
		</method>
		<method name="unreg" scope="instance">
			<description>Remove all drag and drop hooks for this element</description>
		</method>
		<method name="b4MouseDown" scope="instance" visibility="private">
			<description>Code executed immediately before the onMouseDown event</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mousedown event</description>
			</parameter>
			</parameters>
		</method>
		<method name="b4DragOut" scope="instance" visibility="private">
			<description>Code that executes immediately before the onDragOut event</description>
		</method>
		<method name="addInvalidHandleId" scope="instance">
			<description>Lets you to specify an element id for a child of a drag handle that should not initiate a drag</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the element id of the element you wish to ignore</description>
			</parameter>
			</parameters>
		</method>
		<method name="setXTicks" scope="instance" visibility="private">
			<description>Create the array of horizontal tick marks if an interval was specified in setXConstraint().</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ColumnSet">
		<description>The ColumnSet class defines and manages a DataTable's Columns,
including nested hierarchies and access to individual Column instances.</description>
		<constructors>
		<constructor scope="instance">
			<description>The ColumnSet class defines and manages a DataTable's Columns,
including nested hierarchies and access to individual Column instances.</description>
			<return-types>
				<return-type type="YAHOO.widget.ColumnSet" />
			</return-types>
			<parameters>
			<parameter name="aDefinitions" type="Object[]" usage="required">
				<description>  Array of object literals that define cells in
the THEAD.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="flat" type="YAHOO.widget.Column[]" scope="instance">
			<description>Flattened representation of all Columns.</description>
		</property>
		<property name="_aDefinitions" type="Object[]" scope="instance" visibility="private">
			<description>Array of object literal Column definitions passed to the constructor.</description>
		</property>
		<property name="keys" type="YAHOO.widget.Column[]" scope="instance">
			<description>Array of Columns that map one-to-one to a table column.</description>
		</property>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Unique instance name.</description>
		</property>
		<property name="tree" type="YAHOO.widget.Column[]" scope="instance">
			<description>Top-down tree representation of Column hierarchy.</description>
		</property>
		<property name="ColumnSet._nCount" type="Number" scope="static" visibility="private">
			<description>Internal class variable to index multiple ColumnSet instances.</description>
		</property>
		<property name="headers" type="String[]" scope="instance">
			<description>ID index of nested parent hierarchies for HEADERS accessibility attribute.</description>
		</property>
		</properties>
		<methods>
		<method name="getColumn" scope="instance">
			<description>Returns Column instance with given key or ColumnSet key index.</description>
			<parameters>
			<parameter name="column" type="String | Number" usage="required">
				<description> Column key or ColumnSet key index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column instance.</return-description>
		</method>
		<method name="getDefinitions" scope="instance">
			<description>Public accessor to the definitions array.</description>
			<return-types>
			<return-type type="Object[]" />
			</return-types>
			<return-description>Array of object literal Column definitions.</return-description>
		</method>
		<method name="_init" scope="instance" visibility="private">
			<description>Initializes ColumnSet instance with data from Column definitions.</description>
			<parameters>
			<parameter name="aDefinitions" type="Object[]" usage="required">
				<description> Array of object literals that define cells in the THEAD .</description>
			</parameter>
			</parameters>
		</method>
		<method name="getId" scope="instance">
			<description>Returns unique name of the ColumnSet instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the ColumnSet instance.</return-description>
		</method>
		<method name="getColumnById" scope="instance">
			<description>Returns Column instance with given ID.</description>
			<parameters>
			<parameter name="column" type="String" usage="required">
				<description> Column ID.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Column" />
			</return-types>
			<return-description>Column instance.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>ColumnSet instance name, for logging.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the ColumnSet instance.</return-description>
		</method>
		<method name="getDescendants" scope="instance">
			<description>Public accessor returns array of given Column's desendants (if any), including itself.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Array including the Column itself and all descendants (if any).</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.SWFStore">
		<description>Class for the YUI SWFStore util.</description>
		<constructors>
		<constructor scope="instance">
			<description>Class for the YUI SWFStore util.</description>
			<return-types>
				<return-type type="YAHOO.util.SWFStore" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="shareData" type="Boolean" usage="required">
				<description>  Whether or not data should be shared across browsers</description>
			</parameter>
			<parameter name="useCompression" type="Boolean" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="setUseCompression" scope="instance">
			<description>Public accessor to the unique name of the SWFStore instance.</description>
			<parameters>
			<parameter name="Whether" type="Boolean" usage="required">
				<description> or to compress stored data</description>
			</parameter>
			</parameters>
		</method>
		<method name="on" scope="instance">
			<description>Method to attach listeners to events</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The tyep of event to listen for</description>
			</parameter>
			<parameter name="listener" type="String" usage="required">
				<description> The function to call</description>
			</parameter>
			</parameters>
		</method>
		<method name="addListener" scope="instance">
			<description>Method to attach listeners to events</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The tyep of event to listen for</description>
			</parameter>
			<parameter name="listener" type="String" usage="required">
				<description> The function to call</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTypeAt" scope="instance">
			<description>Returns the data type of of the storage. &lt;p&gt;May be one of the following types: &lt;ul&gt; &lt;li&gt;boolean&lt;/li&gt; &lt;li&gt;function&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;object&lt;/li&gt; &lt;li&gt;string&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;xml&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</description>
			<parameters>
			<parameter name="location" type="Number" usage="required">
				<description> The index of the &quot;cookie&quot; or store</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The type</return-description>
		</method>
		<method name="calculateCurrentSize" scope="instance">
			<description>Gets the current size, in KB, of the amount of space taken by the current store. Note that this is calculated, and may take time depending on the number of items stored</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The size of the store in KB</return-description>
		</method>
		<method name="getValueAt" scope="instance">
			<description>Returns the value of the store at the specified index, if any.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the stored item</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The value of the store at that index</return-description>
		</method>
		<method name="displaySettings" scope="instance">
			<description>Displays the settings dialog to allow the user to configure storage settings manually. If the SWF height and width are smaller than what is allowable to display the local settings panel, an openExternalDialog message will be sent to JavaScript.</description>
		</method>
		<method name="hasAdequateDimensions" scope="instance">
			<description>Determines if SWF's visible area is large enough to fit the settings panel</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not to share among browsers</return-description>
		</method>
		<method name="getLength" scope="instance">
			<description>Returns the number of items in storage, if any.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The number of items</return-description>
		</method>
		<method name="clear" scope="instance">
			<description>Removes all data in local storage for this domain. &lt;p&gt;Be careful when using this method, as it may remove stored information that is used by other applications in this domain &lt;/p&gt;</description>
		</method>
		<method name="setShareData" scope="instance">
			<description>Public accessor to the unique name of the SWFStore instance.</description>
			<parameters>
			<parameter name="Whether" type="Boolean" usage="required">
				<description> or not to share among browsers</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTypeOf" scope="instance">
			<description>Returns the data type of of the storage. &lt;p&gt;May be one of the following types: &lt;ul&gt; &lt;li&gt;boolean&lt;/li&gt; &lt;li&gt;function&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;object&lt;/li&gt; &lt;li&gt;string&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;xml&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</description>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description> The name of the &quot;cookie&quot; or store</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The type</return-description>
		</method>
		<method name="getValueOf" scope="instance">
			<description>Returns the value of the item in storage, if any.</description>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description> The name of the &quot;cookie&quot; or store</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The data</return-description>
		</method>
		<method name="getItems" scope="instance">
			<description>Returns the items in storage as an array.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The data.</return-description>
		</method>
		<method name="setItem" scope="instance">
			<description>Saves data to local storage. It returns a String that can be one of three values: &quot;true&quot; if the storage succeeded; &quot;false&quot; if the user has denied storage on their machine or storage space allotted is not sufficient. &lt;p&gt;The size limit for the passed parameters is ~40Kb.&lt;/p&gt;</description>
			<parameters>
			<parameter name="data" type="Object" usage="required">
				<description> The data to store</description>
			</parameter>
			<parameter name="location" type="String" usage="required">
				<description> The name of the &quot;cookie&quot; or store</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the save was successful</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the SWFStore instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the SWFStore instance.</return-description>
		</method>
		<method name="setSize" scope="instance">
			<description>This method requests more storage (if the amount is above 100KB or the current setting). The request dialog has to be displayed within the Flash player itself so the SWF it is called from must be visible and at least 215px x 138px (w x h) in size.</description>
			<parameters>
			<parameter name="value" type="Number" usage="required">
				<description> The size, in KB</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="removeItem" scope="instance">
			<description>Removes the item in storage, if any.</description>
			<parameters>
			<parameter name="location" type="String" usage="required">
				<description> The name of the &quot;cookie&quot; or store</description>
			</parameter>
			</parameters>
		</method>
		<method name="getShareData" scope="instance">
			<description>Public accessor to the unique name of the SWFStore instance.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not data is being shared among browsers</return-description>
		</method>
		<method name="getUseCompression" scope="instance">
			<description>Public accessor to the unique name of the SWFStore instance.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or compression is being used</return-description>
		</method>
		<method name="getModificationDate" scope="instance">
			<description>Gets the timestamp of the last store. This value is automatically set when data is stored.</description>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>A Date object</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Carousel" superclass="YAHOO.util.Element">
		<description>The Carousel widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Carousel widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.Carousel" />
			</return-types>
			<parameters>
			<parameter name="el" type="HTMLElement | String" usage="required">
				<description>  The HTML element that represents the
the container that houses the Carousel.</description>
			</parameter>
			<parameter name="cfg" type="Object" usage="optional">
				<description>  (optional) The configuration values</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="NEXT_PAGE" type="undefined" scope="instance">
			<description>The class name of the next navigation link. This variable is not only used for styling, but also for identifying the link within the Carousel container.</description>
		</property>
		<property name="_rows" type="undefined" scope="instance" visibility="private">
			<description>Number of rows for a multirow carousel.</description>
		</property>
		<property name="_hasFocus" type="undefined" scope="instance" visibility="private">
			<description>Does the Carousel element have focus?</description>
		</property>
		<property name="_animObj" type="undefined" scope="instance" visibility="private">
			<description>The Animation object.</description>
		</property>
		<property name="_itemsTable" type="undefined" scope="instance" visibility="private">
			<description>The table of items in the Carousel. The numItems is the number of items in the Carousel, items being the array of items in the Carousel. The size is the size of a single item in the Carousel. It is cached here for efficiency (to avoid computing the size multiple times).</description>
		</property>
		<property name="VERT_MIN_WIDTH" type="undefined" scope="instance">
			<description>The minimum width of the vertical Carousel container to support the navigation buttons.</description>
		</property>
		<property name="instances" type="undefined" scope="static" visibility="private">
			<description>The internal table of Carousel instances.</description>
		</property>
		<property name="MULTI_ROW" type="undefined" scope="instance">
			<description>The class name of a multirow Carousel.</description>
		</property>
		<property name="_isAutoPlayInProgress" type="undefined" scope="instance" visibility="private">
			<description>Is the auto-scrolling of Carousel in progress?</description>
		</property>
		<property name="MIN_WIDTH" type="undefined" scope="instance">
			<description>The class name that will be set if the Carousel adjusts itself for a minimum width.</description>
		</property>
		<property name="HORIZONTAL" type="undefined" scope="instance">
			<description>The class name of a horizontally oriented Carousel.</description>
		</property>
		<property name="_isAnimationInProgress" type="undefined" scope="instance" visibility="private">
			<description>Is the animation still in progress?</description>
		</property>
		<property name="_prevEnabled" type="undefined" scope="instance" visibility="private">
			<description>Status of the previous navigation item.</description>
		</property>
		<property name="NEXT_BUTTON_TEXT" type="undefined" scope="instance">
			<description>The next navigation button name/text.</description>
		</property>
		<property name="_hasRendered" type="undefined" scope="instance" visibility="private">
			<description>Is the Carousel rendered already?</description>
		</property>
		<property name="VERTICAL_CONTAINER" type="undefined" scope="instance">
			<description>The class name of a vertical Carousel's container element.</description>
		</property>
		<property name="PREVIOUS_BUTTON_TEXT" type="undefined" scope="instance">
			<description>The previous navigation button name/text.</description>
		</property>
		<property name="PREV_PAGE" type="undefined" scope="instance">
			<description>The class name of the previous navigation link. This variable is not only used for styling, but also for identifying the link within the Carousel container.</description>
		</property>
		<property name="_pagination" type="undefined" scope="instance" visibility="private">
			<description>The Carousel pagination structure.</description>
		</property>
		<property name="FIRST_NAV_DISABLED" type="undefined" scope="instance">
			<description>The class name of a first disabled navigation button.</description>
		</property>
		<property name="FIRST_PAGE" type="undefined" scope="instance">
			<description>The class name of a first page element.</description>
		</property>
		<property name="_navBtns" type="undefined" scope="instance" visibility="private">
			<description>The Carousel navigation buttons.</description>
		</property>
		<property name="CAROUSEL" type="undefined" scope="instance">
			<description>The class name of the Carousel element.</description>
		</property>
		<property name="_nextEnabled" type="undefined" scope="instance" visibility="private">
			<description>Status of the next navigation item.</description>
		</property>
		<property name="CAROUSEL_EL" type="undefined" scope="instance">
			<description>The class name of the container of the items in the Carousel.</description>
		</property>
		<property name="_pages" type="undefined" scope="instance" visibility="private">
			<description>The Carousel pages structure. This is an object of the total number of pages and the current page.</description>
		</property>
		<property name="NAVIGATION" type="undefined" scope="instance">
			<description>The navigation element container class name.</description>
		</property>
		<property name="_carouselEl" type="undefined" scope="instance" visibility="private">
			<description>The Carousel element.</description>
		</property>
		<property name="ROW" type="undefined" scope="instance">
			<description>The class name of a row in a multirow Carousel.</description>
		</property>
		<property name="NUM_VISIBLE" type="undefined" scope="instance">
			<description>The number of visible items in the Carousel.</description>
		</property>
		<property name="PAGER_ITEM" type="undefined" scope="instance">
			<description>The class name for an item in the pager UL or dropdown menu.</description>
		</property>
		<property name="CONTAINER" type="undefined" scope="instance">
			<description>The class name of the Carousel's container element.</description>
		</property>
		<property name="VERTICAL" type="undefined" scope="instance">
			<description>The class name of a vertically oriented Carousel.</description>
		</property>
		<property name="WidgetName" type="undefined" scope="static" visibility="private">
			<description>The widget name.</description>
		</property>
		<property name="ITEM_LOADING" type="undefined" scope="instance">
			<description>The element to be used as the progress indicator when the item is still being loaded.</description>
		</property>
		<property name="VISIBLE" type="undefined" scope="instance">
			<description>The class name of a visible Carousel.</description>
		</property>
		<property name="_navEl" type="undefined" scope="instance" visibility="private">
			<description>The Carousel navigation.</description>
		</property>
		<property name="_cols" type="undefined" scope="instance" visibility="private">
			<description>Number of cols for a multirow carousel.</description>
		</property>
		<property name="CONTENT" type="undefined" scope="instance">
			<description>The class name of the Carousel's container element.</description>
		</property>
		<property name="SELECTED_NAV" type="undefined" scope="instance">
			<description>The class name of the selected paging navigation.</description>
		</property>
		<property name="MAX_PAGER_BUTTONS" type="undefined" scope="instance">
			<description>The maximum number of pager buttons allowed beyond which the UI of the pager would be a drop-down of pages instead of buttons.</description>
		</property>
		<property name="DISABLED" type="undefined" scope="instance">
			<description>The class name of a disabled navigation button.</description>
		</property>
		<property name="SELECTED_ITEM" type="undefined" scope="instance">
			<description>The class name of the selected item.</description>
		</property>
		<property name="ITEM_LOADING_CONTENT" type="undefined" scope="instance">
			<description>The content to be used as the progress indicator when the item is still being loaded.</description>
		</property>
		<property name="FIRST_VISIBLE" type="undefined" scope="instance">
			<description>The offset of the first visible item in the Carousel.</description>
		</property>
		<property name="_itemAttrCache" type="undefined" scope="instance" visibility="private">
			<description>Cache the Carousel item attributes.</description>
		</property>
		<property name="PAGINATION" type="undefined" scope="instance">
			<description>The class name for the pagination container</description>
		</property>
		<property name="PAGER_PREFIX_TEXT" type="undefined" scope="instance">
			<description>The prefix text for the pager in case the UI is a drop-down.</description>
		</property>
		<property name="PAGE_FOCUS" type="undefined" scope="instance">
			<description>The class name of the focussed page navigation. This class is specifically used for the ugly focus handling in Opera.</description>
		</property>
		<property name="_clipEl" type="undefined" scope="instance" visibility="private">
			<description>The Carousel clipping container element.</description>
		</property>
		<property name="BUTTON" type="undefined" scope="instance">
			<description>The class name of the Carousel navigation buttons.</description>
		</property>
		<property name="_firstItem" type="undefined" scope="instance" visibility="private">
			<description>The current first index of the Carousel.</description>
		</property>
		<property name="_recomputeSize" type="undefined" scope="instance" visibility="private">
			<description>Whether the Carousel size needs to be recomputed or not?</description>
		</property>
		<property name="FIRST_NAV" type="undefined" scope="instance">
			<description>The class name of the first Carousel navigation button.</description>
		</property>
		<property name="NAV_CONTAINER" type="undefined" scope="instance">
			<description>The class name for the navigation container for prev/next.</description>
		</property>
		<property name="FOCUSSED_BUTTON" type="undefined" scope="instance">
			<description>The class name of the Carousel navigation button that has focus.</description>
		</property>
		<property name="NEXT_NAV" type="undefined" scope="instance">
			<description>The class name of the next Carousel navigation button.</description>
		</property>
		<property name="HORZ_MIN_WIDTH" type="undefined" scope="instance">
			<description>The minimum width of the horizontal Carousel container to support the navigation buttons.</description>
		</property>
		</properties>
		<methods>
		<method name="registerPagination" scope="instance">
			<description>Register carousels pagination template, append to interface, and populate.</description>
			<parameters>
			<parameter name="template" type="String" usage="required">
				<description> Pagination template as passed to lang.substitute</description>
			</parameter>
			</parameters>
		</method>
		<method name="getVisibleItems" scope="instance">
			<description>Return all visible items as an array.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The array of visible items</return-description>
		</method>
		<method name="focus" scope="instance">
			<description>Set focus on the Carousel.</description>
		</method>
		<method name="_setupCarouselNavigation" scope="instance">
			<description>Setup/Create the Carousel navigation element (if needed).</description>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initialize the configuration attributes used to create the Carousel.</description>
			<parameters>
			<parameter name="attrs" type="Object" usage="required">
				<description> The set of configuration attributes for creating the Carousel.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setRevealAmount" scope="instance">
			<description>Set the value for the reveal amount percentage in the Carousel.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for revealAmount</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="scrollPageBackward" scope="instance" visibility="private">
			<description>Scroll the Carousel by a page backward.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The context object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateScrollIncrement" scope="instance">
			<description>Validate the scrollIncrement value.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The scrollIncrement value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="syncPagerUi" scope="instance" visibility="private">
			<description>Synchronize and redraw the Pager UI if necessary.</description>
		</method>
		<method name="show" scope="instance">
			<description>Display the Carousel.</description>
		</method>
		<method name="_updateNavButtons" scope="instance">
			<description>Set the correct class for the navigation buttons.</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description> The target button</description>
			</parameter>
			<parameter name="setFocus" type="Boolean" usage="required">
				<description> True to set focus ring, false otherwise.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Initialize the Carousel.</description>
			<parameters>
			<parameter name="el" type="HTMLElement | String" usage="required">
				<description> The html element that represents the Carousel container.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> The set of configuration attributes for creating the Carousel.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getById" scope="static">
			<description>Return the appropriate Carousel object based on the id associated with the Carousel element or false if none match.</description>
		</method>
		<method name="_validateNavigation" scope="instance">
			<description>Validate and navigation parameters.</description>
			<parameters>
			<parameter name="cfg" type="Object" usage="required">
				<description> The navigation configuration</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="syncUi" scope="instance" visibility="private">
			<description>Handle UI update. Call the appropriate methods on events fired when an item is added, or removed for synchronizing the DOM.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> The item that needs to be added or removed</description>
			</parameter>
			</parameters>
		</method>
		<method name="parseCarouselItems" scope="instance">
			<description>Find the items within the Carousel and add them to the items table. A Carousel item is identified by elements that matches the carousel item element tag.</description>
		</method>
		<method name="_syncUiForItemReplace" scope="instance">
			<description>Synchronize and redraw the UI after an item is replaced.</description>
		</method>
		<method name="getDimensions" scope="instance" visibility="private">
			<description>Get full dimensions of an element.</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description> The element to get the dimensions of</description>
			</parameter>
			<parameter name="which" type="String" usage="required">
				<description> Get the height or width of an element</description>
			</parameter>
			</parameters>
		</method>
		<method name="_pagerClickHandler" scope="instance">
			<description>The &quot;click&quot; handler for anchor pagination.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeItem" scope="instance">
			<description>Remove an item at index from the Carousel.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The position to where in the list (starts from zero).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true on success, false otherwise</return-description>
		</method>
		<method name="_validateRevealAmount" scope="instance">
			<description>Validate the revealAmount value.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The revealAmount value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="stopAutoPlay" scope="instance">
			<description>Stop auto-playing the Carousel.</description>
		</method>
		<method name="isAutoPlayOn" scope="instance">
			<description>Return true if the auto-scrolling of Carousel is &quot;on&quot;, or false otherwise.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true if autoPlay is &quot;on&quot;, or false
otherwise.</return-description>
		</method>
		<method name="_refreshUi" scope="instance">
			<description>Refresh the widget UI if it is not already rendered, on first item addition.</description>
		</method>
		<method name="getPageForItem" scope="instance">
			<description>Get the page an item is on within carousel.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> Index of item</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Page item is on</return-description>
		</method>
		<method name="_validateNumVisible" scope="instance">
			<description>Validate the numVisible value.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The numVisible value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="getElementForItems" scope="instance">
			<description>Return the carouselItemEl for all items in the Carousel.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Return all the items</return-description>
		</method>
		<method name="_animationCompleteHandler" scope="instance">
			<description>Handle the animation complete event.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event.</description>
			</parameter>
			<parameter name="p" type="Array" usage="required">
				<description> The event parameters.</description>
			</parameter>
			<parameter name="o" type="Object" usage="required">
				<description> The object that has the state of the Carousel</description>
			</parameter>
			</parameters>
		</method>
		<method name="_pagerChangeHandler" scope="instance">
			<description>The &quot;onchange&quot; handler for select box pagination.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_autoScroll" scope="instance">
			<description>Automatically scroll the contents of the Carousel.</description>
		</method>
		<method name="hide" scope="instance">
			<description>Hide the Carousel.</description>
		</method>
		<method name="scrollForward" scope="instance">
			<description>Scroll the Carousel by an item forward.</description>
		</method>
		<method name="getCarouselItemPosition" scope="instance" visibility="private">
			<description>Compute and return the position of a Carousel item based on its position.</description>
			<parameters>
			<parameter name="position" type="Number" usage="required">
				<description> The position of the Carousel item.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setSelectedItem" scope="instance">
			<description>Set the value for the selected item.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for &quot;selected&quot; item</description>
			</parameter>
			</parameters>
		</method>
		<method name="_numVisibleSetter" scope="instance">
			<description>Set the value for the number of visible items in the Carousel.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for numVisible</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_setCarouselOffset" scope="instance">
			<description>Set the Carousel offset to the passed offset.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Return the string representation of the Carousel.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="replaceItem" scope="instance">
			<description>Replace an item at index witin Carousel.</description>
			<parameters>
			<parameter name="item" type="String | Object | HTMLElement" usage="required">
				<description> The item to be appended to the Carousel. If the parameter is a string, it is assumed to be the content of the newly created item. If the parameter is an object, it is assumed to supply the content and an optional class and an optional id of the newly created item.</description>
			</parameter>
			<parameter name="index" type="Number" usage="required">
				<description> The position to where in the list (starts from zero).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true on success, false otherwise</return-description>
		</method>
		<method name="blur" scope="instance">
			<description>Remove focus from the Carousel.</description>
		</method>
		<method name="getFirstVisibleOnpage" scope="instance">
			<description>Get the first visible item's index on any given page.</description>
			<parameters>
			<parameter name="page" type="Number" usage="required">
				<description> Page</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>First item's index</return-description>
		</method>
		<method name="_updatePagerButtons" scope="instance">
			<description>Update the UI for the pager buttons based on the current page and the number of pages.</description>
		</method>
		<method name="_syncUiItems" scope="instance">
			<description>Redraw the UI for item positioning.</description>
		</method>
		<method name="addItem" scope="instance">
			<description>Insert or append an item to the Carousel. E.g. if Object: ({content:&quot;Your Content&quot;, id:&quot;&quot;, className:&quot;&quot;}, index)</description>
			<parameters>
			<parameter name="item" type="String | Object | HTMLElement" usage="required">
				<description> The item to be appended to the Carousel. If the parameter is a string, it is assumed to be the content of the newly created item. If the parameter is an object, it is assumed to supply the content and an optional class and an optional id of the newly created item.</description>
			</parameter>
			<parameter name="index" type="Number" usage="required">
				<description> optional The position to where in the list (starts from zero).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true on success, false otherwise</return-description>
		</method>
		<method name="_setContainerSize" scope="instance">
			<description>Set the container size.</description>
			<parameters>
			<parameter name="clip" type="HTMLElement" usage="required">
				<description> The clip container element.</description>
			</parameter>
			<parameter name="attr" type="String" usage="required">
				<description> Either set the height or width.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setNumItems" scope="instance">
			<description>Set the number of items in the Carousel. Warning: Setting this to a lower number than the current removes items from the end.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for numItems</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="getLoadingItems" scope="instance">
			<description>Return all loading items as an array.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Return all items that are loading in the Carousel.</return-description>
		</method>
		<method name="scrollBackward" scope="instance">
			<description>Scroll the Carousel by an item backward.</description>
		</method>
		<method name="selectNextItem" scope="instance">
			<description>Select the next item in the Carousel.</description>
		</method>
		<method name="_animateAndSetCarouselOffset" scope="instance">
			<description>Set the Carousel offset to the passed offset after animating.</description>
			<parameters>
			<parameter name="offset" type="Integer" usage="required">
				<description> The offset to which the Carousel has to be scrolled to.</description>
			</parameter>
			<parameter name="item" type="Integer" usage="required">
				<description> The index to which the Carousel will scroll.</description>
			</parameter>
			<parameter name="sentinel" type="Integer" usage="required">
				<description> The last element in the view port.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_selectedItemSetter" scope="instance">
			<description>Set the value for selectedItem.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for selectedItem</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_validateFirstVisible" scope="instance">
			<description>Validate the firstVisible value.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The first visible value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="updatePagination" scope="instance">
			<description>Update interface's pagination data within a registered template.</description>
		</method>
		<method name="syncNavigation" scope="instance" visibility="private">
			<description>Fire custom events for enabling/disabling navigation elements.</description>
		</method>
		<method name="getFirstVisibleForPosition" scope="instance" visibility="private">
			<description>Return the index of the first item in the view port for displaying item in &quot;pos&quot;.</description>
			<parameters>
			<parameter name="pos" type="Number" usage="required">
				<description> The position of the item to be displayed</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Render the Carousel.</description>
			<parameters>
			<parameter name="appendTo" type="HTMLElement | String" usage="required">
				<description> The element to which the Carousel should be appended prior to rendering.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Status of the operation</return-description>
		</method>
		<method name="replaceItems" scope="instance">
			<description>Replace multiple items at specified indexes. NOTE: item at index must already exist.</description>
			<parameters>
			<parameter name="items" type="Array} An array containing an array of replacement items each linked to the index where the substitution should take place. E.g. [[{content:'&lt;img|&gt;'}, index1], [{content:'&lt;img|&gt;'" usage="required">
				<description> , index2]]</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true on success, false otherwise</return-description>
		</method>
		<method name="getElementForItem" scope="instance">
			<description>Return the carouselItemEl at index or null if the index is not found.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the item to be returned</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Element" />
			</return-types>
			<return-description>Return the item at index or null if not found</return-description>
		</method>
		<method name="_setNumVisible" scope="instance">
			<description>Clip the container size every time numVisible is set.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for numVisible</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_keyboardEventHandler" scope="instance">
			<description>The keyboard event handler for Carousel.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event that is being handled.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addItems" scope="instance">
			<description>Insert or append multiple items to the Carousel.</description>
			<parameters>
			<parameter name="items" type="Array} An array containing an array of new items each linked to the index where the insertion should take place. E.g. [[{content:'&lt;img|&gt;'}, index1], [{content:'&lt;img|&gt;'" usage="required">
				<description> , index2]] NOTE: An item at index must already exist.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true on success, false otherwise</return-description>
		</method>
		<method name="scrollPageForward" scope="instance" visibility="private">
			<description>Scroll the Carousel by a page forward.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The context object</description>
			</parameter>
			</parameters>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initialize and bind the event handlers.</description>
		</method>
		<method name="_getSelectedItem" scope="instance">
			<description>Get the value for the selected item.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for &quot;selected&quot; item</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_syncUiForLazyLoading" scope="instance">
			<description>Synchronize and redraw the UI for lazy loading.</description>
		</method>
		<method name="createCarouselClip" scope="instance">
			<description>Create the Carousel clip container.</description>
		</method>
		<method name="_updatePagerMenu" scope="instance">
			<description>Update the UI for the pager menu based on the current page and the number of pages. If the number of pages is greater than MAX_PAGER_BUTTONS, then the selection of pages is provided by a drop down menu instead of a set of buttons.</description>
		</method>
		<method name="parseCarousel" scope="instance">
			<description>Find the Carousel within a container. The Carousel is identified by the first element that matches the carousel element tag or the element that has the Carousel class.</description>
			<parameters>
			<parameter name="parent" type="HTMLElement" usage="required">
				<description> The parent element to look under</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if Carousel is found, false otherwise</return-description>
		</method>
		<method name="getScrollOffset" scope="instance" visibility="private">
			<description>Return the scrolling offset size given the number of elements to scroll.</description>
			<parameters>
			<parameter name="delta" type="Number" usage="required">
				<description> The delta number of elements to scroll by.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getValidIndex" scope="instance">
			<description>Return a valid item for a possibly out of bounds index considering the isCircular property.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the item to be returned</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Return a valid item index</return-description>
		</method>
		<method name="createElement" scope="instance" visibility="private">
			<description>Create an element, set its class name and optionally install the element to its parent.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element to be created</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Configuration of parent, class and id attributes. If the content is specified, it is inserted after creation of the element. The content can also be an HTML element in which case it would be appended as a child node of the created element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setItemSelection" scope="instance" visibility="private">
			<description>Set the selected item.</description>
			<parameters>
			<parameter name="newpos" type="Number" usage="required">
				<description> The index of the new position</description>
			</parameter>
			<parameter name="oldpos" type="Number" usage="required">
				<description> The index of the previous position</description>
			</parameter>
			</parameters>
		</method>
		<method name="_syncUiForItemAdd" scope="instance">
			<description>Synchronize and redraw the UI after an item is added.</description>
		</method>
		<method name="createCarouselItem" scope="instance">
			<description>Create the Carousel item.</description>
			<parameters>
			<parameter name="obj" type="Object" usage="required">
				<description> The attributes of the element to be created</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setFirstVisible" scope="instance">
			<description>Set the value for the Carousel's first visible item.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The new value for firstVisible</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_validateNumItems" scope="instance">
			<description>Validate the numItems value.</description>
			<parameters>
			<parameter name="val" type="Number" usage="required">
				<description> The numItems value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="getItemPositionById" scope="instance">
			<description>Return the position of the Carousel item that has the id &quot;id&quot;, or -1 if the id is not found.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the item to be returned</description>
			</parameter>
			</parameters>
		</method>
		<method name="scrollTo" scope="instance">
			<description>Scroll the Carousel to make the item the first visible item.</description>
			<parameters>
			<parameter name="item" type="" usage="required">
				<description> Number The index of the element to position at.</description>
			</parameter>
			<parameter name="dontSelect" type="" usage="required">
				<description> Boolean True if select should be avoided</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getNumPages" scope="instance">
			<description>Get the total number of pages.</description>
		</method>
		<method name="selectPreviousItem" scope="instance">
			<description>Select the previous item in the Carousel.</description>
		</method>
		<method name="getRevealSize" scope="instance" visibility="private">
			<description>Return the size of a part of the item (reveal).</description>
		</method>
		<method name="updateStateAfterScroll" scope="instance" visibility="private">
			<description>Update the state variables after scrolling the Carousel view port.</description>
			<parameters>
			<parameter name="item" type="Integer" usage="required">
				<description> The index to which the Carousel has scrolled to.</description>
			</parameter>
			<parameter name="sentinel" type="Integer" usage="required">
				<description> The last element in the view port.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateTabIndex" scope="instance">
			<description>Set the correct tab index for the Carousel items.</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description> The element to be focussed</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearItems" scope="instance">
			<description>Clears the items from Carousel.</description>
		</method>
		<method name="_validateAnimation" scope="instance">
			<description>Validate animation parameters.</description>
			<parameters>
			<parameter name="cfg" type="Object" usage="required">
				<description> The animation configuration</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The status of the validation</return-description>
		</method>
		<method name="_getLastVisible" scope="instance">
			<description>Get the index of the last visible item</description>
		</method>
		<method name="setStyles" scope="instance" visibility="private">
			<description>Set multiple styles on one element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to set styles on</description>
			</parameter>
			<parameter name="style" type="Object" usage="required">
				<description> top:&quot;10px&quot;, left:&quot;0px&quot;, etc.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setNavigation" scope="instance">
			<description>Set the value for the Carousel's navigation.</description>
			<parameters>
			<parameter name="cfg" type="Object" usage="required">
				<description> The navigation configuration</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="isAnimating" scope="instance">
			<description>Return true if the Carousel is still animating, or false otherwise.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true if animation is still in progress, or
false otherwise.</return-description>
		</method>
		<method name="_setOrientation" scope="instance">
			<description>Set the orientation of the Carousel.</description>
			<parameters>
			<parameter name="val" type="Boolean" usage="required">
				<description> The new value for isVertical</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The new value that would be set</return-description>
		</method>
		<method name="_itemClickHandler" scope="instance">
			<description>The &quot;click&quot; handler for the item.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="getItems" scope="instance">
			<description>Return all items as an array.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Return all items in the Carousel</return-description>
		</method>
		<method name="getStyle" scope="instance" visibility="private">
			<description>Get the computed style of an element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element for which the style needs to be returned.</description>
			</parameter>
			<parameter name="style" type="String" usage="required">
				<description> The style attribute</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> &quot;int&quot;, &quot;float&quot;, etc. (defaults to int)</description>
			</parameter>
			</parameters>
		</method>
		<method name="createCarousel" scope="instance">
			<description>Create the Carousel.</description>
			<parameters>
			<parameter name="elId" type="String" usage="required">
				<description> The id of the element to be created</description>
			</parameter>
			</parameters>
		</method>
		<method name="getItem" scope="instance">
			<description>Return the item at index or null if the index is not found.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the item to be returned</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Return the item at index or null if not found</return-description>
		</method>
		<method name="_loadItems" scope="instance">
			<description>The load the required set of items that are needed for display.</description>
		</method>
		<method name="parseCarouselNavigation" scope="instance">
			<description>Find the Carousel navigation within a container. The navigation elements need to match the carousel navigation class names.</description>
			<parameters>
			<parameter name="parent" type="HTMLElement" usage="required">
				<description> The parent element to look under</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if at least one is found, false otherwise</return-description>
		</method>
		<method name="getCarouselItemSize" scope="instance" visibility="private">
			<description>Compute and return the height or width of a single Carousel item depending upon the orientation.</description>
			<parameters>
			<parameter name="which" type="String" usage="required">
				<description> &quot;height&quot; or &quot;width&quot; to be returned. If this is passed explicitly, the calculated size is not cached.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setClipContainerSize" scope="instance">
			<description>Set the clip container size (based on the new numVisible value).</description>
			<parameters>
			<parameter name="clip" type="HTMLElement" usage="required">
				<description> The clip container element.</description>
			</parameter>
			<parameter name="num" type="Number" usage="required">
				<description> optional The number of items per page.</description>
			</parameter>
			</parameters>
		</method>
		<method name="startAutoPlay" scope="instance">
			<description>Start auto-playing the Carousel.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TreeView">
		<description>Contains the tree view state data and the root node.</description>
		<constructors>
		<constructor scope="instance">
			<description>Contains the tree view state data and the root node.</description>
			<return-types>
				<return-type type="YAHOO.widget.TreeView" />
			</return-types>
			<parameters>
			<parameter name="id" type="string|HTMLElement" usage="required">
				<description> The id of the element, or the element itself that the tree will be inserted into.  
Existing markup in this element, if valid, will be used to build the tree</description>
			</parameter>
			<parameter name="oConfig" type="Array|Object|String" usage="optional">
				<description> (optional)  If present, it will be used to build the tree via method &lt;a href=&quot;#method_buildTreeFromObject&quot;&gt;buildTreeFromObject&lt;/a&gt;</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_dblClickTimer" type="window.timer object" scope="instance" visibility="private">
			<description>Stores the timer used to check for double clicks</description>
		</property>
		<property name="_currentlyHighlighted" type="YAHOO.widget.Node" scope="instance" visibility="private">
			<description>A reference to the Node that is currently highlighted. It is only meaningful if singleNodeHighlight is enabled</description>
		</property>
		<property name="locked" type="boolean" scope="instance">
			<description>We lock the tree control while waiting for the dynamic loader to return</description>
		</property>
		<property name="YAHOO.widget.TreeView.nodeCount" type="int" scope="static">
			<description>Running count of all nodes created in all trees. This is used to provide unique identifies for all nodes. Deleting nodes does not change the nodeCount.</description>
		</property>
		<property name="_expandAnim" type="string" scope="instance" visibility="private">
			<description>The animation to use for expanding children, if any</description>
		</property>
		<property name="_collapseAnim" type="string" scope="instance" visibility="private">
			<description>The animation to use for collapsing children, if any</description>
		</property>
		<property name="editorData" type="undefined" scope="static">
			<description>An object to store information used for in-line editing for all Nodes of all TreeViews. It contains: &lt;ul&gt; &lt;li&gt;active {boolean}, whether there is an active cell editor &lt;/li&gt; &lt;li&gt;whoHasIt {YAHOO.widget.TreeView} TreeView instance that is currently using the editor&lt;/li&gt; &lt;li&gt;nodeType {string} value of static Node._type property, allows reuse of input element if node is of the same type.&lt;/li&gt; &lt;li&gt;editorPanel {HTMLelement (&amp;lt;div&amp;gt;)} element holding the in-line editor&lt;/li&gt; &lt;li&gt;inputContainer {HTMLelement (&amp;lt;div&amp;gt;)} element which will hold the type-specific input element(s) to be filled by the fillEditorContainer method&lt;/li&gt; &lt;li&gt;buttonsContainer {HTMLelement (&amp;lt;div&amp;gt;)} element which holds the &amp;lt;button&amp;gt; elements for Ok/Cancel. If you don't want any of the buttons, hide it via CSS styles, don't destroy it&lt;/li&gt; &lt;li&gt;node {YAHOO.widget.Node} reference to the Node being edited&lt;/li&gt; &lt;li&gt;saveOnEnter {boolean}, whether the Enter key should be accepted as a Save command (Esc. is always taken as Cancel), disable for multi-line input elements &lt;/li&gt; &lt;li&gt;oldValue {any} value before editing&lt;/li&gt; &lt;/ul&gt; Editors are free to use this object to store additional data.</description>
		</property>
		<property name="_el" type="HTMLelement" scope="instance" visibility="private">
			<description>The host element for this tree</description>
		</property>
		<property name="currentFocus" type="YAHOO.widget.Node" scope="instance">
			<description>A reference to the Node currently having the focus or null if none.</description>
		</property>
		<property name="YAHOO.widget.TreeView.trees" type="Array" scope="static" visibility="private">
			<description>Global cache of tree instances</description>
		</property>
		<property name="_nodes" type="Node[]" scope="instance" visibility="private">
			<description>Flat collection of all nodes in this tree. This is a sparse array, so the length property can't be relied upon for a node count for the tree.</description>
		</property>
		<property name="_animCount" type="int" scope="instance" visibility="private">
			<description>The current number of animations that are executing</description>
		</property>
		<property name="validator" type="function" scope="instance">
			<description>Validator function for edited data, called from the TreeView instance scope, receives the arguments (newValue, oldValue, nodeInstance) and returns either the validated (or type-converted) value or undefined. An undefined return will prevent the editor from closing</description>
		</property>
		<property name="_hasDblClickSubscriber" type="boolean" scope="instance" visibility="private">
			<description>Whether there is any subscriber to dblClickEvent</description>
		</property>
		<property name="maxAnim" type="int" scope="instance">
			<description>The maximum number of animations to run at one time.</description>
		</property>
		<property name="singleNodeHighlight" type="boolean" scope="instance">
			<description>If true, only one Node can be highlighted at a time</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The id of tree container element</description>
		</property>
		<property name="TreeView.FOCUS_CLASS_NAME" type="String" scope="static">
			<description>Class name assigned to elements that have the focus</description>
		</property>
		</properties>
		<methods>
		<method name="animateExpand" scope="instance">
			<description>Perform the expand animation if configured, or just show the element if not configured or too many animations are in progress</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to animate</description>
			</parameter>
			<parameter name="node" type="YAHOO.util.Node" usage="required">
				<description> the node that was expanded</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if animation could be invoked, false otherwise</return-description>
		</method>
		<method name="setDynamicLoad" scope="instance">
			<description>Configures this tree to dynamically load all child data</description>
			<parameters>
			<parameter name="fnDataLoader" type="function" usage="required">
				<description> the function that will be called to get the data</description>
			</parameter>
			<parameter name="iconMode" type="int" usage="required">
				<description> configures the icon that is displayed when a dynamic load node is expanded the first time without children. By default, the &quot;collapse&quot; icon will be used. If set to 1, the leaf node icon will be displayed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>TreeView instance toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string representation of the tree</return-description>
		</method>
		<method name="render" scope="instance">
			<description>Renders the tree boilerplate and visible nodes</description>
		</method>
		<method name="getNodeByIndex" scope="instance">
			<description>Returns a node in the tree that has the specified index (this index is created internally, so this function probably will only be used in html generated for a given node.)</description>
			<parameters>
			<parameter name="nodeIndex" type="int" usage="required">
				<description> the index of the node wanted</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the node with index=nodeIndex, null if no match</return-description>
		</method>
		<method name="_onMouseOverEvent" scope="instance" visibility="private">
			<description>Event listener for mouse over events</description>
		</method>
		<method name="collapseComplete" scope="instance">
			<description>Function executed when the collapse animation completes</description>
		</method>
		<method name="setNodesProperty" scope="instance">
			<description>Sets the value of a property for all loaded nodes in the tree.</description>
			<parameters>
			<parameter name="name" type="string" usage="required">
				<description> Name of the property to be set</description>
			</parameter>
			<parameter name="value" type="any" usage="required">
				<description> value to be set</description>
			</parameter>
			<parameter name="refresh" type="boolean" usage="required">
				<description> if present and true, it does a refresh</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDblClickEvent" scope="instance" visibility="private">
			<description>Event listener for double-click events</description>
		</method>
		<method name="regNode" scope="instance" visibility="private">
			<description>Nodes register themselves with the tree instance when they are created.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node to register</description>
			</parameter>
			</parameters>
		</method>
		<method name="onEventToggleHighlight" scope="instance">
			<description>Event listener to toggle node highlight. Can be assigned as listener to clickEvent, dblClickEvent and enterKeyPressed. It returns false to prevent the default action.</description>
			<parameters>
			<parameter name="oArgs" type="any" usage="required">
				<description> it takes the arguments of any of the events mentioned above</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="false" />
			</return-types>
			<return-description>Always cancels the default action for the event</return-description>
		</method>
		<method name="onExpand" scope="instance">
			<description>Abstract method that is executed when a node is expanded</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node that was expanded</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initEditor" scope="instance" visibility="private">
			<description>Entry point for initializing the editing plug-in.  TreeView will call this method on initializing if it exists</description>
		</method>
		<method name="setExpandAnim" scope="instance">
			<description>Sets up the animation for expanding children</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of animation (acceptable values defined in YAHOO.widget.TVAnim)</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.TreeView.getTree" scope="static">
			<description>Global method for getting a tree by its id. Used in the generated tree html.</description>
			<parameters>
			<parameter name="treeId" type="String" usage="required">
				<description> the id of the tree instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="TreeView" />
			</return-types>
			<return-description>the tree instance requested, null if not found.</return-description>
		</method>
		<method name="_onMouseOutEvent" scope="instance" visibility="private">
			<description>Event listener for mouse out events</description>
		</method>
		<method name="removeNode" scope="instance">
			<description>Removes the node and its children, and optionally refreshes the branch of the tree that was affected.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> to remove</description>
			</parameter>
			<parameter name="autoRefresh" type="boolean" usage="required">
				<description> automatically refreshes branch if true</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>False is there was a problem, true otherwise.</return-description>
		</method>
		<method name="_getEventTargetTdEl" scope="instance" visibility="private">
			<description>Returns the TD element where the event has occurred</description>
		</method>
		<method name="popNode" scope="instance">
			<description>Removes the node from the tree, preserving the child collection to make it possible to insert the branch into another part of the tree, or another tree.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> to remove</description>
			</parameter>
			</parameters>
		</method>
		<method name="onCollapse" scope="instance">
			<description>Abstract method that is executed when a node is collapsed.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node that was collapsed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance" visibility="private">
			<description>Initializes the tree</description>
		</method>
		<method name="getEl" scope="instance">
			<description>Returns the tree's host element</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the host element</return-description>
		</method>
		<method name="removeChildren" scope="instance">
			<description>Deletes this nodes child collection, recursively. Also collapses the node, and resets the dynamic load flag. The primary use for this method is to purge a node and allow it to fetch its data dynamically again.</description>
			<parameters>
			<parameter name="node" type="Node" usage="required">
				<description> the node to purge</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyDownEvent" scope="instance" visibility="private">
			<description>Event listener for key down events</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Nulls out the entire TreeView instance and related objects, removes attached event listeners, and clears out DOM elements inside the container. After calling this method, the instance reference should be expliclitly nulled by implementer, as in myDataTable = null. Use with caution!</description>
		</method>
		<method name="animateCollapse" scope="instance">
			<description>Perform the collapse animation if configured, or just show the element if not configured or too many animations are in progress</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to animate</description>
			</parameter>
			<parameter name="node" type="YAHOO.util.Node" usage="required">
				<description> the node that was expanded</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if animation could be invoked, false otherwise</return-description>
		</method>
		<method name="getHighlightedNode" scope="instance">
			<description>When in singleNodeHighlight it returns the node highlighted or null if none. Returns null if singleNodeHighlight is false.</description>
			<return-types>
			<return-type type="YAHOO.widget.Node" />
			</return-types>
			<return-description>a node reference or null</return-description>
		</method>
		<method name="expandAll" scope="instance">
			<description>Expands all child nodes. Note: this conflicts with the &quot;multiExpand&quot; node property. If expand all is called in a tree with nodes that do not allow multiple siblings to be displayed, only the last sibling will be expanded.</description>
		</method>
		<method name="getNodeCount" scope="instance">
			<description>Count of nodes in tree</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>number of nodes in the tree</return-description>
		</method>
		<method name="draw" scope="instance">
			<description>Renders the tree boilerplate and visible nodes. Alias for render</description>
		</method>
		<method name="getTreeDefinition" scope="instance">
			<description>Returns an object which could be used to rebuild the tree. It can be passed to the tree constructor to reproduce the same tree. It will return false if any node loads dynamically, regardless of whether it is loaded or not.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the tree or false if any node is defined as dynamic</return-description>
		</method>
		<method name="YAHOO.widget.TreeView.getNode" scope="static">
			<description>Global method for getting a node by its id. Used in the generated tree html.</description>
			<parameters>
			<parameter name="treeId" type="String" usage="required">
				<description> the id of the tree instance</description>
			</parameter>
			<parameter name="nodeIndex" type="String" usage="required">
				<description> the index of the node to return</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the node instance requested, null if not found</return-description>
		</method>
		<method name="getNodeByProperty" scope="instance">
			<description>Returns a node that has a matching property and value in the data object that was passed into its constructor.</description>
			<parameters>
			<parameter name="property" type="object" usage="required">
				<description> the property to search (usually a string)</description>
			</parameter>
			<parameter name="value" type="object" usage="required">
				<description> the value we want to find (usuall an int or string)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the matching node, null if no match</return-description>
		</method>
		<method name="getNodesBy" scope="instance">
			<description>Returns a collection of nodes that have passed the test function passed as its only argument.  The function will receive a reference to each node to be tested.</description>
			<parameters>
			<parameter name="a" type="function" usage="required">
				<description> boolean function that receives a Node instance and returns true to add the node to the results list</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>the matching collection of nodes, null if no match</return-description>
		</method>
		<method name="_removeChildren_animComplete" scope="instance" visibility="private">
			<description>wait until the animation is complete before deleting to avoid javascript errors</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the custom event payload</description>
			</parameter>
			</parameters>
		</method>
		<method name="_closeEditor" scope="instance" visibility="private">
			<description>Method to be called when the inline editing is finished and the editor is to be closed</description>
			<parameters>
			<parameter name="save" type="Boolean" usage="required">
				<description> true if the edited value is to be saved, false if discarded</description>
			</parameter>
			</parameters>
		</method>
		<method name="getNodesByProperty" scope="instance">
			<description>Returns a collection of nodes that have a matching property and value in the data object that was passed into its constructor.</description>
			<parameters>
			<parameter name="property" type="object" usage="required">
				<description> the property to search (usually a string)</description>
			</parameter>
			<parameter name="value" type="object" usage="required">
				<description> the value we want to find (usuall an int or string)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>the matching collection of nodes, null if no match</return-description>
		</method>
		<method name="onEventEditNode" scope="instance">
			<description>Method to be associated with an event (clickEvent, dblClickEvent or enterKeyPressed) to pop up the contents editor It calls the corresponding node editNode method.</description>
			<parameters>
			<parameter name="oArgs" type="object" usage="required">
				<description> Object passed as arguments to TreeView event listeners</description>
			</parameter>
			</parameters>
		</method>
		<method name="_deleteNode" scope="instance" visibility="private">
			<description>Deletes the node and recurses children</description>
		</method>
		<method name="getRoot" scope="instance">
			<description>Returns the root node of this tree</description>
			<return-types>
			<return-type type="Node" />
			</return-types>
			<return-description>the root node</return-description>
		</method>
		<method name="_onClickEvent" scope="instance" visibility="private">
			<description>Event listener for click events</description>
		</method>
		<method name="getNodeByElement" scope="instance">
			<description>Returns the treeview node reference for an ancestor element of the node, or null if it is not contained within any node in this tree.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Node" />
			</return-types>
			<return-description>a node reference or null</return-description>
		</method>
		<method name="setCollapseAnim" scope="instance">
			<description>Sets up the animation for collapsing children</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> of animation (acceptable values defined in YAHOO.widget.TVAnim)</description>
			</parameter>
			</parameters>
		</method>
		<method name="buildTreeFromObject" scope="instance">
			<description>Builds the TreeView from an object.  This is the method called by the constructor to build the tree when it has a second argument. A tree can be described by an array of objects, each object corresponding to a node. Node descriptions may contain values for any property of a node plus the following extra properties: &lt;ul&gt; &lt;li&gt;type: can be one of the following:&lt;ul&gt; &lt;li&gt; A shortname for a node type (&lt;code&gt;'text','menu','html'&lt;/code&gt;) &lt;/li&gt; &lt;li&gt;The name of a Node class under YAHOO.widget (&lt;code&gt;'TextNode', 'MenuNode', 'DateNode'&lt;/code&gt;, etc) &lt;/li&gt; &lt;li&gt;a reference to an actual class: &lt;code&gt;YAHOO.widget.DateNode&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;children: an array containing further node definitions&lt;/li&gt;&lt;/ul&gt; A string instead of an object will produce a node of type 'text' with the given string as its label.</description>
			<parameters>
			<parameter name="oConfig" type="Array|Object|String" usage="required">
				<description>  array containing a full description of the tree. An object or a string will be turned into an array with the given object or string as its only element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="buildTreeFromMarkup" scope="instance">
			<description>Builds the TreeView from existing markup.  Markup should consist of &amp;lt;UL&amp;gt; or &amp;lt;OL&amp;gt; elements containing &amp;lt;LI&amp;gt; elements.  Each &amp;lt;LI&amp;gt; can have one element used as label and a second optional element which is to be a &amp;lt;UL&amp;gt; or &amp;lt;OL&amp;gt; containing nested nodes. Depending on what the first element of the &amp;lt;LI&amp;gt; element is, the following Nodes will be created: &lt;ul&gt; &lt;li&gt;plain text: a regular TextNode&lt;/li&gt; &lt;li&gt;anchor &amp;lt;A&amp;gt;: a TextNode with its &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; taken from the anchor&lt;/li&gt; &lt;li&gt;anything else: an HTMLNode&lt;/li&gt;&lt;/ul&gt; Only the first outermost (un-)ordered list in the markup and its children will be parsed. Nodes will be collapsed unless an &amp;lt;LI&amp;gt; tag has a className called 'expanded'. All other className attributes will be copied over to the Node className property. If the &amp;lt;LI&amp;gt; element contains an attribute called &lt;code&gt;yuiConfig&lt;/code&gt;, its contents should be a JSON-encoded object as the one used in method buildTreeFromObject.</description>
			<parameters>
			<parameter name="id" type="string|HTMLElement" usage="required">
				<description> The id of the element that contains the markup or a reference to it.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_nodeEditing" scope="instance" visibility="private">
			<description>Entry point of the editing plug-in.  TreeView will call this method if it exists when a node label is clicked</description>
			<parameters>
			<parameter name="node" type="YAHOO.widget.Node" usage="required">
				<description> the node to be edited</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true to indicate that the node is editable and prevent any further bubbling of the click.</return-description>
		</method>
		<method name="expandComplete" scope="instance">
			<description>Function executed when the expand animation completes</description>
		</method>
		<method name="collapseAll" scope="instance">
			<description>Collapses all expanded child nodes in the entire tree.</description>
		</method>
		<method name="_destroyEditor" scope="instance" visibility="private">
			<description>Entry point for TreeView's destroy method to destroy whatever the editing plug-in has created</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ScriptNodeDataSource" superclass="YAHOO.util.DataSourceBase">
		<description>ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.</description>
			<return-types>
				<return-type type="YAHOO.util.ScriptNodeDataSource" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_nPending" type="Number" scope="static" visibility="private">
			<description>Counter for pending requests. When this is 0, it is safe to purge callbacks array.</description>
		</property>
		<property name="scriptCallbackParam" type="String" scope="instance">
			<description>Callback string parameter name sent to the remote script. By default, requests are sent to &amp;#60;URI&amp;#62;?&amp;#60;scriptCallbackParam&amp;#62;=callback</description>
		</property>
		<property name="getUtility" type="Object" scope="instance">
			<description>Alias to YUI Get Utility, to allow implementers to use a custom class.</description>
		</property>
		<property name="_nId" type="Number" scope="static" visibility="private">
			<description>Unique ID to track requests.</description>
		</property>
		<property name="callbacks" type="Function[]" scope="static">
			<description>Global array of callback functions, one for each request sent.</description>
		</property>
		<property name="asyncMode" type="String" scope="instance">
			<description>Defines request/response management in the following manner: &lt;dl&gt; &lt;!--&lt;dt&gt;queueRequests&lt;/dt&gt; &lt;dd&gt;If a request is already in progress, wait until response is returned before sending the next request.&lt;/dd&gt; &lt;dt&gt;cancelStaleRequests&lt;/dt&gt; &lt;dd&gt;If a request is already in progress, cancel it before sending the next request.&lt;/dd&gt;--&gt; &lt;dt&gt;ignoreStaleResponses&lt;/dt&gt; &lt;dd&gt;Send all requests, but handle only the response for the most recently sent request.&lt;/dd&gt; &lt;dt&gt;allowAll&lt;/dt&gt; &lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt; &lt;/dl&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="doBeforeGetScriptNode" scope="instance">
			<description>Overridable method gives implementers access to modify the URI before the dynamic script node gets inserted. Implementers should take care not to return an invalid URI.</description>
			<parameters>
			<parameter name="URI" type="String" usage="required">
				<description> to the script</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>URI to the script</return-description>
		</method>
		<method name="makeConnection" scope="instance">
			<description>Overriding method passes query to Get Utility. The returned response is then forwarded to the handleResponse function.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object literal.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID.</return-description>
		</method>
		<method name="generateRequestCallback" scope="instance">
			<description>Creates a request callback that gets appended to the script URI. Implementers can customize this string to match their server's query syntax.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>String fragment that gets appended to script URI that 
specifies the callback function</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Anim">
		<description>Base animation class that provides the interface for building animated effects.
&lt;p&gt;Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Base animation class that provides the interface for building animated effects.
&lt;p&gt;Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.Anim" />
			</return-types>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> Reference to the element that will be animated</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description> The attribute(s) to be animated.  
Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  
Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  
All attribute names use camelCase.</description>
			</parameter>
			<parameter name="duration" type="Number" usage="required">
				<description> (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="isAnimated" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not the animation is running.</description>
		</property>
		<property name="_onTween" type="undefined" scope="instance" visibility="private">
			<description>Custom event that fires after onTween</description>
		</property>
		<property name="el" type="HTMLElement" scope="instance" visibility="private">
			<description>The element to be animated.</description>
		</property>
		<property name="actualFrames" type="Int" scope="instance" visibility="private">
			<description>The number of frames this animation was able to execute.</description>
		</property>
		<property name="useSeconds" type="Boolean" scope="instance">
			<description>Whether or not the duration should be treated as seconds. Defaults to true.</description>
		</property>
		<property name="totalFrames" type="Int" scope="instance">
			<description>The total number of frames to be executed. In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.</description>
		</property>
		<property name="_onStart" type="undefined" scope="instance" visibility="private">
			<description>Custom event that fires after onStart, useful in subclassing</description>
		</property>
		<property name="_onComplete" type="undefined" scope="instance" visibility="private">
			<description>Custom event that fires after onComplete</description>
		</property>
		<property name="startTime" type="Date" scope="instance" visibility="private">
			<description>A Date object that is created when the animation begins.</description>
		</property>
		<property name="duration" type="Number" scope="instance">
			<description>The length of the animation. Defaults to &quot;1&quot; (second).</description>
		</property>
		<property name="attributes" type="Object" scope="instance">
			<description>The collection of attributes to be animated.  Each attribute must have at least a &quot;to&quot; or &quot;by&quot; defined in order to animate.  If &quot;to&quot; is supplied, the animation will end with the attribute at that value.  If &quot;by&quot; is supplied, the animation will end at that value plus its starting value. If both are supplied, &quot;to&quot; is used, and &quot;by&quot; is ignored. Optional additional member include &quot;from&quot; (the value the attribute should start animating from, defaults to current value), and &quot;unit&quot; (the units to apply to the values).</description>
		</property>
		<property name="method" type="Function" scope="instance">
			<description>The method that will provide values to the attribute(s) during the animation. Defaults to &quot;YAHOO.util.Easing.easeNone&quot;.</description>
		</property>
		<property name="currentFrame" type="Int" scope="instance">
			<description>The location of the current animation on the timeline. In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.</description>
		</property>
		</properties>
		<methods>
		<method name="isAnimated" scope="instance">
			<description>Checks whether the element is currently animated.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>current value of isAnimated.</return-description>
		</method>
		<method name="setEl" scope="instance">
			<description>Changes the animated element</description>
		</method>
		<method name="getAttribute" scope="instance">
			<description>Returns current value of the attribute.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>val The current value of the attribute.</return-description>
		</method>
		<method name="setAttribute" scope="instance">
			<description>Applies a value to an attribute.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			<parameter name="val" type="Number" usage="required">
				<description> The value to be applied to the attribute.</description>
			</parameter>
			<parameter name="unit" type="String" usage="required">
				<description> The unit ('px', '%', etc.) of the value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onTween" scope="instance" visibility="private">
			<description>Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).</description>
		</method>
		<method name="doMethod" scope="instance">
			<description>Returns the value computed by the animation's &quot;method&quot;.</description>
			<parameters>
			<parameter name="attr" type="String" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			<parameter name="start" type="Number" usage="required">
				<description> The value this attribute should start from for this animation.</description>
			</parameter>
			<parameter name="end" type="Number" usage="required">
				<description> The value this attribute should end at for this animation.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The Value to be applied to the attribute.</return-description>
		</method>
		<method name="getEl" scope="instance">
			<description>Returns a reference to the animated element.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="setRuntimeAttribute" scope="instance" visibility="private">
			<description>Sets the actual values to be used during the animation. Should only be needed for subclass use.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> The attribute object</description>
			</parameter>
			</parameters>
		</method>
		<method name="stop" scope="instance">
			<description>Stops the animation. Normally called by AnimMgr when animation completes.</description>
			<parameters>
			<parameter name="finish" type="Boolean" usage="optional">
				<description> (optional) If true, animation will jump to final frame.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Constructor for Anim instance.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> Reference to the element that will be animated</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description> The attribute(s) to be animated.  Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  All attribute names use camelCase.</description>
			</parameter>
			<parameter name="duration" type="Number" usage="required">
				<description> (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Provides a readable name for the Anim instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="getDefaultUnit" scope="instance">
			<description>Returns the unit to use when none is supplied.</description>
			<parameters>
			<parameter name="attr" type="attr" usage="required">
				<description> The name of the attribute.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The default unit to be used.</return-description>
		</method>
		<method name="animate" scope="instance">
			<description>Starts the animation by registering it with the animation manager.</description>
		</method>
		<method name="getStartTime" scope="instance">
			<description>Returns the animation start time.</description>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>current value of startTime.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Sort">
		<description>Sort static utility to support Column sorting.</description>
		<methods>
		<method name="compare" scope="instance">
			<description>Comparator function for simple case-insensitive string sorting.</description>
			<parameters>
			<parameter name="a" type="Object" usage="required">
				<description> First sort argument.</description>
			</parameter>
			<parameter name="b" type="Object" usage="required">
				<description> Second sort argument.</description>
			</parameter>
			<parameter name="desc" type="Boolean" usage="required">
				<description> True if sort direction is descending, false if sort direction is ascending.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.UserAction">
		<description>The UserAction object provides functions that simulate events occurring in
the browser. Since these are simulated events, they do not behave exactly
as regular, user-initiated events do, but can be used to test simple
user interactions safely.</description>
		<methods>
		<method name="fireKeyEvent" scope="static" visibility="private">
			<description>Fires an event that normally would be fired by the keyboard (keyup, keydown, keypress). Make sure to specify either keyCode or charCode as an option.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type of event (&quot;keyup&quot;, &quot;keydown&quot; or &quot;keypress&quot;).</description>
			</parameter>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The target of the event.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Options for the event. Either keyCode or charCode are required.</description>
			</parameter>
			</parameters>
		</method>
		<method name="mouseEvent" scope="static">
			<description>Simulates a mouse event on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to click on.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to fire. This can be any one of the following: click, dblclick, mousedown, mouseup, mouseout, mouseover, and mousemove.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="keypress" scope="static">
			<description>Simulates a keypress on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="keyup" scope="static">
			<description>Simulates a keyup event on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="mouseup" scope="static">
			<description>Simulates a mouseup on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="keydown" scope="static">
			<description>Simulates a keydown event on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="mousemove" scope="static">
			<description>Simulates a mousemove on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="simulateMouseEvent" scope="static" visibility="private">
			<description>Simulates a mouse event using the given event information to populate the generated event object. This method does browser-equalizing calculations to account for differences in the DOM and IE event models as well as different browser quirks.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The target of the given event.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to fire. This can be any one of the following: click, dblclick, mousedown, mouseup, mouseout, mouseover, and mousemove.</description>
			</parameter>
			<parameter name="bubbles" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the event can be bubbled up. DOM Level 2 specifies that all mouse events bubble by default. The default is true.</description>
			</parameter>
			<parameter name="cancelable" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the event can be canceled using preventDefault(). DOM Level 2 specifies that all mouse events except mousemove can be cancelled. The default is true for all events except mousemove, for which the default is false.</description>
			</parameter>
			<parameter name="view" type="Window" usage="optional">
				<description> (Optional) The view containing the target. This is typically the window object. The default is window.</description>
			</parameter>
			<parameter name="detail" type="int" usage="optional">
				<description> (Optional) The number of times the mouse button has been used. The default value is 1.</description>
			</parameter>
			<parameter name="screenX" type="int" usage="optional">
				<description> (Optional) The x-coordinate on the screen at which point the event occured. The default is 0.</description>
			</parameter>
			<parameter name="screenY" type="int" usage="optional">
				<description> (Optional) The y-coordinate on the screen at which point the event occured. The default is 0.</description>
			</parameter>
			<parameter name="clientX" type="int" usage="optional">
				<description> (Optional) The x-coordinate on the client at which point the event occured. The default is 0.</description>
			</parameter>
			<parameter name="clientY" type="int" usage="optional">
				<description> (Optional) The y-coordinate on the client at which point the event occured. The default is 0.</description>
			</parameter>
			<parameter name="ctrlKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the CTRL keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="altKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the ALT keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="shiftKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the SHIFT keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="metaKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the META keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="button" type="int" usage="optional">
				<description> (Optional) The button being pressed while the event is executing. The value should be 0 for the primary mouse button (typically the left button), 1 for the terciary mouse button (typically the middle button), and 2 for the secondary mouse button (typically the right button). The default is 0.</description>
			</parameter>
			<parameter name="relatedTarget" type="HTMLElement" usage="optional">
				<description> (Optional) For mouseout events, this is the element that the mouse has moved to. For mouseover events, this is the element that the mouse has moved from. This argument is ignored for all other events. The default is null.</description>
			</parameter>
			</parameters>
		</method>
		<method name="mousedown" scope="static">
			<description>Simulates a mousedown on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="mouseout" scope="static">
			<description>Simulates a mouseout event on a particular element. Use &quot;relatedTarget&quot; on the options object to specify where the mouse moved to. Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so toElement is assigned in its place. IE doesn't allow toElement to be be assigned, so relatedTarget is assigned in its place. Both of these concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly in both browsers.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="simulateKeyEvent" scope="static" visibility="private">
			<description>Simulates a key event using the given event information to populate the generated event object. This method does browser-equalizing calculations to account for differences in the DOM and IE event models as well as different browser quirks. Note: keydown causes Safari 2.x to crash.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The target of the given event.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to fire. This can be any one of the following: keyup, keydown, and keypress.</description>
			</parameter>
			<parameter name="bubbles" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the event can be bubbled up. DOM Level 3 specifies that all key events bubble by default. The default is true.</description>
			</parameter>
			<parameter name="cancelable" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the event can be canceled using preventDefault(). DOM Level 3 specifies that all key events can be cancelled. The default is true.</description>
			</parameter>
			<parameter name="view" type="Window" usage="optional">
				<description> (Optional) The view containing the target. This is typically the window object. The default is window.</description>
			</parameter>
			<parameter name="ctrlKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the CTRL keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="altKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the ALT keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="shiftKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the SHIFT keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="metaKey" type="Boolean" usage="optional">
				<description> (Optional) Indicates if one of the META keys is pressed while the event is firing. The default is false.</description>
			</parameter>
			<parameter name="keyCode" type="int" usage="optional">
				<description> (Optional) The code for the key that is in use. The default is 0.</description>
			</parameter>
			<parameter name="charCode" type="int" usage="optional">
				<description> (Optional) The Unicode code for the character associated with the key being used. The default is 0.</description>
			</parameter>
			</parameters>
		</method>
		<method name="mouseover" scope="static">
			<description>Simulates a mouseover event on a particular element. Use &quot;relatedTarget&quot; on the options object to specify where the mouse moved from. Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so fromElement is assigned in its place. IE doesn't allow fromElement to be be assigned, so relatedTarget is assigned in its place. Both of these concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly in both browsers.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to act on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="click" scope="static">
			<description>Simulates a click on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to click on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		<method name="dblclick" scope="static">
			<description>Simulates a double click on a particular element.</description>
			<parameters>
			<parameter name="target" type="HTMLElement" usage="required">
				<description> The element to double click on.</description>
			</parameter>
			<parameter name="options" type="Object" usage="required">
				<description> Additional event options (use DOM standard names).</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Tab" superclass="YAHOO.util.Element">
		<description>A representation of a Tab's label and content.</description>
		<constructors>
		<constructor scope="instance">
			<description>A representation of a Tab's label and content.</description>
			<return-types>
				<return-type type="YAHOO.widget.Tab" />
			</return-types>
			<parameters>
			<parameter name="element" type="HTMLElement | String" usage="optional">
				<description>  (optional) The html element that 
represents the Tab. An element will be created if none provided.</description>
			</parameter>
			<parameter name="properties" type="Object" usage="required">
				<description> A key map of initial properties</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="HIDDEN_CLASSNAME" type="String" scope="instance">
			<description>The class name applied to active tabs.</description>
		</property>
		<property name="ACTIVE_TITLE" type="String" scope="instance">
			<description>The title applied to active tabs.</description>
		</property>
		<property name="DISABLED_CLASSNAME" type="String" scope="instance">
			<description>The class name applied to disabled tabs.</description>
		</property>
		<property name="LOADING_CLASSNAME" type="String" scope="instance">
			<description>The class name applied to dynamic tabs while loading.</description>
		</property>
		<property name="LABEL_INNER_TAGNAME" type="String" scope="instance">
			<description>The default tag name for a Tab's inner element.</description>
		</property>
		<property name="dataConnection" type="Object" scope="instance">
			<description>Provides a reference to the connection request object when data is loaded dynamically.</description>
		</property>
		<property name="loadHandler" type="object" scope="instance">
			<description>Object containing success and failure callbacks for loading data.</description>
		</property>
		<property name="ACTIVE_CLASSNAME" type="String" scope="instance">
			<description>The class name applied to active tabs.</description>
		</property>
		</properties>
		<methods>
		<method name="initAttributes" scope="instance">
			<description>setAttributeConfigs Tab specific properties.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Hash of initial attributes</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Provides a readable name for the tab.</description>
			<return-description>String</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Menu" superclass="YAHOO.widget.Overlay">
		<description>The Menu class creates a container that holds a vertical list representing 
a set of options or commands.  Menu is the base class for all 
menu containers.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Menu class creates a container that holds a vertical list representing 
a set of options or commands.  Menu is the base class for all 
menu containers.</description>
			<return-types>
				<return-type type="YAHOO.widget.Menu" />
			</return-types>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source 
for the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> 
Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as 
the data source for the menu.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the menu. See configuration class documentation for 
more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="activeItem" type="YAHOO.widget.MenuItem" scope="instance">
			<description>Object reference to the item in the menu that has is selected.</description>
		</property>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to the menu's &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="lazyLoad" type="Boolean" scope="instance">
			<description>Boolean indicating if the menu's &quot;lazy load&quot; feature is enabled. If set to &quot;true,&quot; initialization and rendering of the menu's items will be deferred until the first time it is made visible. This property should be set via the constructor using the configuration object literal.</description>
		</property>
		<property name="parent" type="YAHOO.widget.MenuItem" scope="instance">
			<description>Object reference to the menu's parent menu or menu item.  This property can be set via the constructor using the configuration object literal.</description>
		</property>
		<property name="_bStopMouseEventHandlers" type="Boolean" scope="instance" visibility="private">
			<description>Stops &quot;mouseover,&quot; &quot;mouseout,&quot; and &quot;mousemove&quot; event handlers from executing.</description>
		</property>
		<property name="_bHandledMouseOverEvent" type="Boolean" scope="instance" visibility="private">
			<description>Boolean indicating the current state of the menu's &quot;mouseover&quot; event.</description>
		</property>
		<property name="srcElement" type="HTMLSelectElement|HTMLDivElement" scope="instance">
			<description>Object reference to the HTML element (either &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt;) used to create the menu.</description>
		</property>
		<property name="_bHandledMouseOutEvent" type="Boolean" scope="instance" visibility="private">
			<description>Boolean indicating the current state of the menu's &quot;mouseout&quot; event.</description>
		</property>
		<property name="_sClassName" type="String" scope="instance" visibility="private">
			<description>The current value of the &quot;classname&quot; configuration attribute.</description>
		</property>
		<property name="ITEM_TYPE" type="YAHOO.widget.MenuItem" scope="instance">
			<description>Object representing the type of menu item to instantiate and add when parsing the child nodes (either &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element, &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element or &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;) of the menu's source HTML element.</description>
		</property>
		<property name="itemData" type="Array" scope="instance">
			<description>Array of items to be added to the menu. The array can contain strings representing the text for each item to be created, object literals representing the menu item configuration properties, or MenuItem instances.  This property should be set via the constructor using the configuration object literal.</description>
		</property>
		<property name="GROUP_TITLE_TAG_NAME" type="String" scope="instance">
			<description>String representing the tagname of the HTML element used to title the menu's item groups.</description>
		</property>
		<property name="_aGroupTitleElements" type="Array" scope="instance" visibility="private">
			<description>Array of HTML element used to title groups of menu items.</description>
		</property>
		<property name="_aListElements" type="Array" scope="instance" visibility="private">
			<description>Array of &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; elements, each of which is the parent node for each item's &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="_useHideDelay" type="Boolean" scope="instance" visibility="private">
			<description>Boolean indicating if the &quot;mouseover&quot; and &quot;mouseout&quot; event handlers used for hiding the menu via a call to &quot;YAHOO.lang.later&quot; have already been assigned.</description>
		</property>
		<property name="_nCurrentMouseX" type="Number" scope="instance" visibility="private">
			<description>The current x coordinate of the mouse inside the area of the menu.</description>
		</property>
		<property name="_aItemGroups" type="Array" scope="instance" visibility="private">
			<description>Multi-dimensional Array representing the menu items as they are grouped in the menu.</description>
		</property>
		<property name="OFF_SCREEN_POSITION" type="String" scope="instance">
			<description>Array representing the default x and y position that a menu should have when it is positioned outside the viewport by the &quot;poistionOffScreen&quot; method.</description>
		</property>
		</properties>
		<methods>
		<method name="_onRender" scope="instance" visibility="private">
			<description>&quot;render&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the menu.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="configMaxHeight" scope="instance">
			<description>Event handler for when the &quot;maxheight&quot; configuration property of a Menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> The Menu instance fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configDisabled" scope="instance">
			<description>Event handler for when the &quot;disabled&quot; configuration property of a menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> The Menu instance fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSubmenus" scope="instance">
			<description>Returns an array of all of the submenus that are immediate children of the menu.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="_onVisibleChange" scope="instance" visibility="private">
			<description>Change event handler for the the menu's &quot;visible&quot; configuration property.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="positionOffScreen" scope="instance">
			<description>Positions the menu outside of the boundaries of the browser's viewport. Called automatically when a menu is hidden to ensure that it doesn't force the browser to render uncessary scrollbars.</description>
		</method>
		<method name="_onMenuItemDestroy" scope="instance" visibility="private">
			<description>&quot;destroy&quot; event handler for the menu's items.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getItemGroups" scope="instance">
			<description>Multi-dimensional Array representing the menu items as they are grouped in the menu.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the menu's &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element (and accompanying child nodes) from the document.</description>
		</method>
		<method name="_onBeforeRender" scope="instance" visibility="private">
			<description>&quot;beforerender&quot; event handler for the menu. Appends all of the &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; and their accompanying title elements to the body element of the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cancelShowDelay" scope="instance" visibility="private">
			<description>Cancels the call to the &quot;showMenu.&quot;</description>
		</method>
		<method name="_getItemGroup" scope="instance" visibility="private">
			<description>Returns the menu item group at the specified index.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> Number indicating the index of the menu item group to be retrieved.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="setInitialSelection" scope="instance">
			<description>Sets the &quot;selected&quot; configuration property of the menu's first enabled item to &quot;true.&quot;</description>
		</method>
		<method name="_onClick" scope="instance">
			<description>&quot;click&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onInit" scope="instance" visibility="private">
			<description>&quot;init&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateItemProperties" scope="instance" visibility="private">
			<description>Updates the &quot;index,&quot; &quot;groupindex,&quot; and &quot;className&quot; properties of the menu items in the specified group.</description>
			<parameters>
			<parameter name="p_nGroupIndex" type="Number" usage="required">
				<description> Number indicating the group of items to update.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onItemAdded" scope="instance" visibility="private">
			<description>&quot;itemadded&quot; event handler for a Menu instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onHide" scope="instance" visibility="private">
			<description>&quot;hide&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setScrollHeight" scope="instance" visibility="private">
			<parameters>
			<parameter name="p_nScrollHeight" type="String" usage="required">
				<description> Number representing the scrolling height of the Menu.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_removeItemFromGroupByValue" scope="instance" visibility="private">
			<description>Removes a menu item from a group by reference. Returns the menu item that was removed.</description>
			<parameters>
			<parameter name="p_nGroupIndex" type="Number" usage="required">
				<description> Number indicating the group to which the menu item belongs.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance to be removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_onMenuItemConfigChange" scope="instance" visibility="private">
			<description>&quot;configchange&quot; event handler for the menu's items.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object representing the menu item that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearActiveItem" scope="instance">
			<description>Sets the &quot;selected&quot; configuration property of the menu's active item to &quot;false&quot; and hides the item's submenu.</description>
			<parameters>
			<parameter name="p_bBlur" type="Boolean" usage="required">
				<description> Boolean indicating if the menu's active item should be blurred.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onParentMenuRender" scope="instance" visibility="private">
			<description>&quot;render&quot; event handler for a submenu. Renders a  submenu in response to the firing of its parent's &quot;render&quot; event.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oSubmenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the submenu that subscribed to the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_enableScrollFooter" scope="instance">
			<description>Enables the footer used for scrolling the body of the menu.</description>
		</method>
		<method name="_onBeforeShow" scope="instance" visibility="private">
			<description>&quot;beforeshow&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Menu class's initialization method. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the menu.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the configuration for the menu. See configuration class documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addItemToGroup" scope="instance" visibility="private">
			<description>Adds a menu item to a group.</description>
			<parameters>
			<parameter name="p_nGroupIndex" type="Number" usage="required">
				<description> Number indicating the group to which the item belongs.</description>
			</parameter>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="String" usage="required">
				<description> String specifying the text of the item to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="Object" usage="required">
				<description> Object literal containing a set of menu item configuration properties.</description>
			</parameter>
			<parameter name="p_nItemIndex" type="Number" usage="optional">
				<description> Optional. Number indicating the index at which the menu item should be added.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_onParentMenuConfigChange" scope="instance" visibility="private">
			<description>&quot;configchange&quot; event handler for a submenu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oSubmenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the submenu that subscribed to the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_cancelHideDelay" scope="instance" visibility="private">
			<description>Cancels the call to &quot;hideMenu.&quot;</description>
		</method>
		<method name="blur" scope="instance">
			<description>Causes the menu to lose focus and fires the &quot;blur&quot; event.</description>
		</method>
		<method name="configHideDelay" scope="instance">
			<description>Event handler for when the &quot;hidedelay&quot; configuration property of the menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addItems" scope="instance">
			<description>Adds an array of items to the menu.</description>
			<parameters>
			<parameter name="p_aItems" type="Array" usage="required">
				<description> Array of items to be added to the menu. The array can contain strings specifying the text for each item to be created, object literals specifying each of the menu item configuration properties, or MenuItem instances.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number specifying the group to which the items belongs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="_onBeforeHide" scope="instance" visibility="private">
			<description>&quot;beforehide&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setInitialFocus" scope="instance">
			<description>Sets focus to the menu's first enabled item.</description>
		</method>
		<method name="_getFirstEnabledItem" scope="instance" visibility="private">
			<description>Returns the first enabled item in the menu.</description>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_createItemGroup" scope="instance" visibility="private">
			<description>Creates a new menu item group (array) and its associated &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element. Returns an aray of menu item groups.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> Number indicating the group to create.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="getItems" scope="instance">
			<description>Returns an array of all of the items in the menu.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="focus" scope="instance">
			<description>Causes the menu to receive focus and fires the &quot;focus&quot; event.</description>
		</method>
		<method name="insertItem" scope="instance">
			<description>Inserts an item into the menu at the specified index.</description>
			<parameters>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="String" usage="required">
				<description> String specifying the text of the item to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="Object" usage="required">
				<description> Object literal containing a set of menu item configuration properties.</description>
			</parameter>
			<parameter name="p_nItemIndex" type="Number" usage="required">
				<description> Number indicating the ordinal position at which the item should be added.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number indicating the group to which the item belongs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_configureSubmenu" scope="instance" visibility="private">
			<description>Subscribes the menu item's submenu to its parent menu's events.</description>
			<parameters>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance with the submenu to be configured.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addItem" scope="instance">
			<description>Appends an item to the menu.</description>
			<parameters>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="String" usage="required">
				<description> String specifying the text of the item to be added to the menu.</description>
			</parameter>
			<parameter name="p_oItem" type="Object" usage="required">
				<description> Object literal containing a set of menu item configuration properties.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number indicating the group to which the item belongs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_onScrollTargetMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for the menu's &quot;header&quot; and &quot;footer&quot; elements. Used to stop scrolling the body of the menu up and down when the menu's &quot;maxheight&quot; configuration property is set to a value greater than 0.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_disableScrollHeader" scope="instance">
			<description>Disables the header used for scrolling the body of the menu.</description>
		</method>
		<method name="configVisible" scope="instance">
			<description>Event handler for when the &quot;visible&quot; configuration property the menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configContainer" scope="instance">
			<description>Event handler for when the &quot;container&quot; configuration property of the menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_clearSetWidthFlag" scope="instance" visibility="private">
			<description>Change event listener for the &quot;width&quot; configuration property. This listener is added when a Menu's &quot;width&quot; configuration property is set by the &quot;_setScrollHeight&quot; method, and is used to set the &quot;_widthSetForScroll&quot; property to &quot;false&quot; if the &quot;width&quot; configuration property is changed after it was set by the &quot;_setScrollHeight&quot; method. If the &quot;_widthSetForScroll&quot; property is set to &quot;false&quot;, and the &quot;_setScrollHeight&quot; method is in the process of tearing down scrolling functionality, it will maintain the Menu's new width rather than reseting it.</description>
		</method>
		<method name="clearContent" scope="instance">
			<description>Removes all of the content from the menu, including the menu items, group titles, header and footer.</description>
		</method>
		<method name="getItem" scope="instance">
			<description>Returns the item at the specified index.</description>
			<parameters>
			<parameter name="p_nItemIndex" type="Number" usage="required">
				<description> Number indicating the ordinal position of the item to be retrieved.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number indicating the group to which the item belongs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="removeItem" scope="instance">
			<description>Removes the specified item from the menu.</description>
			<parameters>
			<parameter name="p_oObject" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance to be removed from the menu.</description>
			</parameter>
			<parameter name="p_oObject" type="Number" usage="required">
				<description> Number specifying the index of the item to be removed.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number specifying the group to which the item belongs.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_enableScrollHeader" scope="instance">
			<description>Enables the header used for scrolling the body of the menu.</description>
		</method>
		<method name="_removeItemFromGroupByIndex" scope="instance" visibility="private">
			<description>Removes a menu item from a group by index. Returns the menu item that was removed.</description>
			<parameters>
			<parameter name="p_nGroupIndex" type="Number" usage="required">
				<description> Number indicating the group to which the menu item belongs.</description>
			</parameter>
			<parameter name="p_nItemIndex" type="Number" usage="required">
				<description> Number indicating the index of the menu item to be removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="_onShow" scope="instance" visibility="private">
			<description>&quot;show&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_disableScrollFooter" scope="instance">
			<description>Disables the footer used for scrolling the body of the menu.</description>
		</method>
		<method name="hasFocus" scope="instance">
			<description>Returns a boolean indicating whether or not the menu has focus.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="setItemGroupTitle" scope="instance">
			<description>Sets the title of a group of menu items.</description>
			<parameters>
			<parameter name="p_sGroupTitle" type="String" usage="required">
				<description> String specifying the title of the group.</description>
			</parameter>
			<parameter name="p_nGroupIndex" type="Number" usage="optional">
				<description> Optional. Number specifying the group to which the title belongs.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseMove" scope="instance">
			<description>&quot;click&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getRoot" scope="instance">
			<description>Finds the menu's root menu.</description>
		</method>
		<method name="configShadow" scope="instance">
			<description>Event handler for when the &quot;shadow&quot; configuration property of a menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> The Menu instance fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="subscribe" scope="instance">
			<description>Adds the specified CustomEvent subscriber to the menu and each of its submenus.</description>
			<parameters>
			<parameter name="p_type" type="string" usage="required">
				<description>    the type, or name of the event</description>
			</parameter>
			<parameter name="p_fn" type="function" usage="required">
				<description>    the function to exectute when the event fires</description>
			</parameter>
			<parameter name="p_obj" type="Object" usage="required">
				<description>     An object to be passed along when the event fires</description>
			</parameter>
			<parameter name="p_override" type="boolean" usage="required">
				<description>  If true, the obj passed in becomes the execution scope of the listener</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setMaxHeight" scope="instance" visibility="private">
			<description>&quot;renderEvent&quot; handler used to defer the setting of the &quot;maxheight&quot; configuration property until the menu is rendered in lazy load scenarios.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_nMaxHeight" type="Number" usage="required">
				<description> Number representing the value to set for the &quot;maxheight&quot; configuration property.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_subscribeToItemEvents" scope="instance" visibility="private">
			<description>Subscribes a menu to a menu item's event.</description>
			<parameters>
			<parameter name="p_oItem" type="YAHOO.widget.MenuItem" usage="required">
				<description> Object reference for the MenuItem instance whose events should be subscribed to.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onYChange" scope="instance">
			<description>&quot;y&quot; event handler for a Menu instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initSubTree" scope="instance" visibility="private">
			<description>Iterates the childNodes of the source element to find nodes used to instantiate menu and menu items.</description>
		</method>
		<method name="configIframe" scope="instance">
			<description>Event handler for when the &quot;iframe&quot; configuration property of the menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onScrollTargetMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for the menu's &quot;header&quot; and &quot;footer&quot; elements. Used to scroll the body of the menu up and down when the menu's &quot;maxheight&quot; configuration property is set to a value greater than 0.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configClassName" scope="instance">
			<description>Event handler for when the &quot;classname&quot; configuration property of a menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> The Menu instance fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyPress" scope="instance">
			<description>&quot;keypress&quot; event handler for a Menu instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for the menu.</description>
		</method>
		<method name="checkPosition" scope="instance" visibility="private">
			<description>Checks to make sure that the value of the &quot;position&quot; property is one of the supported strings. Returns true if the position is supported.</description>
			<parameters>
			<parameter name="p_sPosition" type="Object" usage="required">
				<description> String specifying the position of the menu.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_execSubmenuHideDelay" scope="instance" visibility="private">
			<description>Hides a submenu after the number of milliseconds specified by the &quot;submenuhidedelay&quot; configuration property have ellapsed.</description>
			<parameters>
			<parameter name="p_oSubmenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object specifying the submenu that  should be hidden.</description>
			</parameter>
			<parameter name="p_nMouseX" type="Number" usage="required">
				<description> The x coordinate of the mouse when it left the specified submenu's parent menu item.</description>
			</parameter>
			<parameter name="p_nHideDelay" type="Number" usage="required">
				<description> The number of milliseconds that should ellapse before the submenu is hidden.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for the menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onBlur" scope="instance">
			<description>&quot;blur&quot; event handler for a Menu instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> The name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Collection of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configPosition" scope="instance">
			<description>Event handler for when the &quot;position&quot; configuration property of the menu changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object representing the menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the menu's Config object (&quot;cfg&quot;).</description>
		</method>
		<method name="_execHideDelay" scope="instance" visibility="private">
			<description>Hides the menu after the number of milliseconds specified by the &quot;hidedelay&quot; configuration property.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Number">
		<description>The static Number class provides helper functions to deal with data of type
Number.</description>
		<methods>
		<method name="format" scope="instance">
			<description>Takes a native JavaScript Number and formats to string for display to user.</description>
			<parameters>
			<parameter name="nData" type="Number" usage="required">
				<description> Number.</description>
			</parameter>
			<parameter name="oConfig" type="Object} (Optional) Optional configuration values: &lt;dl&gt; &lt;dt&gt;prefix {String}&lt;|dd&gt; &lt;dd&gt;String prepended before each number, like a currency designator &quot;$&quot;&lt;|dd&gt; &lt;dt&gt;decimalPlaces {Number}&lt;|dd&gt; &lt;dd&gt;Number of decimal places to round.&lt;|dd&gt; &lt;dt&gt;decimalSeparator {String}&lt;|dd&gt; &lt;dd&gt;Decimal separator&lt;|dd&gt; &lt;dt&gt;thousandsSeparator {String}&lt;|dd&gt; &lt;dd&gt;Thousands separator&lt;|dd&gt; &lt;dt&gt;suffix {String" usage="required">
				<description> &lt;/dd&gt; &lt;dd&gt;String appended after each number, like &quot; items&quot; (note the space)&lt;/dd&gt; &lt;dt&gt;negativeFormat&lt;/dt&gt; &lt;dd&gt;String used as a guide for how to indicate negative numbers. The first '#' character in the string will be replaced by the number. Default '-#'.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Formatted number for display. Note, the following values
return as &quot;&quot;: null, undefined, NaN, &quot;&quot;.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Calendar2up" superclass="YAHOO.widget.CalendarGroup">
		<properties>
		<property name="Cal2up" type="undefined" scope="instance"/>
		</properties>
	</class>
	<class type="YAHOO.widget.Slider" superclass="YAHOO.util.DragDrop">
		<description>A DragDrop implementation that can be used as a background for a
slider.  It takes a reference to the thumb instance 
so it can delegate some of the events to it.  The goal is to make the 
thumb jump to the location on the background when the background is 
clicked.</description>
		<constructors>
		<constructor scope="instance">
			<description>A DragDrop implementation that can be used as a background for a
slider.  It takes a reference to the thumb instance 
so it can delegate some of the events to it.  The goal is to make the 
thumb jump to the location on the background when the background is 
clicked.</description>
			<return-types>
				<return-type type="YAHOO.widget.Slider" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description>     The id of the element linked to this instance</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> The group of related DragDrop items</description>
			</parameter>
			<parameter name="oThumb" type="SliderThumb" usage="required">
				<description> The thumb for this slider</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description>  The type of slider (horiz, vert, region)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="keyIncrement" type="int" scope="instance">
			<description>Specifies the number of pixels the arrow keys will move the slider. Default is 20.</description>
		</property>
		<property name="_silent" type="boolean" scope="instance" visibility="private">
			<description>Indicates whether or not events will be supressed for the current slide operation</description>
		</property>
		<property name="backgroundEnabled" type="boolean" scope="instance">
			<description>Set to false to disable a background click thumb move</description>
		</property>
		<property name="animationDuration" type="int" scope="instance">
			<description>If animation is configured, specifies the length of the animation in seconds.</description>
		</property>
		<property name="animate" type="boolean" scope="instance">
			<description>Flag that determines if the thumb will animate when moved</description>
		</property>
		<property name="moveComplete" type="Boolean" scope="instance">
			<description>moveComplete is set to true when the slider has moved to its final destination. For animated slider, this value can be checked in the onChange handler to make it possible to execute logic only when the move is complete rather than at all points along the way. Deprecated because this flag is only useful when the background is clicked and the slider is animated. If the user drags the thumb, the flag is updated when the drag is over ... the final onDrag event fires before the mouseup the ends the drag, so the implementer will never see it.</description>
		</property>
		<property name="thumb" type="YAHOO.widget.SliderThumb" scope="instance">
			<description>A YAHOO.widget.SliderThumb instance that we will use to reposition the thumb when the background is clicked</description>
		</property>
		<property name="SOURCE_SET_VALUE" type="undefined" scope="instance">
			<description>Constant for valueChangeSource, indicating that the value was altered by a programmatic call to setValue/setRegionValue.</description>
		</property>
		<property name="SOURCE_UI_EVENT" type="undefined" scope="instance">
			<description>Constant for valueChangeSource, indicating that the user clicked or dragged the slider to change the value.</description>
		</property>
		<property name="_mouseDown" type="boolean" scope="instance" visibility="private">
			<description>Tracks the state of the mouse button to aid in when events are fired.</description>
		</property>
		<property name="Slider.ANIM_AVAIL" type="boolean" scope="static">
			<description>By default, animation is available if the animation utility is detected.</description>
		</property>
		<property name="Slider.SOURCE_UI_EVENT" type="undefined" scope="static">
			<description>Constant for valueChangeSource, indicating that the user clicked or dragged the slider to change the value.</description>
		</property>
		<property name="type" type="string" scope="instance">
			<description>The type of the slider (horiz, vert, region)</description>
		</property>
		<property name="enableKeys" type="boolean" scope="instance">
			<description>Enables the arrow, home and end keys, defaults to true.</description>
		</property>
		<property name="isTarget" type="undefined" scope="instance" visibility="private">
			<description>Overrides the isTarget property in YAHOO.util.DragDrop</description>
		</property>
		<property name="baselinePos" type="[int, int]" scope="instance">
			<description>The basline position of the background element, used to determine if the background has moved since the last operation.</description>
		</property>
		<property name="dragOnly" type="boolean" scope="instance">
			<description>Override the default setting of dragOnly to true.</description>
		</property>
		<property name="lastOffset" type="[int, int]" scope="instance">
			<description>Saved offset used to protect against NaN problems when slider is set to display:none</description>
		</property>
		<property name="thumbCenterPoint" type="{&quot;x&quot;: int, &quot;y&quot;: int}" scope="instance">
			<description>The center of the slider element is stored so we can place it in the correct position when the background is clicked.</description>
		</property>
		<property name="Slider.SOURCE_SET_VALUE" type="undefined" scope="static">
			<description>Constant for valueChangeSource, indicating that the value was altered by a programmatic call to setValue/setRegionValue.</description>
		</property>
		<property name="Slider.SOURCE_KEY_EVENT" type="undefined" scope="static">
			<description>Constant for valueChangeSource, indicating that the value was altered by hitting any of the supported keyboard characters.</description>
		</property>
		<property name="valueChangeSource" type="int" scope="instance">
			<description>When the slider value changes, this property is set to identify where the update came from. This will be either 1, meaning the slider was clicked or dragged, or 2, meaning that it was set via a setValue() call. This can be used within event handlers to apply some of the logic only when dealing with one source or another.</description>
		</property>
		<property name="tickPause" type="int" scope="instance">
			<description>Adjustment factor for tick animation, the more ticks, the faster the animation (by default)</description>
		</property>
		</properties>
		<methods>
		<method name="YAHOO.widget.Slider.getHorizDualSlider" scope="static">
			<description>Factory method for creating a horizontal dual-thumb slider</description>
			<parameters>
			<parameter name="bg" type="String" usage="required">
				<description> the id of the slider's background element</description>
			</parameter>
			<parameter name="minthumb" type="String" usage="required">
				<description> the id of the min thumb</description>
			</parameter>
			<parameter name="maxthumb" type="String" usage="required">
				<description> the id of the thumb thumb</description>
			</parameter>
			<parameter name="range" type="int" usage="required">
				<description> the number of pixels the thumbs can move within</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="optional">
				<description> (optional) the element should move this many pixels at a time</description>
			</parameter>
			<parameter name="initVals" type="Array" usage="optional">
				<description> (optional) [min,max] Initial thumb placement</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="DualSlider" />
			</return-types>
			<return-description>a horizontal dual-thumb slider control</return-description>
		</method>
		<method name="fireEvents" scope="instance" visibility="private">
			<description>Fires the change event if the value has been changed. Ignored if we are in the middle of an animation as the event will fire when the animation is complete</description>
			<parameters>
			<parameter name="thumbEvent" type="boolean" usage="required">
				<description> set to true if this event is fired from an event that occurred on the thumb. If it is, the state of the thumb dd object should be correct. Otherwise, the event originated on the background, so the thumb state needs to be refreshed before proceeding.</description>
			</parameter>
			</parameters>
		</method>
		<method name="lock" scope="instance">
			<description>Locks the slider, overrides YAHOO.util.DragDrop</description>
		</method>
		<method name="YAHOO.widget.Slider.getHorizSlider" scope="static">
			<description>Factory method for creating a horizontal slider</description>
			<parameters>
			<parameter name="sBGElId" type="String" usage="required">
				<description> the id of the slider's background element</description>
			</parameter>
			<parameter name="sHandleElId" type="String" usage="required">
				<description> the id of the thumb element</description>
			</parameter>
			<parameter name="iLeft" type="int" usage="required">
				<description> the number of pixels the element can move left</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> the number of pixels the element can move right</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element should move a certain number pixels at a time.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Slider" />
			</return-types>
			<return-description>a horizontal slider control</return-description>
		</method>
		<method name="focus" scope="instance" visibility="private">
			<description>Try to focus the element when clicked so we can add accessibility features</description>
		</method>
		<method name="onMouseDown" scope="instance" visibility="private">
			<description>Handles the mousedown event for the slider background</description>
		</method>
		<method name="_setValue" scope="instance">
			<description>Worker function to execute the value set operation. Accepts type of set operation in addition to the usual setValue params.</description>
			<parameters>
			<parameter name="source" type="int" usage="required">
				<description> what triggered the set (e.g. Slider.SOURCE_SET_VALUE)</description>
			</parameter>
			<parameter name="newOffset" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="required">
				<description> set to true to disable the animation for this move action (but not others).</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> ignore the locked setting and set value anyway</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> when true, do not fire events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the move was performed, false if it failed</return-description>
		</method>
		<method name="handleKeyDown" scope="instance">
			<description>Executed when a keydown event happens with the control focused. Updates the slider value and display when the keypress is an arrow key, home, or end as long as enableKeys is set to true.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the keydown event</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetThumbConstraints" scope="instance">
			<description>Resets the X and Y contraints for the thumb. Used in lieu of the thumb instance's inherited resetConstraints because some logic was not applicable.</description>
		</method>
		<method name="getXValue" scope="instance">
			<description>Returns the slider's thumb X offset from the start position</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the current horizontal offset</return-description>
		</method>
		<method name="moveThumb" scope="instance" visibility="private">
			<description>Move the associated slider moved to a timeout to try to get around the mousedown stealing moz does when I move the slider element between the cursor and the background during the mouseup event</description>
			<parameters>
			<parameter name="x" type="int" usage="required">
				<description> the X coordinate of the click</description>
			</parameter>
			<parameter name="y" type="int" usage="required">
				<description> the Y coordinate of the click</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="required">
				<description> don't animate if the move happend onDrag</description>
			</parameter>
			<parameter name="midMove" type="boolean" usage="required">
				<description> set to true if this is not terminating the slider movement</description>
			</parameter>
			</parameters>
		</method>
		<method name="setRegionValue" scope="instance">
			<description>Provides a way to set the value of the region slider in code.</description>
			<parameters>
			<parameter name="newOffset" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point (x axis for region)</description>
			</parameter>
			<parameter name="newOffset2" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point (y axis for region)</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="required">
				<description> set to true to disable the animation for this move action (but not others).</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> ignore the locked setting and set value anyway</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> when true, do not fire events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the move was performed, false if it failed</return-description>
		</method>
		<method name="onSliderEnd" scope="instance">
			<description>Event that fires at the end of a slider thumb move</description>
		</method>
		<method name="thumbMouseUp" scope="instance" visibility="private">
			<description>Handles mouseup event on the thumb</description>
		</method>
		<method name="YAHOO.widget.Slider.getSliderRegion" scope="static">
			<description>Factory method for creating a slider region like the one in the color picker example</description>
			<parameters>
			<parameter name="sBGElId" type="String" usage="required">
				<description> the id of the slider's background element</description>
			</parameter>
			<parameter name="sHandleElId" type="String" usage="required">
				<description> the id of the thumb element</description>
			</parameter>
			<parameter name="iLeft" type="int" usage="required">
				<description> the number of pixels the element can move left</description>
			</parameter>
			<parameter name="iRight" type="int" usage="required">
				<description> the number of pixels the element can move right</description>
			</parameter>
			<parameter name="iUp" type="int" usage="required">
				<description> the number of pixels the element can move up</description>
			</parameter>
			<parameter name="iDown" type="int" usage="required">
				<description> the number of pixels the element can move down</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element should move a certain number pixels at a time.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Slider" />
			</return-types>
			<return-description>a slider region control</return-description>
		</method>
		<method name="verifyOffset" scope="instance">
			<description>Checks the background position element position. If it has moved from the baseline position, the constraints for the thumb are reset</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>True if the offset is the same as the baseline.</return-description>
		</method>
		<method name="initThumb" scope="instance">
			<description>Initializes the slider's thumb. Executed in the constructor.</description>
			<parameters>
			<parameter name="t" type="YAHOO.widget.SliderThumb" usage="required">
				<description> the slider thumb</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Slider toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string representation of the instance</return-description>
		</method>
		<method name="moveOneTick" scope="instance" visibility="private">
			<description>Move the slider one tick mark towards its final coordinate. Used for the animation when tick marks are defined</description>
			<parameters>
			<parameter name="the" type="int[]" usage="required">
				<description> destination coordinate</description>
			</parameter>
			</parameters>
		</method>
		<method name="onChange" scope="instance">
			<description>Event that fires when the value of the slider has changed</description>
			<parameters>
			<parameter name="firstOffset" type="int" usage="required">
				<description> the number of pixels the thumb has moved from its start position. Normal horizontal and vertical sliders will only have the firstOffset. Regions will have both, the first is the horizontal offset, the second the vertical.</description>
			</parameter>
			<parameter name="secondOffset" type="int" usage="required">
				<description> the y offset for region sliders</description>
			</parameter>
			</parameters>
		</method>
		<method name="initSlider" scope="instance">
			<description>Initializes the slider. Executed in the constructor</description>
			<parameters>
			<parameter name="sType" type="string" usage="required">
				<description> the type of slider (horiz, vert, region)</description>
			</parameter>
			</parameters>
		</method>
		<method name="setValue" scope="instance">
			<description>Provides a way to set the value of the slider in code.</description>
			<parameters>
			<parameter name="newOffset" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="required">
				<description> set to true to disable the animation for this move action (but not others).</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> ignore the locked setting and set value anyway</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> when true, do not fire events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the move was performed, false if it failed</return-description>
		</method>
		<method name="setThumbCenterPoint" scope="instance">
			<description>When the thumb is available, we cache the centerpoint of the element so we can position the element correctly when the background is clicked</description>
		</method>
		<method name="_bindKeyEvents" scope="instance">
			<description>Sets up the listeners for keydown and key press events.</description>
		</method>
		<method name="endMove" scope="instance" visibility="private">
			<description>Fired when the slider movement ends</description>
		</method>
		<method name="_setRegionValue" scope="instance">
			<description>Worker function to execute the value set operation. Accepts type of set operation in addition to the usual setValue params.</description>
			<parameters>
			<parameter name="source" type="int" usage="required">
				<description> what triggered the set (e.g. Slider.SOURCE_SET_VALUE)</description>
			</parameter>
			<parameter name="newOffset" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point (x axis for region)</description>
			</parameter>
			<parameter name="newOffset2" type="int" usage="required">
				<description> the number of pixels the thumb should be positioned away from the initial start point (y axis for region)</description>
			</parameter>
			<parameter name="skipAnim" type="boolean" usage="required">
				<description> set to true to disable the animation for this move action (but not others).</description>
			</parameter>
			<parameter name="force" type="boolean" usage="required">
				<description> ignore the locked setting and set value anyway</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> when true, do not fire events</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the move was performed, false if it failed</return-description>
		</method>
		<method name="getYValue" scope="instance">
			<description>Returns the slider's thumb Y offset from the start position</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the current vertical offset</return-description>
		</method>
		<method name="onAvailable" scope="instance">
			<description>Executed when the slider element is available</description>
		</method>
		<method name="onSlideStart" scope="instance">
			<description>Event that fires when the at the beginning of the slider thumb move</description>
		</method>
		<method name="onDrag" scope="instance" visibility="private">
			<description>Handles the onDrag event for the slider background</description>
		</method>
		<method name="getThumb" scope="instance">
			<description>Returns a reference to this slider's thumb</description>
			<return-types>
			<return-type type="SliderThumb" />
			</return-types>
			<return-description>this slider's thumb</return-description>
		</method>
		<method name="YAHOO.widget.Slider.getVertSlider" scope="static">
			<description>Factory method for creating a vertical slider</description>
			<parameters>
			<parameter name="sBGElId" type="String" usage="required">
				<description> the id of the slider's background element</description>
			</parameter>
			<parameter name="sHandleElId" type="String" usage="required">
				<description> the id of the thumb element</description>
			</parameter>
			<parameter name="iUp" type="int" usage="required">
				<description> the number of pixels the element can move up</description>
			</parameter>
			<parameter name="iDown" type="int" usage="required">
				<description> the number of pixels the element can move down</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="required">
				<description> optional parameter for specifying that the element should move a certain number pixels at a time.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Slider" />
			</return-types>
			<return-description>a vertical slider control</return-description>
		</method>
		<method name="handleKeyPress" scope="instance">
			<description>Executed when a keypress event happens with the control focused. Prevents the default behavior for navigation keys. The actual logic for moving the slider thumb in response to a key event happens in handleKeyDown.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the keypress event</description>
			</parameter>
			</parameters>
		</method>
		<method name="setStartSliderState" scope="instance">
			<description>Initialization that sets up the value offsets once the elements are ready</description>
		</method>
		<method name="getValue" scope="instance">
			<description>Returns the slider's thumb offset from the start position</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the current value</return-description>
		</method>
		<method name="b4MouseDown" scope="instance" visibility="private">
			<description>Resets the constraints before moving the thumb.</description>
		</method>
		<method name="unlock" scope="instance">
			<description>Unlocks the slider, overrides YAHOO.util.DragDrop</description>
		</method>
		<method name="YAHOO.widget.Slider.getVertDualSlider" scope="static">
			<description>Factory method for creating a vertical dual-thumb slider.</description>
			<parameters>
			<parameter name="bg" type="String" usage="required">
				<description> the id of the slider's background element</description>
			</parameter>
			<parameter name="minthumb" type="String" usage="required">
				<description> the id of the min thumb</description>
			</parameter>
			<parameter name="maxthumb" type="String" usage="required">
				<description> the id of the thumb thumb</description>
			</parameter>
			<parameter name="range" type="int" usage="required">
				<description> the number of pixels the thumbs can move within</description>
			</parameter>
			<parameter name="iTickSize" type="int" usage="optional">
				<description> (optional) the element should move this many pixels at a time</description>
			</parameter>
			<parameter name="initVals" type="Array" usage="optional">
				<description> (optional) [min,max] Initial thumb placement</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="DualSlider" />
			</return-types>
			<return-description>a vertical dual-thumb slider control</return-description>
		</method>
		<method name="_getNextY" scope="instance" visibility="private">
			<description>Returns the next Y tick value based on the current coord and the target coord.</description>
		</method>
		<method name="_getNextX" scope="instance" visibility="private">
			<description>Returns the next X tick value based on the current coord and the target coord.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ImageLoader.bgImgObj" superclass="YAHOO.util.ImageLoader.imgObj">
		<description>Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element's style</description>
		<constructors>
		<constructor scope="instance">
			<description>Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element's style</description>
			<return-types>
				<return-type type="YAHOO.util.ImageLoader.bgImgObj" />
			</return-types>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="_applyUrl" scope="instance" visibility="private">
			<description>Inserts the image URL into the DOM so that the image is displayed. Sets style.backgroundImage</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description>	HTML DOM element</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.LayoutUnit" superclass="YAHOO.util.Element">
		<description>&lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to make a unit.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_lastWidth" type="Number" scope="instance" visibility="private">
			<description>A holder for the last known width of the unit</description>
		</property>
		<property name="LOADING_CLASSNAME" type="String" scope="instance">
			<description>The class name applied to dynamic tabs while loading.</description>
		</property>
		<property name="header" type="HTMLELement" scope="instance">
			<description>A reference to the HTML element used for the Header</description>
		</property>
		<property name="_anim" type="YAHOO.util.Anim" scope="instance" visibility="private">
			<description>A reference to the Animation instance used by this LayouUnit</description>
		</property>
		<property name="STR_COLLAPSE" type="{String}" scope="instance">
			<description>String used for collapse button title</description>
		</property>
		<property name="_collapsed" type="Boolean" scope="instance" visibility="private">
			<description>Flag to determine if the unit is collapsed or not.</description>
		</property>
		<property name="_lastScroll" type="Boolean" scope="instance" visibility="private">
			<description>A holder for the last known scroll state of the unit</description>
		</property>
		<property name="_lastLeft" type="Number" scope="instance" visibility="private">
			<description>A holder for the last known left of the unit</description>
		</property>
		<property name="_instances" type="Object" scope="static" visibility="private">
			<description>Internal hash table for all layout unit instances</description>
		</property>
		<property name="_lastHeight" type="Number" scope="instance" visibility="private">
			<description>A holder for the last known height of the unit</description>
		</property>
		<property name="_loading" type="Number" scope="instance" visibility="private">
			<description>During the loading process this variable will be true</description>
		</property>
		<property name="body" type="HTMLElement" scope="instance">
			<description>A reference to the HTML element used for the body</description>
		</property>
		<property name="_lastCenetrScroll" type="Boolean" scope="instance" visibility="private">
			<description>A holder for the last known scroll state of the center unit</description>
		</property>
		<property name="_resize" type="YAHOO.util.Resize" scope="instance" visibility="private">
			<description>A reference to the Resize instance used by this LayoutUnit</description>
		</property>
		<property name="_sizes" type="Object" scope="instance" visibility="private">
			<description>A collection of the current sizes of the contents of this Layout Unit</description>
		</property>
		<property name="STR_CLOSE" type="{String}" scope="instance">
			<description>String used for close button title</description>
		</property>
		<property name="_lastTop" type="Number" scope="instance" visibility="private">
			<description>A holder for the last known top of the unit</description>
		</property>
		<property name="loadHandler" type="Object" scope="instance">
			<description>Callback method for the YUI Connection Manager used for load the body using AJAX</description>
		</property>
		<property name="_collapsing" type="Boolean" scope="instance" visibility="private">
			<description>A flag set while the unit is being collapsed, used so we don't fire events while animating the size</description>
		</property>
		<property name="footer" type="HTMLElement" scope="instance">
			<description>A reference to the HTML element used for the footer</description>
		</property>
		<property name="_gutter" type="Object" scope="instance" visibility="private">
			<description>A simple hash table used to store the gutter to apply to the Unit</description>
		</property>
		<property name="_lastScrollTop" type="Number" scope="instance" visibility="private">
			<description>A holder for the last known scrollTop state of the unit</description>
		</property>
		<property name="STR_EXPAND" type="{String}" scope="instance">
			<description>String used for expand button title</description>
		</property>
		<property name="_clip" type="HTMLElement" scope="instance" visibility="private">
			<description>A reference to the clip element used when collapsing the unit</description>
		</property>
		<property name="dataConnection" type="Object" scope="instance">
			<description>YUI Connection Manager handler</description>
		</property>
		<property name="browser" type="Object" scope="instance">
			<description>A modified version of the YAHOO.env.ua object</description>
		</property>
		</properties>
		<methods>
		<method name="_getBoxSize" scope="instance" visibility="private">
			<description>Get's the elements clientHeight and clientWidth plus the size of the borders</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The HTMLElement to get the size of</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of height and width</return-description>
		</method>
		<method name="toggle" scope="instance">
			<description>Toggles the Unit, replacing it with a clipped version.</description>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="init" scope="instance" visibility="private">
			<description>The initalization method inherited from Element.</description>
		</method>
		<method name="_getBorderSizes" scope="instance" visibility="private">
			<description>Get the CSS border size of the element passed.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to get the border size of</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of the top, right, bottom, left borders.</return-description>
		</method>
		<method name="_setHeight" scope="instance" visibility="private">
			<description>Sets the height of the element based on the border size of the element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The HTMLElement to have it's height set</description>
			</parameter>
			<parameter name="h" type="Number" usage="required">
				<description> The height that you want it the element set to</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new height, fixed for borders and IE QuirksMode</return-description>
		</method>
		<method name="_setWidth" scope="instance" visibility="private">
			<description>Sets the width of the element based on the border size of the element.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The HTMLElement to have it's width set</description>
			</parameter>
			<parameter name="w" type="Number" usage="required">
				<description> The width that you want it the element set to</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new width, fixed for borders and IE QuirksMode</return-description>
		</method>
		<method name="_toggleClip" scope="instance" visibility="private">
			<description>Toggle th current state of the Clip element and set it's height, width and position</description>
		</method>
		<method name="getLayoutUnitById" scope="static">
			<description>Get's a layout unit object by the HTML id of the element associated with the Layout Unit object.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The Layout Object</return-description>
		</method>
		<method name="_fixQuirks" scope="instance" visibility="private">
			<description>Fixes the box calculations for IE in QuirksMode</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The HTMLElement to set the dimension on</description>
			</parameter>
			<parameter name="dim" type="Number" usage="required">
				<description> The number of the dimension to fix</description>
			</parameter>
			<parameter name="side" type="String" usage="required">
				<description> The dimension (h or w) to fix. Defaults to h</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The fixed dimension</return-description>
		</method>
		<method name="loadContent" scope="instance">
			<description>Loading the content of the unit using the connection manager</description>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>YUI Connection Manager handler</return-description>
		</method>
		<method name="_createClip" scope="instance" visibility="private">
			<description>Create the clip element used when the Unit is collapsed</description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Processes the config</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the LayoutUnit.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="getSizes" scope="instance">
			<description>Get a reference to the internal sizes object for this unit</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object of the sizes used for calculations</return-description>
		</method>
		<method name="_cleanGrids" scope="instance" visibility="private">
			<description>This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes this unit from the parent and cleans up after itself.</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> Don't report to the parent, because we are being called from the parent.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Layout" />
			</return-types>
			<return-description>The parent Layout instance</return-description>
		</method>
		<method name="expand" scope="instance">
			<description>Expand the Unit if it is collapsed.</description>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="close" scope="instance">
			<description>Close the unit, removing it from the parent Layout.</description>
			<return-types>
			<return-type type="YAHOO.widget.Layout" />
			</return-types>
			<return-description>The parent Layout instance</return-description>
		</method>
		<method name="_createHeader" scope="instance" visibility="private">
			<description>Creates the HTMLElement for the header</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The new HTMLElement</return-description>
		</method>
		<method name="resize" scope="instance">
			<description>Resize either the unit or it's clipped state, also updating the box inside</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> This will force full calculations even when the unit is collapsed</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		<method name="collapse" scope="instance">
			<description>Collapse the Unit if it is not collapsed.</description>
			<return-types>
			<return-type type="YAHOO.widget.LayoutUnit" />
			</return-types>
			<return-description>The LayoutUnit instance</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.NumericAxis" superclass="YAHOO.widget.Axis">
		<description>A type of axis whose units are measured in numeric values.</description>
		<constructors>
		<constructor scope="instance">
			<description>A type of axis whose units are measured in numeric values.</description>
			<return-types>
				<return-type type="YAHOO.widget.NumericAxis" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="scale" type="String" scope="instance">
			<description>The scaling algorithm to use on this axis. May be &quot;linear&quot; or &quot;logarithmic&quot;.</description>
		</property>
		<property name="stackingEnabled" type="Boolean" scope="instance">
			<description>Series that are stackable will only stack when this value is set to true.</description>
		</property>
		<property name="calculateByLabelSize" type="Boolean" scope="instance">
			<description>Indicates whether to factor in the size of the labels when calculating a major unit.</description>
		</property>
		<property name="maximum" type="Number" scope="instance">
			<description>The maximum value drawn by the axis. If not set explicitly, the axis maximum will be calculated automatically.</description>
		</property>
		<property name="adjustMaximumByMajorUnit" type="Boolean" scope="instance">
			<description>Indicates whether to extend maximum beyond data's maximum to the nearest majorUnit.</description>
		</property>
		<property name="minorUnit" type="Number" scope="instance">
			<description>The spacing between minor intervals on this axis.</description>
		</property>
		<property name="minimum" type="Number" scope="instance">
			<description>The minimum value drawn by the axis. If not set explicitly, the axis minimum will be calculated automatically.</description>
		</property>
		<property name="majorUnit" type="Number" scope="instance">
			<description>The spacing between major intervals on this axis.</description>
		</property>
		<property name="adjustMinimumByMajorUnit" type="Boolean" scope="instance">
			<description>Indicates whether to extend the minimum beyond data's minimum to the nearest majorUnit.</description>
		</property>
		<property name="snapToUnits" type="Boolean" scope="instance">
			<description>If true, the labels, ticks, gridlines, and other objects will snap to the nearest major or minor unit. If false, their position will be based on the minimum value.</description>
		</property>
		<property name="position" type="String" scope="instance">
			<description>Indicates the position of the axis relative to the chart</description>
		</property>
		<property name="roundMajorUnit" type="Boolean" scope="instance">
			<description>Indicates whether to round the major unit.</description>
		</property>
		<property name="alwaysShowZero" type="Boolean" scope="instance">
			<description>If true, and the bounds are calculated automatically, either the minimum or maximum will be set to zero.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.Uploader">
		<description>Uploader class for the YUI Uploader component.</description>
		<constructors>
		<constructor scope="instance">
			<description>Uploader class for the YUI Uploader component.</description>
			<return-types>
				<return-type type="YAHOO.widget.Uploader" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="buttonSkin" type="String" usage="required">
				<description>  [optional]. If defined, the uploader is 
rendered as a button. This parameter must provide the URL of a button
skin sprite image. Acceptable types are: jpg, gif, png and swf. The 
sprite is divided evenly into four sections along its height (e.g., if
the sprite is 200 px tall, it's divided into four sections 50px each).
Each section is used as a skin for a specific state of the button: top
section is &quot;up&quot;, second section is &quot;over&quot;, third section is &quot;down&quot;, and
fourth section is &quot;disabled&quot;. 
If the parameter is not supplied, the uploader is rendered transparent,
and it's the developer's responsibility to create a visible UI below it.</description>
			</parameter>
			<parameter name="forceTransparent" type="Boolean" usage="required">
				<description>  This parameter, if true, forces the Flash
UI to be rendered with wmode set to &quot;transparent&quot;. This behavior is useful 
in conjunction with non-rectangular button skins with PNG transparency. 
The parameter is false by default, and ignored if no buttonSkin is defined.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Chart.SWFURL" type="undefined" scope="static" visibility="private">
			<description>Location of the Uploader SWF</description>
		</property>
		</properties>
		<methods>
		<method name="uploadAll" scope="instance">
			<description>Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed.</description>
			<parameters>
			<parameter name="uploadScriptPath" type="String" usage="required">
				<description> The URL of the upload location.</description>
			</parameter>
			<parameter name="method" type="String" usage="required">
				<description> Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default.</description>
			</parameter>
			<parameter name="vars" type="Object" usage="required">
				<description> The object containing variables to be sent in the same request as the file upload.</description>
			</parameter>
			<parameter name="fieldName" type="String" usage="required">
				<description> The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default. &lt;/code&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="enable" scope="instance">
			<description>Enables the mouse events on the Uploader. If the uploader is being rendered as a button, then the button's skin is set to &quot;up&quot; (first section of the button skin sprite).</description>
		</method>
		<method name="setAllowLogging" scope="instance">
			<description>Turns the logging functionality on. Uses Flash internal trace logging, as well as YUI Logger, if available.</description>
			<parameters>
			<parameter name="allowLogging" type="Boolean" usage="required">
				<description> If true, logs are output; otherwise, no logs are produced.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearFileList" scope="instance">
			<description>Clears the list of files queued for upload.</description>
		</method>
		<method name="upload" scope="instance">
			<description>Starts the upload of the file specified by fileID to the location specified by uploadScriptPath.</description>
			<parameters>
			<parameter name="fileID" type="String" usage="required">
				<description> The id of the file to start uploading.</description>
			</parameter>
			<parameter name="uploadScriptPath" type="String" usage="required">
				<description> The URL of the upload location.</description>
			</parameter>
			<parameter name="method" type="String" usage="required">
				<description> Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default.</description>
			</parameter>
			<parameter name="vars" type="Object" usage="required">
				<description> The object containing variables to be sent in the same request as the file upload.</description>
			</parameter>
			<parameter name="fieldName" type="String" usage="required">
				<description> The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default. &lt;/code&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeFile" scope="instance">
			<description>Removes the specified file from the upload queue.</description>
			<parameters>
			<parameter name="fileID" type="String" usage="required">
				<description> The id of the file to remove from the upload queue.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setSimUploadLimit" scope="instance">
			<description>Sets the number of simultaneous uploads when using uploadAll() The minimum value is 1, and maximum value is 5. The default value is 2.</description>
			<parameters>
			<parameter name="simUploadLimit" type="int" usage="required">
				<description> Number of simultaneous uploads, between 1 and 5.</description>
			</parameter>
			</parameters>
		</method>
		<method name="disable" scope="instance">
			<description>Disables the mouse events on the Uploader. If the uploader is being rendered as a button, then the button's skin is set to &quot;disabled&quot; (fourth section of the button skin sprite).</description>
		</method>
		<method name="setAllowMultipleFiles" scope="instance">
			<description>Sets the flag allowing users to select multiple files for the upload.</description>
			<parameters>
			<parameter name="allowMultipleFiles" type="Boolean" usage="required">
				<description> If true, multiple files can be selected. False by default.</description>
			</parameter>
			</parameters>
		</method>
		<method name="uploadThese" scope="instance">
			<description>Starts the upload of the files specified by fileIDs, or adds them to a currently running queue. The upload queue is automatically managed.</description>
			<parameters>
			<parameter name="fileIDs" type="Array" usage="required">
				<description> The ids of the files to start uploading.</description>
			</parameter>
			<parameter name="uploadScriptPath" type="String" usage="required">
				<description> The URL of the upload location.</description>
			</parameter>
			<parameter name="method" type="String" usage="required">
				<description> Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default.</description>
			</parameter>
			<parameter name="vars" type="Object" usage="required">
				<description> The object containing variables to be sent in the same request as the file upload.</description>
			</parameter>
			<parameter name="fieldName" type="String" usage="required">
				<description> The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default. &lt;/code&gt;</description>
			</parameter>
			</parameters>
		</method>
		<method name="cancel" scope="instance">
			<description>Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled.</description>
			<parameters>
			<parameter name="fileID" type="String" usage="required">
				<description> The ID of the file whose upload should be cancelled.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setFileFilters" scope="instance">
			<description>Sets the file filters for the &quot;Browse&quot; dialog.</description>
			<parameters>
			<parameter name="newFilterArray" type="extensions: extensionString, description: descriptionString, [optional]macType: macTypeString" usage="required">
				<description> An array of sets of key-value pairs of the form The extensions string is a semicolon-delimited list of elements of the form &quot;*.xxx&quot;, e.g. &quot;*.jpg;*.gif;*.png&quot;.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ShouldError" superclass="YAHOO.util.AssertionError">
		<description>ShouldError is subclass of AssertionError that is thrown whenever
a test is expected to throw an error but doesn't.</description>
		<constructors>
		<constructor scope="instance">
			<description>ShouldError is subclass of AssertionError that is thrown whenever
a test is expected to throw an error but doesn't.</description>
			<return-types>
				<return-type type="YAHOO.util.ShouldError" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.ComparisonFailure" superclass="YAHOO.util.AssertionError">
		<description>ComparisonFailure is subclass of AssertionError that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
		<constructors>
		<constructor scope="instance">
			<description>ComparisonFailure is subclass of AssertionError that is thrown whenever
a comparison between two values fails. It provides mechanisms to retrieve
both the expected and actual value.</description>
			<return-types>
				<return-type type="YAHOO.util.ComparisonFailure" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			<parameter name="expected" type="Object" usage="required">
				<description> The expected value.</description>
			</parameter>
			<parameter name="actual" type="Object" usage="required">
				<description> The actual value that caused the assertion to fail.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="expected" type="Object" scope="instance">
			<description>The expected value.</description>
		</property>
		<property name="actual" type="Object" scope="instance">
			<description>The actual value.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="toString" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. This message provides information about the expected and actual values.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ContextMenu" superclass="YAHOO.widget.Menu">
		<description>Creates a list of options or commands which are made visible in response to 
an HTML element's &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera).</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates a list of options or commands which are made visible in response to 
an HTML element's &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera).</description>
			<return-types>
				<return-type type="YAHOO.widget.ContextMenu" />
			</return-types>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the 
context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying the 
&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> Object specifying 
the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for 
the context menu.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the context menu. See configuration class documentation 
for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_oTrigger" type="String|HTMLElement|Array" scope="instance" visibility="private">
			<description>Object reference to the current value of the &quot;trigger&quot; configuration property.</description>
		</property>
		<property name="contextEventTarget" type="HTMLElement" scope="instance">
			<description>Object reference for the HTML element that was the target of the &quot;contextmenu&quot; DOM event (&quot;mousedown&quot; for Opera) that triggered the display of the context menu.</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the ContextMenu's events</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the ContextMenu's configuration properties</description>
		</property>
		<property name="_bCancelled" type="Boolean" scope="instance" visibility="private">
			<description>Boolean indicating if the display of the context menu should be cancelled.</description>
		</property>
		</properties>
		<methods>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for the context menu.</description>
		</method>
		<method name="_onTriggerClick" scope="instance" visibility="private">
			<description>&quot;click&quot; event handler for the HTML element(s) identified as the &quot;trigger&quot; for the context menu. Used to cancel default behaviors in Opera.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.ContextMenu" usage="required">
				<description> Object representing the context menu that is handling the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The ContextMenu class's initialization method. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLSelectElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the context menu.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the configuration for the context menu. See configuration class documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the context menu.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the context menu's Config object (&quot;cfg&quot;).</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the context menu's &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element (and accompanying child nodes) from the document.</description>
		</method>
		<method name="cancel" scope="instance">
			<description>Cancels the display of the context menu.</description>
		</method>
		<method name="position" scope="instance" visibility="private">
			<description>&quot;beforeShow&quot; event handler used to position the contextmenu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_aPos" type="Array" usage="required">
				<description> Array representing the xy position for the context menu.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTriggerContextMenu" scope="instance" visibility="private">
			<description>&quot;contextmenu&quot; event handler (&quot;mousedown&quot; for Opera) for the HTML element(s) that trigger the display of the context menu.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.ContextMenu" usage="required">
				<description> Object representing the context menu that is handling the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_removeEventHandlers" scope="instance" visibility="private">
			<description>Removes all of the DOM event handlers from the HTML element(s) whose &quot;context menu&quot; event (&quot;click&quot; for Opera) trigger the display of the context menu.</description>
		</method>
		<method name="configTrigger" scope="instance">
			<description>Event handler for when the value of the &quot;trigger&quot; configuration property changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.ContextMenu" usage="required">
				<description> Object representing the context menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TVAnim">
		<description>A static factory class for tree view expand/collapse animations</description>
		<properties>
		<property name="FADE_OUT" type="string" scope="static">
			<description>Constant for the fade out animation</description>
		</property>
		<property name="FADE_IN" type="string" scope="static">
			<description>Constant for the fade in animation</description>
		</property>
		</properties>
		<methods>
		<method name="isValid" scope="static">
			<description>Returns true if the specified animation class is available</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if valid, false if not</return-description>
		</method>
		<method name="getAnim" scope="static">
			<description>Returns a ygAnim instance of the given type</description>
			<parameters>
			<parameter name="type" type="string" usage="required">
				<description> the type of animation</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to element (probably the children div)</description>
			</parameter>
			<parameter name="callback" type="function" usage="required">
				<description> function to invoke when the animation is done.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.Animation" />
			</return-types>
			<return-description>the animation instance</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Easing">
		<description>Singleton that determines how an animation proceeds from start to end.</description>
		<methods>
		<method name="easeIn" scope="instance">
			<description>Begins slowly and accelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeInStrong" scope="instance">
			<description>Begins slowly and accelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceBoth" scope="instance">
			<description>Bounces off start and end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backOut" scope="instance">
			<description>Overshoots end, then reverses and comes back to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticBoth" scope="instance">
			<description>Snap both elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticOut" scope="instance">
			<description>Snap out elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceOut" scope="instance">
			<description>Bounces off end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backBoth" scope="instance">
			<description>Backtracks slightly, then reverses direction, overshoots end, then reverses and comes back to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeBoth" scope="instance">
			<description>Begins slowly and decelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="bounceIn" scope="instance">
			<description>Bounce off of start.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeOutStrong" scope="instance">
			<description>Begins quickly and decelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeNone" scope="instance">
			<description>Uniform speed between points.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="elasticIn" scope="instance">
			<description>Snap in elastic effect.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="a" type="Number" usage="optional">
				<description> Amplitude (optional)</description>
			</parameter>
			<parameter name="p" type="Number" usage="optional">
				<description> Period (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeBothStrong" scope="instance">
			<description>Begins slowly and decelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="easeOut" scope="instance">
			<description>Begins quickly and decelerates towards end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		<method name="backIn" scope="instance">
			<description>Backtracks slightly, then reverses direction and moves to end.</description>
			<parameters>
			<parameter name="t" type="Number" usage="required">
				<description> Time value used to compute current value</description>
			</parameter>
			<parameter name="b" type="Number" usage="required">
				<description> Starting value</description>
			</parameter>
			<parameter name="c" type="Number" usage="required">
				<description> Delta between start and end values</description>
			</parameter>
			<parameter name="d" type="Number" usage="required">
				<description> Total length of animation</description>
			</parameter>
			<parameter name="s" type="Number" usage="optional">
				<description> Overshoot (optional)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The computed value for the current animation frame</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DragDropMgr">
		<description>DragDropMgr is a singleton that tracks the element interaction for 
all DragDrop items in the window.  Generally, you will not call 
this class directly, but it does have helper methods that could 
be useful in your DragDrop implementations.</description>
		<properties>
		<property name="dragThreshMet" type="boolean" scope="static" visibility="private">
			<description>Flag that indicates that either the drag pixel threshold or the mousdown time threshold has been met</description>
		</property>
		<property name="clickPixelThresh" type="int" scope="static">
			<description>The number of pixels that the mouse needs to move after the mousedown before the drag is initiated. Default=3;</description>
		</property>
		<property name="_timeoutCount" type="undefined" scope="static" visibility="private">
			<description>Internal counter</description>
		</property>
		<property name="initialized" type="undefined" scope="static" visibility="private">
			<description>Internal flag that is set to true when drag and drop has been initialized</description>
		</property>
		<property name="elementCache" type="undefined" scope="static" visibility="private">
			<description>A cache of DOM elements</description>
		</property>
		<property name="stopPropagation" type="boolean" scope="static">
			<description>Flag to determine if we should stop the propagation of the events we generate. This is true by default but you may want to set it to false if the html element contains other features that require the mouse click.</description>
		</property>
		<property name="clickTimeout" type="Object" scope="static" visibility="private">
			<description>Timeout used for the click time threshold</description>
		</property>
		<property name="handleIds" type="{string: string}" scope="static" visibility="private">
			<description>Array of element ids defined as drag handles. Used to determine if the element that generated the mousedown event is actually the handle and not the html element itself.</description>
		</property>
		<property name="POINT" type="int" scope="static">
			<description>In point mode, drag and drop interaction is defined by the location of the cursor during the drag/drop</description>
		</property>
		<property name="deltaX" type="int" scope="static" visibility="private">
			<description>the X distance between the cursor and the object being dragged</description>
		</property>
		<property name="deltaY" type="int" scope="static" visibility="private">
			<description>the Y distance between the cursor and the object being dragged</description>
		</property>
		<property name="dragOvers" type="Array" scope="static" visibility="private">
			<description>the DragDrop object(s) that are being hovered over</description>
		</property>
		<property name="useCache" type="boolean" scope="static">
			<description>Set useCache to false if you want to force object the lookup of each drag and drop linked element constantly during a drag.</description>
		</property>
		<property name="fromTimeout" type="boolean" scope="static" visibility="private">
			<description>Flag to determine if the drag event was fired from the click timeout and not the mouse move threshold.</description>
		</property>
		<property name="clickTimeThresh" type="int" scope="static">
			<description>The number of milliseconds after the mousedown event to initiate the drag if we don't get a mouseup event. Default=1000</description>
		</property>
		<property name="mode" type="int" scope="static">
			<description>The current drag and drop mode. Default: POINT</description>
		</property>
		<property name="startX" type="int" scope="static" visibility="private">
			<description>The X position of the mousedown event stored for later use when a drag threshold is met.</description>
		</property>
		<property name="startY" type="int" scope="static" visibility="private">
			<description>The Y position of the mousedown event stored for later use when a drag threshold is met.</description>
		</property>
		<property name="_shim" type="HTMLElement" scope="static" visibility="private">
			<description>The HTML element created to use as a shim over the document to track mouse movements</description>
		</property>
		<property name="_debugShim" type="Boolean" scope="static" visibility="private">
			<description>This property is used when useShim is set to true, it will set the opacity on the shim to .5 for debugging. Use: (YAHOO.util.DDM._debugShim = true;)</description>
		</property>
		<property name="STRICT_INTERSECT" type="int" scope="static">
			<description>In intersect mode, drag and drop interaction is defined only by the overlap of two or more drag and drop objects.</description>
		</property>
		<property name="interactionInfo" type="object" scope="static">
			<description>Provides additional information about the the current set of interactions. Can be accessed from the event handlers. It contains the following properties: out:    onDragOut interactions enter:   onDragEnter interactions over:   onDragOver interactions drop:   onDragDrop interactions point:   The location of the cursor draggedRegion: The location of dragged element at the time of the interaction sourceRegion: The location of the source elemtn at the time of the interaction validDrop: boolean</description>
		</property>
		<property name="locationCache" type="undefined" scope="static" visibility="private">
			<description>Location cache that is set for all drag drop objects when a drag is initiated, cleared when the drag is finished.</description>
		</property>
		<property name="INTERSECT" type="int" scope="static">
			<description>In intersect mode, drag and drop interaction is defined by the cursor position or the amount of overlap of two or more drag and drop objects.</description>
		</property>
		<property name="_shimState" type="Boolean" scope="static" visibility="private">
			<description>This property is used when useShim is set on a DragDrop object to store the current state of DDM.useShim so it can be reset when a drag operation is done.</description>
		</property>
		<property name="locked" type="undefined" scope="static" visibility="private">
			<description>All drag and drop can be disabled.</description>
		</property>
		<property name="useShim" type="Boolean" scope="static">
			<description>This property is used to turn on global use of the shim element on all DragDrop instances, defaults to false for backcompat. (Use: YAHOO.util.DDM.useShim = true)</description>
		</property>
		<property name="dragCurrent" type="DragDrop" scope="static" visibility="private">
			<description>the DragDrop object that is currently being dragged</description>
		</property>
		<property name="preventDefault" type="boolean" scope="static">
			<description>Flag to determine if we should prevent the default behavior of the events we define. By default this is true, but this can be set to false if you need the default behavior (not recommended)</description>
		</property>
		<property name="ids" type="{string: string}" scope="static" visibility="private">
			<description>Two dimensional Array of registered DragDrop objects. The first dimension is the DragDrop item group, the second the DragDrop object.</description>
		</property>
		<property name="_shimActive" type="Boolean" scope="static" visibility="private">
			<description>This property is used to determine if the shim is active over the screen, default false.</description>
		</property>
		</properties>
		<methods>
		<method name="removeDDFromGroup" scope="static" visibility="private">
			<description>Removes the supplied dd instance from the supplied group. Executed by DragDrop.removeFromGroup, so don't call this function directly.</description>
		</method>
		<method name="startDrag" scope="static">
			<description>Fired when either the drag pixel threshold or the mousedown hold time threshold has been met.</description>
			<parameters>
			<parameter name="x" type="int" usage="required">
				<description> the X position of the original mousedown</description>
			</parameter>
			<parameter name="y" type="int" usage="required">
				<description> the Y position of the original mousedown</description>
			</parameter>
			</parameters>
		</method>
		<method name="getDDById" scope="static">
			<description>Returns the DragDrop instance for a given id</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the DragDrop object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="DragDrop" />
			</return-types>
			<return-description>the drag drop object, null if it is not found</return-description>
		</method>
		<method name="unregAll" scope="static" visibility="private">
			<description>Cleans up the drag and drop events and objects.</description>
		</method>
		<method name="getScrollTop" scope="static">
			<description>Gets the scrollTop</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the document's scrollTop</return-description>
		</method>
		<method name="lock" scope="static">
			<description>Lock all drag and drop functionality</description>
		</method>
		<method name="getPosX" scope="static">
			<description>Returns the X position of an html element</description>
			<parameters>
			<parameter name="el" type="" usage="required">
				<description> the element for which to get the position</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the X coordinate</return-description>
		</method>
		<method name="getClientWidth" scope="static">
			<description>Gets the client width</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>client width in px</return-description>
		</method>
		<method name="unlock" scope="static">
			<description>Unlock all drag and drop functionality</description>
		</method>
		<method name="stopDrag" scope="static">
			<description>Ends the current drag, cleans up the state, and fires the endDrag and mouseUp events. Called internally when a mouseup is detected during the drag. Can be fired manually during the drag by passing either another event (such as the mousemove event received in onDrag) or a fake event with pageX and pageY defined (so that endDrag and onMouseUp have usable position data.). Alternatively, pass true for the silent parameter so that the endDrag and onMouseUp events are skipped (so no event data is needed.)</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the mouseup event, another event (or a fake event) with pageX and pageY defined, or nothing if the silent parameter is true</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> skips the enddrag and mouseup events if true</description>
			</parameter>
			</parameters>
		</method>
		<method name="_deactivateShim" scope="static" visibility="private">
			<description>This method will hide the shim element and set the _shimActive property to false</description>
		</method>
		<method name="_onResize" scope="static" visibility="private">
			<description>Reset constraints on all drag and drop objs</description>
		</method>
		<method name="_onLoad" scope="static" visibility="private">
			<description>Drag and drop initialization. Sets up the global event handlers</description>
		</method>
		<method name="fireEvents" scope="static" visibility="private">
			<description>Iterates over all of the DragDrop elements to find ones we are hovering over or dropping on</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			<parameter name="isDrop" type="boolean" usage="required">
				<description> is this a drop op or a mouseover op?</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleMouseDown" scope="static" visibility="private">
			<description>Fired after a registered DragDrop object gets the mousedown event. Sets up the events required to track the object being dragged</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			<parameter name="oDD" type="" usage="required">
				<description> the DragDrop object being dragged</description>
			</parameter>
			</parameters>
		</method>
		<method name="regDragDrop" scope="static">
			<description>Each DragDrop instance must be registered with the DragDropMgr.  This is executed in DragDrop.init()</description>
			<parameters>
			<parameter name="oDD" type="DragDrop" usage="required">
				<description> the DragDrop object to register</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the name of the group this element belongs to</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleMouseMove" scope="static" visibility="private">
			<description>Internal function to handle the mousemove event. Will be invoked from the context of the html element.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="getElement" scope="static">
			<description>Returns the actual DOM element</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the elment to get</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The element</return-description>
		</method>
		<method name="init" scope="static" visibility="private">
			<description>Called the first time an element is registered.</description>
		</method>
		<method name="_execOnAll" scope="static" visibility="private">
			<description>Runs method on all drag and drop objects</description>
		</method>
		<method name="getCss" scope="static">
			<description>Returns the style property for the DOM element (i.e., document.getElById(id).style)</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the elment to get</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>The style property of the element</return-description>
		</method>
		<method name="_remove" scope="static" visibility="private">
			<description>Unregisters a drag and drop item. This is executed in DragDrop.unreg, use that method instead of calling this directly.</description>
		</method>
		<method name="isTypeOfDD" scope="static">
			<description>My goal is to be able to transparently determine if an object is typeof DragDrop, and the exact subclass of DragDrop. typeof returns &quot;object&quot;, oDD.constructor.toString() always returns &quot;DragDrop&quot; and not the name of the subclass. So for now it just evaluates a well-known variable in DragDrop.</description>
			<parameters>
			<parameter name="the" type="Object" usage="required">
				<description> object to evaluate</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if typeof oDD = DragDrop</return-description>
		</method>
		<method name="isLocked" scope="static">
			<description>Is drag and drop locked?</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>True if drag and drop is locked, false otherwise.</return-description>
		</method>
		<method name="getClientHeight" scope="static">
			<description>Gets the client height</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>client height in px</return-description>
		</method>
		<method name="getBestMatch" scope="static">
			<description>Helper function for getting the best match from the list of drag and drop objects returned by the drag and drop events when we are in INTERSECT mode. It returns either the first object that the cursor is over, or the object that has the greatest overlap with the dragged element.</description>
			<parameters>
			<parameter name="dds" type="DragDrop[]" usage="required">
				<description> The array of drag and drop objects targeted</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="DragDrop" />
			</return-types>
			<return-description>The best single match</return-description>
		</method>
		<method name="_activateShim" scope="static" visibility="private">
			<description>This method will create the shim element if needed, then show the shim element, size the element and set the _shimActive property to true</description>
		</method>
		<method name="stopEvent" scope="static">
			<description>Utility to stop event propagation and event default, if these features are turned on.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event as returned by this.getEvent()</description>
			</parameter>
			</parameters>
		</method>
		<method name="numericSort" scope="static">
			<description>Numeric array sort function</description>
		</method>
		<method name="isOverTarget" scope="static" visibility="private">
			<description>Checks the cursor location to see if it over the target</description>
			<parameters>
			<parameter name="pt" type="YAHOO.util.Point" usage="required">
				<description> The point to evaluate</description>
			</parameter>
			<parameter name="oTarget" type="DragDrop" usage="required">
				<description> the DragDrop object we are inspecting</description>
			</parameter>
			<parameter name="intersect" type="boolean" usage="required">
				<description> true if we are in intersect mode</description>
			</parameter>
			<parameter name="pre-cached" type="YAHOO.util.Region" usage="required">
				<description> location of the dragged element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the mouse is over the target</return-description>
		</method>
		<method name="_sizeShim" scope="static" visibility="private">
			<description>This method will create a shim element (giving it the id of yui-ddm-shim), it also attaches the mousemove and mouseup listeners to it and attaches a scroll listener on the window</description>
		</method>
		<method name="isDragDrop" scope="static">
			<description>Utility function to determine if a given element has been registered as a drag drop item.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the element id to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this element is a DragDrop item, 
false otherwise</return-description>
		</method>
		<method name="_onUnload" scope="static" visibility="private">
			<description>unload event handler</description>
		</method>
		<method name="getLocation" scope="static">
			<description>Returns a Region object containing the drag and drop element's position and size, including the padding configured for it</description>
			<parameters>
			<parameter name="oDD" type="DragDrop" usage="required">
				<description> the drag and drop object to get the location for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.Region" />
			</return-types>
			<return-description>a Region object representing the total area
the element occupies, including any padding
the instance is configured for.</return-description>
		</method>
		<method name="regHandle" scope="static">
			<description>Each DragDrop handle element must be registered. This is done automatically when executing DragDrop.setHandleElId()</description>
			<parameters>
			<parameter name="sDDId" type="String" usage="required">
				<description> the DragDrop id this element is a handle for</description>
			</parameter>
			<parameter name="sHandleId" type="String" usage="required">
				<description> the id of the element that is the drag handle</description>
			</parameter>
			</parameters>
		</method>
		<method name="getRelated" scope="static">
			<description>Returns the drag and drop instances that are in all groups the passed in instance belongs to.</description>
			<parameters>
			<parameter name="p_oDD" type="DragDrop" usage="required">
				<description> the obj to get related data for</description>
			</parameter>
			<parameter name="bTargetsOnly" type="boolean" usage="required">
				<description> if true, only return targetable objs</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="DragDrop[]" />
			</return-types>
			<return-description>the related instances</return-description>
		</method>
		<method name="handleWasClicked" scope="static">
			<description>Recursively searches the immediate parent and all child nodes for the handle element in order to determine wheter or not it was clicked.</description>
			<parameters>
			<parameter name="node" type="" usage="required">
				<description> the html element to inspect</description>
			</parameter>
			</parameters>
		</method>
		<method name="swapNode" scope="static">
			<description>Swap two nodes. In IE, we use the native method, for others we emulate the IE behavior</description>
			<parameters>
			<parameter name="n1" type="" usage="required">
				<description> the first node to swap</description>
			</parameter>
			<parameter name="n2" type="" usage="required">
				<description> the other node to swap</description>
			</parameter>
			</parameters>
		</method>
		<method name="getScrollLeft" scope="static">
			<description>Gets the scrollLeft</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the document's scrollTop</return-description>
		</method>
		<method name="getElWrapper" scope="static" visibility="private">
			<description>Get the wrapper for the DOM element specified</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the element to get</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.util.DDM.ElementWrapper" />
			</return-types>
			<return-description>the wrapped element</return-description>
		</method>
		<method name="_addListeners" scope="static" visibility="private">
			<description>Trying to make the load order less important. Without this we get an error if this file is loaded before the Event Utility.</description>
		</method>
		<method name="getStyle" scope="static">
			<description>Returns the specified element style property</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>     the element</description>
			</parameter>
			<parameter name="styleProp" type="string" usage="required">
				<description>  the style property</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The value of the style property</return-description>
		</method>
		<method name="getPosY" scope="static">
			<description>Returns the Y position of an html element</description>
			<parameters>
			<parameter name="el" type="" usage="required">
				<description> the element for which to get the position</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the Y coordinate</return-description>
		</method>
		<method name="isLegalTarget" scope="static">
			<description>Returns true if the specified dd target is a legal target for the specifice drag obj</description>
			<parameters>
			<parameter name="the" type="DragDrop" usage="required">
				<description> drag obj</description>
			</parameter>
			<parameter name="the" type="DragDrop" usage="required">
				<description> target</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the target is a legal target for the 
dd obj</return-description>
		</method>
		<method name="refreshCache" scope="static">
			<description>Refreshes the cache of the top-left and bottom-right points of the drag and drop objects in the specified group(s). This is in the format that is stored in the drag and drop instance, so typical usage is: &lt;code&gt; YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups); &lt;/code&gt; Alternatively: &lt;code&gt; YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true}); &lt;/code&gt;</description>
			<parameters>
			<parameter name="groups" type="Object" usage="required">
				<description> an associative array of groups to refresh</description>
			</parameter>
			</parameters>
		</method>
		<method name="isHandle" scope="static">
			<description>Utility function to determine if a given element has been registered as a drag drop handle for the given Drag Drop object.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the element id to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if this element is a DragDrop handle, false 
otherwise</return-description>
		</method>
		<method name="handleMouseUp" scope="static" visibility="private">
			<description>Internal function to handle the mouseup event. Will be invoked from the context of the document.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="verifyEl" scope="static">
			<description>This checks to make sure an element exists and is in the DOM. The main purpose is to handle cases where innerHTML is used to remove drag and drop objects from the DOM. IE provides an 'unspecified error' when trying to access the offsetParent of such an element</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the element looks usable</return-description>
		</method>
		<method name="getScroll" scope="static" visibility="private">
			<description>Returns the current scroll position</description>
		</method>
		<method name="moveToEl" scope="static">
			<description>Sets the x/y position of an element to the location of the target element.</description>
			<parameters>
			<parameter name="moveEl" type="HTMLElement" usage="required">
				<description>   The element to move</description>
			</parameter>
			<parameter name="targetEl" type="HTMLElement" usage="required">
				<description>  The position reference element</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Chain">
		<description>Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; - {Object} the scope from which to execute the callback.  Default is the global window scope.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argument&lt;/code&gt; - {Array} parameters to be passed to method as individual arguments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; - {Object} the scope from which to execute the callback.  Default is the global window scope.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argument&lt;/code&gt; - {Array} parameters to be passed to method as individual arguments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.Chain" />
			</return-types>
			<parameters>
			<parameter name="callback*" type="Function|Object" usage="required">
				<description>  Any number of callbacks to initialize the queue</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="q" type="{Array}" scope="instance" visibility="private">
			<description>The callback queue</description>
		</property>
		<property name="id" type="{number}" scope="instance" visibility="private">
			<description>Timeout id used to pause or stop execution and indicate the execution state of the Chain. 0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution.</description>
		</property>
		</properties>
		<methods>
		<method name="stop" scope="instance">
			<description>Stop and clear the Chain's queue after the current execution of the current callback completes.</description>
			<return-types>
			<return-type type="Chain" />
			</return-types>
			<return-description>the Chain instance</return-description>
		</method>
		<method name="add" scope="instance">
			<description>Add a callback to the end of the queue</description>
			<parameters>
			<parameter name="c" type="Function|Object" usage="required">
				<description> the callback function ref or object literal</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Chain" />
			</return-types>
			<return-description>the Chain instance</return-description>
		</method>
		<method name="pause" scope="instance">
			<description>Pause the execution of the Chain after the current execution of the current callback completes. If called interstitially, clears the timeout for the pending callback. Paused Chains can be restarted with chain.run()</description>
			<return-types>
			<return-type type="Chain" />
			</return-types>
			<return-description>the Chain instance</return-description>
		</method>
		<method name="run" scope="instance">
			<description>Begin executing the chain, or resume execution from the last paused position.</description>
			<return-types>
			<return-type type="Chain" />
			</return-types>
			<return-description>the Chain instance</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ProgressBar" superclass="YAHOO.util.Element">
		<description>The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,
a level meter, rating or any such simple linear measure.
It allows for highly customized styles including animation, vertical or horizontal and forward or reverse.</description>
		<constructors>
		<constructor scope="instance">
			<description>The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,
a level meter, rating or any such simple linear measure.
It allows for highly customized styles including animation, vertical or horizontal and forward or reverse.</description>
			<return-types>
				<return-type type="YAHOO.widget.ProgressBar" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="object" usage="required">
				<description>  An object containing any configuration attributes to be set</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="ProgressBar.MARKUP" type="String" scope="static">
			<description>String containing the HTML string which is the basis for the Progress Bar.</description>
		</property>
		<property name="_previousValue" type="Number" scope="instance" visibility="private">
			<description>The previous value setting for the bar. Used mostly as information to event listeners</description>
		</property>
		<property name="_barSizeFunction" type="{function}" scope="instance" visibility="private">
			<description>Function to be used to calculate bar size.  It is picked from _barSizeFunctions depending on direction and whether animation is active.</description>
		</property>
		<property name="_rendered" type="boolean" scope="instance" visibility="private">
			<description>A flag to signal that rendering has already happened</description>
		</property>
		<property name="_barSpace" type="Number" scope="instance" visibility="private">
			<description>The actual space (in pixels) available for the bar within the mask (excludes margins)</description>
		</property>
		<property name="_barSizeFunctions" type="{collection of functions}" scope="instance" visibility="private">
			<description>Collection of functions used by to calculate the size of the bar. One of this will be used depending on direction and whether animation is active.</description>
		</property>
		</properties>
		<methods>
		<method name="render" scope="instance">
			<description>Renders the ProgressBar into the given container.  If the container has other content, the ProgressBar will be appended to it. If the second argument is provided, the ProgressBar will be inserted before the given child. The method is chainable since it returns a reference to this instance.</description>
			<parameters>
			<parameter name="el" type="HTML Element" usage="required">
				<description>  HTML element that will contain the ProgressBar</description>
			</parameter>
			<parameter name="before" type="HTML Element" usage="optional">
				<description>  (optional) If present, the ProgressBar will be inserted before this element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.ProgressBar" />
			</return-types>
		</method>
		<method name="_init" scope="instance">
			<description>Initialization code for the widget, separate from the constructor to allow for overriding/patching. It is called after initAttributes</description>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description> (Optional) Object literal definition of configuration values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_valueChange" scope="instance" visibility="private">
			<description>Called in response to a change in the value attribute. Moves the bar to reflect the new value</description>
			<return-description>void</return-description>
		</method>
		<method name="_fixEdges" scope="instance" visibility="private">
			<description>Due to rounding differences, some browsers fail to cover the whole area with the mask quadrants when the width or height is odd. This method stretches the lower and/or right quadrants to make the difference.</description>
			<return-description>void</return-description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>Implementation of Element's abstract method. Sets up config values.</description>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description> (Optional) Object literal definition of configuration values.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_heightChange" scope="instance" visibility="private">
			<description>Method called when the height attribute is changed</description>
			<parameters>
			<parameter name="value" type="int|string" usage="required">
				<description> New height, in pixels if int or string including units</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_setAriaText" scope="instance" visibility="private">
			<description>Utility method to set the ARIA value attributes</description>
			<return-description>void</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the ProgressBar, related objects and unsubscribes from all events</description>
			<return-description>void</return-description>
		</method>
		<method name="_animSetter" scope="instance" visibility="private">
			<description>Called in response to a change in the anim attribute. It creates and sets up or destroys the instance of the animation utility that will move the bar</description>
			<return-description>void</return-description>
		</method>
		<method name="redraw" scope="instance">
			<description>Recalculates the bar size and position and redraws it</description>
			<return-description>void</return-description>
		</method>
		<method name="_widthChange" scope="instance" visibility="private">
			<description>Method called when the height attribute is changed</description>
			<parameters>
			<parameter name="value" type="int|string" usage="required">
				<description> New width, in pixels if int or string including units</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="_recalculateConstants" scope="instance" visibility="private">
			<description>Calculates some auxiliary values to make the rendering faster</description>
			<return-description>void</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ContextMenuItem" superclass="YAHOO.widget.MenuItem">
		<description>Creates an item for a context menu.</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates an item for a context menu.</description>
			<return-types>
				<return-type type="YAHOO.widget.ContextMenuItem" />
			</return-types>
			<parameters>
			<parameter name="p_oObject" type="String" usage="required">
				<description> String specifying the text of the context menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLLIElement" usage="required">
				<description> Object specifying the 
&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the context menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptGroupElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the context 
menu item.</description>
			</parameter>
			<parameter name="p_oObject" type="HTMLOptionElement" usage="required">
				<description> Object specifying 
the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the context menu item.</description>
			</parameter>
			<parameter name="p_oConfig" type="Object" usage="optional">
				<description> Optional. Object literal specifying the 
configuration for the context menu item. See configuration class 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.CartesianSeries">
		<description>Functionality common to most series appearing in cartesian charts.
Generally, a &lt;code&gt;CartesianSeries&lt;/code&gt; object shouldn't be
instantiated directly. Instead, a subclass with a concrete implementation
should be used.</description>
		<constructors>
		<constructor scope="instance">
			<description>Functionality common to most series appearing in cartesian charts.
Generally, a &lt;code&gt;CartesianSeries&lt;/code&gt; object shouldn't be
instantiated directly. Instead, a subclass with a concrete implementation
should be used.</description>
			<return-types>
				<return-type type="YAHOO.widget.CartesianSeries" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="yField" type="String" scope="instance">
			<description>The field used to access the y-axis value from the items from the data source.</description>
		</property>
		<property name="xField" type="String" scope="instance">
			<description>The field used to access the x-axis value from the items from the data source.</description>
		</property>
		<property name="showInLegend" type="Boolean" scope="instance">
			<description>When a Legend is present, indicates whether the series will show in the legend.</description>
		</property>
		<property name="axis" type="String" scope="instance">
			<description>Indicates which axis the series will bind to</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.Scroll" superclass="YAHOO.util.ColorAnim">
		<description>Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;
member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;
member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.
&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.Scroll" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> Reference to the element that will be animated</description>
			</parameter>
			<parameter name="attributes" type="Object" usage="required">
				<description> The attribute(s) to be animated.  
Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  
Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  
All attribute names use camelCase.</description>
			</parameter>
			<parameter name="duration" type="Number" usage="required">
				<description> (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.Dialog" superclass="YAHOO.widget.Panel">
		<description>&lt;p&gt;
Dialog is an implementation of Panel that can be used to submit form 
data.
&lt;/p&gt;
&lt;p&gt;
Built-in functionality for buttons with event handlers is included. 
If the optional YUI Button dependancy is included on the page, the buttons
created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
will be created.
&lt;/p&gt;
&lt;p&gt;
Forms can be processed in 3 ways -- via an asynchronous Connection utility call, 
a simple form POST or GET, or manually. The YUI Connection utility should be
included if you're using the default &quot;async&quot; postmethod, but is not required if
you're using any of the other postmethod values.
&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;
Dialog is an implementation of Panel that can be used to submit form 
data.
&lt;/p&gt;
&lt;p&gt;
Built-in functionality for buttons with event handlers is included. 
If the optional YUI Button dependancy is included on the page, the buttons
created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
will be created.
&lt;/p&gt;
&lt;p&gt;
Forms can be processed in 3 ways -- via an asynchronous Connection utility call, 
a simple form POST or GET, or manually. The YUI Connection utility should be
included if you're using the default &quot;async&quot; postmethod, but is not required if
you're using any of the other postmethod values.
&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.Dialog" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Dialog &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Dialog</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing 
the configuration that should be set for this Dialog. See configuration 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.widget.Dialog.CSS_DIALOG" type="String" scope="static">
			<description>Constant representing the default CSS class used for a Dialog</description>
		</property>
		<property name="form" type="HTMLFormElement" scope="instance">
			<description>Object reference to the Dialog's &lt;code&gt;&amp;#60;form&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="callback.success" type="Function" scope="instance">
			<description>The function to execute upon success of the Connection submission (when the form does not contain a file input element).</description>
		</property>
		<property name="callback.failure" type="Function" scope="instance">
			<description>The function to execute upon failure of the Connection submission</description>
		</property>
		<property name="callback" type="Object" scope="instance">
			<description>The internally maintained callback object for use with the Connection utility. The format of the callback object is similar to Connection Manager's callback object and is simply passed through to Connection Manager when the async request is made.</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the Dialog's events</description>
		</property>
		<property name="callback.upload" type="Function" scope="instance">
			<description>&lt;p&gt; The function to execute upon success of the Connection submission, when the form contains a file input element. &lt;/p&gt; &lt;p&gt; &lt;em&gt;NOTE:&lt;/em&gt; Connection manager will not invoke the success or failure handlers for the file upload use case. This will be the only callback handler invoked. &lt;/p&gt; &lt;p&gt; For more information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/connection/#file&quot;&gt; Connection Manager documenation on file uploads&lt;/a&gt;. &lt;/p&gt;</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the Dialog's configuration properties</description>
		</property>
		<property name="callback.argument" type="Object" scope="instance">
			<description>The arbitraty argument or arguments to pass to the Connection callback functions</description>
		</property>
		</properties>
		<methods>
		<method name="configButtons" scope="instance">
			<description>The default event handler for the &quot;buttons&quot; configuration property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getButtons" scope="instance">
			<description>Returns an array containing each of the Dialog's buttons, by default an array of HTML &lt;code&gt;&amp;#60;BUTTON&amp;#62;&lt;/code&gt; elements. If the Dialog's buttons were created using the YAHOO.widget.Button class (via the inclusion of the optional Button dependancy on the page), an array of YAHOO.widget.Button instances is returned.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="doSubmit" scope="instance">
			<description>Submits the Dialog's form depending on the value of the &quot;postmethod&quot; configuration property. &lt;strong&gt;Please note: &lt;/strong&gt; As of version 2.3 this method will automatically handle asyncronous file uploads should the Dialog instance's form contain &lt;code&gt;&amp;#60;input type=&quot;file&quot;&amp;#62;&lt;/code&gt; elements. If a Dialog instance will be handling asyncronous file uploads, its &lt;code&gt;callback&lt;/code&gt; property will need to be setup with a &lt;code&gt;upload&lt;/code&gt; handler rather than the standard &lt;code&gt;success&lt;/code&gt; and, or &lt;code&gt;failure&lt;/code&gt; handlers. For more information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/ connection/#file&quot;&gt;Connection Manager documenation on file uploads&lt;/a&gt;.</description>
		</method>
		<method name="configClose" scope="instance">
			<description>The default event handler fired when the &quot;close&quot; property is changed. The method controls the appending or hiding of the close icon at the top right of the Dialog.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_submitHandler" scope="instance">
			<description>Internal handler for the form submit event</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM Event object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_doClose" scope="instance">
			<description>Event handler for the close icon</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required"/>
			</parameters>
		</method>
		<method name="cancel" scope="instance">
			<description>Executes the cancel of the Dialog followed by a hide.</description>
		</method>
		<method name="configPostMethod" scope="instance">
			<description>The default event handler for the &quot;postmethod&quot; configuration property</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="focusFirstButton" scope="instance">
			<description>Sets the focus to the first button created via the &quot;buttons&quot; configuration property.</description>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for Dialog which are fired automatically at appropriate times by the Dialog class.</description>
		</method>
		<method name="focusFirst" scope="instance">
			<description>&lt;p&gt; Sets focus to the first focusable element in the Dialog's form if found, else, the default button if found, else the first button defined via the &quot;buttons&quot; configuration property. &lt;/p&gt; &lt;p&gt; This method is invoked when the Dialog is made visible. &lt;/p&gt;</description>
		</method>
		<method name="submit" scope="instance">
			<description>Executes a submit of the Dialog if validation is successful. By default the Dialog is hidden after submission, but you can set the &quot;hideaftersubmit&quot; configuration property to false, to prevent the Dialog from being hidden.</description>
		</method>
		<method name="focusLastButton" scope="instance">
			<description>Sets the focus to the last button created via the &quot;buttons&quot; configuration property.</description>
		</method>
		<method name="init" scope="instance">
			<description>The Dialog initialization method, which is executed for Dialog and all of its subclasses. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Dialog &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Dialog</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the Dialog</return-description>
		</method>
		<method name="focusDefaultButton" scope="instance">
			<description>Sets the focus to the button that is designated as the default via the &quot;buttons&quot; configuration property. By default, this method is called when the Dialog is made visible.</description>
		</method>
		<method name="getData" scope="instance">
			<description>Returns a JSON-compatible data structure representing the data currently contained in the form.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A JSON object reprsenting the data of the 
current form.</return-description>
		</method>
		<method name="blurButtons" scope="instance">
			<description>Blurs all the buttons defined via the &quot;buttons&quot; configuration property.</description>
		</method>
		<method name="focusLast" scope="instance">
			<description>Sets focus to the last element in the Dialog's form or the last button defined via the &quot;buttons&quot; configuration property.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the Panel element from the DOM and sets all child elements to null.</description>
		</method>
		<method name="validate" scope="instance">
			<description>Built-in function hook for writing a validation function that will be checked for a &quot;true&quot; value prior to a submit. This function, as implemented by default, always returns true, so it should be overridden if validation is necessary.</description>
		</method>
		<method name="registerForm" scope="instance">
			<description>Prepares the Dialog's internal FORM object, creating one if one is not currently present.</description>
		</method>
		<method name="setFirstLastFocusable" scope="instance">
			<description>Configures instance properties, pointing to the first and last focusable elements in the Dialog's form.</description>
		</method>
		<method name="_getFormAttributes" scope="instance">
			<description>Retrieves important attributes (currently method and action) from the form element, accounting for any elements which may have the same name as the attributes. Defaults to &quot;POST&quot; and &quot;&quot; for method and action respectively if the attribute cannot be retrieved.</description>
			<parameters>
			<parameter name="oForm" type="HTMLFormElement" usage="required">
				<description> The HTML Form element from which to retrieve the attributes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal, with method and action String properties.</return-description>
		</method>
		<method name="setTabLoop" scope="instance">
			<description>Sets up a tab, shift-tab loop between the first and last elements provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener instance properties, which are reset everytime this method is invoked.</description>
			<parameters>
			<parameter name="firstElement" type="HTMLElement" usage="required"/>
			<parameter name="lastElement" type="HTMLElement" usage="required"/>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the Dialog's Config object (cfg).</description>
		</method>
		<method name="_getButton" scope="instance" visibility="private">
			<description>Helper method to normalize button references. It either returns the YUI Button instance for the given element if found, or the passes back the HTMLElement reference if a corresponding YUI Button reference is not found or YAHOO.widget.Button does not exist on the page.</description>
			<parameters>
			<parameter name="button" type="HTMLElement" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Button|HTMLElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Color">
		<description>Provides color conversion and validation utils</description>
		<methods>
		<method name="hsv2rgb" scope="instance">
			<description>Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]</description>
			<parameters>
			<parameter name="h" type="int|[int, float, float]" usage="required">
				<description> the hue, or an array containing all three parameters</description>
			</parameter>
			<parameter name="s" type="float" usage="required">
				<description> the saturation</description>
			</parameter>
			<parameter name="v" type="float" usage="required">
				<description> the value/brightness</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="[int, int, int]" />
			</return-types>
			<return-description>the red, green, blue values in
decimal.</return-description>
		</method>
		<method name="websafe" scope="instance">
			<description>Returns the closest websafe color to the supplied rgb value.</description>
			<parameters>
			<parameter name="r" type="int|[int, int, int]" usage="required">
				<description> the red value, or an array containing all three parameters</description>
			</parameter>
			<parameter name="g" type="int" usage="required">
				<description> the green value</description>
			</parameter>
			<parameter name="b" type="int" usage="required">
				<description> the blue value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="[int, int, int]" />
			</return-types>
			<return-description>an array containing the closes
websafe rgb colors.</return-description>
		</method>
		<method name="rgb2hsv" scope="instance">
			<description>Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]</description>
			<parameters>
			<parameter name="r" type="int|[int, int, int]" usage="required">
				<description> the red value, or an array containing all three parameters</description>
			</parameter>
			<parameter name="g" type="int" usage="required">
				<description> the green value</description>
			</parameter>
			<parameter name="b" type="int" usage="required">
				<description> the blue value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="[int, float, float]" />
			</return-types>
			<return-description>the value converted to hsv</return-description>
		</method>
		<method name="hex2dec" scope="instance">
			<description>Converts a hex pair 00...FF to an int 0...255</description>
			<parameters>
			<parameter name="str" type="string" usage="required">
				<description> the hex pair to convert</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the decimal</return-description>
		</method>
		<method name="rgb2hex" scope="instance">
			<description>Converts decimal rgb values into a hex string 255,255,255 -&gt; FFFFFF</description>
			<parameters>
			<parameter name="r" type="int|[int, int, int]" usage="required">
				<description> the red value, or an array containing all three parameters</description>
			</parameter>
			<parameter name="g" type="int" usage="required">
				<description> the green value</description>
			</parameter>
			<parameter name="b" type="int" usage="required">
				<description> the blue value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the hex string</return-description>
		</method>
		<method name="real2dec" scope="instance">
			<description>Converts 0-1 to 0-255</description>
			<parameters>
			<parameter name="n" type="float" usage="required">
				<description> the number to convert</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>a number 0-255</return-description>
		</method>
		<method name="dec2hex" scope="instance">
			<description>Converts an int 0...255 to hex pair 00...FF</description>
			<parameters>
			<parameter name="n" type="int" usage="required">
				<description> the number to convert</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the hex equivalent</return-description>
		</method>
		<method name="hex2rgb" scope="instance">
			<description>Converts a hex string to rgb</description>
			<parameters>
			<parameter name="str" type="string" usage="required">
				<description> the hex string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="[int, int, int]" />
			</return-types>
			<return-description>an array containing the rgb values</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.SimpleDialog" superclass="YAHOO.widget.Dialog">
		<description>SimpleDialog is a simple implementation of Dialog that can be used to 
submit a single value. Forms can be processed in 3 ways -- via an 
asynchronous Connection utility call, a simple form POST or GET, 
or manually.</description>
		<constructors>
		<constructor scope="instance">
			<description>SimpleDialog is a simple implementation of Dialog that can be used to 
submit a single value. Forms can be processed in 3 ways -- via an 
asynchronous Connection utility call, a simple form POST or GET, 
or manually.</description>
			<return-types>
				<return-type type="YAHOO.widget.SimpleDialog" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the SimpleDialog 
&lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the SimpleDialog</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing 
the configuration that should be set for this SimpleDialog. See 
configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG" type="String" scope="static">
			<description>Constant representing the default CSS class used for a SimpleDialog</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_INFO" type="String" scope="static">
			<description>Constant for the standard network icon for info</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME" type="String" scope="static">
			<description>Constant representing the name of the CSS class applied to the element created by the &quot;icon&quot; configuration property.</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_BLOCK" type="String" scope="static">
			<description>Constant for the standard network icon for a blocking action</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_WARN" type="String" scope="static">
			<description>Constant for the standard network icon for warn</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_ALARM" type="String" scope="static">
			<description>Constant for the standard network icon for alarm</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_TIP" type="String" scope="static">
			<description>Constant for the standard network icon for a tip</description>
		</property>
		<property name="YAHOO.widget.SimpleDialog.ICON_HELP" type="String" scope="static">
			<description>Constant for the standard network icon for help</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the SimpleDialog's configuration properties</description>
		</property>
		</properties>
		<methods>
		<method name="configIcon" scope="instance">
			<description>Fired when the &quot;icon&quot; property is set.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The SimpleDialog initialization method, which is executed for SimpleDialog and all of its subclasses. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the SimpleDialog &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the SimpleDialog</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setBody" scope="instance">
			<description>&lt;p&gt; Sets the SimpleDialog's body content to the HTML specified. If no body is present, one will be automatically created. An empty string can be passed to the method to clear the contents of the body. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; SimpleDialog provides the text and icon configuration properties to set the contents of it's body element in accordance with the UI design for a SimpleDialog (an icon and message text). Calling setBody on the SimpleDialog will not enforce this UI design constraint and will replace the entire contents of the SimpleDialog body. It should only be used if you wish the replace the default icon/text body structure of a SimpleDialog with your own custom markup.&lt;/p&gt;</description>
			<parameters>
			<parameter name="bodyContent" type="String" usage="required">
				<description> The HTML used to set the body. As a convenience, non HTMLElement objects can also be passed into the method, and will be treated as strings, with the body innerHTML set to their default toString implementations. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="bodyContent" type="HTMLElement" usage="required">
				<description> The HTMLElement to add as the first and only child of the body element. &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="bodyContent" type="DocumentFragment" usage="required">
				<description> The document fragment containing elements which are to be added to the body</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the SimpleDialog</return-description>
		</method>
		<method name="configText" scope="instance">
			<description>Fired when the &quot;text&quot; property is set.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="registerForm" scope="instance">
			<description>Prepares the SimpleDialog's internal FORM object, creating one if one is not currently present, and adding the value hidden field.</description>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the SimpleDialog's Config object (cfg).</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Connect">
		<description>The Connection Manager singleton provides methods for creating and managing
asynchronous transactions.</description>
		<properties>
		<property name="abortEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires when a transaction is successfully aborted.</description>
		</property>
		<property name="_http_header" type="object" scope="static" visibility="private">
			<description>Object literal of HTTP header(s)</description>
		</property>
		<property name="_transaction_id" type="int" scope="static" visibility="private">
			<description>A transaction counter that increments the transaction id for each transaction.</description>
		</property>
		<property name="failureEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires when handleTransactionResponse() determines a response in the HTTP 4xx/5xx range.</description>
		</property>
		<property name="successEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires when handleTransactionResponse() determines a response in the HTTP 2xx range.</description>
		</property>
		<property name="_default_xhr_header" type="boolean" scope="static" visibility="private">
			<description>The default header value for the label &quot;X-Requested-With&quot;. This is sent with each transaction, by default, to identify the request as being made by YUI Connection Manager.</description>
		</property>
		<property name="_use_default_post_header" type="boolean" scope="static" visibility="private">
			<description>Determines if a default header of Content-Type of 'application/x-www-form-urlencoded' will be added to any client HTTP headers sent for POST transactions.</description>
		</property>
		<property name="completeEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires when a transaction response has completed.</description>
		</property>
		<property name="_customEvents" type="object" scope="static" visibility="private">
			<description>A reference table that maps callback custom events members to its specific event name.</description>
		</property>
		<property name="_default_form_header" type="boolean" scope="static" visibility="private">
			<description>The default header used for transactions involving the use of HTML forms.</description>
		</property>
		<property name="_use_default_xhr_header" type="boolean" scope="static" visibility="private">
			<description>Determines if a default header of 'X-Requested-With: XMLHttpRequest' will be added to each transaction.</description>
		</property>
		<property name="_has_default_header" type="boolean" scope="static" visibility="private">
			<description>Determines if custom, default headers are set for each transaction.</description>
		</property>
		<property name="_poll" type="object" scope="static" visibility="private">
			<description>Collection of polling references to the polling mechanism in handleReadyState.</description>
		</property>
		<property name="startEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires at the start of a transaction</description>
		</property>
		<property name="_default_post_header" type="boolean" scope="static" visibility="private">
			<description>The default header used for POST transactions.</description>
		</property>
		<property name="_timeOut" type="object" scope="static" visibility="private">
			<description>Queue of timeout values for each transaction callback with a defined timeout value.</description>
		</property>
		<property name="_polling_interval" type="int" scope="static" visibility="private">
			<description>The polling frequency, in milliseconds, for HandleReadyState. when attempting to determine a transaction's XHR readyState. The default is 50 milliseconds.</description>
		</property>
		<property name="_has_http_headers" type="boolean" scope="static" visibility="private">
			<description>Determines if HTTP headers are set.</description>
		</property>
		<property name="_msxml_progid" type="array" scope="static" visibility="private">
			<description>Array of MSFT ActiveX ids for XMLHttpRequest.</description>
		</property>
		</properties>
		<methods>
		<method name="handleReadyState" scope="static" visibility="private">
			<description>This method serves as a timer that polls the XHR object's readyState property during a transaction, instead of binding a callback to the onreadystatechange event. Upon readyState 4, handleTransactionResponse will process the response, and the timer will be cleared.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object</description>
			</parameter>
			<parameter name="callback" type="callback" usage="required">
				<description> The user-defined callback object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="setDefaultXhrHeader" scope="static">
			<description>Member to override the default transaction header..</description>
			<parameters>
			<parameter name="b" type="boolean" usage="required">
				<description> Set and use default header - true or false .</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="setDefaultPostHeader" scope="static">
			<description>Member to override the default POST header.</description>
			<parameters>
			<parameter name="b" type="boolean" usage="required">
				<description> Set and use default header - true or false .</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="abort" scope="static">
			<description>Method to terminate a transaction, if it has not reached readyState 4.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object returned by asyncRequest.</description>
			</parameter>
			<parameter name="callback" type="object" usage="required">
				<description> User-defined callback object.</description>
			</parameter>
			<parameter name="isTimeout" type="string" usage="required">
				<description> boolean to indicate if abort resulted from a callback timeout.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
		</method>
		<method name="initHeader" scope="static">
			<description>Method that initializes the custom HTTP headers for the each transaction.</description>
			<parameters>
			<parameter name="label" type="string" usage="required">
				<description> The HTTP header label</description>
			</parameter>
			<parameter name="value" type="string" usage="required">
				<description> The HTTP header value</description>
			</parameter>
			<parameter name="isDefault" type="string" usage="required">
				<description> Determines if the specific header is a default header automatically sent with each transaction.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="setPollingInterval" scope="static">
			<description>Member to modify the default polling interval.</description>
			<parameters>
			<parameter name="i" type="int" usage="required">
				<description> The polling interval in milliseconds.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="getConnectionObject" scope="static" visibility="private">
			<description>This method is called by asyncRequest to create a valid connection object for the transaction. It also passes a transaction id and increments the transaction id counter.</description>
			<return-types>
			<return-type type="object" />
			</return-types>
		</method>
		<method name="createExceptionObject" scope="static" visibility="private">
			<description>If a transaction cannot be completed due to dropped or closed connections, there may be not be enough information to build a full response object. The failure callback will be fired and this specific condition can be identified by a status property value of 0. If an abort was successful, the status property will report a value of -1.</description>
			<parameters>
			<parameter name="tId" type="int" usage="required">
				<description> The Transaction Id</description>
			</parameter>
			<parameter name="callbackArg" type="callbackArg" usage="required">
				<description> The user-defined argument or arguments to be passed to the callback</description>
			</parameter>
			<parameter name="isAbort" type="boolean" usage="required">
				<description> Determines if the exception case is caused by a transaction abort</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
		</method>
		<method name="createResponseObject" scope="static" visibility="private">
			<description>This method evaluates the server response, creates and returns the results via its properties. Success and failure cases will differ in the response object's property values.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object</description>
			</parameter>
			<parameter name="callbackArg" type="callbackArg" usage="required">
				<description> The user-defined argument or arguments to be passed to the callback</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
		</method>
		<method name="resetDefaultHeaders" scope="static">
			<description>Resets the default HTTP headers object</description>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="initCustomEvents" scope="static" visibility="private">
			<description>This method creates and subscribes custom events, specific to each transaction</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object</description>
			</parameter>
			<parameter name="callback" type="callback" usage="required">
				<description> The user-defined callback object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="isCallInProgress" scope="static">
			<description>Determines if the transaction is still being processed.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object returned by asyncRequest</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
		</method>
		<method name="asyncRequest" scope="static">
			<description>Method for initiating an asynchronous request via the XHR object.</description>
			<parameters>
			<parameter name="method" type="string" usage="required">
				<description> HTTP transaction method</description>
			</parameter>
			<parameter name="uri" type="string" usage="required">
				<description> Fully qualified path of resource</description>
			</parameter>
			<parameter name="callback" type="callback" usage="required">
				<description> User-defined callback function or object</description>
			</parameter>
			<parameter name="postData" type="string" usage="required">
				<description> POST body</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
			<return-description>Returns the connection object</return-description>
		</method>
		<method name="setHeader" scope="static" visibility="private">
			<description>Accessor that sets the HTTP headers for each transaction.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object for the transaction.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="setProgId" scope="static">
			<description>Member to add an ActiveX id to the existing xml_progid array. In the event(unlikely) a new ActiveX id is introduced, it can be added without internal code modifications.</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> The ActiveX id to be added to initialize the XHR object.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="releaseObject" scope="static" visibility="private">
			<description>Dereference the XHR instance and the connection object after the transaction is completed.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="createXhrObject" scope="static" visibility="private">
			<description>Instantiates a XMLHttpRequest object and returns an object with two properties: the XMLHttpRequest instance and the transaction id.</description>
			<parameters>
			<parameter name="transactionId" type="int" usage="required">
				<description> Property containing the transaction id for this transaction.</description>
			</parameter>
			</parameters>
			<return-description>object</return-description>
		</method>
		<method name="handleTransactionResponse" scope="static" visibility="private">
			<description>This method attempts to interpret the server response and determine whether the transaction was successful, or if an error or exception was encountered.</description>
			<parameters>
			<parameter name="o" type="object" usage="required">
				<description> The connection object</description>
			</parameter>
			<parameter name="callback" type="object" usage="required">
				<description> The user-defined callback object</description>
			</parameter>
			<parameter name="isAbort" type="boolean" usage="required">
				<description> Determines if the transaction was terminated via abort().</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ColumnResizer" superclass="YAHOO.util.DDProxy">
		<description>ColumnResizer subclasses DragDrop to support resizeable Columns.</description>
		<constructors>
		<constructor scope="instance">
			<description>ColumnResizer subclasses DragDrop to support resizeable Columns.</description>
			<return-types>
				<return-type type="YAHOO.util.ColumnResizer" />
			</return-types>
			<parameters>
			<parameter name="oDataTable" type="YAHOO.widget.DataTable" usage="required">
				<description>  DataTable instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description>  Column instance.</description>
			</parameter>
			<parameter name="elTh" type="HTMLElement" usage="required">
				<description>  TH element reference.</description>
			</parameter>
			<parameter name="sHandleElId" type="String" usage="required">
				<description>  DOM ID of the handle element that causes the resize.</description>
			</parameter>
			<parameter name="elProxy" type="HTMLElement" usage="required">
				<description>  Resizer proxy element.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="editorOptions" type="undefined" scope="instance"/>
		</properties>
		<methods>
		<method name="startDrag" scope="instance">
			<description>Handles start drag on the Column resizer.</description>
			<parameters>
			<parameter name="e" type="string" usage="required">
				<description> The drag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetResizerEl" scope="instance">
			<description>Resets resizer element.</description>
		</method>
		<method name="onMouseDown" scope="instance">
			<description>Handles mousedown events on the Column resizer.</description>
			<parameters>
			<parameter name="e" type="string" usage="required">
				<description> The mousedown event</description>
			</parameter>
			</parameters>
		</method>
		<method name="onMouseUp" scope="instance">
			<description>Handles mouseup events on the Column resizer.</description>
			<parameters>
			<parameter name="e" type="string" usage="required">
				<description> The mouseup event</description>
			</parameter>
			</parameters>
		</method>
		<method name="onDrag" scope="instance">
			<description>Handles drag events on the Column resizer.</description>
			<parameters>
			<parameter name="e" type="string" usage="required">
				<description> The drag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="clickValidator" scope="instance" visibility="private">
			<description>Custom clickValidator to ensure Column is not in hidden state.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required"/>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.FlashAdapter">
		<description>Wraps Flash embedding functionality and allows communication with SWF through
attributes.</description>
		<properties>
		<property name="_swfURL" type="String" scope="instance" visibility="private">
			<description>The URL of the SWF file.</description>
		</property>
		<property name="_initialized" type="Boolean" scope="instance" visibility="private">
			<description>Indicates whether the SWF has been initialized and is ready to communicate with JavaScript</description>
		</property>
		<property name="_attributes" type="Object" scope="instance" visibility="private">
			<description>The initializing attributes are stored here until the SWF is ready.</description>
		</property>
		<property name="_containerID" type="String" scope="instance" visibility="private">
			<description>The ID of the containing DIV.</description>
		</property>
		<property name="_swf" type="undefined" scope="instance" visibility="private">
			<description>A reference to the embedded SWF file.</description>
		</property>
		<property name="_id" type="String" scope="instance" visibility="private">
			<description>The id of this instance.</description>
		</property>
		<property name="proxyFunctionCount" type="undefined" scope="static" visibility="private">
			<description>The number of proxy functions that have been created.</description>
		</property>
		</properties>
		<methods>
		<method name="_loadHandler" scope="instance" visibility="private">
			<description>Called when the SWF has been initialized.</description>
		</method>
		<method name="YAHOO.widget.FlashAdapter.createProxyFunction" scope="static" visibility="private">
			<description>Creates a globally accessible function that wraps a function reference. Returns the proxy function's name as a string for use by the SWF through ExternalInterface.</description>
		</method>
		<method name="YAHOO.widget.FlashAdapter.removeProxyFunction" scope="static" visibility="private">
			<description>Removes a function created with createProxyFunction()</description>
		</method>
		<method name="_initAttributes" scope="instance" visibility="private">
			<description>Initializes the attributes.</description>
		</method>
		<method name="_getAltText" scope="instance" visibility="private">
			<description>Getter for altText attribute.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the FlashAdapter instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the FlashAdapter instance.</return-description>
		</method>
		<method name="YAHOO.widget.FlashAdapter.eventHandler" scope="static" visibility="private">
			<description>Receives event messages from SWF and passes them to the correct instance of FlashAdapter.</description>
		</method>
		<method name="_eventHandler" scope="instance" visibility="private">
			<description>Handles or re-dispatches events received from the SWF.</description>
		</method>
		<method name="_embedSWF" scope="instance" visibility="private">
			<description>Embeds the SWF in the page and associates it with this instance.</description>
		</method>
		<method name="_getSWFURL" scope="instance" visibility="private">
			<description>Getter for swfURL attribute.</description>
		</method>
		<method name="destroy" scope="instance">
			<description>Nulls out the entire FlashAdapter instance and related objects and removes attached event listeners and clears out DOM elements inside the container. After calling this method, the instance reference should be expliclitly nulled by implementer, as in myChart = null. Use with caution!</description>
		</method>
		<method name="_setAltText" scope="instance" visibility="private">
			<description>Setter for altText attribute.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Date">
		<description>The static Date class provides helper functions to deal with data of type Date.</description>
		<methods>
		<method name="format" scope="instance">
			<description>Takes a native JavaScript Date and formats to string for display to user.</description>
			<parameters>
			<parameter name="oDate" type="Date" usage="required">
				<description> Date.</description>
			</parameter>
			<parameter name="oConfig" type="Object" usage="optional">
				<description> (Optional) Object literal of configuration values: &lt;dl&gt; &lt;dt&gt;format &amp;lt;String&amp;gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt; Any strftime string is supported, such as &quot;%I:%M:%S %p&quot;. strftime has several format specifiers defined by the Open group at &lt;a href=&quot;http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&quot;&gt;http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&lt;/a&gt; &lt;/p&gt; &lt;p&gt;  PHP added a few of its own, defined at &lt;a href=&quot;http://www.php.net/strftime&quot;&gt;http://www.php.net/strftime&lt;/a&gt; &lt;/p&gt; &lt;p&gt; This javascript implementation supports all the PHP specifiers and a few more. The full list is below: &lt;/p&gt; &lt;dl&gt; &lt;dt&gt;%a&lt;/dt&gt; &lt;dd&gt;abbreviated weekday name according to the current locale&lt;/dd&gt; &lt;dt&gt;%A&lt;/dt&gt; &lt;dd&gt;full weekday name according to the current locale&lt;/dd&gt; &lt;dt&gt;%b&lt;/dt&gt; &lt;dd&gt;abbreviated month name according to the current locale&lt;/dd&gt; &lt;dt&gt;%B&lt;/dt&gt; &lt;dd&gt;full month name according to the current locale&lt;/dd&gt; &lt;dt&gt;%c&lt;/dt&gt; &lt;dd&gt;preferred date and time representation for the current locale&lt;/dd&gt; &lt;dt&gt;%C&lt;/dt&gt; &lt;dd&gt;century number (the year divided by 100 and truncated to an integer, range 00 to 99)&lt;/dd&gt; &lt;dt&gt;%d&lt;/dt&gt; &lt;dd&gt;day of the month as a decimal number (range 01 to 31)&lt;/dd&gt; &lt;dt&gt;%D&lt;/dt&gt; &lt;dd&gt;same as %m/%d/%y&lt;/dd&gt; &lt;dt&gt;%e&lt;/dt&gt; &lt;dd&gt;day of the month as a decimal number, a single digit is preceded by a space (range ' 1' to '31')&lt;/dd&gt; &lt;dt&gt;%F&lt;/dt&gt; &lt;dd&gt;same as %Y-%m-%d (ISO 8601 date format)&lt;/dd&gt; &lt;dt&gt;%g&lt;/dt&gt; &lt;dd&gt;like %G, but without the century&lt;/dd&gt; &lt;dt&gt;%G&lt;/dt&gt; &lt;dd&gt;The 4-digit year corresponding to the ISO week number&lt;/dd&gt; &lt;dt&gt;%h&lt;/dt&gt; &lt;dd&gt;same as %b&lt;/dd&gt; &lt;dt&gt;%H&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 00 to 23)&lt;/dd&gt; &lt;dt&gt;%I&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 01 to 12)&lt;/dd&gt; &lt;dt&gt;%j&lt;/dt&gt; &lt;dd&gt;day of the year as a decimal number (range 001 to 366)&lt;/dd&gt; &lt;dt&gt;%k&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)&lt;/dd&gt; &lt;dt&gt;%l&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) &lt;/dd&gt; &lt;dt&gt;%m&lt;/dt&gt; &lt;dd&gt;month as a decimal number (range 01 to 12)&lt;/dd&gt; &lt;dt&gt;%M&lt;/dt&gt; &lt;dd&gt;minute as a decimal number&lt;/dd&gt; &lt;dt&gt;%n&lt;/dt&gt; &lt;dd&gt;newline character&lt;/dd&gt; &lt;dt&gt;%p&lt;/dt&gt; &lt;dd&gt;either `AM' or `PM' according to the given time value, or the corresponding strings for the current locale&lt;/dd&gt; &lt;dt&gt;%P&lt;/dt&gt; &lt;dd&gt;like %p, but lower case&lt;/dd&gt; &lt;dt&gt;%r&lt;/dt&gt; &lt;dd&gt;time in a.m. and p.m. notation equal to %I:%M:%S %p&lt;/dd&gt; &lt;dt&gt;%R&lt;/dt&gt; &lt;dd&gt;time in 24 hour notation equal to %H:%M&lt;/dd&gt; &lt;dt&gt;%s&lt;/dt&gt; &lt;dd&gt;number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC&lt;/dd&gt; &lt;dt&gt;%S&lt;/dt&gt; &lt;dd&gt;second as a decimal number&lt;/dd&gt; &lt;dt&gt;%t&lt;/dt&gt; &lt;dd&gt;tab character&lt;/dd&gt; &lt;dt&gt;%T&lt;/dt&gt; &lt;dd&gt;current time, equal to %H:%M:%S&lt;/dd&gt; &lt;dt&gt;%u&lt;/dt&gt; &lt;dd&gt;weekday as a decimal number [1,7], with 1 representing Monday&lt;/dd&gt; &lt;dt&gt;%U&lt;/dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the first Sunday as the first day of the first week&lt;/dd&gt; &lt;dt&gt;%V&lt;/dt&gt; &lt;dd&gt;The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week.&lt;/dd&gt; &lt;dt&gt;%w&lt;/dt&gt; &lt;dd&gt;day of the week as a decimal, Sunday being 0&lt;/dd&gt; &lt;dt&gt;%W&lt;/dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the first Monday as the first day of the first week&lt;/dd&gt; &lt;dt&gt;%x&lt;/dt&gt; &lt;dd&gt;preferred date representation for the current locale without the time&lt;/dd&gt; &lt;dt&gt;%X&lt;/dt&gt; &lt;dd&gt;preferred time representation for the current locale without the date&lt;/dd&gt; &lt;dt&gt;%y&lt;/dt&gt; &lt;dd&gt;year as a decimal number without a century (range 00 to 99)&lt;/dd&gt; &lt;dt&gt;%Y&lt;/dt&gt; &lt;dd&gt;year as a decimal number including the century&lt;/dd&gt; &lt;dt&gt;%z&lt;/dt&gt; &lt;dd&gt;numerical time zone representation&lt;/dd&gt; &lt;dt&gt;%Z&lt;/dt&gt; &lt;dd&gt;time zone name or abbreviation&lt;/dd&gt; &lt;dt&gt;%%&lt;/dt&gt; &lt;dd&gt;a literal `%' character&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			<parameter name="sLocale" type="String" usage="optional">
				<description> (Optional) The locale to use when displaying days of week, months of the year, and other locale specific strings. The following locales are built in: &lt;dl&gt; &lt;dt&gt;en&lt;/dt&gt; &lt;dd&gt;English&lt;/dd&gt; &lt;dt&gt;en-US&lt;/dt&gt; &lt;dd&gt;US English&lt;/dd&gt; &lt;dt&gt;en-GB&lt;/dt&gt; &lt;dd&gt;British English&lt;/dd&gt; &lt;dt&gt;en-AU&lt;/dt&gt; &lt;dd&gt;Australian English (identical to British English)&lt;/dd&gt; &lt;/dl&gt; More locales may be added by subclassing of YAHOO.util.DateLocale. See YAHOO.util.DateLocale for more information.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Formatted date for display.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.StackedColumnSeries">
		<description>StackedColumnSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>StackedColumnSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.StackedColumnSeries" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.SWFDetect">
		<description>Flafh detection utility.</description>
	</class>
	<class type="LogWriter">
		<description>The LogWriter class provides a mechanism to log messages through
YAHOO.widget.Logger from a named source.</description>
		<constructors>
		<constructor scope="instance">
			<description>The LogWriter class provides a mechanism to log messages through
YAHOO.widget.Logger from a named source.</description>
			<return-types>
				<return-type type="LogWriter" />
			</return-types>
			<parameters>
			<parameter name="sSource" type="String" usage="required">
				<description>  Source of LogWriter instance.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_source" type="String" scope="instance" visibility="private">
			<description>Source of the LogWriter instance.</description>
		</property>
		</properties>
		<methods>
		<method name="getSource" scope="instance">
			<description>Public accessor to get the source name.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The LogWriter source.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the LogWriter instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the LogWriter instance.</return-description>
		</method>
		<method name="log" scope="instance">
			<description>Logs a message attached to the source of the LogWriter.</description>
			<parameters>
			<parameter name="sMsg" type="String" usage="required">
				<description> The log message.</description>
			</parameter>
			<parameter name="sCategory" type="String" usage="required">
				<description> Category name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setSource" scope="instance">
			<description>Public accessor to set the source name.</description>
			<parameters>
			<parameter name="sSource" type="String" usage="required">
				<description> Source of LogWriter instance.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ColorPicker" superclass="YAHOO.util.Element">
		<description>A widget to select colors</description>
		<constructors>
		<constructor scope="instance">
			<description>A widget to select colors</description>
			<return-types>
				<return-type type="YAHOO.widget.ColorPicker" />
			</return-types>
			<parameters>
			<parameter name="el(optional)" type="HTMLElement | String | Object" usage="required">
				<description> The html 
element that represents the colorpicker, or the attribute object to use. 
An element will be created if none provided.</description>
			</parameter>
			<parameter name="attr" type="Object" usage="optional">
				<description> (optional) A key map of the colorpicker's 
initial attributes.  Ignored if first arg is attributes object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DEFAULT" type="undefined" scope="instance">
			<description>Constants for the control's default default values</description>
		</property>
		<property name="pickerSlider" type="YAHOO.widget.Slider" scope="instance">
			<description>The picker region</description>
		</property>
		<property name="ID.PICKER_BG" type="String" scope="instance">
			<description>The id for the picker region slider</description>
		</property>
		<property name="skipAnim" type="Boolean" scope="instance">
			<description>Flag to allow individual UI updates to forego animation if available. True during construction for initial thumb placement. Set to false after that.</description>
		</property>
		<property name="ID.G" type="String" scope="instance">
			<description>The id for the &quot;green&quot; form field</description>
		</property>
		<property name="ID.G_HEX" type="String" scope="instance">
			<description>The id for the &quot;green&quot; hex pair output</description>
		</property>
		<property name="ID.HSV_CONTROLS" type="undefined" scope="instance">
			<description>The id for the hsv controls</description>
		</property>
		<property name="ID.SWATCH" type="String" scope="instance">
			<description>The id for the color swatch</description>
		</property>
		<property name="ID.HEX_CONTROLS" type="undefined" scope="instance">
			<description>The id for the hsv controls</description>
		</property>
		<property name="IMAGE" type="undefined" scope="instance">
			<description>Constants for the default image locations for img tags that are generated by the control. They can be modified by passing the complete list to the contructor for the &quot;images&quot; attribute</description>
		</property>
		<property name="ID.B_HEX" type="String" scope="instance">
			<description>The id for the &quot;blue&quot; hex pair output</description>
		</property>
		<property name="TXT" type="undefined" scope="instance">
			<description>Constants for any script-generated messages. The values here are the default messages. They can be updated by providing the complete list to the constructor for the &quot;txt&quot; attribute.</description>
		</property>
		<property name="ID.HEX" type="String" scope="instance">
			<description>The id for the hex value form field</description>
		</property>
		<property name="ID.HUE_BG" type="String" scope="instance">
			<description>The id for the hue slider</description>
		</property>
		<property name="ID.CONTROLS" type="undefined" scope="instance">
			<description>The id for the control details</description>
		</property>
		<property name="ID.V" type="String" scope="instance">
			<description>The id for the &quot;value&quot; form field</description>
		</property>
		<property name="ID.S" type="String" scope="instance">
			<description>The id for the &quot;saturation&quot; form field</description>
		</property>
		<property name="ID.R" type="String" scope="instance">
			<description>The id for the &quot;red&quot; form field</description>
		</property>
		<property name="ID.H" type="String" scope="instance">
			<description>The id for the &quot;hue&quot; form field</description>
		</property>
		<property name="ID.WEBSAFE_SWATCH" type="String" scope="instance">
			<description>The id for the websafe color swatch</description>
		</property>
		<property name="ID" type="undefined" scope="instance">
			<description>The element ids used by this control</description>
		</property>
		<property name="ID.B" type="String" scope="instance">
			<description>The id for the &quot;blue&quot; form field</description>
		</property>
		<property name="OPT" type="undefined" scope="instance">
			<description>Constants for the control's configuration attributes</description>
		</property>
		<property name="ID.HUE_THUMB" type="String" scope="instance">
			<description>The id for the hue thumb</description>
		</property>
		<property name="ID.R_HEX" type="String" scope="instance">
			<description>The id for the &quot;red&quot; hex pair output</description>
		</property>
		<property name="ID.RGB_CONTROLS" type="undefined" scope="instance">
			<description>The id for the rgb controls</description>
		</property>
		<property name="ID.PICKER_THUMB" type="String" scope="instance">
			<description>The id for the picker region thumb</description>
		</property>
		<property name="hueSlider" type="YAHOO.widget.Slider" scope="instance">
			<description>The hue slider</description>
		</property>
		<property name="ID.HEX_SUMMARY" type="undefined" scope="instance">
			<description>The id for the hex summary</description>
		</property>
		<property name="ID.CONTROLS_LABEL" type="undefined" scope="instance">
			<description>The id for the controls section header</description>
		</property>
		</properties>
		<methods>
		<method name="_hexFieldKeypress" scope="instance">
			<description>Handle keydown on the hex field</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the keypress event</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the field</description>
			</parameter>
			<parameter name="prop" type="string" usage="required">
				<description> the key to the linked property</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateRGBFromHSV" scope="instance">
			<description>Updates the RGB values from the current state of the HSV values. Executed when the one of the HSV form fields are updated _updateRGBFromHSV</description>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Sets up the config attributes and the change listeners for this properties</description>
			<parameters>
			<parameter name="attr" type="" usage="required">
				<description> An object containing default attribute values</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initSliders" scope="instance">
			<description>Creates the Hue and Value/Saturation Sliders.</description>
		</method>
		<method name="_onHueSliderChange" scope="instance">
			<description>Event handler for the hue slider.</description>
			<parameters>
			<parameter name="newOffset" type="int" usage="required">
				<description> pixels from the start position</description>
			</parameter>
			</parameters>
		</method>
		<method name="initPicker" scope="instance">
			<description>Sets the initial state of the sliders</description>
		</method>
		<method name="_updateRGB" scope="instance">
			<description>Updates the rgb attribute with the current state of the r,g,b fields. This is invoked from change listeners on these attributes to facilitate updating these values from the individual form fields</description>
		</method>
		<method name="_useFieldValue" scope="instance">
			<description>Use the value of the text field to update the control</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> an event</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the field</description>
			</parameter>
			<parameter name="prop" type="string" usage="required">
				<description> the key to the linked property</description>
			</parameter>
			</parameters>
		</method>
		<method name="getElement" scope="instance">
			<description>Returns the element reference that is saved. The id can be either the element id, or the key for this id in the &quot;id&quot; config attribute. For instance, the host element id can be obtained by passing its id (default: &quot;yui_picker&quot;) or by its key &quot;YUI_PICKER&quot;.</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the element id, or key</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>a reference to the element</return-description>
		</method>
		<method name="_bindUI" scope="instance">
			<description>Adds event listeners to Sliders and UI elements. Wires everything up.</description>
		</method>
		<method name="_updateSwatch" scope="instance">
			<description>Updates the background of the swatch with the current rbg value. Also updates the websafe swatch to the closest websafe color</description>
		</method>
		<method name="_initElements" scope="instance">
			<description>Creates any missing DOM structure.</description>
		</method>
		<method name="_updateSliders" scope="instance">
			<description>Moves the sliders into the position dictated by the current state of the control</description>
		</method>
		<method name="_updateHex" scope="instance">
			<description>Parses the hex string to normalize shorthand values, converts the hex value to rgb and updates the rgb attribute (which updates the state for all of the other values) method _updateHex</description>
		</method>
		<method name="_onPickerSliderChange" scope="instance">
			<description>Event handler for the picker slider, which controls the saturation and value/brightness.</description>
			<parameters>
			<parameter name="newOffset" type="{x: int, y: int}" usage="required">
				<description> x/y pixels from the start position</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getCommand" scope="instance">
			<description>Key map to well-known commands for txt field input</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the keypress or keydown event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>a command code
&lt;ul&gt;
&lt;li&gt;0 = not a number, letter in range, or special key&lt;/li&gt;
&lt;li&gt;1 = number&lt;/li&gt;
&lt;li&gt;2 = a-fA-F&lt;/li&gt;
&lt;li&gt;3 = increment (up arrow)&lt;/li&gt;
&lt;li&gt;4 = decrement (down arrow)&lt;/li&gt;
&lt;li&gt;5 = special key (tab, delete, return, escape, left, right)&lt;/li&gt; 
&lt;li&gt;6 = return&lt;/li&gt;
&lt;/ul&gt;</return-description>
		</method>
		<method name="setValue" scope="instance">
			<description>Sets the control to the specified rgb value and moves the sliders to the proper positions</description>
			<parameters>
			<parameter name="rgb" type="[int, int, int]" usage="required">
				<description> the rgb value</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> whether or not to fire the change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createHostElement" scope="instance">
			<description>Creates the host element if it doesn't exist</description>
		</method>
		<method name="_updateFormFields" scope="instance">
			<description>Updates the form field controls with the state data contained in the control.</description>
		</method>
		<method name="_hexOnly" scope="instance">
			<description>Allows numbers and special chars, and by default allows a-f.  Used for the hex field keypress handler.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			<parameter name="numbersOnly" type="" usage="required">
				<description> omits a-f if set to true</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>false if we are canceling the event</return-description>
		</method>
		<method name="_updatePickerSlider" scope="instance">
			<description>Moves the picker slider into the position dictated by the current state of the control</description>
		</method>
		<method name="_hideShowEl" scope="instance">
			<description>Returns the cached element reference. If the id is not a string, it is assumed that it is an element and this is returned.</description>
			<parameters>
			<parameter name="id" type="string|HTMLElement" usage="required">
				<description> the element key, id, or ref</description>
			</parameter>
			<parameter name="on" type="boolean" usage="required">
				<description> hide or show. If true, show</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateHueSlider" scope="instance">
			<description>Moves the hue slider into the position dictated by the current state of the control</description>
		</method>
		<method name="_numbersOnly" scope="instance">
			<description>Allows numbers and special chars only. Used for the rgb and hsv fields keypress handler.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>false if we are canceling the event</return-description>
		</method>
		<method name="syncUI" scope="instance">
			<description>Wrapper for _updateRGB, but allows setting</description>
			<parameters>
			<parameter name="skipAnim" type="Boolean" usage="required">
				<description> Omit Slider animation for this action</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getS" scope="instance">
			<description>Translates the slider value into saturation, int[0,1], left to right</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the saturation from 0 to 1</return-description>
		</method>
		<method name="_getValuesFromSliders" scope="instance">
			<description>Reads the sliders and converts the values to RGB, updating the internal state for all the individual form fields</description>
		</method>
		<method name="_getV" scope="instance">
			<description>Translates the slider value into value/brightness, int[0,1], top to bottom</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the value from 0 to 1</return-description>
		</method>
		<method name="_getH" scope="instance">
			<description>Translates the slider value into hue, int[0,359]</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the hue from 0 to 359</return-description>
		</method>
		<method name="_rgbFieldKeypress" scope="instance">
			<description>Handle keypress on one of the rgb or hsv fields.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the keypress event</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the field</description>
			</parameter>
			<parameter name="prop" type="string" usage="required">
				<description> the key to the linked property</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ToolbarButton" superclass="YAHOO.util.Element">
		<description>&lt;p&gt;Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar&lt;/p&gt;&lt;p&gt;Provides a toolbar button based on the button and menu widgets, &amp;lt;select&amp;gt; elements are used in place of menu's.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar&lt;/p&gt;&lt;p&gt;Provides a toolbar button based on the button and menu widgets, &amp;lt;select&amp;gt; elements are used in place of menu's.&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.ToolbarButton" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to turn into a button.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="buttonType" type="undefined" scope="instance" visibility="private">
			<description>Tells if the Button is a Rich Button or a Simple Button</description>
		</property>
		</properties>
		<methods>
		<method name="_handleSelect" scope="instance" visibility="private">
			<description>The event fired when a change event gets fired on a select element</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The change event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMenu" scope="instance">
			<description>A stub function to mimic YAHOO.widget.Button's getMenu method</description>
		</method>
		<method name="_handleMouseOut" scope="instance" visibility="private">
			<description>Removes classes from the button elements on mouseout (hover)</description>
		</method>
		<method name="init" scope="instance">
			<description>The ToolbarButton class's initialization method</description>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to create the toolbar.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the toolbar.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the toolbar.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="checkValue" scope="instance">
			<description>Select an option by value</description>
			<parameters>
			<parameter name="value" type="String" usage="required">
				<description> The value of the option that we want to mark as selected</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroy the button</description>
		</method>
		<method name="_handleMouseOver" scope="instance" visibility="private">
			<description>Adds classes to the button elements on mouseover (hover)</description>
		</method>
		<method name="fireEvent" scope="instance">
			<description>Overridden fireEvent method to prevent DOM events from firing if the button is disabled.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Attribute">
		<description>Provides Attribute configurations.</description>
		<constructors>
		<constructor scope="instance">
			<description>Provides Attribute configurations.</description>
			<return-types>
				<return-type type="YAHOO.util.Attribute" />
			</return-types>
			<parameters>
			<parameter name="hash" type="Object" usage="required">
				<description>  The intial Attribute.</description>
			</parameter>
			<parameter name="The" type="YAHOO.util.AttributeProvider" usage="required">
				<description> owner of the Attribute instance.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_written" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not the attribute's value has been set.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the attribute.</description>
		</property>
		<property name="writeOnce" type="Boolean" scope="instance">
			<description>Whether or not the attribute can only be written once.</description>
		</property>
		<property name="_initialConfig" type="Object" scope="instance" visibility="private">
			<description>The attribute's initial configuration.</description>
		</property>
		<property name="value" type="String" scope="instance">
			<description>The value of the attribute.</description>
		</property>
		<property name="validator" type="Function" scope="instance">
			<description>The validator to use when setting the attribute's value.</description>
		</property>
		<property name="readOnly" type="Boolean" scope="instance">
			<description>Whether or not the attribute is read only.</description>
		</property>
		<property name="getter" type="Function" scope="instance">
			<description>The function to use when getting the attribute's value. The getter receives the new value as the first arg and the attribute name as the 2nd The return value of the getter will be used as the return from get().</description>
		</property>
		<property name="owner" type="YAHOO.util.AttributeProvider" scope="instance">
			<description>The owner of the attribute.</description>
		</property>
		<property name="method" type="Function" scope="instance">
			<description>A function to call when setting the attribute's value. The method receives the new value as the first arg and the attribute name as the 2nd</description>
		</property>
		<property name="setter" type="Function" scope="instance">
			<description>The function to use when setting the attribute's value. The setter receives the new value as the first arg and the attribute name as the 2nd The return value of the setter replaces the value passed to set().</description>
		</property>
		</properties>
		<methods>
		<method name="setValue" scope="instance">
			<description>Sets the value of the attribute and fires beforeChange and change events.</description>
			<parameters>
			<parameter name="value" type="Any" usage="required">
				<description> The value to apply to the attribute.</description>
			</parameter>
			<parameter name="silent" type="Boolean" usage="required">
				<description> If true the change events will not be fired.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the value was set.</return-description>
		</method>
		<method name="configure" scope="instance">
			<description>Allows for configuring the Attribute's properties.</description>
			<parameters>
			<parameter name="map" type="Object" usage="required">
				<description> A key-value map of Attribute properties.</description>
			</parameter>
			<parameter name="init" type="Boolean" usage="required">
				<description> Whether or not this should become the initial config.</description>
			</parameter>
			</parameters>
		</method>
		<method name="resetValue" scope="instance">
			<description>Resets the value to the initial config value.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the value was set.</return-description>
		</method>
		<method name="refresh" scope="instance">
			<description>Resets the value to the current value. Useful when values may have gotten out of sync with actual properties.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the value was set.</return-description>
		</method>
		<method name="getValue" scope="instance">
			<description>Retrieves the current value of the attribute.</description>
			<return-types>
			<return-type type="any" />
			</return-types>
			<return-description>The current value of the attribute.</return-description>
		</method>
		<method name="resetConfig" scope="instance">
			<description>Resets the attribute config to the initial config state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.TestCase">
		<description>Test case containing various tests to run.</description>
		<constructors>
		<constructor scope="instance">
			<description>Test case containing various tests to run.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestCase" />
			</return-types>
			<parameters>
			<parameter name="template" type="" usage="required">
				<description> An object containing any number of test methods, other methods,
an optional name, and anything else the test case needs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="tearDown" scope="instance">
			<description>Function to run after each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setUp" scope="instance">
			<description>Function to run before each test is executed.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="wait" scope="instance">
			<description>Causes the test case to wait a specified amount of time and then continue executing the given code.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="optional">
				<description> (Optional) The function to run after the delay. If omitted, the TestRunner will wait until resume() is called.</description>
			</parameter>
			<parameter name="delay" type="int" usage="optional">
				<description> (Optional) The number of milliseconds to wait before running the function. If omitted, defaults to zero.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="resume" scope="instance">
			<description>Resumes a paused test and runs the given function.</description>
			<parameters>
			<parameter name="segment" type="Function" usage="optional">
				<description> (Optional) The function to run. If omitted, the test automatically passes.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Editor" superclass="YAHOO.widget.SimpleEditor">
		<description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.</description>
			<return-types>
				<return-type type="YAHOO.widget.Editor" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The textarea element to turn into an editor.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_alwaysDisabled" type="Object" scope="instance" visibility="private">
			<description>The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.</description>
		</property>
		<property name="STR_LOCAL_FILE_WARNING" type="String" scope="instance">
			<description>The label string for the local file warning.</description>
		</property>
		<property name="STR_CLOSE_WINDOW_NOTE" type="String" scope="instance">
			<description>A note appearing in the Editor Window to tell the user that the Escape key will close the window</description>
		</property>
		<property name="STR_NONE" type="String" scope="instance">
			<description>The string for the word none.</description>
		</property>
		<property name="CLASS_HIDDEN" type="String" scope="instance">
			<description>CSS class applied to the body when the hiddenelements button is pressed.</description>
		</property>
		<property name="STR_IMAGE_SIZE" type="String" scope="instance">
			<description>The label string for Image Size</description>
		</property>
		<property name="STR_IMAGE_COPY" type="String" scope="instance">
			<description>The label string for the image copy and paste message for Opera and Safari</description>
		</property>
		<property name="STR_LINK_NEW_WINDOW" type="String" scope="instance">
			<description>The string for the open in a new window label.</description>
		</property>
		<property name="STR_CLOSE_WINDOW" type="String" scope="instance">
			<description>The Title of the close button in the Editor Window</description>
		</property>
		<property name="_undoCache" type="Array" scope="instance" visibility="private">
			<description>An Array hash of the Undo Levels.</description>
		</property>
		<property name="STR_BEFORE_EDITOR" type="String" scope="instance">
			<description>The accessibility string for the element before the iFrame</description>
		</property>
		<property name="_undoLevel" type="Number" scope="instance" visibility="private">
			<description>The index of the current undo state.</description>
		</property>
		<property name="STR_IMAGE_BORDER" type="String" scope="instance">
			<description>The label string for the image border.</description>
		</property>
		<property name="STR_IMAGE_TITLE" type="String" scope="instance">
			<description>The label string for Image Description</description>
		</property>
		<property name="_alwaysEnabled" type="Object" scope="instance" visibility="private">
			<description>The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.</description>
		</property>
		<property name="STR_LINK_TITLE" type="String" scope="instance">
			<description>The string for the link description.</description>
		</property>
		<property name="_disabled" type="Array" scope="instance" visibility="private">
			<description>The Toolbar items that should be disabled if there is no selection present in the editor.</description>
		</property>
		<property name="STR_IMAGE_TEXTFLOW" type="String" scope="instance">
			<description>The label string for the image text flow.</description>
		</property>
		<property name="STR_LINK_PROP_TITLE" type="String" scope="instance">
			<description>The label string for the Link Property Editor Window.</description>
		</property>
		<property name="STR_IMAGE_BORDER_TYPE" type="String" scope="instance">
			<description>The label string for the image border type.</description>
		</property>
		<property name="EDITOR_PANEL_ID" type="String" scope="instance">
			<description>HTML id to give the properties window in the DOM.</description>
		</property>
		<property name="STR_IMAGE_ORIG_SIZE" type="String" scope="instance">
			<description>The label string for Original Image Size</description>
		</property>
		<property name="STR_IMAGE_PADDING" type="String" scope="instance">
			<description>The label string for the image padding.</description>
		</property>
		<property name="STR_IMAGE_PROP_TITLE" type="String" scope="instance">
			<description>The title for the Image Property Editor Window</description>
		</property>
		<property name="CLASS_LOCAL_FILE" type="String" scope="instance">
			<description>CSS class applied to an element when it's found to have a local url.</description>
		</property>
		<property name="STR_LINK_PROP_REMOVE" type="String" scope="instance">
			<description>The label string for the Remove link from text link inside the property editor.</description>
		</property>
		<property name="STR_IMAGE_BORDER_SIZE" type="String" scope="instance">
			<description>The label string for the image border size.</description>
		</property>
		</properties>
		<methods>
		<method name="_handleWindowInputs" scope="instance">
			<description>Disables/Enables all fields inside Editor windows. Used in show/hide events to keep window fields from submitting when the parent form is submitted.</description>
			<parameters>
			<parameter name="disable" type="Boolean" usage="required">
				<description> The state to set all inputs in all Editor windows to. Defaults to: false.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_fixNodes" scope="instance" visibility="private">
			<description>Fix href and imgs as well as remove invalid HTML.</description>
		</method>
		<method name="cmd_justifyright" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('justifyright') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_defaultImageToolbar" scope="instance" visibility="private">
			<description>A reference to the Toolbar Object inside Image Editor Window.</description>
		</method>
		<method name="moveWindow" scope="instance">
			<description>Realign the window with the currentElement and reposition the knob above the panel.</description>
			<parameters>
			<parameter name="force" type="Boolean" usage="required">
				<description> Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to create the editor.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the editor.</description>
			</parameter>
			</parameters>
		</method>
		<method name="openWindow" scope="instance">
			<description>Opens a new &quot;window/panel&quot;</description>
			<parameters>
			<parameter name="win" type="YAHOO.widget.EditorWindow" usage="required">
				<description> A YAHOO.widget.EditorWindow instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_superscript" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderCreateLinkWindow" scope="instance" visibility="private">
			<description>Pre renders the CreateLink window so we get faster window opening.</description>
		</method>
		<method name="_hasUndoLevel" scope="instance" visibility="private">
			<description>Checks to see if we have an undo level available</description>
			<return-description>Boolean</return-description>
		</method>
		<method name="_defaultImageToolbarConfig" scope="instance" visibility="private">
			<description>Config to be used for the default Image Editor Window.</description>
		</method>
		<method name="cmd_justifycenter" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('justifycenter') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_heading" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderPanel" scope="instance" visibility="private">
			<description>Renders the panel used for Editor Windows to the document so we can start using it..</description>
			<return-types>
			<return-type type="YAHOO.widget.Overlay" />
			</return-types>
		</method>
		<method name="cmd_justifyleft" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('justifyleft') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Editor class' initialization method</description>
		</method>
		<method name="closeWindow" scope="instance">
			<description>Close the currently open EditorWindow.</description>
		</method>
		<method name="cmd_script" scope="instance">
			<description>This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.</description>
			<parameters>
			<parameter name="action" type="" usage="required">
				<description> action passed from the execCommand method</description>
			</parameter>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_justify" scope="instance">
			<description>This is a factory method for the justify family of commands.</description>
			<parameters>
			<parameter name="dir" type="" usage="required">
				<description> The direction to justify</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderInsertImageWindow" scope="instance" visibility="private">
			<description>Pre renders the InsertImage window so we get faster window opening.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the editor.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="cmd_hiddenelements" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleCreateLinkWindowClose" scope="instance" visibility="private">
			<description>Handles the closing of the Link Properties Window.</description>
		</method>
		<method name="_handleInsertImageWindowClose" scope="instance" visibility="private">
			<description>Handles the closing of the Image Properties Window.</description>
		</method>
		<method name="_storeUndo" scope="instance" visibility="private">
			<description>Method to call when you want to store an undo state. Currently called from nodeChange and _handleKeyUp</description>
		</method>
		<method name="_checkUndo" scope="instance" visibility="private">
			<description>Prunes the undo cache when it reaches the maxUndo config</description>
		</method>
		<method name="cmd_subscript" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getUndo" scope="instance" visibility="private">
			<description>Get's a level from the undo cache.</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The index of the undo level we want to get.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_handleInsertImageClick" scope="instance" visibility="private">
			<description>Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.</description>
		</method>
		<method name="_windows" scope="instance" visibility="private">
			<description>A reference to the HTML elements used for the body of Editor Windows.</description>
		</method>
		<method name="cmd_redo" scope="instance">
			<description>Pulls an item from the Undo stack and updates the Editor</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_putUndo" scope="instance" visibility="private">
			<description>Puts the content of the Editor into the _undoCache. //TODO Convert the hash to a series of TEXTAREAS to store state in.</description>
			<parameters>
			<parameter name="str" type="String" usage="required">
				<description> The content of the Editor</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_indent" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_undo" scope="instance">
			<description>Pulls an item from the Undo stack and updates the Editor</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_undoNodeChange" scope="instance" visibility="private">
			<description>nodeChange listener for undo processing</description>
		</method>
		<method name="_handleKeyDown" scope="instance" visibility="private">
			<description>Override method that handles some new keydown events inside the iFrame document.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The event we are working on.</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_outdent" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		<method name="_closeWindow" scope="instance" visibility="private">
			<description>Close the currently open EditorWindow with the Escape key.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> The keypress Event that we are trapping</description>
			</parameter>
			</parameters>
		</method>
		<method name="cmd_removeformat" scope="instance">
			<description>This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.</description>
			<parameters>
			<parameter name="value" type="" usage="required">
				<description> Value passed from the execCommand method</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.RowsPerPageDropdown">
		<description>ui Component to generate the rows-per-page dropdown</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the rows-per-page dropdown</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.RowsPerPageDropdown" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="all" type="HTMLElement" scope="instance">
			<description>option node for the optional All value</description>
		</property>
		<property name="select" type="HTMLElement" scope="instance" visibility="private">
			<description>select node</description>
		</property>
		</properties>
		<methods>
		<method name="render" scope="instance">
			<description>Generate the select and option nodes and returns the select node.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="rebuild" scope="instance">
			<description>(Re)generate the select options.</description>
		</method>
		<method name="update" scope="instance">
			<description>Select the appropriate option if changed.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the select node and clears event listeners</description>
		</method>
		<method name="onChange" scope="instance">
			<description>Listener for the select's onchange event. Sent to setRowsPerPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleTotalRecordsChange" scope="instance">
			<description>Updates the all option value (and Paginator's rowsPerPage attribute if necessary) in response to a change in the Paginator's totalRecords.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> attribute change event</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.StyleSheet">
		<description>Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
&lt;pre&gt;&lt;code&gt;var sheet = YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
or
&lt;pre&gt;&lt;code&gt;var sheet = new YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
The first parameter passed can be any of the following things:
&lt;ul&gt;
&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;
&lt;li&gt;The string name of an existing YAHOO.util.StyleSheet instance&lt;/li&gt;
&lt;li&gt;The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance&lt;/li&gt;
&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.&lt;/p&gt;
&lt;p&gt;The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.
The constructor can be called using function or constructor syntax.
&lt;pre&gt;&lt;code&gt;var sheet = YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
or
&lt;pre&gt;&lt;code&gt;var sheet = new YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;
The first parameter passed can be any of the following things:
&lt;ul&gt;
&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;
&lt;li&gt;The string name of an existing YAHOO.util.StyleSheet instance&lt;/li&gt;
&lt;li&gt;The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance&lt;/li&gt;
&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;
&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a string is passed, StyleSheet will first look in its static name
registry for an existing sheet, then in the DOM for an element with that id.
If neither are found and the string contains the { character, it will be
used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
StyleSheet is created, assigned the string value as a name, and registered
statically by that name.&lt;/p&gt;
&lt;p&gt;The optional second parameter is a string name to register the sheet as.
This param is largely useful when providing a node id/ref or chunk of css
text to create a populated instance.&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.util.StyleSheet" />
			</return-types>
			<parameters>
			<parameter name="seed" type="String|HTMLElement" usage="required">
				<description>  a style or link node, its id, or a name or
yuiSSID of a StyleSheet, or a string of css text (see above)</description>
			</parameter>
			<parameter name="name" type="String" usage="required">
				<description>  OPTIONAL name to register instance for future static
access</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="node" type="HTMLElement" scope="instance">
			<description>The HTMLElement that this instance encapsulates</description>
		</property>
		</properties>
		<methods>
		<method name="enable" scope="instance">
			<description>Enable all the rules in the sheet</description>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
			<return-description>the instance</return-description>
		</method>
		<method name="StyleSheet.isValidSelector" scope="static">
			<description>&lt;p&gt;Determines if a selector string is safe to use. Used internally in set to prevent IE from locking up when attempting to add a rule for a &amp;quot;bad selector&amp;quot;.&lt;/p&gt; &lt;p&gt;Bad selectors are considered to be any string containing unescaped `~!@$%^&amp;()+=|{}[];'&quot;?&lt; or space. Also forbidden are . or # followed by anything other than an alphanumeric. Additionally -abc or .-abc or #_abc or '# ' all fail. There are likely more failure cases, so please file a bug if you encounter one.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="getCssText" scope="instance">
			<description>Get the current cssText for a rule or the entire sheet. If the selector param is supplied, only the cssText for that rule will be returned, if found. If the selector string targets multiple selectors separated by commas, the cssText of the first rule only will be returned. If no selector string, the stylesheet's full cssText will be returned.</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> Selector string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="isEnabled" scope="instance">
			<description>Returns boolean indicating whether the StyleSheet is enabled</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>is it enabled?</return-description>
		</method>
		<method name="disable" scope="instance">
			<description>Disable all the rules in the sheet. Rules may be changed while the StyleSheet is disabled.</description>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
			<return-description>the instance</return-description>
		</method>
		<method name="set" scope="instance">
			<description>&lt;p&gt;Set style properties for a provided selector string. If the selector includes commas, it will be split into individual selectors and applied accordingly. If the selector string does not have a corresponding rule in the sheet, it will be added.&lt;/p&gt; &lt;p&gt;The second parameter can be either a string of CSS text, formatted as CSS (&quot;font-size: 10px;&quot;), or an object collection of properties and their new values. Object properties must be in JavaScript format ({ fontSize: &quot;10px&quot; }).&lt;/p&gt; &lt;p&gt;The float style property will be set by any of &amp;quot;float&amp;quot;, &amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot; if passed in the object map. Use &quot;float: left;&quot; format when passing a CSS text string.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string to apply the changes to</description>
			</parameter>
			<parameter name="css" type="Object|String" usage="required">
				<description> Object literal of style properties and new values, or a string of cssText</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
			<return-description>the StyleSheet instance</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>Get the unique yuiSSID for this StyleSheet instance</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>the static id</return-description>
		</method>
		<method name="StyleSheet.register" scope="static">
			<description>Registers a StyleSheet instance in the static registry by the given name</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> the name to assign the StyleSheet in the registry</description>
			</parameter>
			<parameter name="sheet" type="StyleSheet" usage="required">
				<description> The StyleSheet instance</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>false if no name or sheet is not a StyleSheet
instance. true otherwise.</return-description>
		</method>
		<method name="unset" scope="instance">
			<description>&lt;p&gt;Unset style properties for a provided selector string, removing their effect from the style cascade.&lt;/p&gt; &lt;p&gt;If the selector includes commas, it will be split into individual selectors and applied accordingly. If there are no properties remaining in the rule after unsetting, the rule is removed.&lt;/p&gt; &lt;p&gt;The style property or properties in the second parameter must be the &lt;p&gt;JavaScript style property names. E.g. fontSize rather than font-size.&lt;/p&gt; &lt;p&gt;The float style property will be unset by any of &amp;quot;float&amp;quot;, &amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot;.&lt;/p&gt;</description>
			<parameters>
			<parameter name="sel" type="String" usage="required">
				<description> the selector string to apply the changes to</description>
			</parameter>
			<parameter name="css" type="String|Array" usage="required">
				<description> style property name or Array of names</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="StyleSheet" />
			</return-types>
			<return-description>the StyleSheet instance</return-description>
		</method>
		<method name="StyleSheet.toCssText" scope="static">
			<description>&lt;p&gt;Converts an object literal of style properties and values into a string of css text. This can then be assigned to el.style.cssText.&lt;/p&gt; &lt;p&gt;The optional second parameter is a cssText string representing the starting state of the style prior to alterations. This is most often extracted from the eventual target's current el.style.cssText.&lt;/p&gt;</description>
			<parameters>
			<parameter name="css" type="Object" usage="required">
				<description> object literal of style properties and values</description>
			</parameter>
			<parameter name="cssText" type="String" usage="required">
				<description> OPTIONAL starting cssText value</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>the resulting cssText string</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Calendar">
		<description>Calendar is the base class for the Calendar widget. In its most basic
implementation, it has the ability to render a calendar widget on the page
that can be manipulated to select a single date, move back and forth between
months and years.
&lt;p&gt;To construct the placeholder for the calendar widget, the code is as
follows:
&lt;xmp&gt;
&lt;div id=&quot;calContainer&quot;&gt;&lt;/div&gt;
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&lt;/strong&gt;
The Calendar can be constructed by simply providing a container ID string, 
or a reference to a container DIV HTMLElement (the element needs to exist 
in the document).
E.g.:
&lt;xmp&gt;
var c = new YAHOO.widget.Calendar(&quot;calContainer&quot;, configOptions);
&lt;/xmp&gt;
or:
&lt;xmp&gt;
var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);
var c = new YAHOO.widget.Calendar(containerDiv, configOptions);
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.
For example if an ID is not provided, and the container's ID is &quot;calContainer&quot;, the Calendar's ID will be set to &quot;calContainer_t&quot;.
&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Calendar is the base class for the Calendar widget. In its most basic
implementation, it has the ability to render a calendar widget on the page
that can be manipulated to select a single date, move back and forth between
months and years.
&lt;p&gt;To construct the placeholder for the calendar widget, the code is as
follows:
&lt;xmp&gt;
&lt;div id=&quot;calContainer&quot;&gt;&lt;/div&gt;
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&lt;/strong&gt;
The Calendar can be constructed by simply providing a container ID string, 
or a reference to a container DIV HTMLElement (the element needs to exist 
in the document).
E.g.:
&lt;xmp&gt;
var c = new YAHOO.widget.Calendar(&quot;calContainer&quot;, configOptions);
&lt;/xmp&gt;
or:
&lt;xmp&gt;
var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);
var c = new YAHOO.widget.Calendar(containerDiv, configOptions);
&lt;/xmp&gt;
&lt;/p&gt;
&lt;p&gt;
If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.
For example if an ID is not provided, and the container's ID is &quot;calContainer&quot;, the Calendar's ID will be set to &quot;calContainer_t&quot;.
&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.Calendar" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.</description>
			</parameter>
			<parameter name="container" type="String | HTMLElement" usage="required">
				<description> The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> optional The configuration object containing the initial configuration values for the Calendar.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="Style.CSS_HEADER_TEXT" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_RIGHT" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_BOTTOM" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.WEEKDAY" type="String" scope="static">
			<description>Type constant used for renderers to represent a weekday</description>
		</property>
		<property name="YAHOO.widget.Calendar.LONG" type="String" scope="static">
			<description>Constant used to represent long date field string formats (e.g. Monday or February)</description>
		</property>
		<property name="cfg" type="YAHOO.util.Config" scope="instance">
			<description>The Config object used to hold the configuration variables for the Calendar</description>
		</property>
		<property name="Style.CSS_HEADER" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_HIGHLIGHT4" type="undefined" scope="instance"/>
		<property name="Style.CSS_CONTAINER" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.MONTH_DAY" type="String" scope="static">
			<description>Type constant used for renderers to represent an individual date across any year (M/D)</description>
		</property>
		<property name="YAHOO.widget.Calendar.IMG_ROOT" type="String" scope="static">
			<description>The path to be used for images loaded for the Calendar</description>
		</property>
		<property name="Style.CSS_NAV_RIGHT" type="undefined" scope="instance"/>
		<property name="Config" type="Object" scope="instance" visibility="private">
			<description>The configuration object used to set up the calendars various locale and style options.</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The id that uniquely identifies this Calendar.</description>
		</property>
		<property name="_selectedDates" type="Array" scope="instance" visibility="private">
			<description>The private list of initially selected dates.</description>
		</property>
		<property name="index" type="Number" scope="instance">
			<description>The index of this item in the parent group</description>
		</property>
		<property name="YAHOO.widget.Calendar.ONE_CHAR" type="String" scope="static">
			<description>Constant used to represent single character date field string formats (e.g. M, T, W)</description>
		</property>
		<property name="YAHOO.widget.Calendar.STOP_RENDER" type="String" scope="static">
			<description>Constant used for halting the execution of the remainder of the render stack</description>
		</property>
		<property name="oNavigator" type="CalendarNavigator" scope="instance">
			<description>A reference to the CalendarNavigator instance created for this Calendar. Will be null if the &quot;navigator&quot; configuration property has not been set</description>
		</property>
		<property name="YAHOO.widget.Calendar.MONTH" type="String" scope="static">
			<description>Type constant used for renderers to represent a month across any year</description>
		</property>
		<property name="Style.CSS_LINK_CLOSE" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL" type="undefined" scope="instance"/>
		<property name="renderStack" type="Array[]" scope="instance">
			<description>The list of render functions, along with required parameters, used to render cells.</description>
		</property>
		<property name="Style.CSS_CELL_LEFT" type="undefined" scope="instance"/>
		<property name="Style.CSS_BODY" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_HIGHLIGHT1" type="undefined" scope="instance"/>
		<property name="Style.CSS_SINGLE" type="undefined" scope="instance"/>
		<property name="_renderStack" type="Array" scope="instance" visibility="private">
			<description>A copy of the initial render functions created before rendering.</description>
		</property>
		<property name="Style.CSS_CELL_HIGHLIGHT3" type="undefined" scope="instance"/>
		<property name="Style.CSS_FIXED_SIZE" type="undefined" scope="instance"/>
		<property name="today" type="Date" scope="instance">
			<description>A Date object representing today's date.</description>
		</property>
		<property name="Style.CSS_CELL_HIGHLIGHT2" type="undefined" scope="instance"/>
		<property name="Style.CSS_WITH_TITLE" type="undefined" scope="instance"/>
		<property name="Style.CSS_WEEKDAY_CELL" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.STYLES" type="Object An object with name|value pairs for the class name identifier|value." scope="static">
			<description>The set of default style constants for the Calendar</description>
		</property>
		<property name="browser" type="String" scope="instance">
			<description>Returns a string representing the current browser.</description>
		</property>
		<property name="containerId" type="String" scope="instance">
			<description>The unique id associated with the Calendar's container</description>
		</property>
		<property name="parent" type="CalendarGroup" scope="instance">
			<description>The parent CalendarGroup, only to be set explicitly by the parent group</description>
		</property>
		<property name="Style.CSS_CELL_OOM" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_OOB" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar._EVENT_TYPES" type="Object" scope="static" visibility="private">
			<description>The set of Custom Event types supported by the Calendar</description>
		</property>
		<property name="Style.CSS_CLOSE" type="undefined" scope="instance"/>
		<property name="Style.CSS_CALENDAR" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_TODAY" type="undefined" scope="instance"/>
		<property name="Style.CSS_FOOTER" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar._DEFAULT_CONFIG" type="Object" scope="static" visibility="private">
			<description>The set of default Config property keys and values for the Calendar</description>
		</property>
		<property name="YAHOO.widget.Calendar.MEDIUM" type="String" scope="static">
			<description>Constant used to represent medium date field string formats (e.g. Mon)</description>
		</property>
		<property name="Style.CSS_CELL_SELECTABLE" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.RANGE" type="String" scope="static">
			<description>Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)</description>
		</property>
		<property name="Style.CSS_CELL_HOVER" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_SELECTOR" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.DEFAULT_CONFIG" type="Object" scope="static">
			<description>The set of default Config property keys and values for the Calendar. &lt;p&gt; NOTE: This property is made public in order to allow users to change the default values of configuration properties. Users should not modify the key string, unless they are overriding the Calendar implementation &lt;/p&gt; &lt;p&gt; The property is an object with key/value pairs, the key being the uppercase configuration property name and the value being an object literal with a key string property, and a value property, specifying the default value of the property. To override a default value, you can set the value property, for example, &lt;code&gt;YAHOO.widget.Calendar.DEFAULT_CONFIG.MULTI_SELECT.value = true;&lt;/code&gt;</description>
		</property>
		<property name="Options" type="Object" scope="instance">
			<description>The local object which contains the Calendar's options</description>
		</property>
		<property name="Style.CSS_WEEKDAY_ROW" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_RESTRICTED" type="undefined" scope="instance"/>
		<property name="cellDates" type="Array[](Number[])" scope="instance">
			<description>The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].</description>
		</property>
		<property name="Style.CSS_ROW_HEADER" type="undefined" scope="instance"/>
		<property name="Style.CSS_ROW_FOOTER" type="undefined" scope="instance"/>
		<property name="Style.CSS_CELL_TOP" type="undefined" scope="instance"/>
		<property name="Locale" type="Object" scope="instance">
			<description>The local object which contains the Calendar's locale settings</description>
		</property>
		<property name="cells" type="HTMLTableCellElement[]" scope="instance">
			<description>The collection of calendar table cells</description>
		</property>
		<property name="Style.CSS_CELL_SELECTED" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.DATE" type="String" scope="static">
			<description>Type constant used for renderers to represent an individual date (M/D/Y)</description>
		</property>
		<property name="domEventMap" type="Object" scope="instance">
			<description>A map of DOM event handlers to attach to cells associated with specific CSS class names</description>
		</property>
		<property name="YAHOO.widget.Calendar.DISPLAY_DAYS" type="Number" scope="static">
			<description>Constant that represents the total number of date cells that are displayed in a given month</description>
		</property>
		<property name="oDomContainer" type="HTMLElement" scope="instance">
			<description>The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.</description>
		</property>
		<property name="YAHOO.widget.Calendar._STYLES" type="Object" scope="static" visibility="private">
			<description>The set of default style constants for the Calendar</description>
		</property>
		<property name="Style.CSS_NAV_LEFT" type="undefined" scope="instance"/>
		<property name="Style.CSS_NAV" type="undefined" scope="instance"/>
		<property name="YAHOO.widget.Calendar.SHORT" type="String" scope="static">
			<description>Constant used to represent short date field string formats (e.g. Tu or Feb)</description>
		</property>
		</properties>
		<methods>
		<method name="show" scope="instance">
			<description>Shows the Calendar's outer container.</description>
		</method>
		<method name="nextYear" scope="instance">
			<description>Navigates to the next year in the currently selected month in the calendar widget.</description>
		</method>
		<method name="configLocale" scope="instance">
			<description>The default handler for all configuration locale properties</description>
		</method>
		<method name="subtractYears" scope="instance">
			<description>Subtcats the designated number of years from the current calendar, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of years to subtract from the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="buildWeekdays" scope="instance">
			<description>Renders the Calendar's weekday headers.</description>
			<parameters>
			<parameter name="html" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The current working HTML array</return-description>
		</method>
		<method name="_parseArgs" scope="instance">
			<description>Protected helper used to parse Calendar constructor/init arguments. As of 2.4.0, Calendar supports a simpler constructor signature. This method reconciles arguments received in the pre 2.4.0 and 2.4.0 formats.</description>
			<parameters>
			<parameter name="Function" type="Array" usage="required">
				<description> &quot;arguments&quot; array</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object with id, container, config properties containing
the reconciled argument values.</return-description>
		</method>
		<method name="previousMonth" scope="instance">
			<description>Navigates to the previous month page in the calendar widget.</description>
		</method>
		<method name="getSelectedDates" scope="instance">
			<description>Gets the list of currently selected dates from the calendar.</description>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>An array of currently selected JavaScript Date objects.</return-description>
		</method>
		<method name="renderOutOfBoundsDate" scope="instance">
			<description>Renders a cell that falls before the minimum date or after the maximum date. widget class.</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
should not be terminated</return-description>
		</method>
		<method name="previousYear" scope="instance">
			<description>Navigates to the previous year in the currently selected month in the calendar widget.</description>
		</method>
		<method name="addMonths" scope="instance">
			<description>Adds the designated number of months to the current calendar month, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of months to add to the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderBody" scope="instance">
			<description>Renders the calendar body.</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date being used for the render process</description>
			</parameter>
			<parameter name="html" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The current working HTML array</return-description>
		</method>
		<method name="addMonthRenderer" scope="instance">
			<description>Adds a month to the render stack. The function reference passed to this method will be executed when a date cell matches the month passed to this method.</description>
			<parameters>
			<parameter name="month" type="Number" usage="required">
				<description> The month (1-12) to associate with this renderer</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>Initializes the Calendar widget.</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.</description>
			</parameter>
			<parameter name="container" type="String | HTMLElement" usage="required">
				<description> The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> optional The configuration object containing the initial configuration values for the Calendar.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addRenderer" scope="instance">
			<description>Adds a renderer to the render stack. The function reference passed to this method will be executed when a date cell matches the conditions specified in the date string for this renderer.</description>
			<parameters>
			<parameter name="sDates" type="String" usage="required">
				<description> A date string to associate with the specified renderer. Valid formats include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="applyListeners" scope="instance">
			<description>Applies the Calendar's DOM listeners to applicable elements.</description>
		</method>
		<method name="clearAllBodyCellStyles" scope="instance">
			<description>Removes all styles from all body cells in the current calendar table.</description>
			<parameters>
			<parameter name="style" type="style" usage="required">
				<description> The CSS class name to remove from all calendar body cells</description>
			</parameter>
			</parameters>
		</method>
		<method name="_parsePageDate" scope="instance" visibility="private">
			<description>Parses a pagedate configuration property value. The value can either be specified as a string of form &quot;mm/yyyy&quot; or a Date object and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object</description>
			<parameters>
			<parameter name="date" type="Date|String" usage="required">
				<description> Pagedate value which needs to be parsed</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The Date object representing the pagedate</return-description>
		</method>
		<method name="getIndexFromId" scope="instance">
			<description>Given the id used to mark each Calendar cell, this method extracts the index number from the id.</description>
			<parameters>
			<parameter name="strId" type="String" usage="required">
				<description> The cell id</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The index of the cell, or -1 if id does not contain an index number</return-description>
		</method>
		<method name="createTitleBar" scope="instance">
			<description>Creates the title bar element and adds it to Calendar container DIV</description>
			<parameters>
			<parameter name="strTitle" type="String" usage="required">
				<description> The title to display in the title bar</description>
			</parameter>
			</parameters>
			<return-description>The title bar element</return-description>
		</method>
		<method name="onBeforeSelect" scope="instance">
			<description>Event executed before a date is selected in the calendar widget.</description>
		</method>
		<method name="removeCloseButton" scope="instance">
			<description>Removes the close button HTML element from the DOM</description>
		</method>
		<method name="renderCellStyleHighlight2" scope="instance">
			<description>Renders a single standard calendar cell using the CSS hightlight2 style</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderCellStyleHighlight3" scope="instance">
			<description>Renders a single standard calendar cell using the CSS hightlight3 style</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderCellStyleHighlight1" scope="instance">
			<description>Renders a single standard calendar cell using the CSS hightlight1 style</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderCellStyleHighlight4" scope="instance">
			<description>Renders a single standard calendar cell using the CSS hightlight4 style</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderHeader" scope="instance">
			<description>Renders the calendar header.</description>
			<parameters>
			<parameter name="html" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The current working HTML array</return-description>
		</method>
		<method name="addYears" scope="instance">
			<description>Adds the designated number of years to the current calendar, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of years to add to the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="deselectCell" scope="instance">
			<description>Deselects a date on the current calendar by referencing the index of the cell that should be deselected. This method is used to easily deselect a single cell (usually with a mouse click) without having to do a full render. The selected style is removed from the cell directly. If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and deselect events will not be fired.</description>
			<parameters>
			<parameter name="cellIndex" type="Number" usage="required">
				<description> The index of the cell to deselect in the current calendar.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="removeRenderers" scope="instance">
			<description>Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and addWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers to re-render the Calendar without custom renderers applied.</description>
		</method>
		<method name="configOptions" scope="instance">
			<description>The default handler for all configuration options properties</description>
		</method>
		<method name="deselect" scope="instance">
			<description>Deselects a date or a collection of dates on the current calendar. This method, by default, does not call the render method explicitly. Once deselection has completed, render must be called for the changes to be reflected visually. The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) and the array of deselected dates passed to the deselectEvent will not contain any OOB dates. If all dates are OOB, beforeDeselect and deselect events will not be fired.</description>
			<parameters>
			<parameter name="date" type="String|Date|Date[]" usage="required">
				<description> The date string of dates to deselect in the current calendar. Valid formats are individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006). Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005). This method can also take a JavaScript Date object or an array of Date objects.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="_indexOfSelectedFieldArray" scope="instance" visibility="private">
			<description>Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.</description>
			<parameters>
			<parameter name="find" type="Number[]" usage="required">
				<description> The date field array to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The index of the date field array within the collection of selected dates.
-1 will be returned if the date is not found.</return-description>
		</method>
		<method name="_parseRange" scope="instance" visibility="private">
			<description>Converts a date range to the full list of included dates</description>
			<parameters>
			<parameter name="startDate" type="Number[]" usage="required">
				<description> Date field array representing the first date in the range</description>
			</parameter>
			<parameter name="endDate" type="Number[]" usage="required">
				<description> Date field array representing the last date in the range</description>
			</parameter>
			</parameters>
			<return-description>An array of date field arrays</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string representation of the Calendar object.</return-description>
		</method>
		<method name="renderCellNotThisMonth" scope="instance">
			<description>Applies the default style used for rendering dates that are not a part of the current month (preceding or trailing the cells for the current month)</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
should not be terminated</return-description>
		</method>
		<method name="configLocaleValues" scope="instance">
			<description>The default handler for all configuration locale field length properties</description>
		</method>
		<method name="buildMonthLabel" scope="instance">
			<description>Builds the date label that will be displayed in the calendar header or footer, depending on configuration.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The formatted calendar month label</return-description>
		</method>
		<method name="_parseDates" scope="instance" visibility="private">
			<description>Converts a multi or single-date string to an array of date field arrays</description>
			<parameters>
			<parameter name="sDates" type="String" usage="required">
				<description> Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy</description>
			</parameter>
			</parameters>
			<return-description>An array of date field arrays</return-description>
		</method>
		<method name="getDateFieldsByCellId" scope="instance">
			<description>Retrieves the Date object for the specified Calendar cell</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> The id of the cell</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The array of Date fields for the specified Calendar cell</return-description>
		</method>
		<method name="configMaxDate" scope="instance">
			<description>The default handler for the &quot;maxdate&quot; property</description>
		</method>
		<method name="_addRenderer" scope="instance" visibility="private">
			<description>The private method used for adding cell renderers to the local render stack. This method is called by other methods that set the renderer type prior to the method call.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The type string that indicates the type of date renderer being added. Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY, YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH</description>
			</parameter>
			<parameter name="aDates" type="Array" usage="required">
				<description> An array of dates used to construct the renderer. The format varies based on the renderer type</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setMonth" scope="instance">
			<description>Sets the calendar's month explicitly</description>
			<parameters>
			<parameter name="month" type="Number" usage="required">
				<description> The numeric month, from 0 (January) to 11 (December)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_fieldArraysAreEqual" scope="instance" visibility="private">
			<description>Determines if 2 field arrays are equal.</description>
			<parameters>
			<parameter name="array1" type="Number[]" usage="required">
				<description> The first date field array to compare</description>
			</parameter>
			<parameter name="array2" type="Number[]" usage="required">
				<description> The first date field array to compare</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>The boolean that represents the equality of the two arrays</return-description>
		</method>
		<method name="styleCellDefault" scope="instance">
			<description>Styles a selectable cell.</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="_parseDate" scope="instance" visibility="private">
			<description>Converts a date string to a date field array</description>
			<parameters>
			<parameter name="sDate" type="String" usage="required">
				<description>  Date string. Valid formats are mm/dd and mm/dd/yyyy.</description>
			</parameter>
			</parameters>
			<return-description>A date field array representing the string passed to the method</return-description>
		</method>
		<method name="doCellMouseOver" scope="instance">
			<description>The event that is executed when the user hovers over a cell</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The event</description>
			</parameter>
			<parameter name="cal" type="Calendar" usage="required">
				<description> A reference to the calendar passed by the Event utility</description>
			</parameter>
			</parameters>
		</method>
		<method name="doCellMouseOut" scope="instance">
			<description>The event that is executed when the user moves the mouse out of a cell</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The event</description>
			</parameter>
			<parameter name="cal" type="Calendar" usage="required">
				<description> A reference to the calendar passed by the Event utility</description>
			</parameter>
			</parameters>
		</method>
		<method name="onClear" scope="instance">
			<description>Event executed when the calendar widget is completely cleared to the current month with no selections.</description>
		</method>
		<method name="onDeselect" scope="instance">
			<description>Event executed when a date is deselected in the calendar widget.</description>
			<parameters>
			<parameter name="selected" type="Array" usage="required">
				<description> An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]</description>
			</parameter>
			</parameters>
		</method>
		<method name="configNavigator" scope="instance">
			<description>The default handler for the &quot;navigator&quot; property</description>
		</method>
		<method name="configClose" scope="instance">
			<description>Default handler for the &quot;close&quot; property</description>
		</method>
		<method name="render" scope="instance">
			<description>Renders the calendar after it has been configured. The render() method has a specific call chain that will execute when the method is called: renderHeader, renderBody, renderFooter. Refer to the documentation for those methods for information on individual render tasks.</description>
		</method>
		<method name="_buildMonthLabel" scope="instance" visibility="private">
			<description>Helper method, to format a Month Year string, given a JavaScript Date, based on the Calendar localization settings</description>
			<parameters>
			<parameter name="date" type="Date" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Formated month, year string</return-description>
		</method>
		<method name="initStyles" scope="instance">
			<description>Defines the style constants for the Calendar</description>
		</method>
		<method name="resetRenderers" scope="instance">
			<description>Resets the render stack of the current calendar to its original pre-render value.</description>
		</method>
		<method name="select" scope="instance">
			<description>Selects a date or a collection of dates on the current calendar. This method, by default, does not call the render method explicitly. Once selection has completed, render must be called for the changes to be reflected visually. Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of selected dates passed to the selectEvent will not contain OOB dates. If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.</description>
			<parameters>
			<parameter name="date" type="String|Date|Date[]" usage="required">
				<description> The date string of dates to select in the current calendar. Valid formats are individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006). Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005). This method can also take a JavaScript Date object or an array of Date objects.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="refreshLocale" scope="instance" visibility="private">
			<description>Refreshes the locale values used to build the Calendar.</description>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes Calendar's built-in CustomEvents</description>
		</method>
		<method name="nextMonth" scope="instance">
			<description>Navigates to the next month page in the calendar widget.</description>
		</method>
		<method name="onReset" scope="instance">
			<description>Event executed when the calendar widget is reset to its original state.</description>
		</method>
		<method name="addWeekdayRenderer" scope="instance">
			<description>Adds a weekday to the render stack. The function reference passed to this method will be executed when a date cell matches the weekday passed to this method.</description>
			<parameters>
			<parameter name="weekday" type="Number" usage="required">
				<description> The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer</description>
			</parameter>
			<parameter name="fnRender" type="Function" usage="required">
				<description> The function executed to render cells that match the render rules for this renderer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isDateOOM" scope="instance">
			<description>Determines whether a given date is OOM (out of month).</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date object for which to check the OOM status</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date is OOM</return-description>
		</method>
		<method name="getCellIndex" scope="instance">
			<description>Find the Calendar's cell index for a given date. If the date is not found, the method returns -1. &lt;p&gt; The returned index can be used to lookup the cell HTMLElement  using the Calendar's cells array or passed to selectCell to select cells by index. &lt;/p&gt; See cells, selectCell.</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> JavaScript Date object, for which to find a cell index.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The index of the date in Calendars cellDates/cells arrays, or -1 if the date 
is not on the curently rendered Calendar page.</return-description>
		</method>
		<method name="isDateOOB" scope="instance">
			<description>Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The JavaScript Date object for which to check the OOB status</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true if the date is OOB</return-description>
		</method>
		<method name="doSelectCell" scope="instance">
			<description>The default event handler for date cell selection. Currently attached to the Calendar's bounding box, referenced by it's oDomContainer property.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM event</description>
			</parameter>
			<parameter name="cal" type="Calendar" usage="required">
				<description> A reference to the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="configStrings" scope="instance">
			<description>The default handler for the &quot;strings&quot; property</description>
		</method>
		<method name="onRender" scope="instance">
			<description>Event executed when the calendar widget is rendered.</description>
		</method>
		<method name="renderRowHeader" scope="instance">
			<description>Renders the row header for a week.</description>
			<parameters>
			<parameter name="weekNum" type="Number" usage="required">
				<description> The week number of the current row</description>
			</parameter>
			<parameter name="cell" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderFooter" scope="instance">
			<description>Renders the calendar footer. In the default implementation, there is no footer.</description>
			<parameters>
			<parameter name="html" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The current working HTML array</return-description>
		</method>
		<method name="configSelected" scope="instance">
			<description>The default handler for the &quot;selected&quot; property</description>
		</method>
		<method name="renderRowFooter" scope="instance">
			<description>Renders the row footer for a week.</description>
			<parameters>
			<parameter name="weekNum" type="Number" usage="required">
				<description> The week number of the current row</description>
			</parameter>
			<parameter name="cell" type="Array" usage="required">
				<description> The current working HTML array</description>
			</parameter>
			</parameters>
		</method>
		<method name="reset" scope="instance">
			<description>Resets the calendar widget to the originally selected month and year, and sets the calendar to the initial selection(s).</description>
		</method>
		<method name="deselectAll" scope="instance">
			<description>Deselects all dates on the current calendar.</description>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.
Assuming that this function executes properly, the return value should be an empty array.
However, the empty array is returned for the sake of being able to check the selection status
of the calendar.</return-description>
		</method>
		<method name="renderBodyCellRestricted" scope="instance">
			<description>Renders the current calendar cell as a non-selectable &quot;black-out&quot; date using the default restricted style.</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
should not be terminated</return-description>
		</method>
		<method name="onBeforeDeselect" scope="instance">
			<description>Event executed before a date is deselected in the calendar widget.</description>
		</method>
		<method name="onChangePage" scope="instance">
			<description>Event executed when the user navigates to a different calendar page.</description>
		</method>
		<method name="_toFieldArray" scope="instance" visibility="private">
			<description>Converts a date (either a JavaScript Date object, or a date string) to the internal data structure used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].</description>
			<parameters>
			<parameter name="date" type="String|Date|Date[]" usage="required">
				<description> The date string of dates to deselect in the current calendar. Valid formats are individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006). Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005). This method can also take a JavaScript Date object or an array of Date objects.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array[](Number[])" />
			</return-types>
			<return-description>Array of date field arrays</return-description>
		</method>
		<method name="renderCellStyleSelected" scope="instance">
			<description>Applies the default style used for rendering selected dates to the current calendar cell</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
should not be terminated</return-description>
		</method>
		<method name="configToday" scope="instance">
			<description>The default handler for the &quot;today&quot; property</description>
		</method>
		<method name="clearElement" scope="instance">
			<description>Clears the inner HTML, CSS class and style information from the specified cell.</description>
			<parameters>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description> The cell to clear</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderCellDefault" scope="instance">
			<description>Renders a single standard calendar cell in the calendar widget table. All logic for determining how a standard default cell will be rendered is encapsulated in this method, and must be accounted for when extending the widget class.</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="subtractMonths" scope="instance">
			<description>Subtracts the designated number of months from the current calendar month, and sets the current calendar page date to the new month.</description>
			<parameters>
			<parameter name="count" type="Number" usage="required">
				<description> The number of months to subtract from the current calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="buildDayLabel" scope="instance">
			<description>Builds the date digit that will be displayed in calendar cells</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working date</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The formatted day label</return-description>
		</method>
		<method name="toDate" scope="instance">
			<description>Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.</description>
			<parameters>
			<parameter name="dateFieldArray" type="Number[]" usage="required">
				<description> The date field array to convert to a JavaScript Date.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>JavaScript Date object representing the date field array.</return-description>
		</method>
		<method name="configPageDate" scope="instance">
			<description>The default handler for the &quot;pagedate&quot; property</description>
		</method>
		<method name="createCloseButton" scope="instance">
			<description>Creates the close button HTML element and adds it to Calendar container DIV</description>
			<return-description>The close HTML element created</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the Calendar instance. The method will remove references to HTML elements, remove any event listeners added by the Calendar, and destroy the Config and CalendarNavigator instances it has created.</description>
		</method>
		<method name="configTitle" scope="instance">
			<description>Default handler for the &quot;title&quot; property</description>
		</method>
		<method name="selectCell" scope="instance">
			<description>Selects a date on the current calendar by referencing the index of the cell that should be selected. This method is used to easily select a single cell (usually with a mouse click) without having to do a full render. The selected style is applied to the cell directly. If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.</description>
			<parameters>
			<parameter name="cellIndex" type="Number" usage="required">
				<description> The index of the cell to select in the current calendar.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date[]" />
			</return-types>
			<return-description>Array of JavaScript Date objects representing all individual dates that are currently selected.</return-description>
		</method>
		<method name="doPreviousMonthNav" scope="instance">
			<description>The default event handler for clicks on the &quot;Previous Month&quot; navigation UI</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM event</description>
			</parameter>
			<parameter name="cal" type="Calendar" usage="required">
				<description> A reference to the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeTitleBar" scope="instance">
			<description>Removes the title bar element from the DOM</description>
		</method>
		<method name="configMinDate" scope="instance">
			<description>The default handler for the &quot;mindate&quot; property</description>
		</method>
		<method name="hide" scope="instance">
			<description>Hides the Calendar's outer container from view.</description>
		</method>
		<method name="validate" scope="instance">
			<description>Validates the calendar widget. This method has no default implementation and must be extended by subclassing the widget.</description>
			<return-description>Should return true if the widget validates, and false if
it doesn't.</return-description>
		</method>
		<method name="getDateByCellId" scope="instance">
			<description>Retrieves the Date object for the specified Calendar cell</description>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> The id of the cell</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>The Date object for the specified Calendar cell</return-description>
		</method>
		<method name="clear" scope="instance">
			<description>Clears the selected dates in the current calendar widget and sets the calendar to the current month and year.</description>
		</method>
		<method name="configIframe" scope="instance">
			<description>Default Config listener for the iframe property. If the iframe config property is set to true, renders the built-in IFRAME shim if the container is relatively or absolutely positioned.</description>
		</method>
		<method name="_toDate" scope="instance" visibility="private">
			<description>Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.</description>
			<parameters>
			<parameter name="dateFieldArray" type="Number[]" usage="required">
				<description> The date field array to convert to a JavaScript Date.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>JavaScript Date object representing the date field array</return-description>
		</method>
		<method name="onSelect" scope="instance">
			<description>Event executed when a date is selected in the calendar widget.</description>
			<parameters>
			<parameter name="selected" type="Array" usage="required">
				<description> An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]</description>
			</parameter>
			</parameters>
		</method>
		<method name="setYear" scope="instance">
			<description>Sets the calendar's year explicitly.</description>
			<parameters>
			<parameter name="year" type="Number" usage="required">
				<description> The numeric 4-digit year</description>
			</parameter>
			</parameters>
		</method>
		<method name="renderCellStyleToday" scope="instance">
			<description>Applies the default style used for rendering today's date to the current calendar cell</description>
			<parameters>
			<parameter name="workingDate" type="Date" usage="required">
				<description> The current working Date object being used to generate the calendar</description>
			</parameter>
			<parameter name="cell" type="HTMLTableCellElement" usage="required">
				<description>  The current working cell in the calendar</description>
			</parameter>
			</parameters>
		</method>
		<method name="doNextMonthNav" scope="instance">
			<description>The default event handler for clicks on the &quot;Next Month&quot; navigation UI</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM event</description>
			</parameter>
			<parameter name="cal" type="Calendar" usage="required">
				<description> A reference to the calendar</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.StackedBarSeries">
		<description>StackedBarSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>StackedBarSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.StackedBarSeries" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.Axis">
		<description>Defines a CartesianChart's vertical or horizontal axis.</description>
		<constructors>
		<constructor scope="instance">
			<description>Defines a CartesianChart's vertical or horizontal axis.</description>
			<return-types>
				<return-type type="YAHOO.widget.Axis" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="title" type="String" scope="instance">
			<description>The text that will appear next to the axis to indicate information about the data that it displays.</description>
		</property>
		<property name="labelFunction" type="String" scope="instance">
			<description>A string reference to the globally-accessible function that may be called to determine each of the label values for this axis. Also accepts function references.</description>
		</property>
		<property name="type" type="String" scope="instance">
			<description>The type of axis.</description>
		</property>
		<property name="reverse" type="Boolean" scope="instance">
			<description>If true, the items on the axis will be drawn in opposite direction.</description>
		</property>
		<property name="labelSpacing" type="Number" scope="instance">
			<description>The space, in pixels, between labels on an axis.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.Cookie">
		<description>Cookie utility.</description>
		<methods>
		<method name="setSub" scope="static">
			<description>Sets a sub cookie with a given name to a particular value.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to set.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value to set.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), and secure (true/false).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="_parseCookieHash" scope="static" visibility="private">
			<description>Parses a cookie hash string into an object.</description>
			<parameters>
			<parameter name="text" type="String" usage="required">
				<description> The cookie hash string to parse. The string should already be URL-decoded.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing entries for each cookie value.</return-description>
		</method>
		<method name="set" scope="static">
			<description>Sets a cookie with a given name and value.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value to set for the cookie.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), raw (true/false), and secure (true/false).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="setSubs" scope="static">
			<description>Sets a cookie with a given name to contain a hash of name-value pairs.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to set.</description>
			</parameter>
			<parameter name="value" type="Object" usage="required">
				<description> An object containing name-value pairs.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), and secure (true/false).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="exists" scope="static">
			<description>Determines if the cookie with the given name exists. This is useful for Boolean cookies (those that do not follow the name=value convention).</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the cookie exists, false if not.</return-description>
		</method>
		<method name="get" scope="static">
			<description>Returns the cookie value for the given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			<parameter name="options" type="Object|Function" usage="optional">
				<description> (Optional) An object containing one or more cookie options: raw (true/false) and converter (a function). The converter function is run on the value before returning it. The function is not used if the cookie doesn't exist. The function can be passed instead of the options object for backwards compatibility.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Variant" />
			</return-types>
			<return-description>If no converter is specified, returns a string or null if
the cookie doesn't exist. If the converter is specified, returns the value
returned from the converter or null if the cookie doesn't exist.</return-description>
		</method>
		<method name="_parseCookieString" scope="static" visibility="private">
			<description>Parses a cookie string into an object representing all accessible cookies.</description>
			<parameters>
			<parameter name="text" type="String" usage="required">
				<description> The cookie string to parse.</description>
			</parameter>
			<parameter name="decode" type="Boolean" usage="optional">
				<description> (Optional) Indicates if the cookie values should be decoded or not. Default is true.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object containing entries for each accessible cookie.</return-description>
		</method>
		<method name="remove" scope="static">
			<description>Removes a cookie from the machine by setting its expiration date to sometime in the past.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to remove.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), and secure (true/false). The expires option will be overwritten by the method.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="removeSub" scope="static">
			<description>Removes a subcookie with a given name. Removing the last subcookie won't remove the entire cookie unless options.removeIfEmpty is true.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie in which the subcookie exists.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to remove.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) An object containing one or more cookie options: path (a string), domain (a string), expires (a Date object), removeIfEmpty (true/false), and secure (true/false). This must be the same settings as the original subcookie.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The created cookie string.</return-description>
		</method>
		<method name="_createCookieHashString" scope="static" visibility="private">
			<description>Formats a cookie value for an object containing multiple values.</description>
			<parameters>
			<parameter name="hash" type="Object" usage="required">
				<description> An object of key-value pairs to create a string for.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string suitable for use as a cookie value.</return-description>
		</method>
		<method name="getSubs" scope="static">
			<description>Returns an object containing name-value pairs stored in the cookie with the given name.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>An object of name-value pairs if the cookie with the given name
exists, null if it does not.</return-description>
		</method>
		<method name="getSub" scope="static">
			<description>Returns the value of a subcookie.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie to retrieve.</description>
			</parameter>
			<parameter name="subName" type="String" usage="required">
				<description> The name of the subcookie to retrieve.</description>
			</parameter>
			<parameter name="converter" type="Function" usage="optional">
				<description> (Optional) A function to run on the value before returning it. The function is not used if the cookie doesn't exist.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Variant" />
			</return-types>
			<return-description>If the cookie doesn't exist, null is returned. If the subcookie
doesn't exist, null if also returned. If no converter is specified and the
subcookie exists, a string is returned. If a converter is specified and the
subcookie exists, the value returned from the converter is returned.</return-description>
		</method>
		<method name="_createCookieString" scope="static" visibility="private">
			<description>Creates a cookie string that can be assigned into document.cookie.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the cookie.</description>
			</parameter>
			<parameter name="value" type="String" usage="required">
				<description> The value of the cookie.</description>
			</parameter>
			<parameter name="encodeValue" type="Boolean" usage="required">
				<description> True to encode the value, false to leave as-is.</description>
			</parameter>
			<parameter name="options" type="Object" usage="optional">
				<description> (Optional) Options for the cookie.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The formatted cookie string.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Calendar_Core" superclass="YAHOO.widget.Calendar">
	</class>
	<class type="YAHOO.widget.HTMLNode" superclass="YAHOO.widget.Node">
		<description>This implementation takes either a string or object for the
oData argument.  If is it a string, it will use it for the display
of this node (and it can contain any html code).  If the parameter
is an object,it looks for a parameter called &quot;html&quot; that will be
used for this node's display.</description>
		<constructors>
		<constructor scope="instance">
			<description>This implementation takes either a string or object for the
oData argument.  If is it a string, it will use it for the display
of this node (and it can contain any html code).  If the parameter
is an object,it looks for a parameter called &quot;html&quot; that will be
used for this node's display.</description>
			<return-types>
				<return-type type="YAHOO.widget.HTMLNode" />
			</return-types>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description>  a string or object containing the data that will
be used to render this node.  
Providing a string is the same as providing an object with a single property named html.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All other attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
			</parameter>
			<parameter name="oParent" type="YAHOO.widget.Node" usage="required">
				<description>  this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description>  the initial expanded/collapsed state (deprecated; use oData.expanded)</description>
			</parameter>
			<parameter name="hasIcon" type="boolean" usage="required">
				<description>  specifies whether or not leaf nodes should
be rendered with or without a horizontal line line and/or toggle icon. If the icon
is not displayed, the content fills the space it would have occupied.
This option operates independently of the leaf node presentation logic
for dynamic nodes.
(deprecated; use oData.hasIcon)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="setHtml" type="undefined" scope="instance">
			<description>Synchronizes the node.html, and the node's content</description>
		</property>
		<property name="_type" type="string" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		<property name="html" type="string" scope="instance">
			<description>The HTML content to use for this node's display</description>
		</property>
		<property name="initContent" type="undefined" scope="instance">
			<description>Sets up the node label</description>
		</property>
		<property name="contentStyle" type="string" scope="instance">
			<description>The CSS class for the html content container. Defaults to ygtvhtml, but can be overridden to provide a custom presentation for a specific node.</description>
		</property>
		</properties>
		<methods>
		<method name="getNodeDefinition" scope="instance">
			<description>Returns an object which could be used to build a tree out of this node and its children. It can be passed to the tree constructor to reproduce this node as a tree. It will return false if any node loads dynamically, regardless of whether it is loaded or not.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the tree or false if any node is defined as dynamic</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ArrayAssert">
		<description>The ArrayAssert object provides functions to test JavaScript array objects
for a variety of cases.</description>
		<methods>
		<method name="containsMatch" scope="static">
			<description>Asserts that a value matching some condition is present in an array. This uses a function to determine a match.</description>
			<parameters>
			<parameter name="matcher" type="Function" usage="required">
				<description> A function that returns true if the items matches or false if not.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContain" scope="static">
			<description>Asserts that a value is not present in an array. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value that is expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="indexOf" scope="static">
			<description>Asserts that the given value is contained in an array at the specified index. This uses the triple equals sign so no type cohersion will occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value to look for.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> The array to search in.</description>
			</parameter>
			<parameter name="index" type="int" usage="required">
				<description> The index at which the value should exist.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="itemsAreSame" scope="static">
			<description>Asserts that the values in an array are the same, and in the same position, as values in another array. This uses the triple equals sign so no type cohersion will occur. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="contains" scope="static">
			<description>Asserts that a value is present in an array. This uses the triple equals sign so no type cohersion may occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value that is expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="containsItems" scope="static">
			<description>Asserts that a set of values are present in an array. This uses the triple equals sign so no type cohersion may occur. For this assertion to pass, all values must be found.</description>
			<parameters>
			<parameter name="needles" type="Object[]" usage="required">
				<description> An array of values that are expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values to check.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContainItems" scope="static">
			<description>Asserts that a set of values are not present in an array. This uses the triple equals sign so no type cohersion may occur. For this assertion to pass, all values must not be found.</description>
			<parameters>
			<parameter name="needles" type="Object[]" usage="required">
				<description> An array of values that are not expected in the array.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values to check.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="itemsAreEquivalent" scope="static">
			<description>Asserts that the values in an array are equivalent, and in the same position, as values in another array. This uses a function to determine if the values are equivalent. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="comparator" type="Function" usage="required">
				<description> A function that returns true if the values are equivalent or false if not.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="itemsAreEqual" scope="static">
			<description>Asserts that the values in an array are equal, and in the same position, as values in another array. This uses the double equals sign so type cohersion may occur. Note that the array objects themselves need not be the same for this test to pass.</description>
			<parameters>
			<parameter name="expected" type="Array" usage="required">
				<description> An array of the expected values.</description>
			</parameter>
			<parameter name="actual" type="Array" usage="required">
				<description> Any array of the actual values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isEmpty" scope="static">
			<description>Asserts that an array is empty.</description>
			<parameters>
			<parameter name="actual" type="Array" usage="required">
				<description> The array to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="lastIndexOf" scope="static">
			<description>Asserts that the given value is contained in an array at the specified index, starting from the back of the array. This uses the triple equals sign so no type cohersion will occur.</description>
			<parameters>
			<parameter name="needle" type="Object" usage="required">
				<description> The value to look for.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> The array to search in.</description>
			</parameter>
			<parameter name="index" type="int" usage="required">
				<description> The index at which the value should exist.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isNotEmpty" scope="static">
			<description>Asserts that an array is not empty.</description>
			<parameters>
			<parameter name="actual" type="Array" usage="required">
				<description> The array to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doesNotContainMatch" scope="static">
			<description>Asserts that no values matching a condition are present in an array. This uses a function to determine a match.</description>
			<parameters>
			<parameter name="matcher" type="Function" usage="required">
				<description> A function that returns true if the items matches or false if not.</description>
			</parameter>
			<parameter name="haystack" type="Array" usage="required">
				<description> An array of values.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.StackedColumnChart">
		<description>StackedColumnChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>StackedColumnChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.StackedColumnChart" />
			</return-types>
			<parameters>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.util.DataSourceBase">
		<description>Base class for the YUI DataSource utility.</description>
		<constructors>
		<constructor scope="instance">
			<description>Base class for the YUI DataSource utility.</description>
			<return-types>
				<return-type type="YAHOO.util.DataSourceBase" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="TYPE_HTMLTABLE" type="Number" scope="instance">
			<description>Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements.</description>
		</property>
		<property name="maxCacheEntries" type="Number" scope="instance">
			<description>Max size of the local cache. Set to 0 to turn off caching. Caching is useful to reduce the number of server connections. Recommended only for data sources that return comprehensive results for queries or when stale data is not an issue.</description>
		</property>
		<property name="_oQueue" type="Object" scope="instance" visibility="private">
			<description>Local queue of request connections, enabled if queue needs to be managed.</description>
		</property>
		<property name="TYPE_SCRIPTNODE" type="Number" scope="instance">
			<description>Type is hosted on a server via a dynamic script node.</description>
		</property>
		<property name="TYPE_TEXT" type="Number" scope="instance">
			<description>Type is plain text.</description>
		</property>
		<property name="_sName" type="String" scope="instance" visibility="private">
			<description>Name of DataSource instance.</description>
		</property>
		<property name="DataSourceBase._nTransactionId" type="Number" scope="static" visibility="private">
			<description>Internal class variable to assign unique transaction IDs.</description>
		</property>
		<property name="responseType" type="Number" scope="instance">
			<description>Format of response: &lt;dl&gt;  &lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt; &lt;dt&gt;TYPE_JSARRAY&lt;/dt&gt; &lt;dt&gt;TYPE_JSON&lt;/dt&gt; &lt;dt&gt;TYPE_XML&lt;/dt&gt; &lt;dt&gt;TYPE_TEXT&lt;/dt&gt; &lt;dt&gt;TYPE_HTMLTABLE&lt;/dt&gt; &lt;/dl&gt;</description>
		</property>
		<property name="DataSourceBase._nIndex" type="Number" scope="static" visibility="private">
			<description>Internal class variable to index multiple DataSource instances.</description>
		</property>
		<property name="TYPE_XHR" type="Number" scope="instance">
			<description>Type is hosted on a server via an XHR connection.</description>
		</property>
		<property name="useXPath" type="Boolean" scope="instance">
			<description>When working with XML data, setting this property to true enables support for XPath-syntaxed locators in schema definitions.</description>
		</property>
		<property name="TYPE_JSON" type="Number" scope="instance">
			<description>Type is JSON.</description>
		</property>
		<property name="TYPE_UNKNOWN" type="Number" scope="instance">
			<description>Type is unknown.</description>
		</property>
		<property name="TYPE_JSFUNCTION" type="Number" scope="instance">
			<description>Type is a JavaScript Function.</description>
		</property>
		<property name="dataType" type="Number" scope="instance">
			<description>Where the live data is held: &lt;dl&gt;  &lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt; &lt;dt&gt;TYPE_LOCAL&lt;/dt&gt; &lt;dt&gt;TYPE_XHR&lt;/dt&gt; &lt;dt&gt;TYPE_SCRIPTNODE&lt;/dt&gt; &lt;dt&gt;TYPE_JSFUNCTION&lt;/dt&gt; &lt;/dl&gt;</description>
		</property>
		<property name="_aCache" type="Object[]" scope="instance" visibility="private">
			<description>Local cache of data result object literals indexed chronologically.</description>
		</property>
		<property name="liveData" type="Object" scope="instance">
			<description>Pointer to live database.</description>
		</property>
		<property name="TYPE_LOCAL" type="Number" scope="instance">
			<description>Type is local.</description>
		</property>
		<property name="ERROR_DATAINVALID" type="String" scope="instance">
			<description>Error message for invalid dataresponses.</description>
		</property>
		<property name="responseSchema" type="Object" scope="instance">
			<description>Response schema object literal takes a combination of the following properties: &lt;dl&gt; &lt;dt&gt;resultsList&lt;/dt&gt; &lt;dd&gt;Pointer to array of tabular data&lt;/dd&gt; &lt;dt&gt;resultNode&lt;/dt&gt; &lt;dd&gt;Pointer to node name of row data (XML data only)&lt;/dd&gt; &lt;dt&gt;recordDelim&lt;/dt&gt; &lt;dd&gt;Record delimiter (text data only)&lt;/dd&gt; &lt;dt&gt;fieldDelim&lt;/dt&gt; &lt;dd&gt;Field delimiter (text data only)&lt;/dd&gt; &lt;dt&gt;fields&lt;/dt&gt; &lt;dd&gt;Array of field names (aka keys), or array of object literals such as: {key:&quot;fieldname&quot;,parser:YAHOO.util.DataSourceBase.parseDate}&lt;/dd&gt; &lt;dt&gt;metaFields&lt;/dt&gt; &lt;dd&gt;Object literal of keys to include in the oParsedResponse.meta collection&lt;/dd&gt; &lt;dt&gt;metaNode&lt;/dt&gt; &lt;dd&gt;Name of the node under which to search for meta information in XML response data&lt;/dd&gt; &lt;/dl&gt;</description>
		</property>
		<property name="TYPE_JSARRAY" type="Number" scope="instance">
			<description>Type is a JavaScript Array.</description>
		</property>
		<property name="TYPE_XML" type="Number" scope="instance">
			<description>Type is XML.</description>
		</property>
		<property name="ERROR_DATANULL" type="String" scope="instance">
			<description>Error message for null data responses.</description>
		</property>
		<property name="parseJSONArgs" type="{MIXED|Array} If an Array, contents are used as individual arguments. Otherwise, value is used as an additional argument." scope="instance">
			<description>Additional arguments passed to the JSON parse routine. The JSON string is the assumed first argument (where applicable). This property is not set by default, but the parse methods will use it if present.</description>
		</property>
		<property name="DataSource.Parser" type="Object" scope="static">
			<description>Data parsing functions.</description>
		</property>
		<property name="_aIntervals" type="Array" scope="instance" visibility="private">
			<description>Array of polling interval IDs that have been enabled, needed to clear all intervals.</description>
		</property>
		</properties>
		<methods>
		<method name="flushCache" scope="instance">
			<description>Flushes cache.</description>
		</method>
		<method name="getCachedResponse" scope="instance">
			<description>Overridable method passes request to cache and returns cached response if any, refreshing the hit in the cache as the newest item. Returns null if there is no cache hit.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use callback object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Cached response object or null.</return-description>
		</method>
		<method name="parseArrayData" scope="instance">
			<description>Overridable method parses Array data into a response object.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full Array from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object with the following properties:&lt;br&gt;
- results (Array) Array of parsed data results&lt;br&gt;
- error (Boolean) True if there was an error</return-description>
		</method>
		<method name="sendRequest" scope="instance">
			<description>First looks for cached response, then sends request to live data. The following arguments are passed to the callback function: &lt;dl&gt; &lt;dt&gt;&lt;code&gt;oRequest&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The same value that was passed in as the first argument to sendRequest.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;oParsedResponse&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;An object literal containing the following properties: &lt;dl&gt; &lt;dt&gt;&lt;code&gt;tId&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Unique transaction ID number.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;results&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Schema-parsed data results.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;error&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;True in cases of data error.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;cached&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;True when response is returned from DataSource cache.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Schema-parsed meta data.&lt;/dd&gt; &lt;/dl&gt; &lt;dt&gt;&lt;code&gt;oPayload&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The same value as was passed in as &lt;code&gt;argument&lt;/code&gt; in the oCallback object literal.&lt;/dd&gt; &lt;/dl&gt;</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> An object literal with the following properties: &lt;dl&gt; &lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;The object to serve as the scope for the success and failure handlers.&lt;/dd&gt; &lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt;Arbitrary data that will be passed back to the success and failure handlers.&lt;/dd&gt; &lt;/dl&gt;</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID, or null if response found in cache.</return-description>
		</method>
		<method name="issueCallback" scope="static">
			<description>Executes a configured callback. For object literal callbacks, the third param determines whether to execute the success handler or failure handler.</description>
			<parameters>
			<parameter name="callback" type="Function|Object" usage="required">
				<description> the callback to execute</description>
			</parameter>
			<parameter name="params" type="Array" usage="required">
				<description> params to be passed to the callback method</description>
			</parameter>
			<parameter name="error" type="Boolean" usage="required">
				<description> whether an error occurred</description>
			</parameter>
			<parameter name="scope" type="Object" usage="required">
				<description> the scope from which to execute the callback (deprecated - use an object literal callback)</description>
			</parameter>
			</parameters>
		</method>
		<method name="parseData" scope="instance">
			<description>Overridable method parses data of generic RESPONSE_TYPE into a response object.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full Array from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object} Parsed response object with the following properties:&lt;br&gt; - results {Array} Array of parsed data results&lt;br&gt; - meta {Object} Object literal of meta values&lt;br&gt; - error {Boolean" />
			</return-types>
			<return-description>(optional) True if there was an error&lt;br&gt;</return-description>
		</method>
		<method name="parseTextData" scope="instance">
			<description>Overridable method parses plain text data into a response object.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full text response from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object with the following properties:&lt;br&gt;
- results (Array) Array of parsed data results&lt;br&gt;
- error (Boolean) True if there was an error</return-description>
		</method>
		<method name="parseHTMLTableData" scope="instance">
			<description>Overridable method parses an HTML TABLE element reference into a response object. Data is parsed out of TR elements from all TBODY elements.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full HTML element reference from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object with the following properties&lt;br&gt;
- results (Array) Array of parsed data results&lt;br&gt;
- error (Boolean) True if there was an error</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the DataSource instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the DataSource instance.</return-description>
		</method>
		<method name="parseJSONData" scope="instance">
			<description>Overridable method parses JSON data into a response object.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full JSON from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object with the following properties&lt;br&gt;
- results (Array) Array of parsed data results&lt;br&gt;
- error (Boolean) True if there was an error</return-description>
		</method>
		<method name="doBeforeCallback" scope="instance">
			<description>Overridable method gives implementers access to the original full response and the parsed response (parsed against the given schema) before the data is added to the cache (if applicable) and then sent back to callback function. This is your chance to access the raw response and/or populate the parsed response with any custom data.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full response from the live database.</description>
			</parameter>
			<parameter name="oParsedResponse" type="Object" usage="required">
				<description> The parsed response to return to calling object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> The callback object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object.</return-description>
		</method>
		<method name="addToCache" scope="instance">
			<description>Adds a new item to the cache. If cache is full, evicts the stalest item before adding the new item.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object to cache.</description>
			</parameter>
			</parameters>
		</method>
		<method name="DataSourceBase.parseNumber" scope="static">
			<description>Converts data to type Number.</description>
			<parameters>
			<parameter name="oData" type="String | Number | Boolean" usage="required">
				<description> Data to convert. Note, the following values return as null: null, undefined, NaN, &quot;&quot;.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>A number, or null.</return-description>
		</method>
		<method name="setInterval" scope="instance">
			<description>Sets up a polling mechanism to send requests at set intervals and forward responses to given callback.</description>
			<parameters>
			<parameter name="nMsec" type="Number" usage="required">
				<description> Length of interval in milliseconds.</description>
			</parameter>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Function" usage="required">
				<description> Handler function to receive the response.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Interval ID.</return-description>
		</method>
		<method name="parseXMLResult" scope="instance">
			<description>Overridable method parses XML data for one result into an object literal.</description>
			<parameters>
			<parameter name="result" type="XML" usage="required">
				<description> XML for one result.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal of data for one result.</return-description>
		</method>
		<method name="handleResponse" scope="instance">
			<description>Receives raw data response and type converts to XML, JSON, etc as necessary. Forwards oFullResponse to appropriate parsing function to get turned into oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to the cache when appropriate before calling issueCallback(). The oParsedResponse object literal has the following properties: &lt;dl&gt; &lt;dd&gt;&lt;dt&gt;tId {Number}&lt;/dt&gt; Unique transaction ID&lt;/dd&gt; &lt;dd&gt;&lt;dt&gt;results {Array}&lt;/dt&gt; Array of parsed data results&lt;/dd&gt; &lt;dd&gt;&lt;dt&gt;meta {Object}&lt;/dt&gt; Object literal of meta values&lt;/dd&gt; &lt;dd&gt;&lt;dt&gt;error {Boolean}&lt;/dt&gt; (optional) True if there was an error&lt;/dd&gt; &lt;dd&gt;&lt;dt&gt;cached {Boolean}&lt;/dt&gt; (optional) True if response was cached&lt;/dd&gt; &lt;/dl&gt;</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object</description>
			</parameter>
			<parameter name="oRawResponse" type="Object" usage="required">
				<description> The raw response from the live database.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object literal.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			<parameter name="tId" type="Number" usage="required">
				<description> Transaction ID.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearInterval" scope="instance">
			<description>Disables polling mechanism associated with the given interval ID.</description>
			<parameters>
			<parameter name="nId" type="Number" usage="required">
				<description> Interval ID.</description>
			</parameter>
			</parameters>
		</method>
		<method name="parseXMLData" scope="instance">
			<description>Overridable method parses XML data into a response object.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full XML response from the live database.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Parsed response object with the following properties&lt;br&gt;
- results (Array) Array of parsed data results&lt;br&gt;
- error (Boolean) True if there was an error</return-description>
		</method>
		<method name="DataSourceBase.parseDate" scope="static">
			<description>Converts data to type Date.</description>
			<parameters>
			<parameter name="oData" type="Date | String | Number" usage="required">
				<description> Data to convert.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>A Date instance.</return-description>
		</method>
		<method name="makeConnection" scope="instance">
			<description>Overridable default method generates a unique transaction ID and passes the live data reference directly to the handleResponse function. This method should be implemented by subclasses to achieve more complex behavior or to access remote data.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object literal.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID.</return-description>
		</method>
		<method name="doBeforeParseData" scope="instance">
			<description>Overridable method gives implementers access to the original full response before the data gets parsed. Implementers should take care not to return an unparsable or otherwise invalid response.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> The full response from the live database.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> The callback object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Full response for parsing.</return-description>
		</method>
		<method name="DataSourceBase.parseString" scope="static">
			<description>Converts data to type String.</description>
			<parameters>
			<parameter name="oData" type="String | Number | Boolean | Date | Array | Object" usage="required">
				<description> Data to parse. The special values null and undefined will return null.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string, or null.</return-description>
		</method>
		<method name="_getLocationValue" scope="static" visibility="private">
			<description>Get an XPath-specified value for a given field from an XML node or document.</description>
			<parameters>
			<parameter name="field" type="String | Object" usage="required">
				<description> Field definition.</description>
			</parameter>
			<parameter name="context" type="Object" usage="required">
				<description> XML node or document to search within.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Data value or null.</return-description>
		</method>
		<method name="isCacheHit" scope="instance">
			<description>Default overridable method matches given request to given cached request. Returns true if is a hit, returns false otherwise. Implementers should override this method to customize the cache-matching algorithm.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCachedRequest" type="Object" usage="required">
				<description> Cached request object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if given request matches cached request, false otherwise.</return-description>
		</method>
		<method name="clearAllIntervals" scope="instance">
			<description>Disables all known polling intervals.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.UnexpectedError" superclass="YAHOO.util.AssertionError">
		<description>UnexpectedError is subclass of AssertionError that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
		<constructors>
		<constructor scope="instance">
			<description>UnexpectedError is subclass of AssertionError that is thrown whenever
an error occurs within the course of a test and the test was not expected
to throw an error.</description>
			<return-types>
				<return-type type="YAHOO.util.UnexpectedError" />
			</return-types>
			<parameters>
			<parameter name="cause" type="Error" usage="required">
				<description> The unexpected error that caused this error to be 
thrown.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="cause" type="Error" scope="instance">
			<description>The unexpected error that occurred.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		<property name="stack" type="String" scope="instance">
			<description>Stack information for the error (if provided).</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.DataSource">
		<description>Factory class for creating a BaseDataSource subclass instance. The sublcass is
determined by oLiveData's type, unless the dataType config is explicitly passed in.</description>
		<constructors>
		<constructor scope="instance">
			<description>Factory class for creating a BaseDataSource subclass instance. The sublcass is
determined by oLiveData's type, unless the dataType config is explicitly passed in.</description>
			<return-types>
				<return-type type="YAHOO.util.DataSource" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.Series">
		<description>Functionality common to most series. Generally, a &lt;code&gt;Series&lt;/code&gt; 
object shouldn't be instantiated directly. Instead, a subclass with a 
concrete implementation should be used.</description>
		<constructors>
		<constructor scope="instance">
			<description>Functionality common to most series. Generally, a &lt;code&gt;Series&lt;/code&gt; 
object shouldn't be instantiated directly. Instead, a subclass with a 
concrete implementation should be used.</description>
			<return-types>
				<return-type type="YAHOO.widget.Series" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="displayName" type="String" scope="instance">
			<description>The human-readable name of the series.</description>
		</property>
		<property name="type" type="String" scope="instance">
			<description>The type of series.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.util.Dom.Color">
		<description>Add style management functionality to DOM.</description>
		<properties>
		<property name="KEYWORDS" type="Object" scope="instance">
			<description>Color keywords used when converting to Hex</description>
		</property>
		<property name="re_RGB" type="Regex" scope="instance" visibility="private">
			<description>Regex to parse rgb(0,0,0) formatted strings</description>
		</property>
		<property name="re_hex3" type="Regex" scope="instance" visibility="private">
			<description>Regex to parse #123 formatted strings</description>
		</property>
		<property name="re_hex" type="Regex" scope="instance" visibility="private">
			<description>Regex to parse #123456 formatted strings</description>
		</property>
		</properties>
		<methods>
		<method name="toRGB" scope="instance">
			<description>Converts a hex or color string to an rgb string: rgb(0,0,0)</description>
			<parameters>
			<parameter name="val" type="String" usage="required">
				<description> The string to convert to RGB notation.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toHex" scope="instance">
			<description>Converts an rgb or color string to a hex string: #123456</description>
			<parameters>
			<parameter name="val" type="String" usage="required">
				<description> The string to convert to hex notation.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DDTarget" superclass="YAHOO.util.DragDrop">
		<description>A DragDrop implementation that does not move, but can be a drop 
target.  You would get the same result by simply omitting implementation 
for the event callbacks, but this way we reduce the processing cost of the 
event listener and the callbacks.</description>
		<constructors>
		<constructor scope="instance">
			<description>A DragDrop implementation that does not move, but can be a drop 
target.  You would get the same result by simply omitting implementation 
for the event callbacks, but this way we reduce the processing cost of the 
event listener and the callbacks.</description>
			<return-types>
				<return-type type="YAHOO.util.DDTarget" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the element that is a drop target</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related DragDrop objects</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> an object containing configurable attributes
Valid properties for DDTarget in addition to those in 
DragDrop: 
none</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.ButtonGroup" superclass="YAHOO.util.Element">
		<description>The ButtonGroup class creates a set of buttons that are mutually 
exclusive; checking one button in the set will uncheck all others in the 
button group.</description>
		<constructors>
		<constructor scope="instance">
			<description>The ButtonGroup class creates a set of buttons that are mutually 
exclusive; checking one button in the set will uncheck all others in the 
button group.</description>
			<return-types>
				<return-type type="YAHOO.widget.ButtonGroup" />
			</return-types>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object 
specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group.</description>
			</parameter>
			<parameter name="p_oElement" type="Object" usage="required">
				<description> Object literal specifying a set of 
configuration attributes used to create the button group.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="optional">
				<description> Optional. Object literal specifying a set 
of configuration attributes used to create the button group.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied  to the button group's element.</description>
		</property>
		<property name="_buttons" type="Array" scope="instance">
			<description>Array of buttons in the button group.</description>
		</property>
		<property name="CLASS_NAME_PREFIX" type="String" scope="instance">
			<description>Prefix used for all class names applied to a ButtonGroup.</description>
		</property>
		<property name="NODE_NAME" type="String" scope="instance">
			<description>The name of the tag to be used for the button group's element.</description>
		</property>
		</properties>
		<methods>
		<method name="getButton" scope="instance">
			<description>Returns the button at the specified index.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> The index of the button to retrieve from the button group.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Button" />
			</return-types>
		</method>
		<method name="_setDisabled" scope="instance">
			<description>Sets the value of the button groups's &quot;disabled&quot; attribute.</description>
			<parameters>
			<parameter name="p_bDisabled" type="Boolean" usage="required">
				<description> Boolean indicating the value for the button group's &quot;disabled&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getButtons" scope="instance">
			<description>Returns an array of the buttons in the button group.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the button group's element from its parent element and removes all event handlers.</description>
		</method>
		<method name="addButtons" scope="instance">
			<description>Adds the array of buttons to the button group.</description>
			<parameters>
			<parameter name="p_aButtons" type="Array" usage="required">
				<description> Array of YAHOO.widget.Button instances to be added to the button group.</description>
			</parameter>
			<parameter name="p_aButtons" type="Array" usage="required">
				<description> Array of strings specifying the id attribute of the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62; &lt;/code&gt; elements to be used to create the buttons to be added to the button group.</description>
			</parameter>
			<parameter name="p_aButtons" type="Array" usage="required">
				<description> Array of object references for the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; elements to be used to create the buttons to be added to the button group.</description>
			</parameter>
			<parameter name="p_aButtons" type="Array" usage="required">
				<description> Array of object literals, each containing a set of YAHOO.widget.Button  configuration attributes used to configure each button to be added to the button group.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus to the button at the specified index.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> Number indicating the index of the button to focus.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addButton" scope="instance">
			<description>Adds the button to the button group.</description>
			<parameters>
			<parameter name="p_oButton" type="YAHOO.widget.Button" usage="required">
				<description> Object reference for the YAHOO.widget.Button instance to be added to the button group.</description>
			</parameter>
			<parameter name="p_oButton" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be used to create the button to be added to the button group.</description>
			</parameter>
			<parameter name="p_oButton" type="HTMLInputElement|HTMLElement" usage="required">
				<description> Object reference for the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be used to create the button to be added to the button group.</description>
			</parameter>
			<parameter name="p_oButton" type="Object" usage="required">
				<description> Object literal specifying a set of YAHOO.widget.Button configuration attributes used to configure the button to be added to the button group.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Button" />
			</return-types>
		</method>
		<method name="removeButton" scope="instance">
			<description>Removes the button at the specified index from the button group.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> Number specifying the index of the button to be removed from the button group.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The ButtonGroup class's initialization method.</description>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLDivElement" usage="required">
				<description> Object specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group.</description>
			</parameter>
			<parameter name="p_oElement" type="Object" usage="required">
				<description> Object literal specifying a set of  configuration attributes used to create the button group.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="optional">
				<description> Optional. Object literal specifying a set of configuration attributes used to create the button group.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to  create the button group.</description>
			<parameters>
			<parameter name="p_oAttributes" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the button group.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the button group.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="getCount" scope="instance">
			<description>Returns the number of buttons in the button group.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
		</method>
		<method name="_onAppendTo" scope="instance">
			<description>&quot;appendTo&quot; event handler for the button group.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the event that was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onButtonCheckedChange" scope="instance">
			<description>&quot;checkedChange&quot; event handler for each button in the button group.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the event that was fired.</description>
			</parameter>
			<parameter name="p_oButton" type="YAHOO.widget.Button" usage="required">
				<description> Object representing the button that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for the button group.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="check" scope="instance">
			<description>Checks the button at the specified index.</description>
			<parameters>
			<parameter name="p_nIndex" type="Number" usage="required">
				<description> Number indicating the index of the button to check.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createGroupElement" scope="instance">
			<description>Creates the button group's element.</description>
			<return-types>
			<return-type type="HTMLDivElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ImageLoader.pngBgImgObj" superclass="YAHOO.util.ImageLoader.imgObj">
		<description>PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element's style</description>
		<constructors>
		<constructor scope="instance">
			<description>PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element's style</description>
			<return-types>
				<return-type type="YAHOO.util.ImageLoader.pngBgImgObj" />
			</return-types>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			<parameter name="ailProps" type="Object" usage="required">
				<description> The AlphaImageLoader properties to be set for the image
Valid properties are 'sizingMethod' and 'enabled'</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="props" type="Object" scope="instance">
			<description>AlphaImageLoader properties to be set for the image. Valid properties are &quot;sizingMethod&quot; and &quot;enabled&quot;.</description>
		</property>
		</properties>
		<methods>
		<method name="_applyUrl" scope="instance" visibility="private">
			<description>Inserts the image URL into the DOM so that the image is displayed. If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage</description>
			<parameters>
			<parameter name="el" type="Object" usage="required">
				<description>	HTML DOM element</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.MenuManager">
		<description>Singleton that manages a collection of all menus and menu items.  Listens 
for DOM events at the document level and dispatches the events to the 
corresponding menu or menu item.</description>
		<methods>
		<method name="getFocusedMenu" scope="instance">
			<description>Returns a reference to the menu that currently has focus.</description>
			<return-types>
			<return-type type="YAHOO.widget.Menu" />
			</return-types>
		</method>
		<method name="getMenuItem" scope="instance">
			<description>Returns a menu item with the specified id.</description>
			<parameters>
			<parameter name="p_sId" type="String" usage="required">
				<description> String specifying the id of the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element representing the menu item to be retrieved.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="onDOMEvent" scope="instance" visibility="private">
			<description>Generic, global event handler for all of a menu's DOM-based events. This listens for events against the document object. If the target of a given event is a member of a menu or menu item's DOM, the instance's corresponding Custom Event is fired.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMenu" scope="instance">
			<description>Returns a menu with the specified id.</description>
			<parameters>
			<parameter name="p_sId" type="String" usage="required">
				<description> String specifying the id of the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element representing the menu to be retrieved.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Menu" />
			</return-types>
		</method>
		<method name="onMenuVisibleConfigChange" scope="instance" visibility="private">
			<description>Event handler for when the &quot;visible&quot; configuration  property of a Menu instance changes.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMenuRootElement" scope="instance" visibility="private">
			<description>Finds the root DIV node of a menu or the root LI node of a menu item.</description>
			<parameters>
			<parameter name="p_oElement" type="HTMLElement" usage="required">
				<description> Object specifying an HTML element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="addMenu" scope="instance">
			<description>Adds a menu to the collection of known menus.</description>
			<parameters>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object specifying the Menu  instance to be added.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onMenuDestroy" scope="instance" visibility="private">
			<description>&quot;destroy&quot; event handler for a menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> The menu that fired the event.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onMenuBlur" scope="instance" visibility="private">
			<description>&quot;blur&quot; event handler for a MenuItem instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getVisible" scope="instance">
			<description>Returns a collection of all visible menus registered with the menu manger.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="getFocusedMenuItem" scope="instance">
			<description>Returns a reference to the menu item that currently has focus.</description>
			<return-types>
			<return-type type="YAHOO.widget.MenuItem" />
			</return-types>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the menu manager.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="getMenuItemGroup" scope="instance">
			<description>Returns an array of menu item instances whose corresponding &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; elements are child nodes of the &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element with the specified id.</description>
			<parameters>
			<parameter name="p_sId" type="String" usage="required">
				<description> String specifying the id of the &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element representing the group of menu items to be retrieved.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
		</method>
		<method name="removeItem" scope="instance" visibility="private">
			<description>Removes a MenuItem instance from the MenuManager's collection of MenuItems.</description>
			<parameters>
			<parameter name="p_oMenuItem" type="MenuItem" usage="required">
				<description> The MenuItem instance to be removed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMenus" scope="instance">
			<description>Returns a collection of all menus registered with the menu manger.</description>
			<return-types>
			<return-type type="Object" />
			</return-types>
		</method>
		<method name="onItemDestroy" scope="instance" visibility="private">
			<description>&quot;destroy&quot; event handler for a MenuItem instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onItemAdded" scope="instance" visibility="private">
			<description>&quot;itemadded&quot; event handler for a Menu instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onMenuFocus" scope="instance" visibility="private">
			<description>&quot;focus&quot; event handler for a MenuItem instance.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="hideVisible" scope="instance">
			<description>Hides all visible, dynamically positioned menus (excluding instances of YAHOO.widget.MenuBar).</description>
		</method>
		<method name="removeMenu" scope="instance">
			<description>Removes a menu from the collection of known menus.</description>
			<parameters>
			<parameter name="p_oMenu" type="YAHOO.widget.Menu" usage="required">
				<description> Object specifying the Menu  instance to be removed.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Logger">
		<description>The singleton Logger class provides core log management functionality. Saves
logs written through the global YAHOO.log function or written by a LogWriter
instance. Provides access to logs for reading by a LogReader instance or
native browser console such as the Firebug extension to Firefox or Safari's
JavaScript console through integration with the console.log() method.</description>
		<properties>
		<property name="maxStackEntries" type="Number" scope="static">
			<description>Upper limit on size of internal stack.</description>
		</property>
		<property name="_lastTime" type="Date" scope="static" visibility="private">
			<description>Timestamp of last logged message.</description>
		</property>
		<property name="_startTime" type="Date" scope="static" visibility="private">
			<description>Static timestamp of Logger initialization.</description>
		</property>
		<property name="_browserConsoleEnabled" type="Boolean" scope="static" visibility="private">
			<description>Internal property to track whether output to browser console is enabled.</description>
		</property>
		<property name="loggerEnabled" type="Boolean" scope="static">
			<description>True if Logger is enabled, false otherwise.</description>
		</property>
		<property name="sources" type="String[]" scope="static">
			<description>Array of sources.</description>
		</property>
		<property name="_stack" type="Array" scope="static" visibility="private">
			<description>Array to hold all log messages.</description>
		</property>
		<property name="categories" type="String[]" scope="static">
			<description>Array of categories.</description>
		</property>
		</properties>
		<methods>
		<method name="reset" scope="instance">
			<description>Resets internal stack and startTime, enables Logger, and fires logResetEvent.</description>
		</method>
		<method name="_isNewSource" scope="instance" visibility="private">
			<description>Checks to see if a source already exists.</description>
			<parameters>
			<parameter name="sSource" type="String" usage="required">
				<description> Source name.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if source is unknown, else returns false.</return-description>
		</method>
		<method name="getStack" scope="instance">
			<description>Public accessor to internal stack of log message objects.</description>
			<return-types>
			<return-type type="Object[]" />
			</return-types>
			<return-description>Array of log message objects.</return-description>
		</method>
		<method name="log" scope="instance">
			<description>Saves a log message to the stack and fires newLogEvent. If the log message is assigned to an unknown category, creates a new category. If the log message is from an unknown source, creates a new source. If browser console is enabled, outputs the log message to browser console.</description>
			<parameters>
			<parameter name="sMsg" type="String" usage="required">
				<description> The log message.</description>
			</parameter>
			<parameter name="sCategory" type="String" usage="required">
				<description> Category of log message, or null.</description>
			</parameter>
			<parameter name="sSource" type="String" usage="required">
				<description> Source of LogWriter, or null if global.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onWindowError" scope="instance" visibility="private">
			<description>Handles logging of messages due to window error events.</description>
			<parameters>
			<parameter name="sMsg" type="String" usage="required">
				<description> The error message.</description>
			</parameter>
			<parameter name="sUrl" type="String" usage="required">
				<description> URL of the error.</description>
			</parameter>
			<parameter name="sLine" type="String" usage="required">
				<description> Line number of the error.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isNewCategory" scope="instance" visibility="private">
			<description>Checks to see if a category has already been created.</description>
			<parameters>
			<parameter name="sCategory" type="String" usage="required">
				<description> Category name.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if category is unknown, else returns false.</return-description>
		</method>
		<method name="handleWindowErrors" scope="instance">
			<description>Surpresses native JavaScript errors and outputs to console. By default, Logger does not handle JavaScript window error events. NB: Not all browsers support the window.onerror event.</description>
		</method>
		<method name="_printToBrowserConsole" scope="instance" visibility="private">
			<description>Outputs a log message to global console.log() function.</description>
			<parameters>
			<parameter name="oEntry" type="Object" usage="required">
				<description> Log entry object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createNewCategory" scope="instance" visibility="private">
			<description>Creates a new category of log messages and fires categoryCreateEvent.</description>
			<parameters>
			<parameter name="sCategory" type="String" usage="required">
				<description> Category name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createNewSource" scope="instance" visibility="private">
			<description>Creates a new source of log messages and fires sourceCreateEvent.</description>
			<parameters>
			<parameter name="sSource" type="String" usage="required">
				<description> Source name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="enableBrowserConsole" scope="instance">
			<description>Enables output to the browser's global console.log() function, which is used by the Firebug extension to Firefox as well as Safari.</description>
		</method>
		<method name="disableBrowserConsole" scope="instance">
			<description>Disables output to the browser's global console.log() function, which is used by the Firebug extension to Firefox as well as Safari.</description>
		</method>
		<method name="unhandleWindowErrors" scope="instance">
			<description>Unsurpresses native JavaScript errors. By default, Logger does not handle JavaScript window error events. NB: Not all browsers support the window.onerror event.</description>
		</method>
		<method name="getStartTime" scope="instance">
			<description>Public accessor to internal start time.</description>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>Internal date of when Logger singleton was initialized.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Overlay" superclass="YAHOO.widget.Module">
		<description>Overlay is a Module that is absolutely positioned above the page flow. It 
has convenience methods for positioning and sizing, as well as options for 
controlling zIndex and constraining the Overlay's position to the current 
visible viewport. Overlay also contains a dynamicly generated IFRAME which 
is placed beneath it for Internet Explorer 6 and 5.x so that it will be 
properly rendered above SELECT elements.</description>
		<constructors>
		<constructor scope="instance">
			<description>Overlay is a Module that is absolutely positioned above the page flow. It 
has convenience methods for positioning and sizing, as well as options for 
controlling zIndex and constraining the Overlay's position to the current 
visible viewport. Overlay also contains a dynamicly generated IFRAME which 
is placed beneath it for Internet Explorer 6 and 5.x so that it will be 
properly rendered above SELECT elements.</description>
			<return-types>
				<return-type type="YAHOO.widget.Overlay" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Overlay</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing 
the configuration that should be set for this Overlay. See configuration 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the Overlay's configuration properties</description>
		</property>
		<property name="YAHOO.widget.Overlay.CSS_IFRAME" type="String" scope="static">
			<description>Constant representing the default CSS class used for an Overlay iframe shim.</description>
		</property>
		<property name="YAHOO.widget.Overlay.STD_MOD_RE" type="RegExp" scope="static">
			<description>Constant representing the names of the standard module elements used in the overlay.</description>
		</property>
		<property name="YAHOO.widget.Overlay.CSS_HIDDEN" type="String" scope="static">
			<description>Constant representing the default hidden CSS class used for an Overlay. This class is applied to the overlay's outer DIV whenever it's hidden.</description>
		</property>
		<property name="CONTEXT_TRIGGERS" type="Array" scope="instance">
			<description>&lt;p&gt; Array of default event types which will trigger context alignment for the Overlay class. &lt;/p&gt; &lt;p&gt;The array is empty by default for Overlay, but maybe populated in future releases, so classes extending Overlay which need to define their own set of CONTEXT_TRIGGERS should concatenate their super class's prototype.CONTEXT_TRIGGERS value with their own array of values. &lt;/p&gt; &lt;p&gt; E.g.: &lt;code&gt;CustomOverlay.prototype.CONTEXT_TRIGGERS = YAHOO.widget.Overlay.prototype.CONTEXT_TRIGGERS.concat([&quot;windowScroll&quot;]);&lt;/code&gt; &lt;/p&gt;</description>
		</property>
		<property name="YAHOO.widget.Overlay._TRIGGER_MAP" type="Object" scope="static" visibility="private">
			<description>Internal map of special event types, which are provided by the instance. It maps the event type to the custom event instance. Contains entries for the &quot;windowScroll&quot;, &quot;windowResize&quot; and &quot;textResize&quot; static container events.</description>
		</property>
		<property name="YAHOO.widget.Overlay.CSS_OVERLAY" type="String" scope="static">
			<description>Constant representing the default CSS class used for an Overlay</description>
		</property>
		<property name="YAHOO.widget.Overlay._initialized" type="Boolean" scope="instance" visibility="private">
			<description>A boolean that indicated whether the window resize and scroll events have already been subscribed to.</description>
		</property>
		<property name="YAHOO.widget.Overlay.BOTTOM_RIGHT" type="String" scope="static">
			<description>Constant representing the bottom right corner of an element, used for configuring the context element alignment</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the Overlay's events</description>
		</property>
		<property name="YAHOO.widget.Overlay.VIEWPORT_OFFSET" type="Number" scope="static">
			<description>Number representing the minimum distance an Overlay instance should be positioned relative to the boundaries of the browser's viewport, in pixels.</description>
		</property>
		<property name="YAHOO.widget.Overlay.TOP_RIGHT" type="String" scope="static">
			<description>Constant representing the top right corner of an element, used for configuring the context element alignment</description>
		</property>
		<property name="YAHOO.widget.Overlay.TOP_LEFT" type="String" scope="static">
			<description>Constant representing the top left corner of an element, used for configuring the context element alignment</description>
		</property>
		<property name="YAHOO.widget.Overlay.IFRAME_SRC" type="String" scope="static">
			<description>The URL that will be placed in the iframe</description>
		</property>
		<property name="YAHOO.widget.Overlay.BOTTOM_LEFT" type="String" scope="static">
			<description>Constant representing the top bottom left corner of an element, used for configuring the context element alignment</description>
		</property>
		</properties>
		<methods>
		<method name="moveTo" scope="instance">
			<description>Moves the Overlay to the specified position. This function is  identical to calling this.cfg.setProperty(&quot;xy&quot;, [x,y]);</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The Overlay's new x position</description>
			</parameter>
			<parameter name="y" type="Number" usage="required">
				<description> The Overlay's new y position</description>
			</parameter>
			</parameters>
		</method>
		<method name="stackIframe" scope="instance">
			<description>Sets the zindex of the iframe shim, if it exists, based on the zindex of the Overlay element. The zindex of the iframe is set to be one less than the Overlay element's zindex. &lt;p&gt;NOTE: This method will not bump up the zindex of the Overlay element to ensure that the iframe shim has a non-negative zindex. If you require the iframe zindex to be 0 or higher, the zindex of the Overlay element should be set to a value greater than 0, before this method is called. &lt;/p&gt;</description>
		</method>
		<method name="showIframe" scope="instance">
			<description>Shows the iframe shim, if it has been enabled.</description>
		</method>
		<method name="configFixedCenter" scope="instance">
			<description>The default event handler fired when the &quot;fixedcenter&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.Overlay.windowResizeHandler" scope="static">
			<description>The DOM event handler used to fire the CustomEvent for window resize</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM resize event</description>
			</parameter>
			</parameters>
		</method>
		<method name="showMacGeckoScrollbars" scope="instance">
			<description>Adds a CSS class (&quot;show-scrollbars&quot;) and removes a CSS class (&quot;hide-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a String representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the Overlay.</return-description>
		</method>
		<method name="_getConstrainedPos" scope="instance">
			<description>Shared implementation method for getConstrainedX and getConstrainedY. &lt;p&gt; Given a coordinate value, returns the calculated coordinate required to position the Overlay if it is to be constrained to the viewport, based on the current element size, viewport dimensions, scroll values and preventoverlap settings &lt;/p&gt;</description>
			<parameters>
			<parameter name="pos" type="String" usage="required">
				<description> The coordinate which needs to be constrained, either &quot;x&quot; or &quot;y&quot;</description>
			</parameter>
			<parameter name="The" type="Number" usage="required">
				<description> coordinate value which needs to be constrained</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The constrained coordinate value</return-description>
		</method>
		<method name="hideMacGeckoScrollbars" scope="instance">
			<description>Adds a CSS class (&quot;hide-scrollbars&quot;) and removes a CSS class (&quot;show-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)</description>
		</method>
		<method name="_setDomVisibility" scope="instance">
			<description>Internal implementation to set the visibility of the overlay in the DOM.</description>
			<parameters>
			<parameter name="visible" type="boolean" usage="required">
				<description> Whether to show or hide the Overlay's outer element</description>
			</parameter>
			</parameters>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for Overlay which are fired  automatically at appropriate times by the Overlay class.</description>
		</method>
		<method name="fitsInViewport" scope="instance">
			<description>Determines if the Overlay (including the offset value defined by Overlay.VIEWPORT_OFFSET) will fit entirely inside the viewport, in both dimensions - width and height.</description>
			<return-description>boolean true if the Overlay will fit, false if not</return-description>
		</method>
		<method name="bringToTop" scope="instance">
			<description>Places the Overlay on top of all other instances of YAHOO.widget.Overlay.</description>
		</method>
		<method name="_processTriggers" scope="instance">
			<description>Utility method that subscribes or unsubscribes the given function from the list of trigger events provided.</description>
			<parameters>
			<parameter name="triggers" type="Array[String|CustomEvent]" usage="required">
				<description> An array of either CustomEvents, event type strings (e.g. &quot;beforeShow&quot;, &quot;windowScroll&quot;) to/from which the provided function should be subscribed/unsubscribed respectively.</description>
			</parameter>
			<parameter name="mode" type="String" usage="required">
				<description> Either &quot;subscribe&quot; or &quot;unsubscribe&quot;, specifying whether or not we are subscribing or unsubscribing trigger listeners</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The function to be subscribed/unsubscribed to/from the trigger event. Context is always set to the overlay instance, and no additional object argument get passed to the subscribed function.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Overlay initialization method, which is executed for Overlay and  all of its subclasses. This method is automatically called by the constructor, and sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Overlay</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configXY" scope="instance">
			<description>The default event handler fired when the &quot;xy&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getPreciseHeight" scope="instance" visibility="private">
			<description>Returns the sub-pixel height of the el, using getBoundingClientRect, if available, otherwise returns the offsetHeight</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Float" />
			</return-types>
			<return-description>The sub-pixel height if supported by the browser, else the rounded height.</return-description>
		</method>
		<method name="_autoFillOnHeightChange" scope="instance">
			<description>The default custom event handler executed when the overlay's height is changed, if the autofillheight property has been set.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The event type</description>
			</parameter>
			<parameter name="args" type="Array" usage="required">
				<description> The array of arguments passed to event subscribers</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The header, body or footer element which is to be resized to fill out the containers height</description>
			</parameter>
			</parameters>
		</method>
		<method name="fillHeight" scope="instance">
			<description>&lt;p&gt; Sets the height on the provided header, body or footer element to fill out the height of the container. It determines the height of the containers content box, based on it's configured height value, and sets the height of the autofillheight element to fill out any space remaining after the other standard module element heights have been accounted for. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This method is not designed to work if an explicit height has not been set on the container, since for an &quot;auto&quot; height container, the heights of the header/body/footer will drive the height of the container.&lt;/p&gt;</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element which should be resized to fill out the height of the container element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="syncPosition" scope="instance">
			<description>Synchronizes the Panel's &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the Panel's position in the DOM. This is primarily used to update  position information during drag &amp; drop.</description>
		</method>
		<method name="hideIframe" scope="instance">
			<description>Hides the iframe shim, if it has been enabled.</description>
		</method>
		<method name="configHeight" scope="instance">
			<description>The default event handler fired when the &quot;height&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getConstrainedXY" scope="instance">
			<description>Given x, y coordinate values, returns the calculated coordinates required to position the Overlay if it is to be constrained to the viewport, based on the current element size, viewport dimensions and scroll values.</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The X coordinate value to be constrained</description>
			</parameter>
			<parameter name="y" type="Number" usage="required">
				<description> The Y coordinate value to be constrained</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The constrained x and y coordinates at index 0 and 1 respectively;</return-description>
		</method>
		<method name="configContext" scope="instance">
			<description>The default event handler fired when the &quot;context&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_preventOverlap" scope="instance">
			<description>Helper method, used to position the Overlap to prevent overlap with the context element (used when preventcontextoverlap is enabled)</description>
			<parameters>
			<parameter name="pos" type="String" usage="required">
				<description> The coordinate to prevent overlap for, either &quot;x&quot; or &quot;y&quot;.</description>
			</parameter>
			<parameter name="contextEl" type="HTMLElement" usage="required">
				<description> The context element</description>
			</parameter>
			<parameter name="overlaySize" type="Number" usage="required">
				<description> The related overlay dimension value (for &quot;x&quot;, the width, for &quot;y&quot;, the height)</description>
			</parameter>
			<parameter name="viewportSize" type="Number" usage="required">
				<description> The related viewport dimension value (for &quot;x&quot;, the width, for &quot;y&quot;, the height)</description>
			</parameter>
			<parameter name="docScroll" type="Object" usage="required">
				<description> The related document scroll value (for &quot;x&quot;, the scrollLeft, for &quot;y&quot;, the scrollTop)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The new coordinate value which was set to prevent overlap</return-description>
		</method>
		<method name="onDomResize" scope="instance">
			<description>Event handler fired when the resize monitor element is resized.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The resize DOM event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object</description>
			</parameter>
			</parameters>
		</method>
		<method name="configConstrainToViewport" scope="instance">
			<description>The default event handler fired when the &quot;constraintoviewport&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configVisible" scope="instance">
			<description>The default event handler fired when the &quot;visible&quot; property is changed. This method is responsible for firing showEvent and hideEvent.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_validateAutoFillHeight" scope="instance">
			<description>autofillheight validator. Verifies that the autofill value is either null or one of the strings : &quot;body&quot;, &quot;header&quot; or &quot;footer&quot;.</description>
			<parameters>
			<parameter name="val" type="String" usage="required"/>
			</parameters>
			<return-description>true, if valid, false otherwise</return-description>
		</method>
		<method name="_alignOnTrigger" scope="instance">
			<description>Custom Event handler for context alignment triggers. Invokes the align method</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The event type (not used by the default implementation)</description>
			</parameter>
			<parameter name="args" type="Any[]" usage="required">
				<description> The array of arguments for the trigger event (not used by the default implementation)</description>
			</parameter>
			</parameters>
		</method>
		<method name="configWidth" scope="instance">
			<description>The default event handler fired when the &quot;width&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the Overlay element from the DOM and sets all child elements to null.</description>
		</method>
		<method name="forceContainerRedraw" scope="instance">
			<description>Can be used to force the container to repaint/redraw it's contents. &lt;p&gt; By default applies and then removes a 1px bottom margin through the application/removal of a &quot;yui-force-redraw&quot; class. &lt;/p&gt; &lt;p&gt; It is currently used by Overlay to force a repaint for webkit browsers, when centering. &lt;/p&gt;</description>
		</method>
		<method name="_primeXYFromDOM" scope="instance">
			<description>Set's the container's XY value from DOM if not already set. Differs from syncPosition, in that the XY value is only sync'd with DOM if not already set. The method also refire's the XY config property event, so any beforeMove, Move event listeners are invoked.</description>
		</method>
		<method name="configAutoFillHeight" scope="instance">
			<description>The default event handler fired when the &quot;autofillheight&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.Overlay.windowScrollHandler" scope="static">
			<description>The DOM event handler used to fire the CustomEvent for window scroll</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The DOM scroll event</description>
			</parameter>
			</parameters>
		</method>
		<method name="center" scope="instance">
			<description>Centers the container in the viewport.</description>
		</method>
		<method name="_findTriggerCE" scope="instance" visibility="private">
			<description>Helper method to locate the custom event instance for the event name string passed in. As a convenience measure, any custom events passed in are returned.</description>
			<parameters>
			<parameter name="t" type="String|CustomEvent" usage="required">
				<description> Either a CustomEvent, or event type (e.g. &quot;windowScroll&quot;) for which a custom event instance needs to be looked up from the Overlay._TRIGGER_MAP.</description>
			</parameter>
			</parameters>
		</method>
		<method name="align" scope="instance">
			<description>Aligns the Overlay to its context element using the specified corner points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, and BOTTOM_RIGHT.</description>
			<parameters>
			<parameter name="elementAlign" type="String" usage="required">
				<description> The String representing the corner of the Overlay that should be aligned to the context element</description>
			</parameter>
			<parameter name="contextAlign" type="String" usage="required">
				<description> The corner of the context element that the elementAlign corner should stick to.</description>
			</parameter>
			<parameter name="xyOffset" type="Number[]" usage="optional">
				<description> Optional. A 2 element array specifying the x and y pixel offsets which should be applied after aligning the element and context corners. For example, passing in [5, -10] for this value, would offset the Overlay by 5 pixels along the X axis (horizontally) and -10 pixels along the Y axis (vertically) after aligning the specified corners.</description>
			</parameter>
			</parameters>
		</method>
		<method name="syncIframe" scope="instance">
			<description>Syncronizes the size and position of iframe shim to that of its corresponding Overlay instance.</description>
		</method>
		<method name="configIframe" scope="instance">
			<description>The default event handler fired when the &quot;iframe&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getComputedHeight" scope="instance" visibility="private">
			<description>Determines the content box height of the given element (height of the element, without padding or borders) in pixels.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element for which the content height needs to be determined</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The content box height of the given element, or null if it could not be determined.</return-description>
		</method>
		<method name="configY" scope="instance">
			<description>The default event handler fired when the &quot;y&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="configX" scope="instance">
			<description>The default event handler fired when the &quot;x&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getConstrainedY" scope="instance">
			<description>Given y coordinate value, returns the calculated y coordinate required to position the Overlay if it is to be constrained to the viewport, based on the current element size, viewport dimensions and scroll values.</description>
			<parameters>
			<parameter name="y" type="Number" usage="required">
				<description> The Y coordinate value to be constrained</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The constrained y coordinate</return-description>
		</method>
		<method name="getConstrainedX" scope="instance">
			<description>Given x coordinate value, returns the calculated x coordinate required to position the Overlay if it is to be constrained to the viewport, based on the current element size, viewport dimensions and scroll values.</description>
			<parameters>
			<parameter name="x" type="Number" usage="required">
				<description> The X coordinate value to be constrained</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The constrained x coordinate</return-description>
		</method>
		<method name="configzIndex" scope="instance">
			<description>The default event handler fired when the &quot;zIndex&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doCenterOnDOMEvent" scope="instance">
			<description>Fixed center event handler used for centering on scroll/resize, but only if the overlay is visible and, if &quot;fixedcenter&quot; is set to &quot;contained&quot;, only if the overlay fits within the viewport.</description>
		</method>
		<method name="enforceConstraints" scope="instance">
			<description>The default event handler executed when the moveEvent is fired, if the &quot;constraintoviewport&quot; is set to true.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).</description>
		</method>
		</methods>
	</class>
	<class type="Connect">
		<properties>
		<property name="_sFormData" type="string" scope="static" visibility="private">
			<description>Property modified by setForm() to set the HTML form data for each transaction.</description>
		</property>
		<property name="failureEvent" type="CustomEvent" scope="static" visibility="private">
			<description>Custom event that fires when handleTransactionResponse() determines a response in the HTTP 4xx/5xx range.</description>
		</property>
		<property name="_isFormSubmit" type="boolean" scope="static" visibility="private">
			<description>Property modified by setForm() to determine if the data should be submitted as an HTML form.</description>
		</property>
		<property name="_hasSubmitListener" type="undefined" scope="static" visibility="private">
			<description>Determines whether YAHOO.util.Event is available and returns true or false. If true, an event listener is bound at the document level to trap click events that resolve to a target type of &quot;Submit&quot;. This listener will enable setForm() to determine the clicked &quot;Submit&quot; value in a multi-Submit button, HTML form.</description>
		</property>
		<property name="_isFileUpload" type="boolean" scope="static" visibility="private">
			<description>Property modified by setForm() to determine if a file(s) upload is expected.</description>
		</property>
		<property name="_formNode" type="object" scope="static" visibility="private">
			<description>Property modified by setForm() to set a reference to the HTML form node if the desired action is file upload.</description>
		</property>
		<property name="_submitElementValue" type="string" scope="static" visibility="private">
			<description>Tracks the name-value pair of the &quot;clicked&quot; submit button if multiple submit buttons are present in an HTML form; and, if YAHOO.util.Event is available.</description>
		</property>
		</properties>
		<methods>
		<method name="createFrame" scope="static" visibility="private">
			<description>Creates an iframe to be used for form file uploads. It is remove from the document upon completion of the upload transaction.</description>
			<parameters>
			<parameter name="optional" type="string" usage="required">
				<description> qualified path of iframe resource for SSL in IE.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="setForm" scope="static">
			<description>This method assembles the form label and value pairs and constructs an encoded string. asyncRequest() will automatically initialize the transaction with a a HTTP header Content-Type of application/x-www-form-urlencoded.</description>
			<parameters>
			<parameter name="form" type="string || object" usage="required">
				<description> id or name attribute, or form object.</description>
			</parameter>
			<parameter name="optional" type="boolean" usage="required">
				<description> enable file upload.</description>
			</parameter>
			<parameter name="optional" type="boolean" usage="required">
				<description> enable file upload over SSL in IE only.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>string of the HTML form field name and value pairs..</return-description>
		</method>
		<method name="uploadFile" scope="static" visibility="private">
			<description>Uploads HTML form, inclusive of files/attachments, using the iframe created in createFrame to facilitate the transaction.</description>
			<parameters>
			<parameter name="id" type="int" usage="required">
				<description> The transaction id.</description>
			</parameter>
			<parameter name="callback" type="object" usage="required">
				<description> User-defined callback object.</description>
			</parameter>
			<parameter name="uri" type="string" usage="required">
				<description> Fully qualified path of resource.</description>
			</parameter>
			<parameter name="postData" type="string" usage="required">
				<description> POST data to be submitted in addition to HTML form.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="handleXdrResponse" scope="static" visibility="private">
			<description>This method is the initial response handler for XDR transactions. The Flash transport calls this function and sends the response payload.</description>
			<parameters>
			<parameter name="The" type="object" usage="required">
				<description> response object sent from the Flash transport.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="resetFormState" scope="static" visibility="private">
			<description>Resets HTML form properties when an HTML form or HTML form with file upload transaction is sent.</description>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_xdrStart" scope="static" visibility="private">
			<description>This method fires the global and transaction start events.</description>
			<parameters>
			<parameter name="The" type="object" usage="required">
				<description> transaction object.</description>
			</parameter>
			<parameter name="The" type="string" usage="required">
				<description> transaction's callback object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="_swf" scope="static" visibility="private">
			<description>This method creates and instantiates the Flash transport.</description>
			<parameters>
			<parameter name="URI" type="string" usage="required">
				<description> to connection.swf.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="appendPostData" scope="static" visibility="private">
			<description>Parses the POST data and creates hidden form elements for each key-value, and appends them to the HTML form object.</description>
			<parameters>
			<parameter name="postData" type="string" usage="required">
				<description> The HTTP POST data</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="array" />
			</return-types>
			<return-description>formElements Collection of hidden fields.</return-description>
		</method>
		<method name="transport" scope="static">
			<description>This method instantiates the Flash transport and establishes a static reference to it, used for all XDR requests.</description>
			<parameters>
			<parameter name="URI" type="string" usage="required">
				<description> to connection.swf.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		<method name="xdr" scope="static" visibility="private">
			<description>This method calls the public method on the Flash transport to start the XDR transaction. It is analogous to Connection Manager's asyncRequest method.</description>
			<parameters>
			<parameter name="The" type="object" usage="required">
				<description> transaction object.</description>
			</parameter>
			<parameter name="HTTP" type="string" usage="required">
				<description> request method.</description>
			</parameter>
			<parameter name="URI" type="string" usage="required">
				<description> for the transaction.</description>
			</parameter>
			<parameter name="The" type="object" usage="required">
				<description> transaction's callback object.</description>
			</parameter>
			<parameter name="The" type="object" usage="required">
				<description> JSON object used as HTTP POST data.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.EditorWindow">
		<description>Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.
This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.</description>
		<properties>
		<property name="body" type="undefined" scope="instance" visibility="private">
			<description>Holder for the body of the window, used in Editor.openWindow</description>
		</property>
		<property name="header" type="undefined" scope="instance" visibility="private">
			<description>Holder for the header of the window, used in Editor.openWindow</description>
		</property>
		<property name="footer" type="undefined" scope="instance" visibility="private">
			<description>Holder for the footer of the window, used in Editor.openWindow</description>
		</property>
		<property name="name" type="undefined" scope="instance" visibility="private">
			<description>A unique name for the window</description>
		</property>
		<property name="attrs" type="undefined" scope="instance" visibility="private">
			<description>The window attributes</description>
		</property>
		</properties>
		<methods>
		<method name="setFooter" scope="instance">
			<description>Sets the footer for the window.</description>
			<parameters>
			<parameter name="str" type="String|HTMLElement" usage="required">
				<description> The string or DOM reference to be used as the windows footer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setBody" scope="instance">
			<description>Sets the body for the window.</description>
			<parameters>
			<parameter name="str" type="String|HTMLElement" usage="required">
				<description> The string or DOM reference to be used as the windows body.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the EditorWindow.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="setHeader" scope="instance">
			<description>Sets the header for the window.</description>
			<parameters>
			<parameter name="str" type="String|HTMLElement" usage="required">
				<description> The string or DOM reference to be used as the windows header.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DateAssert">
		<description>The DateAssert object provides functions to test JavaScript Date objects
for a variety of cases.</description>
		<methods>
		<method name="datesAreEqual" scope="static">
			<description>Asserts that a date's month, day, and year are equal to another date's.</description>
			<parameters>
			<parameter name="expected" type="Date" usage="required">
				<description> The expected date.</description>
			</parameter>
			<parameter name="actual" type="Date" usage="required">
				<description> The actual date to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		<method name="timesAreEqual" scope="static">
			<description>Asserts that a date's hour, minutes, and seconds are equal to another date's.</description>
			<parameters>
			<parameter name="expected" type="Date" usage="required">
				<description> The expected date.</description>
			</parameter>
			<parameter name="actual" type="Date" usage="required">
				<description> The actual date to test.</description>
			</parameter>
			<parameter name="message" type="String" usage="optional">
				<description> (Optional) The message to display if the assertion fails.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.SWF" superclass="YAHOO.util.Element">
		<description>Creates the SWF instance and keeps the configuration data</description>
		<constructors>
		<constructor scope="instance">
			<description>Creates the SWF instance and keeps the configuration data</description>
			<return-types>
				<return-type type="YAHOO.widget.SWF" />
			</return-types>
			<parameters>
			<parameter name="id" type="String|HTMLElement" usage="required">
				<description> The id of the element, or the element itself that the SWF will be inserted into.  
The width and height of the SWF will be set to the width and height of this container element.</description>
			</parameter>
			<parameter name="swfURL" type="String" usage="required">
				<description> The URL of the SWF to be embedded into the page.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="optional">
				<description> (optional) Configuration parameters for the Flash application and values for Flashvars
to be passed to the SWF.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_instances" type="Object" scope="instance" visibility="private">
			<description>The static collection of all instances of the SWFs on the page.</description>
		</property>
		<property name="_id" type="String" scope="instance">
			<description>The DOM id of this instance of the element. Automatically generated.</description>
		</property>
		</properties>
		<methods>
		<method name="eventHandler" scope="instance" visibility="private">
			<description>Handles an event coming from within the SWF and delegate it to a specific instance of SWF.</description>
			<parameters>
			<parameter name="swfid" type="String" usage="required">
				<description> the id of the SWF dispatching the event</description>
			</parameter>
			<parameter name="event" type="Object" usage="required">
				<description> the event being transmitted.</description>
			</parameter>
			</parameters>
		</method>
		<method name="callSWF" scope="instance">
			<description>Calls a specific function exposed by the SWF's ExternalInterface.</description>
			<parameters>
			<parameter name="func" type="String" usage="required">
				<description> the name of the function to call</description>
			</parameter>
			<parameter name="args" type="Object" usage="required">
				<description> the set of arguments to pass to the function.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the SWF instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the SWF instance.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator">
		<description>Instantiate a Paginator, passing a configuration object to the contructor.
The configuration object should contain the following properties:
&lt;ul&gt;
&lt;li&gt;rowsPerPage : &lt;em&gt;n&lt;/em&gt; (int)&lt;/li&gt;
&lt;li&gt;totalRecords : &lt;em&gt;n&lt;/em&gt; (int or Paginator.VALUE_UNLIMITED)&lt;/li&gt;
&lt;li&gt;containers : &lt;em&gt;id | el | arr&lt;/em&gt; (HTMLElement reference, its id, or an array of either)&lt;/li&gt;
&lt;/ul&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>Instantiate a Paginator, passing a configuration object to the contructor.
The configuration object should contain the following properties:
&lt;ul&gt;
&lt;li&gt;rowsPerPage : &lt;em&gt;n&lt;/em&gt; (int)&lt;/li&gt;
&lt;li&gt;totalRecords : &lt;em&gt;n&lt;/em&gt; (int or Paginator.VALUE_UNLIMITED)&lt;/li&gt;
&lt;li&gt;containers : &lt;em&gt;id | el | arr&lt;/em&gt; (HTMLElement reference, its id, or an array of either)&lt;/li&gt;
&lt;/ul&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator" />
			</return-types>
			<parameters>
			<parameter name="config" type="Object" usage="required">
				<description>  Object literal to set instance and ui component
configuration.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_pageChanged" type="boolean" scope="instance">
			<description>Used by setState to indicate when a page change has occurred</description>
		</property>
		<property name="Paginator.TEMPLATE_DEFAULT" type="string" scope="static">
			<description>Default template used by Paginator instances. Update this if you want all new Paginators to use a different default template.</description>
		</property>
		<property name="Paginator.TEMPLATE_ROWS_PER_PAGE" type="string" scope="static">
			<description>Common alternate pagination format, including page links, links for previous, next, first and last pages as well as a rows-per-page dropdown. Offered as a convenience.</description>
		</property>
		<property name="_batch" type="boolean" scope="instance">
			<description>Flag used to indicate multiple attributes are being updated via setState</description>
		</property>
		<property name="_containers" type="Array(HTMLElement)" scope="instance" visibility="private">
			<description>Array of nodes in which to render pagination controls. This is set via the &amp;quot;containers&amp;quot; attribute.</description>
		</property>
		<property name="Paginator.id" type="number" scope="static" visibility="private">
			<description>Incrementing index used to give instances unique ids.</description>
		</property>
		<property name="_state" type="Object" scope="instance">
			<description>Temporary state cache used by setState to keep track of the previous state for eventual pageChange event firing</description>
		</property>
		<property name="Paginator.ui" type="undefined" scope="static">
			<description>Storage object for UI Components</description>
		</property>
		<property name="Paginator.VALUE_UNLIMITED" type="number" scope="static">
			<description>Used to identify unset, optional configurations, or used explicitly in the case of totalRecords to indicate unlimited pagination.</description>
		</property>
		<property name="Paginator.ID_BASE" type="string" scope="static" visibility="private">
			<description>Base of id strings used for ui components.</description>
		</property>
		</properties>
		<methods>
		<method name="render" scope="instance">
			<description>Render the pagination controls per the format attribute into the specified container nodes.</description>
			<return-description>the Paginator instance</return-description>
		</method>
		<method name="getRowsPerPage" scope="instance">
			<description>Get the number of rows per page.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
			<return-description>the current setting of the rowsPerPage attribute</return-description>
		</method>
		<method name="getTotalRecords" scope="instance">
			<description>Get the total number of records.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
			<return-description>the current setting of totalRecords attribute</return-description>
		</method>
		<method name="getPreviousPage" scope="instance">
			<description>Get the page number of the previous page, or null if the current page is the first page.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
		</method>
		<method name="getTotalPages" scope="instance">
			<description>Get the total number of pages in the data set according to the current rowsPerPage and totalRecords values. If totalRecords is not set, or set to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns YAHOO.widget.Paginator.VALUE_UNLIMITED.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
		</method>
		<method name="setState" scope="instance">
			<description>Convenience method to facilitate setting state attributes rowsPerPage, totalRecords, recordOffset in batch. Also supports calculating recordOffset from state.page if state.recordOffset is not provided. Fires only a single pageChange event, if appropriate. This will not fire a changeRequest event.</description>
			<parameters>
			<parameter name="state" type="Object" usage="required">
				<description> Object literal of attribute:value pairs to set</description>
			</parameter>
			</parameters>
		</method>
		<method name="updateVisibility" scope="instance">
			<description>Hides the containers if there is only one page of data and attribute alwaysVisible is false. Conversely, it displays the containers if either there is more than one page worth of data or alwaysVisible is turned on.</description>
		</method>
		<method name="_selfSubscribe" scope="instance">
			<description>Subscribes to instance attribute change events to automate certain behaviors.</description>
		</method>
		<method name="initEvents" scope="instance" visibility="private">
			<description>Initialize this instance's CustomEvents.</description>
		</method>
		<method name="_firePageChange" scope="instance">
			<description>Fires a pageChange event in the form of a standard attribute change event with additional properties prevState and newState.</description>
			<parameters>
			<parameter name="state" type="Object" usage="required">
				<description> the result of getState(oldState)</description>
			</parameter>
			</parameters>
		</method>
		<method name="setStartIndex" scope="instance">
			<description>Move the record offset to a new starting index. This will likely cause the calculated current page to change. You should probably use setPage.</description>
			<parameters>
			<parameter name="offset" type="number" usage="required">
				<description> the new record offset</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> whether to forcibly avoid firing the changeRequest event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes controls from the page and unhooks events.</description>
		</method>
		<method name="getCurrentPage" scope="instance">
			<description>Get the page number corresponding to the current record offset.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
		</method>
		<method name="getState" scope="instance">
			<description>Get an object literal describing the current state of the paginator. If an object literal of proposed values is passed, the proposed state will be returned as an object literal with the following keys: &lt;ul&gt; &lt;li&gt;paginator - instance of the Paginator&lt;/li&gt; &lt;li&gt;page - number&lt;/li&gt; &lt;li&gt;totalRecords - number&lt;/li&gt; &lt;li&gt;recordOffset - number&lt;/li&gt; &lt;li&gt;rowsPerPage - number&lt;/li&gt; &lt;li&gt;records - [ start_index, end_index ]&lt;/li&gt; &lt;li&gt;before - (OPTIONAL) { state object literal for current state }&lt;/li&gt; &lt;/ul&gt;</description>
			<parameters>
			<parameter name="changes" type="object" usage="required">
				<description> OPTIONAL object literal with proposed values Supported change keys include: &lt;ul&gt; &lt;li&gt;rowsPerPage&lt;/li&gt; &lt;li&gt;totalRecords&lt;/li&gt; &lt;li&gt;recordOffset OR&lt;/li&gt; &lt;li&gt;page&lt;/li&gt; &lt;/ul&gt;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="object" />
			</return-types>
		</method>
		<method name="hasPreviousPage" scope="instance">
			<description>Is there a page before the current page?</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
		</method>
		<method name="getStartIndex" scope="instance">
			<description>Get the index of the first record on the current page</description>
			<return-types>
			<return-type type="number" />
			</return-types>
			<return-description>the index of the first record on the current page</return-description>
		</method>
		<method name="setTotalRecords" scope="instance">
			<description>Set the total number of records.</description>
			<parameters>
			<parameter name="total" type="number" usage="required">
				<description> the new total number of records</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> whether to forcibly avoid firing the changeRequest event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleStateChange" scope="instance">
			<description>Fires the pageChange event when the state attributes have changed in such a way as to locate the current recordOffset on a new page.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the attribute change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="hasPage" scope="instance">
			<description>Does the requested page have any records?</description>
			<parameters>
			<parameter name="page" type="number" usage="required">
				<description> the page in question</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
		</method>
		<method name="setRowsPerPage" scope="instance">
			<description>Set the number of rows per page.</description>
			<parameters>
			<parameter name="rpp" type="number" usage="required">
				<description> the new number of rows per page</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> whether to forcibly avoid firing the changeRequest event</description>
			</parameter>
			</parameters>
		</method>
		<method name="setPage" scope="instance">
			<description>Set the current page to the provided page number if possible.</description>
			<parameters>
			<parameter name="newPage" type="number" usage="required">
				<description> the new page number</description>
			</parameter>
			<parameter name="silent" type="boolean" usage="required">
				<description> whether to forcibly avoid firing the changeRequest event</description>
			</parameter>
			</parameters>
		</method>
		<method name="hasNextPage" scope="instance">
			<description>Are there records on the next page?</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
		</method>
		<method name="initUIComponents" scope="instance" visibility="private">
			<description>Initialize registered ui components onto this instance.</description>
		</method>
		<method name="_syncRecordOffset" scope="instance">
			<description>Sets recordOffset to the starting index of the previous page when totalRecords is reduced below the current recordOffset.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> totalRecordsChange event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_renderTemplate" scope="instance">
			<description>Creates the individual ui components and renders them into a container.</description>
			<parameters>
			<parameter name="container" type="HTMLElement" usage="required">
				<description> where to add the ui components</description>
			</parameter>
			<parameter name="template" type="String" usage="required">
				<description> the template to use as a guide for rendering</description>
			</parameter>
			<parameter name="id_base" type="String" usage="required">
				<description> id base for the container's ui components</description>
			</parameter>
			<parameter name="hide" type="Boolean" usage="required">
				<description> leave the container hidden after assembly</description>
			</parameter>
			</parameters>
		</method>
		<method name="Paginator.isNumeric" scope="static">
			<description>Similar to YAHOO.lang.isNumber, but allows numeric strings. This is is used for attribute validation in conjunction with getters that return numbers.</description>
			<parameters>
			<parameter name="v" type="Number|String" usage="required">
				<description> value to be checked for number or numeric string</description>
			</parameter>
			</parameters>
		</method>
		<method name="initConfig" scope="instance" visibility="private">
			<description>Initialize the Paginator's attributes (see YAHOO.util.Element class AttributeProvider).</description>
		</method>
		<method name="getContainerNodes" scope="instance">
			<description>Get the configured container nodes</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>array of HTMLElement nodes</return-description>
		</method>
		<method name="getPageRecords" scope="instance">
			<description>Get the start and end record indexes of the specified page.</description>
			<parameters>
			<parameter name="page" type="number" usage="optional">
				<description> (optional) The page (current page if not specified)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>[start_index, end_index]</return-description>
		</method>
		<method name="getNextPage" scope="instance">
			<description>Get the page number of the next page, or null if the current page is the last page.</description>
			<return-types>
			<return-type type="number" />
			</return-types>
		</method>
		<method name="renderUIComponent" scope="instance">
			<description>Replaces a marker node with a rendered UI component, determined by the yui-pg-ui-(UI component class name) in the marker's className. e.g. yui-pg-ui-PageLinks =&gt; new YAHOO.widget.Paginator.ui.PageLinks(this)</description>
			<parameters>
			<parameter name="marker" type="HTMLElement" usage="required">
				<description> the marker node to replace</description>
			</parameter>
			<parameter name="id_base" type="String" usage="required">
				<description> string base the component's generated id</description>
			</parameter>
			</parameters>
		</method>
		<method name="Paginator.toNumber" scope="static">
			<description>Return a number or null from input</description>
			<parameters>
			<parameter name="n" type="Number|String" usage="required">
				<description> a number or numeric string</description>
			</parameter>
			</parameters>
			<return-description>Number</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.AnimMgr">
		<description>Handles animation queueing and threading.
Used by Anim and subclasses.</description>
		<properties>
		<property name="queue" type="Array" scope="instance" visibility="private">
			<description>The current queue of registered animation objects.</description>
		</property>
		<property name="tweenCount" type="Int" scope="instance" visibility="private">
			<description>The number of active animations.</description>
		</property>
		<property name="delay" type="Int" scope="instance">
			<description>Interval delay in milliseconds, defaults to fastest possible.</description>
		</property>
		<property name="fps" type="Int" scope="instance">
			<description>Base frame rate (frames per second). Arbitrarily high for better x-browser calibration (slower browsers drop more frames).</description>
		</property>
		<property name="thread" type="Int" scope="instance" visibility="private">
			<description>Reference to the animation Interval.</description>
		</property>
		</properties>
		<methods>
		<method name="run" scope="instance">
			<description>Called per Interval to handle each animation frame.</description>
		</method>
		<method name="unRegister" scope="instance" visibility="private">
			<description>removes an animation instance from the animation queue. All animation instances must be registered in order to animate.</description>
			<parameters>
			<parameter name="tween" type="object" usage="required">
				<description> The Anim instance to be be registered</description>
			</parameter>
			<parameter name="index" type="Int" usage="required">
				<description> The index of the Anim instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="stop" scope="instance">
			<description>Stops the animation thread or a specific animation instance.</description>
			<parameters>
			<parameter name="tween" type="object" usage="optional">
				<description> A specific Anim instance to stop (optional) If no instance given, Manager stops thread and all animations.</description>
			</parameter>
			</parameters>
		</method>
		<method name="start" scope="instance">
			<description>Starts the animation thread. Only one thread can run at a time.</description>
		</method>
		<method name="registerElement" scope="instance">
			<description>Adds an animation instance to the animation queue. All animation instances must be registered in order to animate.</description>
			<parameters>
			<parameter name="tween" type="object" usage="required">
				<description> The Anim instance to be be registered</description>
			</parameter>
			</parameters>
		</method>
		<method name="correctFrame" scope="instance" visibility="private">
			<description>On the fly frame correction to keep animation on time.</description>
			<parameters>
			<parameter name="tween" type="Object" usage="required">
				<description> The Anim instance being corrected.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ImageLoader.group">
		<description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
		<constructors>
		<constructor scope="instance">
			<description>A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.</description>
			<return-types>
				<return-type type="YAHOO.util.ImageLoader.group" />
			</return-types>
			<parameters>
			<parameter name="trigEl" type="String|HTMLElement" usage="required">
				<description>	The HTML element id or reference to assign the trigger event to. Can be null for no trigger</description>
			</parameter>
			<parameter name="trigAct" type="String" usage="required">
				<description> The type of event to assign to trigEl. Can be null for no trigger</description>
			</parameter>
			<parameter name="timeout" type="Number" usage="required">
				<description>	Timeout (time limit) length, in seconds. Can be undefined, or &lt;= 0, for no time limit</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>Name for the group. Only used to identify the group in logging statements</description>
		</property>
		<property name="_classImageEls" type="Array" scope="instance" visibility="private">
			<description>HTML elements having the class name that is associated with this group Elements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used</description>
		</property>
		<property name="_imgObjs" type="Object" scope="instance" visibility="private">
			<description>Collection of images registered with this group</description>
		</property>
		<property name="timeoutLen" type="Number" scope="instance">
			<description>Timeout (time limit) length, in seconds</description>
		</property>
		<property name="className" type="String" scope="instance">
			<description>Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images. This class should have, in its CSS style definition, &quot;background:none !important;&quot;</description>
		</property>
		<property name="_triggers" type="Array" scope="instance" visibility="private">
			<description>Collection of triggers for this group. Keeps track of each trigger's element, event, and event-listener-callback &quot;fetch&quot; function</description>
		</property>
		<property name="_customTriggers" type="Array" scope="instance" visibility="private">
			<description>Collection of custom-event triggers for this group. Keeps track of each trigger's event object and event-listener-callback &quot;fetch&quot; function</description>
		</property>
		<property name="_timeout" type="Object" scope="instance" visibility="private">
			<description>Timeout object to keep a handle on the time limit</description>
		</property>
		<property name="foldConditional" type="Boolean" scope="instance">
			<description>Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately</description>
		</property>
		</properties>
		<methods>
		<method name="registerBgImage" scope="instance">
			<description>Registers a background image with the group</description>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>bgImgObj that was registered, for modifying any attributes in the object</return-description>
		</method>
		<method name="addCustomTrigger" scope="instance">
			<description>Adds a custom event trigger to the group.</description>
			<parameters>
			<parameter name="event" type="Object" usage="required">
				<description> A YAHOO.util.CustomEvent object</description>
			</parameter>
			</parameters>
		</method>
		<method name="addTrigger" scope="instance">
			<description>Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener</description>
			<parameters>
			<parameter name="trigEl" type="String|HTMLElement" usage="required">
				<description> The HTML element id or reference to assign the trigger event to</description>
			</parameter>
			<parameter name="trigAct" type="String" usage="required">
				<description> The type of event to assign to trigEl</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getFetchTimeout" scope="instance" visibility="private">
			<description>Returns the group's fetch method, with the proper closure, for use with setTimeout</description>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>group's fetch method</return-description>
		</method>
		<method name="registerSrcImage" scope="instance">
			<description>Registers a src image with the group</description>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			<parameter name="width" type="Int" usage="required">
				<description>	pixel width of the image - defaults to image's natural size</description>
			</parameter>
			<parameter name="height" type="Int" usage="required">
				<description>	pixel height of the image - defaults to image's natural size</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>srcImgObj that was registered, for modifying any attributes in the object</return-description>
		</method>
		<method name="registerPngBgImage" scope="instance">
			<description>Registers an alpha-channel-type png background image with the group</description>
			<parameters>
			<parameter name="domId" type="String" usage="required">
				<description>	HTML DOM id of the image element</description>
			</parameter>
			<parameter name="url" type="String" usage="required">
				<description>	URL for the image</description>
			</parameter>
			<parameter name="ailProps" type="Object" usage="required">
				<description> The AlphaImageLoader properties to be set for the image Valid properties are 'sizingMethod' and 'enabled'</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>pngBgImgObj that was registered, for modifying any attributes in the object</return-description>
		</method>
		<method name="_onloadTasks" scope="instance" visibility="private">
			<description>Setup to do in the window's onload Initiates time limit for group; executes the fold check for the images</description>
		</method>
		<method name="_foldCheck" scope="instance" visibility="private">
			<description>Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately.</description>
		</method>
		<method name="fetch" scope="instance">
			<description>Displays the images in the group</description>
		</method>
		<method name="_fetchByClass" scope="instance" visibility="private">
			<description>Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.XHRDataSource" superclass="YAHOO.util.DataSourceBase">
		<description>XHRDataSource class for accessing remote data via the YUI Connection Manager
Utility</description>
		<constructors>
		<constructor scope="instance">
			<description>XHRDataSource class for accessing remote data via the YUI Connection Manager
Utility</description>
			<return-types>
				<return-type type="YAHOO.util.XHRDataSource" />
			</return-types>
			<parameters>
			<parameter name="oLiveData" type="HTMLElement" usage="required">
				<description>   Pointer to live data.</description>
			</parameter>
			<parameter name="oConfigs" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="connTimeout" type="Number" scope="instance">
			<description>The connection timeout defines how many milliseconds the XHR connection will wait for a server response. Any non-zero value will enable the Connection Manager's Auto-Abort feature.</description>
		</property>
		<property name="connMethodPost" type="Boolean" scope="instance">
			<description>True if data is to be sent via POST. By default, data will be sent via GET.</description>
		</property>
		<property name="_xhrCallback" type="undefined" scope="instance" visibility="private">
			<description>Define Connection Manager callback object</description>
		</property>
		<property name="connXhrMode" type="String" scope="instance">
			<description>Defines request/response management in the following manner: &lt;dl&gt; &lt;dt&gt;queueRequests&lt;/dt&gt; &lt;dd&gt;If a request is already in progress, wait until response is returned before sending the next request.&lt;/dd&gt; &lt;dt&gt;cancelStaleRequests&lt;/dt&gt; &lt;dd&gt;If a request is already in progress, cancel it before sending the next request.&lt;/dd&gt; &lt;dt&gt;ignoreStaleResponses&lt;/dt&gt; &lt;dd&gt;Send all requests, but handle only the response for the most recently sent request.&lt;/dd&gt; &lt;dt&gt;allowAll&lt;/dt&gt; &lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt; &lt;/dl&gt;</description>
		</property>
		<property name="connMgr" type="Object" scope="instance">
			<description>Alias to YUI Connection Manager, to allow implementers to use a custom class.</description>
		</property>
		</properties>
		<methods>
		<method name="_xhrFailure" scope="instance" visibility="private">
			<description>Define Connection Manager failure handler</description>
			<parameters>
			<parameter name="oResponse" type="Object" usage="required">
				<description> HTTPXMLRequest object</description>
			</parameter>
			</parameters>
		</method>
		<method name="_xhrSuccess" scope="instance" visibility="private">
			<description>Define Connection Manager success handler</description>
			<parameters>
			<parameter name="oResponse" type="Object" usage="required">
				<description> HTTPXMLRequest object</description>
			</parameter>
			</parameters>
		</method>
		<method name="makeConnection" scope="instance">
			<description>Overriding method passes query to Connection Manager. The returned response is then forwarded to the handleResponse function.</description>
			<parameters>
			<parameter name="oRequest" type="Object" usage="required">
				<description> Request object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object literal.</description>
			</parameter>
			<parameter name="oCaller" type="Object" usage="required">
				<description> (deprecated) Use oCallback.scope.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Transaction ID.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO">
		<description>The YAHOO global namespace object.  If YAHOO is already defined, the
existing YAHOO object will not be overwritten so that defined
namespaces are preserved.</description>
		<methods>
		<method name="register" scope="static">
			<description>Registers a module with the YAHOO object</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description>  the name of the module (event, slider, etc)</description>
			</parameter>
			<parameter name="mainClass" type="Function" usage="required">
				<description> a reference to class in the module. This class will be tagged with the version info so that it will be possible to identify the version that is in use when multiple versions have loaded</description>
			</parameter>
			<parameter name="data" type="Object" usage="required">
				<description>   metadata object for the module. Currently it is expected to contain a &quot;version&quot; property and a &quot;build&quot; property at minimum.</description>
			</parameter>
			</parameters>
		</method>
		<method name="namespace" scope="static">
			<description>Returns the namespace specified and creates it if it doesn't exist &lt;pre&gt; YAHOO.namespace(&quot;property.package&quot;); YAHOO.namespace(&quot;YAHOO.property.package&quot;); &lt;/pre&gt; Either of the above would create YAHOO.property, then YAHOO.property.package Be careful when naming packages. Reserved words may work in some browsers and not others. For instance, the following will fail in Safari: &lt;pre&gt; YAHOO.namespace(&quot;really.long.nested.namespace&quot;); &lt;/pre&gt; This fails because &quot;long&quot; is a future reserved word in ECMAScript For implementation code that uses YUI, do not create your components in the namespaces defined by YUI ( &lt;code&gt;YAHOO.util&lt;/code&gt;, &lt;code&gt;YAHOO.widget&lt;/code&gt;, &lt;code&gt;YAHOO.lang&lt;/code&gt;, &lt;code&gt;YAHOO.tool&lt;/code&gt;, &lt;code&gt;YAHOO.example&lt;/code&gt;, &lt;code&gt;YAHOO.env&lt;/code&gt;) -- create your own namespace (e.g., 'companyname').</description>
			<parameters>
			<parameter name="arguments" type="String*" usage="required">
				<description> 1-n namespaces to create</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>A reference to the last namespace object created</return-description>
		</method>
		<method name="extend" scope="static">
			<description>An alias for YAHOO.lang.extend</description>
			<parameters>
			<parameter name="subc" type="Function" usage="required">
				<description>  the object to modify</description>
			</parameter>
			<parameter name="superc" type="Function" usage="required">
				<description> the object to inherit</description>
			</parameter>
			<parameter name="overrides" type="Object" usage="required">
				<description> additional properties/methods to add to the subclass prototype. These will override the matching items obtained from the superclass if present.</description>
			</parameter>
			</parameters>
		</method>
		<method name="augment" scope="static">
			<description>An alias for YAHOO.lang.augment</description>
			<parameters>
			<parameter name="r" type="Function" usage="required">
				<description> the object to receive the augmentation</description>
			</parameter>
			<parameter name="s" type="Function" usage="required">
				<description> the object that supplies the properties to augment</description>
			</parameter>
			<parameter name="arguments" type="String*" usage="required">
				<description> zero or more properties methods to augment the receiver with. If none specified, everything in the supplier will be used unless it would overwrite an existing property in the receiver</description>
			</parameter>
			</parameters>
		</method>
		<method name="log" scope="static">
			<description>Uses YAHOO.widget.Logger to output a log message, if the widget is available.</description>
			<parameters>
			<parameter name="msg" type="String" usage="required">
				<description> The message to log.</description>
			</parameter>
			<parameter name="cat" type="String" usage="required">
				<description> The log category for the message. Default categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;. Custom categories can be used as well. (opt)</description>
			</parameter>
			<parameter name="src" type="String" usage="required">
				<description> The source of the the message (opt)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the log operation was successful.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Event">
		<description>The event utility provides functions to add and remove event listeners,
event cleansing.  It also tries to automatically remove listeners it
registers during the unload event.</description>
		<properties>
		<property name="isSafari" type="undefined" scope="static" visibility="private">
			<description>Safari detection</description>
		</property>
		<property name="CAPTURE" type="int" scope="static">
			<description>The original capture parameter passed into addListener</description>
		</property>
		<property name="WFN" type="int" scope="static">
			<description>Function wrapped for context correction and cleanup, int constant</description>
		</property>
		<property name="throwErrors" type="boolean" scope="instance">
			<description>Errors thrown by subscribers of custom events are caught and the error message is written to the debug console. If this property is set to true, it will also re-throw the error.</description>
		</property>
		<property name="FN" type="int" scope="static">
			<description>Function to execute, int constant</description>
		</property>
		<property name="DOMReady" type="boolean" scope="static">
			<description>True when the document is initially usable</description>
		</property>
		<property name="POLL_RETRYS" type="int" scope="static">
			<description>The number of times we should look for elements that are not in the DOM at the time the event is requested after the document has been loaded. The default is 500@amp;40 ms, so it will poll for 20 seconds or until all outstanding handlers are bound (whichever comes first).</description>
		</property>
		<property name="listeners" type="array" scope="static" visibility="private">
			<description>Cache of wrapped listeners</description>
		</property>
		<property name="_specialTypes" type="undefined" scope="static" visibility="private">
			<description>Map of special event types</description>
		</property>
		<property name="unloadListeners" type="array" scope="static" visibility="private">
			<description>User-defined unload function that will be fired before all events are detached</description>
		</property>
		<property name="OVERRIDE" type="int" scope="static">
			<description>The original context parameter passed into addListener</description>
		</property>
		<property name="EL" type="int" scope="static">
			<description>Element to bind, int constant</description>
		</property>
		<property name="OBJ" type="int" scope="static">
			<description>Object passed in by the user that will be returned as a parameter to the callback, int constant. Specific to unload listeners</description>
		</property>
		<property name="elCache
DOM element cache" type="undefined" scope="static" visibility="private"/>
		<property name="_interval" type="undefined" scope="static" visibility="private">
			<description>poll handle</description>
		</property>
		<property name="webkit" type="string" scope="static" visibility="private">
			<description>webkit version</description>
		</property>
		<property name="loadComplete" type="boolean" scope="static" visibility="private">
			<description>True after the onload event has fired</description>
		</property>
		<property name="webkitKeymap" type="{int: int}" scope="static" visibility="private">
			<description>Normalized keycodes for webkit/safari</description>
		</property>
		<property name="_dri" type="undefined" scope="static" visibility="private">
			<description>document readystate poll handle</description>
		</property>
		<property name="counter" type="undefined" scope="static" visibility="private">
			<description>Counter for auto id generation</description>
		</property>
		<property name="POLL_INTERVAL" type="int" scope="static">
			<description>The poll interval in milliseconds</description>
		</property>
		<property name="ADJ_SCOPE" type="int" scope="static">
			<description>Adjusted context, either the element we are registering the event on or the custom object passed in by the listener, int constant</description>
		</property>
		<property name="onAvailStack" type="undefined" scope="static" visibility="private">
			<description>onAvailable listeners</description>
		</property>
		<property name="isIE" type="undefined" scope="static" visibility="private">
			<description>IE detection</description>
		</property>
		<property name="retryCount" type="undefined" scope="static" visibility="private">
			<description>The number of times to poll after window.onload. This number is increased if additional late-bound handlers are requested after the page load.</description>
		</property>
		<property name="lastError" type="Error" scope="static">
			<description>addListener/removeListener can throw errors in unexpected scenarios. These errors are suppressed, the method returns false, and this property is set</description>
		</property>
		<property name="TYPE" type="int" scope="static">
			<description>Type of event, int constant</description>
		</property>
		</properties>
		<methods>
		<method name="regCE" scope="static" visibility="private">
			<description>Used by old versions of CustomEvent, restored for backwards compatibility</description>
		</method>
		<method name="_simpleRemove" scope="static" visibility="private">
			<description>Basic remove listener</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>   the element to bind the handler to</description>
			</parameter>
			<parameter name="sType" type="string" usage="required">
				<description>  the type of event handler</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description>   the callback to invoke</description>
			</parameter>
			<parameter name="capture" type="boolen" usage="required">
				<description> capture or bubble phase</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getScrollLeft" scope="static" visibility="private">
			<description>Returns scrollLeft</description>
		</method>
		<method name="getTime" scope="static">
			<description>Returns the time of the event. If the time is not included, the event is modified using the current time.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>the time of the event</return-description>
		</method>
		<method name="addBlurListener" scope="static">
			<description>Attaches a focusout event listener to the specified element for the purpose of listening for the blur event on the element's descendants.</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the handler</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the obj passed in becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the action was successful or defered,
false if one or more of the elements 
could not have the listener attached,
or if the operation throws an exception.</return-description>
		</method>
		<method name="generateId" scope="static">
			<description>Generates an unique ID for the element if it does not already have one.</description>
			<parameters>
			<parameter name="el" type="" usage="required">
				<description> the element to create the id for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the resulting id of the element</return-description>
		</method>
		<method name="getTarget" scope="static">
			<description>Returns the event's target element. Safari sometimes provides a text node, and this is automatically resolved to the text node's parent so that it behaves like other browsers.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			<parameter name="resolveTextNode" type="boolean" usage="required">
				<description> when set to true the target's parent will be returned if the target is a text node. @deprecated, the text node is now resolved automatically</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the event's target</return-description>
		</method>
		<method name="_createDelegate" scope="static" visibility="private">
			<description>Creates a delegate function used to call event listeners specified via the &lt;code&gt;YAHOO.util.Event.delegate&lt;/code&gt; method.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method (event listener) to call.</description>
			</parameter>
			<parameter name="filter" type="Function|string" usage="required">
				<description> Function or CSS selector used to determine for what element(s) the event listener should be called.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>	An arbitrary object that will be passed as a parameter to the listener.</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the value of the obj parameter becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>Function that will call the event listener 
specified by the &lt;code&gt;YAHOO.util.Event.delegate&lt;/code&gt; method.</return-description>
		</method>
		<method name="removeDelegate" scope="static">
			<description>Removes a delegated event listener.</description>
			<parameters>
			<parameter name="container" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to remove the listener from.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description> The type of event to remove.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> The method the event invokes. If fn is undefined, then all event listeners for the type of event are removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Returns true if the unbind was successful, false 
otherwise.</return-description>
		</method>
		<method name="stopPropagation" scope="static">
			<description>Stops event propagation</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCharCode" scope="static">
			<description>Returns the charcode for an event</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the event's charCode</return-description>
		</method>
		<method name="_getType" scope="instance" visibility="private">
			<description>Checks to see if the type requested is a special type (as defined by the _specialTypes hash), and (if so) returns the special type name.</description>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description>   The type to look up</description>
			</parameter>
			</parameters>
		</method>
		<method name="_simpleAdd" scope="static" visibility="private">
			<description>Adds a DOM event directly without the caching, cleanup, context adj, etc</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>   the element to bind the handler to</description>
			</parameter>
			<parameter name="sType" type="string" usage="required">
				<description>  the type of event handler</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description>   the callback to invoke</description>
			</parameter>
			<parameter name="capture" type="boolen" usage="required">
				<description> capture or bubble phase</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isValidCollection" scope="static" visibility="private">
			<description>We want to be able to use getElementsByTagName as a collection to attach a group of events to. Unfortunately, different browsers return different types of collections. This function tests to determine if the object is array-like. It will also fail if the object is an array, but is empty.</description>
			<parameters>
			<parameter name="o" type="" usage="required">
				<description> the object to test</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the object is array-like and populated</return-description>
		</method>
		<method name="getEl" scope="static" visibility="private">
			<description>We cache elements bound by id because when the unload event fires, we can no longer use document.getElementById</description>
		</method>
		<method name="_load" scope="static" visibility="private">
			<description>hook up any deferred listeners</description>
		</method>
		<method name="resolveTextNode" scope="static">
			<description>In some cases, some browsers will return a text node inside the actual element that was targeted. This normalizes the return value for getTarget and getRelatedTarget.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> node to resolve</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the normized node</return-description>
		</method>
		<method name="stopEvent" scope="static">
			<description>Convenience method for stopPropagation + preventDefault</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="addFocusListener" scope="static">
			<description>Attaches a focusin event listener to the specified element for the purpose of listening for the focus event on the element's descendants.</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the handler</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the obj passed in becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the action was successful or defered,
false if one or more of the elements 
could not have the listener attached,
or if the operation throws an exception.</return-description>
		</method>
		<method name="getXY" scope="static">
			<description>Returns the pageX and pageY properties as an indexed array.</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="[x, y]" />
			</return-types>
			<return-description>the pageX and pageY properties of the event</return-description>
		</method>
		<method name="addListener" scope="static">
			<description>Appends an event handler</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description>   The type of event to append</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the handler</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the obj passed in becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the action was successful or defered,
false if one or more of the elements 
could not have the listener attached,
or if the operation throws an exception.</return-description>
		</method>
		<method name="_createMouseDelegate" scope="static" visibility="private">
			<description>Creates a delegate function used to call mouseover and mouseleave event listeners specified via the &lt;code&gt;YAHOO.util.Event.addListener&lt;/code&gt; or &lt;code&gt;YAHOO.util.Event.on&lt;/code&gt; method.</description>
			<parameters>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method (event listener) to call</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the listener</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the value of the obj parameter becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Function" />
			</return-types>
			<return-description>Function that will call the event listener 
specified by either the &lt;code&gt;YAHOO.util.Event.addListener&lt;/code&gt; 
or &lt;code&gt;YAHOO.util.Event.on&lt;/code&gt; method.</return-description>
		</method>
		<method name="_unload" scope="static" visibility="private">
			<description>Removes all listeners registered by pe.event. Called automatically during the unload event.</description>
		</method>
		<method name="_tryPreloadAttach" scope="static" visibility="private">
			<description>Polling function that runs before the onload event fires, attempting to attach to DOM Nodes as soon as they are available</description>
		</method>
		<method name="onBlur" scope="static">
			<description>YAHOO.util.Event.onBlur is an alias for addBlurListener</description>
		</method>
		<method name="_getScrollTop" scope="static" visibility="private">
			<description>Returns scrollTop</description>
		</method>
		<method name="onContentReady" scope="static">
			<description>Works the same way as onAvailable, but additionally checks the state of sibling elements to determine if the content of the available element is safe to modify. &lt;p&gt;The callback is executed with a single parameter: the custom object parameter, if provided.&lt;/p&gt;</description>
			<parameters>
			<parameter name="id" type="string" usage="required">
				<description> the id of the element to look for.</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the element is ready.</description>
			</parameter>
			<parameter name="obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="overrideContext" type="boolean|object" usage="required">
				<description> If set to true, fn will execute in the context of obj. If an object, fn will exectute in the context of that object</description>
			</parameter>
			</parameters>
		</method>
		<method name="startInterval" scope="static" visibility="private">
		</method>
		<method name="onAvailable" scope="static">
			<description>Executes the supplied callback when the item with the supplied id is found. This is meant to be used to execute behavior as soon as possible as the page loads. If you use this after the initial page load it will poll for a fixed time for the element. The number of times it will poll and the frequency are configurable. By default it will poll for 10 seconds. &lt;p&gt;The callback is executed with a single parameter: the custom object parameter, if provided.&lt;/p&gt;</description>
			<parameters>
			<parameter name="id" type="string||string[]" usage="required">
				<description> the id of the element, or an array of ids to look for.</description>
			</parameter>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the element is found.</description>
			</parameter>
			<parameter name="obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="overrideContext" type="boolean|object" usage="required">
				<description> If set to true, fn will execute in the context of obj, if set to an object it will execute in the context of that object</description>
			</parameter>
			<parameter name="checkContent" type="boolean" usage="required">
				<description> check child node readiness (onContentReady)</description>
			</parameter>
			</parameters>
		</method>
		<method name="onFocus" scope="static">
			<description>YAHOO.util.Event.onFocus is an alias for addFocusListener</description>
		</method>
		<method name="clearCache" scope="static" visibility="private">
			<description>Clears the element cache</description>
		</method>
		<method name="removeListener" scope="static">
			<description>Removes an event listener</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to remove the listener from.</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description> the type of event to remove.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the method the event invokes. If fn is undefined, then all event handlers for the type of event are removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the unbind was successful, false 
otherwise.</return-description>
		</method>
		<method name="removeBlurListener" scope="static">
			<description>Removes a focusout event listener to the specified element for the purpose of listening for the blur event on the element's descendants.</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to remove the listener from.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the method the event invokes. If fn is undefined, then all event handlers for the type of event are removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the unbind was successful, false 
otherwise.</return-description>
		</method>
		<method name="onDOMReady" scope="static">
			<description>Executes the supplied callback when the DOM is first usable. This will execute immediately if called after the DOMReady event has fired.  @todo the DOMContentReady event does not fire when the script is dynamically injected into the page. This means the DOMReady custom event will never fire in FireFox or Opera when the library is injected. It _will_ fire in Safari, and the IE implementation would allow for us to fire it if the defered script is not available. We want this to behave the same in all browsers. Is there a way to identify when the script has been injected instead of included inline? Is there a way to know whether the window onload event has fired without having had a listener attached to it when it did so? &lt;p&gt;The callback is a CustomEvent, so the signature is:&lt;/p&gt; &lt;p&gt;type &amp;lt;string&amp;gt;, args &amp;lt;array&amp;gt;, customobject &amp;lt;object&amp;gt;&lt;/p&gt; &lt;p&gt;For DOMReady events, there are no fire argments, so the signature is:&lt;/p&gt; &lt;p&gt;&quot;DOMReady&quot;, [], obj&lt;/p&gt;</description>
			<parameters>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the element is found.</description>
			</parameter>
			<parameter name="obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="overrideContext" type="boolean|object" usage="required">
				<description> If set to true, fn will execute in the context of obj, if set to an object it will execute in the context of that object</description>
			</parameter>
			</parameters>
		</method>
		<method name="on" scope="static">
			<description>YAHOO.util.Event.on is an alias for addListener</description>
		</method>
		<method name="_getScroll" scope="static" visibility="private">
			<description>Returns the scrollTop and scrollLeft. Used to calculate the pageX and pageY in Internet Explorer</description>
		</method>
		<method name="getListeners" scope="static">
			<description>Returns all listeners attached to the given element via addListener. Optionally, you can specify a specific type of event to return.</description>
			<parameters>
			<parameter name="el" type="HTMLElement|string" usage="required">
				<description> the element or element id to inspect</description>
			</parameter>
			<parameter name="sType" type="string" usage="required">
				<description> optional type of listener to return. If left out, all listeners will be returned</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>the listener. Contains the following fields:
&amp;nbsp;&amp;nbsp;type:   (string)   the type of event
&amp;nbsp;&amp;nbsp;fn:     (function) the callback supplied to addListener
&amp;nbsp;&amp;nbsp;obj:    (object)   the custom object supplied to addListener
&amp;nbsp;&amp;nbsp;adjust: (boolean|object)  whether or not to adjust the default context
&amp;nbsp;&amp;nbsp;scope: (boolean)  the derived context based on the adjust parameter
&amp;nbsp;&amp;nbsp;index:  (int)      its position in the Event util listener cache</return-description>
		</method>
		<method name="getEvent" scope="static">
			<description>Finds the event in the window object, the caller's arguments, or in the arguments of another method in the callstack. This is executed automatically for events registered through the event manager, so the implementer should not normally need to execute this function at all.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> the event parameter from the handler</description>
			</parameter>
			<parameter name="boundEl" type="HTMLElement" usage="required">
				<description> the element the listener is attached to</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Event" />
			</return-types>
			<return-description>the event</return-description>
		</method>
		<method name="purgeElement" scope="static">
			<description>Removes all listeners attached to the given element via addListener. Optionally, the node's children can also be purged. Optionally, you can specify a specific type of event to remove.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to purge</description>
			</parameter>
			<parameter name="recurse" type="boolean" usage="required">
				<description> recursively purge this element's children as well. Use with caution.</description>
			</parameter>
			<parameter name="sType" type="string" usage="required">
				<description> optional type of listener to purge. If left out, all listeners will be removed</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addListener" scope="static" visibility="private">
			<description>Appends an event handler</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description>   The type of event to append</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the handler</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the obj passed in becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			<parameter name="capture" type="boolen" usage="required">
				<description> capture or bubble phase</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if the action was successful or defered,
false if one or more of the elements 
could not have the listener attached,
or if the operation throws an exception.</return-description>
		</method>
		<method name="preventDefault" scope="static">
			<description>Prevents the default behavior of the event</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
		</method>
		<method name="_getCacheIndex" scope="static" visibility="private">
			<description>Locating the saved event handler data by function ref</description>
		</method>
		<method name="_ready" scope="static" visibility="private">
			<description>Fires the DOMReady event listeners the first time the document is usable.</description>
		</method>
		<method name="delegate" scope="static">
			<description>Appends a delegated event listener. Delegated event listeners receive three arguments by default: the DOM event, the element  specified by the filtering function or CSS selector, and the container element (the element to which the event listener is bound). (Note: Using the delegate method requires the event-delegate module. Using CSS selectors as the filtering criteria for delegated event listeners requires inclusion of the Selector Utility.)</description>
			<parameters>
			<parameter name="container" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to assign the listener to.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description>   The type of event listener to append</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description>    The method the event invokes</description>
			</parameter>
			<parameter name="filter" type="Function|string" usage="required">
				<description> Function or CSS selector used to determine for what element(s) the event listener should be called. When a function is specified, the function should return an HTML element. Using a CSS Selector requires the inclusion of the CSS Selector Utility.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description>  An arbitrary object that will be passed as a parameter to the listener</description>
			</parameter>
			<parameter name="overrideContext" type="Boolean|object" usage="required">
				<description> If true, the value of the obj parameter becomes the execution context of the listener. If an object, this object becomes the execution context.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if the action was successful or defered,
false if one or more of the elements 
could not have the listener attached,
or if the operation throws an exception.</return-description>
		</method>
		<method name="getPageY" scope="static">
			<description>Returns the event's pageY</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the event's pageY</return-description>
		</method>
		<method name="getPageX" scope="static">
			<description>Returns the event's pageX</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>the event's pageX</return-description>
		</method>
		<method name="removeFocusListener" scope="static">
			<description>Removes a focusin event listener to the specified element for the purpose of listening for the focus event on the element's descendants.</description>
			<parameters>
			<parameter name="el" type="String|HTMLElement|Array|NodeList" usage="required">
				<description> An id, an element reference, or a collection of ids and/or elements to remove the listener from.</description>
			</parameter>
			<parameter name="fn" type="Function" usage="required">
				<description> the method the event invokes. If fn is undefined, then all event handlers for the type of event are removed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if the unbind was successful, false 
otherwise.</return-description>
		</method>
		<method name="getRelatedTarget" scope="static">
			<description>Returns the event's related target</description>
			<parameters>
			<parameter name="ev" type="Event" usage="required">
				<description> the event</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>the event's relatedTarget</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Dom">
		<description>Provides helper methods for DOM elements.</description>
		<methods>
		<method name="getElementsBy" scope="instance">
			<description>Returns an array of HTMLElements that pass the test applied by supplied boolean method. For optimized performance, include a tag and/or root node when possible. Note: This method operates against a live collection, so modifying the collection in the callback (removing/appending nodes, etc.) will have side effects. Instead you should iterate the returned nodes array, as you would with the native &quot;getElementsByTagName&quot; method.</description>
			<parameters>
			<parameter name="method" type="Function" usage="required">
				<description> - A boolean method for testing elements which receives the element as its only argument.</description>
			</parameter>
			<parameter name="tag" type="String" usage="optional">
				<description> (optional) The tag name of the elements being collected</description>
			</parameter>
			<parameter name="root" type="String | HTMLElement" usage="optional">
				<description> (optional) The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			<parameter name="apply" type="Function" usage="optional">
				<description> (optional) A function to apply to each element when found</description>
			</parameter>
			<parameter name="o" type="Any" usage="optional">
				<description> (optional) An optional arg that is passed to the supplied method</description>
			</parameter>
			<parameter name="overrides" type="Boolean" usage="optional">
				<description> (optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Array of HTMLElements</return-description>
		</method>
		<method name="getAttribute" scope="instance">
			<description>Provides a normalized attribute interface.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> The target element for the attribute.</description>
			</parameter>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to get.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The current value of the attribute.</return-description>
		</method>
		<method name="generateId" scope="instance">
			<description>Returns an ID and applies it to the element &quot;el&quot;, if provided.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="optional">
				<description> (optional) An optional element array of elements to add an ID to (no ID is added if one is already present).</description>
			</parameter>
			<parameter name="prefix" type="String" usage="optional">
				<description> (optional) an optional prefix to use (defaults to &quot;yui-gen&quot;).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String | Array" />
			</return-types>
			<return-description>The generated ID, or array of generated IDs (or original ID if already present on an element)</return-description>
		</method>
		<method name="getDocumentWidth" scope="instance">
			<description>Returns the width of the document.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The width of the actual document (which includes the body and its margin).</return-description>
		</method>
		<method name="setStyle" scope="instance">
			<description>Wrapper for setting style properties of HTMLElements. Normalizes &quot;opacity&quot; across modern browsers.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			<parameter name="property" type="String" usage="required">
				<description> The style property to be set.</description>
			</parameter>
			<parameter name="val" type="String" usage="required">
				<description> The value to apply to the given property.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getX" scope="instance">
			<description>Gets the current X position of an element based on page coordinates. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number | Array" />
			</return-types>
			<return-description>The X position of the element(s)</return-description>
		</method>
		<method name="getY" scope="instance">
			<description>Gets the current Y position of an element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number | Array" />
			</return-types>
			<return-description>The Y position of the element(s)</return-description>
		</method>
		<method name="getChildren" scope="instance">
			<description>Returns an array of HTMLElement childNodes.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>A static array of HTMLElements</return-description>
		</method>
		<method name="getFirstChild" scope="instance">
			<description>Returns the first HTMLElement child.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getClientRegion" scope="instance">
			<description>Creates a Region based on the viewport relative to the document.</description>
			<return-types>
			<return-type type="Region" />
			</return-types>
			<return-description>A Region object representing the viewport which accounts for document scroll</return-description>
		</method>
		<method name="getLastChildBy" scope="instance">
			<description>Returns the last HTMLElement child that passes the test method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to use as the starting point</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> A boolean function used to test children that receives the node being tested as its only argument</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getAncestorBy" scope="instance">
			<description>Returns the nearest ancestor that passes the test applied by supplied boolean method. For performance reasons, IDs are not accepted and argument validation omitted.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to use as the starting point</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> - A boolean method for testing elements which receives the element as its only argument.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="insertBefore" scope="instance">
			<description>Inserts the new node as the previous sibling of the reference node</description>
			<parameters>
			<parameter name="newNode" type="String | HTMLElement" usage="required">
				<description> The node to be inserted</description>
			</parameter>
			<parameter name="referenceNode" type="String | HTMLElement" usage="required">
				<description> The node to insert the new node before</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The node that was inserted (or null if insert fails)</return-description>
		</method>
		<method name="getElementBy" scope="instance">
			<description>Returns the first HTMLElement that passes the test applied by the supplied boolean method.</description>
			<parameters>
			<parameter name="method" type="Function" usage="required">
				<description> - A boolean method for testing elements which receives the element as its only argument.</description>
			</parameter>
			<parameter name="tag" type="String" usage="optional">
				<description> (optional) The tag name of the elements being collected</description>
			</parameter>
			<parameter name="root" type="String | HTMLElement" usage="optional">
				<description> (optional) The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="getPreviousSiblingBy" scope="instance">
			<description>Returns the previous sibling that is an HTMLElement. For performance reasons, IDs are not accepted and argument validation omitted. Returns the nearest HTMLElement sibling if no method provided.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to use as the starting point</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> A boolean function used to test siblings that receives the sibling node being tested as its only argument</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getElementsByClassName" scope="instance">
			<description>Returns an array of HTMLElements with the given class. For optimized performance, include a tag and/or root node when possible. Note: This method operates against a live collection, so modifying the collection in the callback (removing/appending nodes, etc.) will have side effects. Instead you should iterate the returned nodes array, as you would with the native &quot;getElementsByTagName&quot; method.</description>
			<parameters>
			<parameter name="className" type="String" usage="required">
				<description> The class name to match against</description>
			</parameter>
			<parameter name="tag" type="String" usage="optional">
				<description> (optional) The tag name of the elements being collected</description>
			</parameter>
			<parameter name="root" type="String | HTMLElement" usage="optional">
				<description> (optional) The HTMLElement or an ID to use as the starting point. This element is not included in the className scan.</description>
			</parameter>
			<parameter name="apply" type="Function" usage="optional">
				<description> (optional) A function to apply to each element when found</description>
			</parameter>
			<parameter name="o" type="Any" usage="optional">
				<description> (optional) An optional arg that is passed to the supplied method</description>
			</parameter>
			<parameter name="overrides" type="Boolean" usage="optional">
				<description> (optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of elements that have the given class name</return-description>
		</method>
		<method name="replaceClass" scope="instance">
			<description>Replace a class with another class for a given element or collection of elements. If no oldClassName is present, the newClassName is simply added.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> The element or collection to remove the class from</description>
			</parameter>
			<parameter name="oldClassName" type="String" usage="required">
				<description> the class name to be replaced</description>
			</parameter>
			<parameter name="newClassName" type="String" usage="required">
				<description> the class name that will be replacing the old class name</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean | Array" />
			</return-types>
			<return-description>A pass/fail boolean or array of booleans</return-description>
		</method>
		<method name="getNextSibling" scope="instance">
			<description>Returns the next sibling that is an HTMLElement</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getDocumentHeight" scope="instance">
			<description>Returns the height of the document.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The height of the actual document (which includes the body and its margin).</return-description>
		</method>
		<method name="getLastChild" scope="instance">
			<description>Returns the last HTMLElement child.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getClientHeight" scope="instance">
			<description>Returns the height of the client (viewport).</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The height of the viewable area of the page.</return-description>
		</method>
		<method name="inDocument" scope="instance">
			<description>Determines whether an HTMLElement is present in the current document.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> The element to search for</description>
			</parameter>
			<parameter name="doc" type="Object" usage="required">
				<description> An optional document to search, defaults to element's owner document</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the element is present in the current document</return-description>
		</method>
		<method name="insertAfter" scope="instance">
			<description>Inserts the new node as the next sibling of the reference node</description>
			<parameters>
			<parameter name="newNode" type="String | HTMLElement" usage="required">
				<description> The node to be inserted</description>
			</parameter>
			<parameter name="referenceNode" type="String | HTMLElement" usage="required">
				<description> The node to insert the new node after</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>The node that was inserted (or null if insert fails)</return-description>
		</method>
		<method name="getViewportHeight" scope="instance">
			<description>Returns the current height of the viewport.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The height of the viewable area of the page (excludes scrollbars).</return-description>
		</method>
		<method name="addClass" scope="instance">
			<description>Adds a class name to a given element or collection of elements.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> The element or collection to add the class to</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to add to the class attribute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean | Array" />
			</return-types>
			<return-description>A pass/fail boolean or array of booleans</return-description>
		</method>
		<method name="getAncestorByClassName" scope="instance">
			<description>Returns the nearest ancestor with the given className.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			<parameter name="className" type="String" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="getViewportWidth" scope="instance">
			<description>Returns the current width of the viewport.</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The width of the viewable area of the page (excludes scrollbars).</return-description>
		</method>
		<method name="get" scope="instance">
			<description>Returns an HTMLElement reference.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement |Array" usage="required">
				<description> Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement | Array" />
			</return-types>
			<return-description>A DOM reference to an HTML element or an array of HTMLElements.</return-description>
		</method>
		<method name="removeClass" scope="instance">
			<description>Removes a class name from a given element or collection of elements.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> The element or collection to remove the class from</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to remove from the class attribute</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean | Array" />
			</return-types>
			<return-description>A pass/fail boolean or array of booleans</return-description>
		</method>
		<method name="getStyle" scope="instance">
			<description>Normalizes currentStyle and ComputedStyle.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement |Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			<parameter name="property" type="String" usage="required">
				<description> The style property whose value is returned.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String | Array" />
			</return-types>
			<return-description>The current value of the style property for the element(s).</return-description>
		</method>
		<method name="setXY" scope="instance">
			<description>Set the position of an html element in page coordinates, regardless of how the element is positioned. The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements</description>
			</parameter>
			<parameter name="pos" type="Array" usage="required">
				<description> Contains X &amp; Y values for new position (coordinates are page-based)</description>
			</parameter>
			<parameter name="noRetry" type="Boolean" usage="required">
				<description> By default we try and set the position a second time if the first fails</description>
			</parameter>
			</parameters>
		</method>
		<method name="getPreviousSibling" scope="instance">
			<description>Returns the previous sibling that is an HTMLElement</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getDocumentScrollTop" scope="instance">
			<description>Returns the top scroll value of the document</description>
			<parameters>
			<parameter name="document" type="HTMLDocument" usage="optional">
				<description> (optional) The document to get the scroll value of</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The amount that the document is scrolled to the top</return-description>
		</method>
		<method name="setX" scope="instance">
			<description>Set the X position of an html element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			<parameter name="x" type="Int" usage="required">
				<description> The value to use as the X coordinate for the element(s).</description>
			</parameter>
			</parameters>
		</method>
		<method name="setY" scope="instance">
			<description>Set the Y position of an html element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			<parameter name="x" type="Int" usage="required">
				<description> To use as the Y coordinate for the element(s).</description>
			</parameter>
			</parameters>
		</method>
		<method name="getXY" scope="instance">
			<description>Gets the current position of an element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>The XY position of the element(s)</return-description>
		</method>
		<method name="getFirstChildBy" scope="instance">
			<description>Returns the first HTMLElement child that passes the test method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to use as the starting point</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> A boolean function used to test children that receives the node being tested as its only argument</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getClientWidth" scope="instance">
			<description>Returns the width of the client (viewport).</description>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The width of the viewable area of the page.</return-description>
		</method>
		<method name="getNextSiblingBy" scope="instance">
			<description>Returns the next HTMLElement sibling that passes the boolean method. For performance reasons, IDs are not accepted and argument validation omitted. Returns the nearest HTMLElement sibling if no method provided.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to use as the starting point</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> A boolean function used to test siblings that receives the sibling node being tested as its only argument</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement or null if not found</return-description>
		</method>
		<method name="getRegion" scope="instance">
			<description>Returns the region position of the given element. The element must be part of the DOM tree to have a region (display:none or elements not appended return false).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Region | Array" />
			</return-types>
			<return-description>A Region or array of Region instances containing &quot;top, left, bottom, right&quot; member data.</return-description>
		</method>
		<method name="setAttribute" scope="instance">
			<description>Provides a normalized attribute interface.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement" usage="required">
				<description> The target element for the attribute.</description>
			</parameter>
			<parameter name="attr" type="String" usage="required">
				<description> The attribute to set.</description>
			</parameter>
			<parameter name="val" type="String" usage="required">
				<description> The value of the attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="batch" scope="instance">
			<description>Runs the supplied method against each item in the Collection/Array. The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="optional">
				<description> (optional) An element or array of elements to apply the method to</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> The method to apply to the element(s)</description>
			</parameter>
			<parameter name="o" type="Any" usage="optional">
				<description> (optional) An optional arg that is passed to the supplied method</description>
			</parameter>
			<parameter name="overrides" type="Boolean" usage="optional">
				<description> (optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Any | Array" />
			</return-types>
			<return-description>The return value(s) from the supplied method</return-description>
		</method>
		<method name="getChildrenBy" scope="instance">
			<description>Returns an array of HTMLElement childNodes that pass the test method.</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The HTMLElement to start from</description>
			</parameter>
			<parameter name="method" type="Function" usage="required">
				<description> A boolean function used to test children that receives the node being tested as its only argument</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>A static array of HTMLElements</return-description>
		</method>
		<method name="isAncestor" scope="instance">
			<description>Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.</description>
			<parameters>
			<parameter name="haystack" type="String | HTMLElement" usage="required">
				<description> The possible ancestor</description>
			</parameter>
			<parameter name="needle" type="String | HTMLElement" usage="required">
				<description> The possible descendent</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Whether or not the haystack is an ancestor of needle</return-description>
		</method>
		<method name="getDocumentScrollLeft" scope="instance">
			<description>Returns the left scroll value of the document</description>
			<parameters>
			<parameter name="document" type="HTMLDocument" usage="optional">
				<description> (optional) The document to get the scroll value of</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Int" />
			</return-types>
			<return-description>The amount that the document is scrolled to the left</return-description>
		</method>
		<method name="getAncestorByTagName" scope="instance">
			<description>Returns the nearest ancestor with the given tagName.</description>
			<parameters>
			<parameter name="node" type="String | HTMLElement" usage="required">
				<description> The HTMLElement or an ID to use as the starting point</description>
			</parameter>
			<parameter name="tagName" type="String" usage="required"/>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="hasClass" scope="instance">
			<description>Determines whether an HTMLElement has the given className.</description>
			<parameters>
			<parameter name="el" type="String | HTMLElement | Array" usage="required">
				<description> The element or collection to test</description>
			</parameter>
			<parameter name="className" type="String" usage="required">
				<description> the class name to search for</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean | Array" />
			</return-types>
			<return-description>A boolean value or array of boolean values</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TVFadeOut">
		<description>A 1/2 second fade out animation.</description>
		<constructors>
		<constructor scope="instance">
			<description>A 1/2 second fade out animation.</description>
			<return-types>
				<return-type type="YAHOO.widget.TVFadeOut" />
			</return-types>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description>  the element to animate</description>
			</parameter>
			<parameter name="callback" type="Function" usage="required">
				<description>  function to invoke when the animation is finished</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="el" type="HTMLElement" scope="instance">
			<description>The element to animate</description>
		</property>
		<property name="callback" type="function" scope="instance">
			<description>the callback to invoke when the animation is complete</description>
		</property>
		</properties>
		<methods>
		<method name="onComplete" scope="instance">
			<description>Clean up and invoke callback</description>
		</method>
		<method name="animate" scope="instance">
			<description>Performs the animation</description>
		</method>
		<method name="toString" scope="instance">
			<description>toString</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>the string representation of the instance</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.RadioCellEditor" superclass="YAHOO.widget.BaseCellEditor">
		<description>The RadioCellEditor class provides functionality for inline editing
DataTable cell data with radio buttons.</description>
		<constructors>
		<constructor scope="instance">
			<description>The RadioCellEditor class provides functionality for inline editing
DataTable cell data with radio buttons.</description>
			<return-types>
				<return-type type="YAHOO.widget.RadioCellEditor" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (Optional) Object literal of configs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="radioOptions" type="String[] | Object[]" scope="instance">
			<description>Array of radio values. Can either be a simple array (e.g., [&quot;yes&quot;,&quot;no&quot;,&quot;maybe&quot;]) or a an array of objects (e.g., [{label:&quot;yes&quot;, value:1}, {label:&quot;no&quot;, value:-1}, {label:&quot;maybe&quot;, value:0}]).</description>
		</property>
		<property name="radios" type="HTMLElement[]" scope="instance">
			<description>Reference to radio elements.</description>
		</property>
		</properties>
		<methods>
		<method name="renderForm" scope="instance">
			<description>Render a form with input(s) type=radio.</description>
		</method>
		<method name="handleDisabledBtns" scope="instance">
			<description>After rendering form, if disabledBtns is set to true, then sets up a mechanism to save input without them.</description>
		</method>
		<method name="getInputValue" scope="instance">
			<description>Retrieves input value from RadioCellEditor.</description>
		</method>
		<method name="focus" scope="instance">
			<description>Sets focus in RadioCellEditor.</description>
		</method>
		<method name="resetForm" scope="instance">
			<description>Resets RadioCellEditor UI to initial state.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.LastPageLink">
		<description>ui Component to generate the link to jump to the last page.</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the link to jump to the last page.</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.LastPageLink" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="current" type="HTMLElement" scope="instance" visibility="private">
			<description>Currently placed HTMLElement node</description>
		</property>
		<property name="span" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node (inactive link)</description>
		</property>
		<property name="link" type="HTMLElement" scope="instance" visibility="private">
			<description>Link HTMLElement node</description>
		</property>
		<property name="na" type="HTMLElement" scope="instance" visibility="private">
			<description>Empty place holder node for when the last page link is inappropriate to display in any form (unlimited paging).</description>
		</property>
		</properties>
		<methods>
		<method name="onClick" scope="instance">
			<description>Listener for the link's onclick event. Passes to setPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the link/span node and clears event listeners</description>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="paginator" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Swap the link, span, and na nodes if appropriate.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event (ignored)</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the appropriate node given the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Chart">
		<description>Chart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>Chart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.Chart" />
			</return-types>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description>  The char type. May be &quot;line&quot;, &quot;column&quot;, &quot;bar&quot;, or &quot;pie&quot;</description>
			</parameter>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_dataTipFunction" type="String" scope="instance" visibility="private">
			<description>Stores a reference to the dataTipFunction created by YAHOO.widget.Chart.createProxyFunction()</description>
		</property>
		<property name="_seriesFunctions" type="Array" scope="instance" visibility="private">
			<description>Stores references to series function values created by YAHOO.widget.Chart.createProxyFunction()</description>
		</property>
		<property name="_request" type="undefined" scope="instance" visibility="private">
			<description>Storage for the request attribute.</description>
		</property>
		<property name="_attributes" type="Object" scope="instance" visibility="private">
			<description>The initializing attributes are stored here until the SWF is ready.</description>
		</property>
		<property name="_pollingInterval" type="Number" scope="instance" visibility="private">
			<description>The time, in ms, between requests for data.</description>
		</property>
		<property name="_type" type="String" scope="instance" visibility="private">
			<description>The type of this chart instance.</description>
		</property>
		<property name="_legendLabelFunction" type="String" scope="instance" visibility="private">
			<description>Stores a reference to the legendLabelFunction created by YAHOO.widget.Chart.createProxyFunction()</description>
		</property>
		<property name="_id" type="String" scope="instance" visibility="private">
			<description>The id of this instance.</description>
		</property>
		<property name="_initialized" type="Boolean" scope="instance" visibility="private">
			<description>Indicates whether the SWF has been initialized and is ready to communicate with JavaScript</description>
		</property>
		<property name="_containerID" type="String" scope="instance" visibility="private">
			<description>The ID of the containing DIV.</description>
		</property>
		<property name="_swfEmbed" type="swf" scope="instance" visibility="private">
			<description>The javascript wrapper for the swf object</description>
		</property>
		<property name="_seriesDefs" type="undefined" scope="instance" visibility="private">
			<description>Storage for the series attribute.</description>
		</property>
		<property name="_dataSource" type="undefined" scope="instance" visibility="private">
			<description>Storage for the dataSource attribute.</description>
		</property>
		<property name="Chart.SWFURL" type="undefined" scope="static" visibility="private">
			<description>Storage for the dataTipFunction attribute.</description>
		</property>
		<property name="proxyFunctionCount" type="undefined" scope="static" visibility="private">
			<description>The number of proxy functions that have been created.</description>
		</property>
		<property name="_swfURL" type="String" scope="instance" visibility="private">
			<description>The URL of the SWF file.</description>
		</property>
		<property name="_pollingID" type="Number" scope="instance" visibility="private">
			<description>The id returned from the DataSource's setInterval function.</description>
		</property>
		<property name="_swf" type="undefined" scope="instance" visibility="private">
			<description>A reference to the embedded SWF file.</description>
		</property>
		</properties>
		<methods>
		<method name="_loadHandler" scope="instance" visibility="private">
			<description>Called when the SWF is ready for communication. Sets the type, initializes the styles, and sets the DataSource.</description>
		</method>
		<method name="_getDataSource" scope="instance" visibility="private">
			<description>Getter for the dataSource attribute.</description>
		</method>
		<method name="refreshData" scope="instance">
			<description>Sends (or resends) the request to the DataSource.</description>
		</method>
		<method name="_initAttributes" scope="instance" visibility="private">
			<description>Initializes the attributes.</description>
		</method>
		<method name="_setLegendLabelFunction" scope="instance" visibility="private">
			<description>Setter for the legendLabelFunction attribute.</description>
		</method>
		<method name="_setPolling" scope="instance" visibility="private">
			<description>Setter for the polling attribute.</description>
		</method>
		<method name="_getSeriesDefs" scope="instance" visibility="private">
			<description>Getter for the series attribute.</description>
		</method>
		<method name="_setCategoryNames" scope="instance" visibility="private">
			<description>Setter for the categoryNames attribute.</description>
		</method>
		<method name="setStyles" scope="instance">
			<description>Resets all styles on the Chart instance.</description>
			<parameters>
			<parameter name="styles" type="Object" usage="required">
				<description> Initializer for all Chart styles.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the Chart instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the Chart instance.</return-description>
		</method>
		<method name="_eventHandler" scope="instance" visibility="private">
			<description>Handles swfReady event from SWF.</description>
		</method>
		<method name="_getSWFURL" scope="instance" visibility="private">
			<description>Getter for swfURL attribute.</description>
		</method>
		<method name="_getRequest" scope="instance" visibility="private">
			<description>Getter for the request attribute.</description>
		</method>
		<method name="_setAltText" scope="instance" visibility="private">
			<description>Setter for altText attribute.</description>
		</method>
		<method name="_setDataTipFunction" scope="instance" visibility="private">
			<description>Setter for the dataTipFunction attribute.</description>
		</method>
		<method name="_setSeriesDefs" scope="instance" visibility="private">
			<description>Setter for the series attribute.</description>
		</method>
		<method name="_setRequest" scope="instance" visibility="private">
			<description>Setter for the request attribute.</description>
		</method>
		<method name="YAHOO.widget.Chart.getFunctionReference" scope="static" visibility="private">
			<description>Uses YAHOO.widget.Chart.createProxyFunction to return string reference to a function.</description>
		</method>
		<method name="_loadDataHandler" scope="instance" visibility="private">
			<description>Called when the DataSource receives new data. The series definitions are used to build a data provider for the SWF chart.</description>
		</method>
		<method name="_getAltText" scope="instance" visibility="private">
			<description>Getter for altText attribute.</description>
		</method>
		<method name="setSeriesStyles" scope="instance">
			<description>Sets the styles on all series in the Chart.</description>
			<parameters>
			<parameter name="styles" type="Array" usage="required">
				<description> Initializer for all Chart series styles.</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.Chart.createProxyFunction" scope="static" visibility="private">
			<description>Creates a globally accessible function that wraps a function reference. Returns the proxy function's name as a string for use by the SWF through ExternalInterface.</description>
		</method>
		<method name="_getPolling" scope="instance" visibility="private">
			<description>Getter for the polling attribute.</description>
		</method>
		<method name="_getCategoryNames" scope="instance" visibility="private">
			<description>Getter for the categoryNames attribute.</description>
		</method>
		<method name="setStyle" scope="instance">
			<description>Sets a single style value on the Chart instance.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> Name of the Chart style value to change.</description>
			</parameter>
			<parameter name="value" type="Object" usage="required">
				<description> New value to pass to the Chart style.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setDataSource" scope="instance" visibility="private">
			<description>Setter for the dataSource attribute.</description>
		</method>
		<method name="YAHOO.widget.Chart.removeProxyFunction" scope="static" visibility="private">
			<description>Removes a function created with createProxyFunction()</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.ColumnDD" superclass="YAHOO.util.DDProxy">
		<description>ColumnDD subclasses DragDrop to support rearrangeable Columns.</description>
		<constructors>
		<constructor scope="instance">
			<description>ColumnDD subclasses DragDrop to support rearrangeable Columns.</description>
			<return-types>
				<return-type type="YAHOO.util.ColumnDD" />
			</return-types>
			<parameters>
			<parameter name="oDataTable" type="YAHOO.widget.DataTable" usage="required">
				<description>  DataTable instance.</description>
			</parameter>
			<parameter name="oColumn" type="YAHOO.widget.Column" usage="required">
				<description>  Column instance.</description>
			</parameter>
			<parameter name="elTh" type="HTMLElement" usage="required">
				<description>  TH element reference.</description>
			</parameter>
			<parameter name="elTarget" type="HTMLElement" usage="required">
				<description>  Drag target element.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.RootNode" superclass="YAHOO.widget.Node">
		<description>A custom YAHOO.widget.Node that handles the unique nature of 
the virtual, presentationless root node.</description>
		<constructors>
		<constructor scope="instance">
			<description>A custom YAHOO.widget.Node that handles the unique nature of 
the virtual, presentationless root node.</description>
			<return-types>
				<return-type type="YAHOO.widget.RootNode" />
			</return-types>
			<parameters>
			<parameter name="oTree" type="YAHOO.widget.TreeView" usage="required">
				<description>  The tree instance this node belongs to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_type" type="string" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		</properties>
		<methods>
		<method name="getNodeCount" scope="instance">
			<description>Count of nodes in tree.  It overrides Nodes.getNodeCount because the root node should not be counted.</description>
			<return-types>
			<return-type type="int" />
			</return-types>
			<return-description>number of nodes in the tree</return-description>
		</method>
		<method name="getNodeDefinition" scope="instance">
			<description>Returns an object which could be used to build a tree out of this node and its children. It can be passed to the tree constructor to reproduce this node as a tree. Since the RootNode is automatically created by treeView, its own definition is excluded from the returned node definition which only contains its children.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the tree or false if any child node is defined as dynamic</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.TestNode">
		<description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
		<constructors>
		<constructor scope="instance">
			<description>A node in the test tree structure. May represent a TestSuite, TestCase, or
test function.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestNode" />
			</return-types>
			<parameters>
			<parameter name="testObject" type="Variant" usage="required">
				<description> A TestSuite, TestCase, or the name of a test function.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="testObject" type="Variant" scope="instance">
			<description>The TestSuite, TestCase, or test function represented by this node.</description>
		</property>
		<property name="parent" type="TestNode" scope="instance">
			<description>Pointer to this node's parent.</description>
		</property>
		<property name="results" type="object" scope="instance">
			<description>Test results for this test object.</description>
		</property>
		<property name="firstChild" type="TestNode" scope="instance">
			<description>Pointer to this node's first child.</description>
		</property>
		<property name="next" type="TestNode" scope="instance">
			<description>Pointer to this node's next sibling.</description>
		</property>
		<property name="lastChild" type="TestNode" scope="instance">
			<description>Pointer to this node's last child.</description>
		</property>
		</properties>
		<methods>
		<method name="appendChild" scope="instance">
			<description>Appends a new test object (TestSuite, TestCase, or test function name) as a child of this node.</description>
			<parameters>
			<parameter name="testObject" type="Variant" usage="required">
				<description> A TestSuite, TestCase, or the name of a test function.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ProfilerViewer" superclass="YAHOO.util.Element">
		<description>A widget to view YUI Profiler output.</description>
		<constructors>
		<constructor scope="instance">
			<description>A widget to view YUI Profiler output.</description>
			<return-types>
				<return-type type="YAHOO.widget.ProfilerViewer" />
			</return-types>
			<parameters>
			<parameter name="el(optional)" type="HTMLElement | String | Object" usage="required">
				<description> The html 
element into which the ProfileViewer should be rendered. 
An element will be created if none provided.</description>
			</parameter>
			<parameter name="attr" type="Object" usage="optional">
				<description> (optional) A key map of the ProfilerViewer's 
initial attributes.  Ignored if first arg is an attributes object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CLASS_CHART" type="string" scope="static">
			<description>Classname for element containing the chart.</description>
		</property>
		<property name="CLASS_BUSY" type="string" scope="static">
			<description>Classname for busy indicator in the dashboard.</description>
		</property>
		<property name="timeAxisLabelFunction" type="function" scope="static" visibility="private">
			<description>Function used to format numbers in milliseconds for chart; must be publicly accessible, per Charts spec.</description>
		</property>
		<property name="CLASS_CHART_LEGEND" type="string" scope="static">
			<description>Classname for element containing the chart's legend.</description>
		</property>
		<property name="CLASS_REFRESH" type="string" scope="static">
			<description>Classname for the &quot;refresh data&quot; button.</description>
		</property>
		<property name="CLASS_CHART_CONTAINER" type="string" scope="static">
			<description>Classname for element containing the chart and chart legend elements.</description>
		</property>
		<property name="percentAxisLabelFunction" type="function" scope="static" visibility="private">
			<description>Function used to format percent numbers for chart; must be publicly accessible, per Charts spec.</description>
		</property>
		<property name="CLASS_DASHBOARD" type="string" scope="static">
			<description>Classname for ProfilerViewer button dashboard.</description>
		</property>
		<property name="STRINGS" type="undefined" scope="static">
			<description>Strings used in the UI.</description>
		</property>
		<property name="CLASS" type="string" scope="static">
			<description>Classname for ProfilerViewer containing element.</description>
		</property>
		<property name="CLASS_TABLE" type="string" scope="static">
			<description>Classname for element containing the datatable.</description>
		</property>
		</properties>
		<methods>
		<method name="getDataTable" scope="instance">
			<description>Returns the element containing the console's DataTable instance.</description>
			<return-description>YAHOO.widget.DataTable</return-description>
		</method>
		<method name="show" scope="instance" visibility="private">
			<description>Shows the viewer canvas.</description>
			<return-description>void</return-description>
		</method>
		<method name="refreshData" scope="instance">
			<description>Refreshes the data displayed in the ProfilerViewer. When called, this will invoke a refresh of the DataTable and (if displayed) the Chart.</description>
			<return-description>void</return-description>
		</method>
		<method name="_initViewerDOM" scope="instance" visibility="private">
			<description>Set up the DOM structure for the ProfilerViewer canvas, including the holder for the DataTable.</description>
		</method>
		<method name="_drawChartLegend" scope="instance" visibility="private">
			<description>Set up the Chart's legend</description>
		</method>
		<method name="_dataTableRenderHandler" scope="instance" visibility="private">
			<description>Proxy the render event in DataTable into the ProfilerViewer attribute.</description>
		</method>
		<method name="initAttributes" scope="instance" visibility="private">
			<description>setAttributeConfigs TabView specific properties.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Hash of initial attributes</description>
			</parameter>
			</parameters>
		</method>
		<method name="getHeadEl" scope="instance">
			<description>Returns the element containing the console's header.</description>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="getChartEl" scope="instance">
			<description>Returns the element containing the console's chart.</description>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="_createButton" scope="instance" visibility="private">
			<description>Create anchor elements for use as buttons. Args: label is text to appear on the face of the button, parentEl is the el to which the anchor will be attached, position is true for inserting as the first node and false for inserting as the last node of the parentEl.</description>
		</method>
		<method name="_refreshDataTable" scope="instance" visibility="private">
			<description>Refresh DataTable, getting new data from Profiler.</description>
		</method>
		<method name="_sortedByChange" scope="instance" visibility="private">
			<description>Proxy the sort event in DataTable into the ProfilerViewer attribute.</description>
		</method>
		<method name="_initDataTable" scope="instance" visibility="private">
			<description>Set up the DataTable.</description>
		</method>
		<method name="_toggleVisible" scope="instance" visibility="private">
			<description>Toggles visibility of the viewer canvas.</description>
			<return-description>void</return-description>
		</method>
		<method name="getBodyEl" scope="instance">
			<description>Returns the element containing the console's body, including the chart and the datatable..</description>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="hide" scope="instance" visibility="private">
			<description>Hides the viewer canvas.</description>
			<return-description>void</return-description>
		</method>
		<method name="_initChart" scope="instance" visibility="private">
			<description>Set up the Chart.</description>
		</method>
		<method name="_getChartData" scope="instance" visibility="private">
			<description>Get data for the Chart from DataTable recordset</description>
		</method>
		<method name="toString" scope="instance" visibility="private">
			<description>Provides a readable name for the ProfilerViewer instance.</description>
			<return-description>String</return-description>
		</method>
		<method name="_sizeChartCanvas" scope="instance" visibility="private">
			<description>Resize the chart's canvas if based on number of records returned from the chart's datasource.</description>
		</method>
		<method name="getTableEl" scope="instance">
			<description>Returns the element containing the console's dataTable.</description>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="_thClickHandler" scope="instance" visibility="private">
			<description>Event handler for clicks on the DataTable's sortable column heads.</description>
		</method>
		<method name="_initLauncherDOM" scope="instance" visibility="private">
			<description>Set up the DOM structure for the ProfilerViewer launcher.</description>
		</method>
		<method name="_arraySum" scope="instance" visibility="private">
			<description>Utility function for array sums.</description>
		</method>
		<method name="_createProfilerViewerElement" scope="instance" visibility="private">
			<description>If no element is passed in, create it as the first element in the document.</description>
			<return-description>HTMLElement</return-description>
		</method>
		<method name="_getSeriesDef" scope="instance" visibility="private">
			<description>Build series definition based on current configuration attributes.</description>
		</method>
		<method name="_initChartDOM" scope="instance" visibility="private">
			<description>Set up the DOM structure for the ProfilerViewer canvas.</description>
		</method>
		<method name="_setBusyState" scope="instance" visibility="private">
			<description>Set's console busy state.</description>
		</method>
		<method name="_refreshChart" scope="instance" visibility="private">
			<description>Refresh chart, getting new data from table.</description>
		</method>
		<method name="_render" scope="instance" visibility="private">
			<description>Render the viewer canvas</description>
			<return-description>void</return-description>
		</method>
		<method name="_getProfilerData" scope="instance" visibility="private">
			<description>Retrieves data from Profiler, filtering and sorting as needed based on current widget state. Adds calculated percentage column and function name to data returned by Profiler.</description>
		</method>
		<method name="getChart" scope="instance">
			<description>Returns the element containing the console's Chart instance.</description>
			<return-description>YAHOO.widget.BarChart</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.DD" superclass="YAHOO.util.DragDrop">
		<description>A DragDrop implementation where the linked element follows the 
mouse cursor during a drag.</description>
		<constructors>
		<constructor scope="instance">
			<description>A DragDrop implementation where the linked element follows the 
mouse cursor during a drag.</description>
			<return-types>
				<return-type type="YAHOO.util.DD" />
			</return-types>
			<parameters>
			<parameter name="id" type="String" usage="required">
				<description> the id of the linked element</description>
			</parameter>
			<parameter name="sGroup" type="String" usage="required">
				<description> the group of related DragDrop items</description>
			</parameter>
			<parameter name="config" type="object" usage="required">
				<description> an object containing configurable attributes
Valid properties for DD: 
scroll</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="scroll" type="boolean" scope="instance">
			<description>When set to true, the utility automatically tries to scroll the browser window when a drag and drop element is dragged near the viewport boundary. Defaults to true.</description>
		</property>
		</properties>
		<methods>
		<method name="setDragElPos" scope="instance">
			<description>Sets the drag element to the location of the mousedown or click event, maintaining the cursor location relative to the location on the element that was clicked. Override this if you want to place the element in a location other than where the cursor is.</description>
			<parameters>
			<parameter name="iPageX" type="int" usage="required">
				<description> the X coordinate of the mousedown or drag event</description>
			</parameter>
			<parameter name="iPageY" type="int" usage="required">
				<description> the Y coordinate of the mousedown or drag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="alignElWithMouse" scope="instance">
			<description>Sets the element to the location of the mousedown or click event, maintaining the cursor location relative to the location on the element that was clicked. Override this if you want to place the element in a location other than where the cursor is.</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> the element to move</description>
			</parameter>
			<parameter name="iPageX" type="int" usage="required">
				<description> the X coordinate of the mousedown or drag event</description>
			</parameter>
			<parameter name="iPageY" type="int" usage="required">
				<description> the Y coordinate of the mousedown or drag event</description>
			</parameter>
			</parameters>
		</method>
		<method name="autoOffset" scope="instance">
			<description>Sets the pointer offset to the distance between the linked element's top left corner and the location the element was clicked</description>
			<parameters>
			<parameter name="iPageX" type="int" usage="required">
				<description> the X coordinate of the click</description>
			</parameter>
			<parameter name="iPageY" type="int" usage="required">
				<description> the Y coordinate of the click</description>
			</parameter>
			</parameters>
		</method>
		<method name="autoScroll" scope="instance" visibility="private">
			<description>Auto-scroll the window if the dragged object has been moved beyond the visible window boundary.</description>
			<parameters>
			<parameter name="x" type="int" usage="required">
				<description> the drag element's x position</description>
			</parameter>
			<parameter name="y" type="int" usage="required">
				<description> the drag element's y position</description>
			</parameter>
			<parameter name="h" type="int" usage="required">
				<description> the height of the drag element</description>
			</parameter>
			<parameter name="w" type="int" usage="required">
				<description> the width of the drag element</description>
			</parameter>
			</parameters>
		</method>
		<method name="setDelta" scope="instance">
			<description>Sets the pointer offset. You can call this directly to force the offset to be in a particular location (e.g., pass in 0,0 to set it to the center of the object, as done in YAHOO.widget.Slider)</description>
			<parameters>
			<parameter name="iDeltaX" type="int" usage="required">
				<description> the distance from the left</description>
			</parameter>
			<parameter name="iDeltaY" type="int" usage="required">
				<description> the distance from the top</description>
			</parameter>
			</parameters>
		</method>
		<method name="cachePosition" scope="instance">
			<description>Saves the most recent position so that we can reset the constraints and tick marks on-demand. We need to know this so that we can calculate the number of pixels the element is offset from its original position.</description>
			<parameters>
			<parameter name="iPageX" type="" usage="required">
				<description> the current x position (optional, this just makes it so we don't have to look it up again)</description>
			</parameter>
			<parameter name="iPageY" type="" usage="required">
				<description> the current y position (optional, this just makes it so we don't have to look it up again)</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.NextPageLink">
		<description>ui Component to generate the link to jump to the next page.</description>
		<constructors>
		<constructor scope="instance">
			<description>ui Component to generate the link to jump to the next page.</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.NextPageLink" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="current" type="HTMLElement" scope="instance" visibility="private">
			<description>Currently placed HTMLElement node</description>
		</property>
		<property name="span" type="HTMLElement" scope="instance" visibility="private">
			<description>Span node (inactive link)</description>
		</property>
		<property name="link" type="HTMLElement" scope="instance" visibility="private">
			<description>Link node</description>
		</property>
		</properties>
		<methods>
		<method name="onClick" scope="instance">
			<description>Listener for the link's onclick event. Passes to setPage method.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Removes the link/span node and clears event listeners</description>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Swap the link and span nodes if appropriate.</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the appropriate node given the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CartesianChart">
		<description>CartesianChart class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>CartesianChart class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.CartesianChart" />
			</return-types>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description>  The char type. May be &quot;line&quot;, &quot;column&quot;, or &quot;bar&quot;</description>
			</parameter>
			<parameter name="containerId" type="HTMLElement" usage="required">
				<description>  Container element for the Flash Player instance.</description>
			</parameter>
			<parameter name="dataSource" type="YAHOO.util.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="attributes" type="object" usage="optional">
				<description>  (optional) Object literal of configuration values.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_yAxisLabelFunctions" type="Array" scope="instance" visibility="private">
			<description>Stores a reference to the yAxis labelFunctions created by YAHOO.widget.Chart.createProxyFunction()</description>
		</property>
		<property name="_xAxisLabelFunctions" type="String" scope="instance" visibility="private">
			<description>Stores a reference to the xAxis labelFunction created by YAHOO.widget.Chart.createProxyFunction()</description>
		</property>
		</properties>
		<methods>
		<method name="_setYAxis" scope="instance" visibility="private">
			<description>Setter for the yAxis attribute.</description>
		</method>
		<method name="_removeAxisFunctions" scope="instance" visibility="private">
			<description>Removes axis functions contained in an array</description>
		</method>
		<method name="setSeriesStylesByIndex" scope="instance">
			<description>Sets the style object for a single series based on its index</description>
			<parameters>
			<parameter name="index" type="Number" usage="required">
				<description> The position within the series definition to apply the style</description>
			</parameter>
			<parameter name="style" type="object" usage="required">
				<description> Style object to be applied to the selected series</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setXAxes" scope="instance" visibility="private">
			<description>Setter for the xAxes attribute</description>
		</method>
		<method name="_setConstrainViewport" scope="instance" visibility="private">
			<description>Setter for the constrainViewport attribute</description>
		</method>
		<method name="_getYField" scope="instance" visibility="private">
			<description>Getter for the yField attribute.</description>
		</method>
		<method name="_setYAxes" scope="instance" visibility="private">
			<description>Setter for the yAxes attribute.</description>
		</method>
		<method name="_initAttributes" scope="instance" visibility="private">
			<description>Initializes the attributes.</description>
		</method>
		<method name="_setXAxis" scope="instance" visibility="private">
			<description>Setter for the xAxis attribute.</description>
		</method>
		<method name="_getXField" scope="instance" visibility="private">
			<description>Getter for the xField attribute.</description>
		</method>
		<method name="_setXField" scope="instance" visibility="private">
			<description>Setter for the xField attribute.</description>
		</method>
		<method name="_setYField" scope="instance" visibility="private">
			<description>Setter for the yField attribute.</description>
		</method>
		<method name="_getClonedAxis" scope="instance" visibility="private">
			<description>Receives an axis object, creates a proxy function for the labelFunction and returns the updated object.</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Button" superclass="YAHOO.util.Element">
		<description>The Button class creates a rich, graphical button.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Button class creates a rich, graphical button.</description>
			<return-types>
				<return-type type="YAHOO.widget.Button" />
			</return-types>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the 
&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;,
&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to 
be used to create the button.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLInputElement|HTMLButtonElement|HTMLElement" usage="required">
				<description> Object reference for the 
&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;, 
&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be 
used to create the button.</description>
			</parameter>
			<parameter name="p_oElement" type="Object" usage="required">
				<description> Object literal specifying a set of   
configuration attributes used to create the button.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="optional">
				<description> Optional. Object literal specifying a set  
of configuration attributes used to create the button.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CSS_CLASS_NAME" type="String" scope="instance">
			<description>String representing the CSS class(es) to be applied to  the button's root element.</description>
		</property>
		<property name="_menu" type="{YAHOO.widget.Overlay| YAHOO.widget.Menu}" scope="instance">
			<description>Object reference to the button's menu.</description>
		</property>
		<property name="CLASS_NAME_PREFIX" type="String" scope="instance">
			<description>Prefix used for all class names applied to a Button.</description>
		</property>
		<property name="_hiddenFields" type="HTMLInputElement|Array" scope="instance">
			<description>Object reference to the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;  element, or array of HTML form elements used to represent the button when its parent form is submitted.</description>
		</property>
		<property name="_nOptionRegionX" type="Number" scope="instance">
			<description>Number representing the X coordinate of the leftmost edge of the Button's option region. Applies only to Buttons of type &quot;split&quot;.</description>
		</property>
		<property name="_onclickAttributeValue" type="Object" scope="instance">
			<description>Object reference to the button's current value for the &quot;onclick&quot; configuration attribute.</description>
		</property>
		<property name="NODE_NAME" type="String" scope="instance">
			<description>The name of the node to be used for the button's root element.</description>
		</property>
		<property name="CHECK_ACTIVATION_KEYS" type="Array" scope="instance">
			<description>Array of numbers representing keys that (when pressed) toggle the button's &quot;checked&quot; attribute.</description>
		</property>
		<property name="_activationButtonPressed" type="Boolean" scope="instance">
			<description>Boolean indicating if the mouse button that toggles the button's &quot;active&quot; state has been pressed.</description>
		</property>
		<property name="_button" type="HTMLAnchorElement|HTMLButtonElement" scope="instance">
			<description>Object reference to the button's internal &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt; element.</description>
		</property>
		<property name="_hasMouseEventHandlers" type="Boolean" scope="instance">
			<description>Boolean indicating if the button's &quot;mouseout,&quot; &quot;mousedown,&quot; and &quot;mouseup&quot; event handlers are assigned</description>
		</property>
		<property name="ACTIVATION_KEYS" type="Array" scope="instance">
			<description>Array of numbers representing keys that (when presed) toggle the button's &quot;active&quot; state.</description>
		</property>
		<property name="_hasKeyEventHandlers" type="Boolean" scope="instance">
			<description>Boolean indicating if the button's &quot;blur&quot;, &quot;keydown&quot; and &quot;keyup&quot; event handlers are assigned</description>
		</property>
		<property name="_activationKeyPressed" type="Boolean" scope="instance">
			<description>Boolean indicating if the key(s) that toggle the button's &quot;active&quot; state have been pressed.</description>
		</property>
		<property name="OPTION_AREA_WIDTH" type="Number" scope="instance">
			<description>Width (in pixels) of the area of a split button that  when pressed will display a menu.</description>
		</property>
		</properties>
		<methods>
		<method name="_showMenu" scope="instance">
			<description>Shows the button's menu.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event) that triggered the display of the menu.</description>
			</parameter>
			</parameters>
		</method>
		<method name="submitForm" scope="instance">
			<description>Submits the form to which the button belongs. Returns  true if the form was submitted successfully, false if the submission was cancelled.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="createInputElement" scope="instance" visibility="private">
			<description>Creates an &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element of the specified type.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String specifying the type of &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create.</description>
			</parameter>
			<parameter name="p_sName" type="String" usage="required">
				<description> String specifying the name of &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create.</description>
			</parameter>
			<parameter name="p_sValue" type="String" usage="required">
				<description> String specifying the value of &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create.</description>
			</parameter>
			<parameter name="p_bChecked" type="String" usage="required">
				<description> Boolean specifying if the  &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element is to be checked.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLInputElement" />
			</return-types>
		</method>
		<method name="createButtonElement" scope="instance">
			<description>Creates the button's HTML elements.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String indicating the type of element to create.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="_isActivationKey" scope="instance">
			<description>Determines if the specified keycode is one that toggles  the button's &quot;active&quot; state.</description>
			<parameters>
			<parameter name="p_nKeyCode" type="Number" usage="required">
				<description> Number representing the keycode to be evaluated.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="hasFocus" scope="instance">
			<description>Returns a boolean indicating whether or not the button has focus.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="getForm" scope="instance">
			<description>Returns a reference to the button's parent form.</description>
			<return-types>
			<return-type type="HTMLFormElement" />
			</return-types>
		</method>
		<method name="_onFormReset" scope="instance">
			<description>&quot;reset&quot; event handler for the button's form.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_addListenersToForm" scope="instance">
			<description>Adds event handlers to the button's form.</description>
		</method>
		<method name="_onMouseUp" scope="instance">
			<description>&quot;mouseup&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onOption" scope="instance">
			<description>&quot;option&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>Initializes all of the configuration attributes used to  create the button.</description>
			<parameters>
			<parameter name="p_oAttributes" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the button.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setTabIndex" scope="instance">
			<description>Sets the value of the button's &quot;tabindex&quot; attribute.</description>
			<parameters>
			<parameter name="p_nTabIndex" type="Number" usage="required">
				<description> Number indicating the value for the button's &quot;tabindex&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onSelectedMenuItemChange" scope="instance">
			<description>&quot;selectedMenuItemChange&quot; event handler for the Button's &quot;selectedMenuItem&quot; attribute.</description>
			<parameters>
			<parameter name="event" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocumentKeyUp" scope="instance">
			<description>&quot;keyup&quot; event handler for the document.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onClick" scope="instance">
			<description>&quot;click&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeStateCSSClasses" scope="instance">
			<description>Removes state-specific CSS classes to the button's root DOM element.</description>
		</method>
		<method name="YAHOO.widget.Button.onFormKeyPress" scope="instance">
			<description>&quot;keypress&quot; event handler for the button's form.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="YAHOO.widget.Button.addHiddenFieldsToForm" scope="instance">
			<description>Searches the specified form and adds hidden fields for  instances of YAHOO.widget.Button that are of type &quot;radio,&quot; &quot;checkbox,&quot; &quot;menu,&quot; and &quot;split.&quot;</description>
			<parameters>
			<parameter name="p_oForm" type="HTMLFormElement" usage="required">
				<description> Object reference for the form to search.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getHiddenFields" scope="instance">
			<description>Returns an &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element or array of form elements used to represent the button when its parent form is submitted.</description>
			<return-types>
			<return-type type="HTMLInputElement|Array" />
			</return-types>
		</method>
		<method name="YAHOO.widget.Button.getButton" scope="instance">
			<description>Returns a button with the specified id.</description>
			<parameters>
			<parameter name="p_sId" type="String" usage="required">
				<description> String specifying the id of the root node of the HTML element representing the button to be retrieved.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="YAHOO.widget.Button" />
			</return-types>
		</method>
		<method name="_setDisabled" scope="instance">
			<description>Sets the value of the button's &quot;disabled&quot; attribute.</description>
			<parameters>
			<parameter name="p_bDisabled" type="Boolean" usage="required">
				<description> Boolean indicating the value for the button's &quot;disabled&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getMenu" scope="instance">
			<description>Returns a reference to the button's menu.</description>
			<return-types>
			<return-type type="YAHOO.widget.Overlay|YAHOO.widget.Menu" />
			</return-types>
		</method>
		<method name="_setChecked" scope="instance">
			<description>Sets the value of the button's &quot;target&quot; attribute.</description>
			<parameters>
			<parameter name="p_bChecked" type="Boolean" usage="required">
				<description> Boolean indicating the value for  the button's &quot;checked&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Button class's initialization method.</description>
			<parameters>
			<parameter name="p_oElement" type="String" usage="required">
				<description> String specifying the id attribute of the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be used to create the button.</description>
			</parameter>
			<parameter name="p_oElement" type="HTMLInputElement|HTMLButtonElement|HTMLElement" usage="required">
				<description> Object reference for the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be used to create the button.</description>
			</parameter>
			<parameter name="p_oElement" type="Object" usage="required">
				<description> Object literal specifying a set of configuration attributes used to create the button.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="optional">
				<description> Optional. Object literal specifying a set of configuration attributes used to create the button.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setTitle" scope="instance">
			<description>Sets the value of the button's &quot;title&quot; attribute.</description>
			<parameters>
			<parameter name="p_nTabIndex" type="String" usage="required">
				<description> Number indicating the value for the button's &quot;title&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setHref" scope="instance">
			<description>Sets the value of the button's &quot;href&quot; attribute.</description>
			<parameters>
			<parameter name="p_sHref" type="String" usage="required">
				<description> String indicating the value for the button's &quot;href&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the button.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="_onMouseDown" scope="instance">
			<description>&quot;mousedown&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the button's element from its parent element and removes all event handlers.</description>
		</method>
		<method name="_onMenuHide" scope="instance" visibility="private">
			<description>&quot;hide&quot; event handler for the button's menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setMenu" scope="instance">
			<description>Sets the value of the button's &quot;menu&quot; attribute.</description>
			<parameters>
			<parameter name="p_oMenu" type="Object" usage="required">
				<description> Object indicating the value for the button's &quot;menu&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyUp" scope="instance">
			<description>&quot;keyup&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onLabelClick" scope="instance">
			<description>&quot;click&quot; event handler for the Button's &lt;code&gt;&amp;#60;label&amp;#62;&lt;/code&gt; element.</description>
			<parameters>
			<parameter name="event" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_isSplitButtonOptionKey" scope="instance">
			<description>Determines if the specified keycode is one that toggles  the display of the split button's menu.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_onAppendTo" scope="instance">
			<description>&quot;appendTo&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDblClick" scope="instance">
			<description>&quot;dblclick&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onFormSubmit" scope="instance">
			<description>&quot;submit&quot; event handler for the button's form.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onFocus" scope="instance">
			<description>&quot;focus&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setOnClick" scope="instance">
			<description>Sets the value of the button's &quot;onclick&quot; attribute.</description>
			<parameters>
			<parameter name="p_oObject" type="Object" usage="required">
				<description> Object indicating the value for the button's &quot;onclick&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="blur" scope="instance">
			<description>Causes the button to lose focus and fires the button's &quot;blur&quot; event.</description>
		</method>
		<method name="_onMenuShow" scope="instance" visibility="private">
			<description>&quot;show&quot; event handler for the button's menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setAttributesFromSrcElement" scope="instance" visibility="private">
			<description>Gets the values for all the attributes of the source element (either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;) that map to Button configuration attributes and sets them into a collection that is passed to the Button constructor.</description>
			<parameters>
			<parameter name="p_oElement" type="HTMLInputElement|HTMLAnchorElement" usage="required">
				<description> Object reference to the HTML element (either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62; &lt;/code&gt;) used to create the button.</description>
			</parameter>
			<parameter name="p_oAttributes" type="Object" usage="required">
				<description> Object reference for the collection of configuration attributes used to create the button.</description>
			</parameter>
			</parameters>
		</method>
		<method name="focus" scope="instance">
			<description>Causes the button to receive the focus and fires the button's &quot;focus&quot; event.</description>
		</method>
		<method name="setFormElementProperties" scope="instance" visibility="private">
			<description>Gets the value of the attributes from the form element  and sets them into the collection of configuration attributes used to configure the button.</description>
		</method>
		<method name="_hideMenu" scope="instance">
			<description>Hides the button's menu.</description>
		</method>
		<method name="_setLabel" scope="instance">
			<description>Sets the value of the button's &quot;label&quot; attribute.</description>
			<parameters>
			<parameter name="p_sLabel" type="String" usage="required">
				<description> String indicating the value for the button's &quot;label&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setType" scope="instance">
			<description>Sets the value of the button's &quot;type&quot; attribute.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String indicating the value for the button's &quot;type&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuRender" scope="instance" visibility="private">
			<description>&quot;render&quot; event handler for the button's menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the  event thatwas fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onDocumentMouseDown" scope="instance">
			<description>&quot;mousedown&quot; event handler for the document.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="isActive" scope="instance">
			<description>Returns a boolean indicating whether or not the button is active.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
		</method>
		<method name="_onMouseMove" scope="instance">
			<description>&quot;mousemove&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMenuKeyDown" scope="instance" visibility="private">
			<description>&quot;keydown&quot; event handler for the button's menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="createHiddenFields" scope="instance">
			<description>Creates the button's hidden form field and appends it to its parent form.</description>
			<return-types>
			<return-type type="HTMLInputElement|Array" />
			</return-types>
		</method>
		<method name="addStateCSSClasses" scope="instance">
			<description>Appends state-specific CSS classes to the button's root DOM element.</description>
		</method>
		<method name="_onMenuClick" scope="instance" visibility="private">
			<description>&quot;click&quot; event handler for the button's menu.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseOver" scope="instance">
			<description>&quot;mouseover&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onMouseOut" scope="instance">
			<description>&quot;mouseout&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="initConfig" scope="instance" visibility="private">
			<description>Initializes the set of configuration attributes that are used to instantiate the button.</description>
			<parameters>
			<parameter name="Object" type="Object" usage="required">
				<description> representing the button's set of configuration attributes.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setTarget" scope="instance">
			<description>Sets the value of the button's &quot;target&quot; attribute.</description>
			<parameters>
			<parameter name="p_sTarget" type="String" usage="required">
				<description> String indicating the value for the button's &quot;target&quot; attribute.</description>
			</parameter>
			</parameters>
		</method>
		<method name="removeHiddenFields" scope="instance">
			<description>Removes the button's hidden form field(s) from its parent form.</description>
		</method>
		<method name="_onDocumentMouseUp" scope="instance">
			<description>&quot;mouseup&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="setAttributeFromDOMAttribute" scope="instance" visibility="private">
			<description>Gets the value of the specified DOM attribute and sets it into the collection of configuration attributes used to configure the button.</description>
			<parameters>
			<parameter name="p_sAttribute" type="String" usage="required">
				<description> String representing the name of the attribute to retrieve from the DOM element.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onKeyDown" scope="instance">
			<description>&quot;keydown&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onBlur" scope="instance">
			<description>&quot;blur&quot; event handler for the button.</description>
			<parameters>
			<parameter name="p_oEvent" type="Event" usage="required">
				<description> Object representing the DOM event object  passed back by the event utility (YAHOO.util.Event).</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.AutoComplete">
		<description>The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
auto completion widget.  Some key features:
&lt;ul&gt;
&lt;li&gt;Navigate with up/down arrow keys and/or mouse to pick a selection&lt;/li&gt;
&lt;li&gt;The drop down container can &quot;roll down&quot; or &quot;fly out&quot; via configurable
animation&lt;/li&gt;
&lt;li&gt;UI look-and-feel customizable through CSS, including container
attributes, borders, position, fonts, etc&lt;/li&gt;
&lt;/ul&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
auto completion widget.  Some key features:
&lt;ul&gt;
&lt;li&gt;Navigate with up/down arrow keys and/or mouse to pick a selection&lt;/li&gt;
&lt;li&gt;The drop down container can &quot;roll down&quot; or &quot;fly out&quot; via configurable
animation&lt;/li&gt;
&lt;li&gt;UI look-and-feel customizable through CSS, including container
attributes, borders, position, fonts, etc&lt;/li&gt;
&lt;/ul&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.AutoComplete" />
			</return-types>
			<parameters>
			<parameter name="elInput" type="HTMLElement" usage="required">
				<description>  DOM element reference of an input field.</description>
			</parameter>
			<parameter name="elInput" type="String" usage="required">
				<description>  String ID of an input field.</description>
			</parameter>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description>  DOM element reference of an existing DIV.</description>
			</parameter>
			<parameter name="elContainer" type="String" usage="required">
				<description>  String ID of an existing DIV.</description>
			</parameter>
			<parameter name="oDataSource" type="YAHOO.widget.DataSource" usage="required">
				<description>  DataSource instance.</description>
			</parameter>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (optional) Object literal of configuration params.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="queryQuestionMark" type="Boolean" scope="instance">
			<description>For XHR DataSources, AutoComplete will automatically insert a &quot;?&quot; between the server URI and the &quot;query&quot; param/value pair. To prevent this behavior, implementers should set this value to false. To more fully customize the query syntax, implementers should override the generateRequest() method.</description>
		</property>
		<property name="forceSelection" type="Boolean" scope="instance">
			<description>Whether or not to force the user's selection to match one of the query results. Enabling this feature essentially transforms the input field into a &amp;lt;select&amp;gt; field. This feature is not recommended with delimiter character(s) defined.</description>
		</property>
		<property name="_elIFrame" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to iframe element within container element.</description>
		</property>
		<property name="animHoriz" type="Boolean" scope="instance">
			<description>Whether or not to animate the expansion/collapse of the results container in the horizontal direction.</description>
		</property>
		<property name="useShadow" type="Boolean" scope="instance">
			<description>Whether or not the results container should have a shadow.</description>
		</property>
		<property name="queryMatchSubset" type="Boolean" scope="instance">
			<description>Enables query subset matching. When the DataSource's cache is enabled and queryMatchSubset is true, substrings of queries will return matching cached results. For instance, if the first query is for &quot;abc&quot; susequent queries that start with &quot;abc&quot;, like &quot;abcd&quot;, will be queried against the cache, and not the live data source. Recommended only for DataSources that return comprehensive results for queries with very few characters.</description>
		</property>
		<property name="useIFrame" type="Boolean" scope="instance">
			<description>Whether or not to use an iFrame to layer over Windows form elements in IE. Set to true only when the results container will be on top of a &amp;lt;select&amp;gt; field in IE and thus exposed to the IE z-index bug (i.e., 5.5 &lt; IE &lt; 7).</description>
		</property>
		<property name="typeAheadDelay" type="Number" scope="instance">
			<description>If typeAhead is true, number of seconds to delay before updating input with typeAhead value. In order to prevent certain race conditions, this value must always be greater than the queryDelay.</description>
		</property>
		<property name="_elContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>Container DOM element.</description>
		</property>
		<property name="_nDelayID" type="Number" scope="instance" visibility="private">
			<description>Delay timeout ID.</description>
		</property>
		<property name="_oAnim" type="Boolean" scope="instance" visibility="private">
			<description>Animation instance for container expand/collapse.</description>
		</property>
		<property name="_elFooter" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to footer element within content element.</description>
		</property>
		<property name="_queryInterval" type="Object" scope="instance" visibility="private">
			<description>For users typing via certain IMEs, queries must be triggered by intervals, since key events yet supported across all browsers for all IMEs.</description>
		</property>
		<property name="_sName" type="String" scope="instance" visibility="private">
			<description>Name of AutoComplete instance.</description>
		</property>
		<property name="_elShadow" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to shadow element within container element.</description>
		</property>
		<property name="applyLocalFilter" type="Boolean" scope="instance">
			<description>By default, results from local DataSources will pass through the filterResults method to apply a client-side matching algorithm.</description>
		</property>
		<property name="queryMatchCase" type="Boolean" scope="instance">
			<description>When applyLocalFilter is true, the local filtering algorthim can have case sensitivity enabled.</description>
		</property>
		<property name="_nKeyCode" type="Number" scope="instance" visibility="private">
			<description>Key code of the last key pressed in textbox.</description>
		</property>
		<property name="_sInitInputValue" type="String" scope="instance" visibility="private">
			<description>Stores initial input value used to determine if textboxChangeEvent should be fired.</description>
		</property>
		<property name="typeAhead" type="Boolean" scope="instance">
			<description>If autohighlight is enabled, whether or not the input field should be automatically updated with the first query result as the user types, auto-selecting the substring portion of the first result that the user has not yet typed.</description>
		</property>
		<property name="_nDisplayedItems" type="Number" scope="instance" visibility="private">
			<description>Number of &amp;lt;li&amp;gt; elements currently displayed in results container.</description>
		</property>
		<property name="_sCurQuery" type="String" scope="instance" visibility="private">
			<description>Current query string</description>
		</property>
		<property name="delimChar" type="String | String[]" scope="instance">
			<description>Query delimiter. A single character separator for multiple delimited selections. Multiple delimiter characteres may be defined as an array of strings. A null value or empty string indicates that query results cannot be delimited. This feature is not recommended if you need forceSelection to be true.</description>
		</property>
		<property name="_elContent" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to content element within container element.</description>
		</property>
		<property name="alwaysShowContainer" type="Boolean" scope="instance">
			<description>Enabling this feature prevents the toggling of the container to a collapsed state. Setting to true does not automatically trigger the opening of the container. Implementers are advised to pre-load the container with an explicit &quot;sendQuery()&quot; call.</description>
		</property>
		<property name="highlightClassName" type="String" scope="instance">
			<description>Class name of a highlighted item within results container.</description>
		</property>
		<property name="queryInterval" type="Number" scope="instance">
			<description>When IME usage is detected or interval detection is explicitly enabled, AutoComplete will detect the input value at the given interval and send a query if the value has changed.</description>
		</property>
		<property name="resultTypeList" type="Boolean" scope="instance">
			<description>For backward compatibility to pre-2.6.0 formatResults() signatures, setting resultsTypeList to true will take each object literal result returned by DataSource and flatten into an array.</description>
		</property>
		<property name="minQueryLength" type="Number" scope="instance">
			<description>Number of characters that must be entered before querying for results. A negative value effectively turns off the widget. A value of 0 allows queries of null or empty string values.</description>
		</property>
		<property name="_bOverContainer" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not the mouse is currently over the results container. This is necessary in order to prevent clicks on container items from being text input field blur events.</description>
		</property>
		<property name="_bFocused" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not the widget instance is currently active. If query results come back but the user has already moved on, do not proceed with auto complete behavior.</description>
		</property>
		<property name="_nTypeAheadDelayID" type="Number" scope="instance" visibility="private">
			<description>TypeAhead delay timeout ID.</description>
		</property>
		<property name="queryMatchContains" type="Boolean" scope="instance">
			<description>When applyLocalFilter is true, results can be locally filtered to return matching strings that &quot;contain&quot; the query string rather than simply &quot;start with&quot; the query string.</description>
		</property>
		<property name="suppressInputUpdate" type="Boolean" scope="instance">
			<description>Whether or not the input field should be updated with selections.</description>
		</property>
		<property name="_elCurPrehighlightItem" type="HTMLElement" scope="instance" visibility="private">
			<description>Pointer to the currently pre-highlighted &amp;lt;li&amp;gt; element in the container.</description>
		</property>
		<property name="dataSource" type="YAHOO.widget.DataSource" scope="instance">
			<description>The DataSource object that encapsulates the data used for auto completion. This object should be an inherited object from YAHOO.widget.DataSource.</description>
		</property>
		<property name="autoHighlight" type="Boolean" scope="instance">
			<description>Whether or not the first item in results container should be automatically highlighted on expand.</description>
		</property>
		<property name="allowBrowserAutocomplete" type="Boolean" scope="instance">
			<description>Whether or not to allow browsers to cache user-typed input in the input field. Disabling this feature will prevent the widget from setting the autocomplete=&quot;off&quot; on the input field. When autocomplete=&quot;off&quot; and users click the back button after form submission, user-typed input can be prefilled by the browser from its cache. This caching of user input may not be desired for sensitive data, such as credit card numbers, in which case, implementers should consider setting allowBrowserAutocomplete to false.</description>
		</property>
		<property name="animVert" type="Boolean" scope="instance">
			<description>Whether or not to animate the expansion/collapse of the results container in the vertical direction.</description>
		</property>
		<property name="autoSnapContainer" type="Boolean" scope="instance">
			<description>If true, before each time the container expands, the container element will be positioned to snap to the bottom-left corner of the input element. If autoSnapContainer is set to false, this positioning will not be done.</description>
		</property>
		<property name="_nIndex" type="Number" scope="instance" visibility="private">
			<description>Internal class variable to index multiple AutoComplete instances.</description>
		</property>
		<property name="_elCurListItem" type="HTMLElement" scope="instance" visibility="private">
			<description>Pointer to the currently highlighted &amp;lt;li&amp;gt; element in the container.</description>
		</property>
		<property name="_bContainerOpen" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not the results container is currently open.</description>
		</property>
		<property name="animSpeed" type="Number" scope="instance">
			<description>Speed of container expand/collapse animation, in seconds..</description>
		</property>
		<property name="_elHeader" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to header element within content element.</description>
		</property>
		<property name="_elList" type="HTMLElement" scope="instance" visibility="private">
			<description>Internal reference to &amp;lt;ul&amp;gt; elements that contains query results within the results container.</description>
		</property>
		<property name="_iFrameSrc" type="String" scope="instance" visibility="private">
			<description>Src to iFrame used when useIFrame = true. Supports implementations over SSL as well.</description>
		</property>
		<property name="maxResultsDisplayed" type="Number" scope="instance">
			<description>Maximum number of results to display in results container.</description>
		</property>
		<property name="_bItemSelected" type="Boolean" scope="instance" visibility="private">
			<description>Whether or not an item has been selected since the container was populated with results. Reset to false by _populateList, and set to true when item is selected.</description>
		</property>
		<property name="_sPastSelections" type="String" scope="instance" visibility="private">
			<description>Selections from previous queries (for saving delimited queries).</description>
		</property>
		<property name="prehighlightClassName" type="String" scope="instance">
			<description>Class name of a pre-highlighted item within results container.</description>
		</property>
		<property name="queryDelay" type="Number" scope="instance">
			<description>Number of seconds to delay before submitting a query request. If a query request is received before a previous one has completed its delay, the previous request is cancelled and the new request is set to the delay. If typeAhead is also enabled, this value must always be less than the typeAheadDelay in order to avoid certain race conditions.</description>
		</property>
		<property name="_elTextbox" type="HTMLElement" scope="instance" visibility="private">
			<description>Text input field DOM element.</description>
		</property>
		<property name="_elBody" type="HTMLElement" scope="instance" visibility="private">
			<description>Reference to body element within content element.</description>
		</property>
		</properties>
		<methods>
		<method name="_onTextboxKeyPress" scope="instance" visibility="private">
			<description>Handles textbox keypress events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The keypress event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_selectText" scope="instance" visibility="private">
			<description>Selects text in the input field.</description>
			<parameters>
			<parameter name="elTextbox" type="HTMLElement" usage="required">
				<description> Text input box element in which to select text.</description>
			</parameter>
			<parameter name="nStart" type="Number" usage="required">
				<description> Starting index of text string to select.</description>
			</parameter>
			<parameter name="nEnd" type="Number" usage="required">
				<description> Ending index of text selection.</description>
			</parameter>
			</parameters>
		</method>
		<method name="snapContainer" scope="instance">
			<description>Snaps container to bottom-left corner of input element</description>
		</method>
		<method name="_clearInterval" scope="instance" visibility="private">
			<description>Cancels text input detection by intervals.</description>
			<parameters>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_populateListItem" scope="instance" visibility="private">
			<description>Populates the given &amp;lt;li&amp;gt; element with return value from formatResult().</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> The LI element.</description>
			</parameter>
			<parameter name="oResult" type="Object" usage="required">
				<description> The result object.</description>
			</parameter>
			<parameter name="sCurQuery" type="String" usage="required">
				<description> The query string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTextboxBlur" scope="instance" visibility="private">
			<description>Handles text input box losing focus.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The focus event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_typeAhead" scope="instance" visibility="private">
			<description>Updates in the text input box with the first query result as the user types, selecting the substring that the user has not typed.</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> The &amp;lt;li&amp;gt; element item whose data populates the input field.</description>
			</parameter>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getListItems" scope="instance">
		</method>
		<method name="_toggleHighlight" scope="instance" visibility="private">
			<description>Toggles the highlight on or off for an item in the container, and also cleans up highlighting of any previous item.</description>
			<parameters>
			<parameter name="elNewListItem" type="HTMLElement" usage="required">
				<description> The &amp;lt;li&amp;gt; element item to receive highlight behavior.</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description> Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_togglePrehighlight" scope="instance" visibility="private">
			<description>Toggles the pre-highlight on or off for an item in the container, and also cleans up pre-highlighting of any previous item.</description>
			<parameters>
			<parameter name="elNewListItem" type="HTMLElement" usage="required">
				<description> The &amp;lt;li&amp;gt; element item to receive highlight behavior.</description>
			</parameter>
			<parameter name="sType" type="String" usage="required">
				<description> Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTextboxFocus" scope="instance" visibility="private">
			<description>Handles text input box receiving focus.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The focus event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="enableIntervalDetection" scope="instance">
			<description>Enables interval detection for a less performant but brute force mechanism to detect input values at an interval set by queryInterval and send queries if input value has changed. Needed to support right-click+paste or shift+insert edge cases. Please note that intervals are cleared at the end of each interaction, so enableIntervalDetection must be called for each new interaction. The recommended approach is to call it in response to textboxFocusEvent.</description>
		</method>
		<method name="expandContainer" scope="instance">
			<description>Expands container.</description>
		</method>
		<method name="getListItemIndex" scope="instance">
			<description>Public accessor to the index of the associated with a given &amp;lt;li&amp;gt; result.</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> Reference to &amp;lt;LI&amp;gt; element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>Index.</return-description>
		</method>
		<method name="_isIgnoreKey" scope="instance" visibility="private">
			<description>Whether or not key is functional or should be ignored. Note that the right arrow key is NOT an ignored key since it triggers queries for certain intl charsets.</description>
			<parameters>
			<parameter name="nKeycode" type="Number" usage="required">
				<description> Code of key pressed.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>True if key should be ignored, false otherwise.</return-description>
		</method>
		<method name="_initContainerHelperEls" scope="instance" visibility="private">
			<description>Initializes the results container helpers if they are enabled and do not exist</description>
		</method>
		<method name="_onInterval" scope="instance" visibility="private">
			<description>Enables query triggers based on text input detection by intervals (rather than by key events).</description>
		</method>
		<method name="setBody" scope="instance">
			<description>Sets HTML markup for the results container body. This markup will be inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-bd&quot;.</description>
			<parameters>
			<parameter name="sBody" type="String" usage="required">
				<description> HTML markup for results container body.</description>
			</parameter>
			</parameters>
		</method>
		<method name="filterResults" scope="instance">
			<description>Executed by DataSource (within DataSource scope via doBeforeCallback()) to filter results through a simple client-side matching algorithm.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oFullResponse" type="Object" usage="required">
				<description> Full response object.</description>
			</parameter>
			<parameter name="oParsedResponse" type="Object" usage="required">
				<description> Parsed response object.</description>
			</parameter>
			<parameter name="oCallback" type="Object" usage="required">
				<description> Callback object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Filtered response object.</return-description>
		</method>
		<method name="getListEl" scope="instance">
			<description>Public accessor to the &amp;lt;ul&amp;gt; element that displays query results within the results container.</description>
			<return-types>
			<return-type type="HTMLElement[]" />
			</return-types>
			<return-description>Reference to &amp;lt;ul&amp;gt; element within the results container.</return-description>
		</method>
		<method name="_onTextboxKeyUp" scope="instance" visibility="private">
			<description>Handles textbox keyup events to trigger queries.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The keyup event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_updateValue" scope="instance" visibility="private">
			<description>Updates the text input box value with selected query result. If a delimiter has been defined, then the value gets appended with the delimiter.</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> The &amp;lt;li&amp;gt; element item with which to update the value.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_populateList" scope="instance" visibility="private">
			<description>Populates the array of &amp;lt;li&amp;gt; elements in the container with query results.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_focus" scope="instance" visibility="private">
			<description>Focuses input field.</description>
		</method>
		<method name="doBeforeExpandContainer" scope="instance">
			<description>Overridable method called before container expands allows implementers to access data and DOM elements.</description>
			<parameters>
			<parameter name="elTextbox" type="HTMLElement" usage="required">
				<description> The text input box.</description>
			</parameter>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description> The container element.</description>
			</parameter>
			<parameter name="sQuery" type="String" usage="required">
				<description> The query string.</description>
			</parameter>
			<parameter name="aResults" type="Object[]" usage="required">
				<description>  An array of query results.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue expanding container, false to cancel the expand.</return-description>
		</method>
		<method name="_moveSelection" scope="instance" visibility="private">
			<description>Triggered by up and down arrow keys, changes the current highlighted &amp;lt;li&amp;gt; element item. Scrolls container if necessary.</description>
			<parameters>
			<parameter name="nKeyCode" type="Number" usage="required">
				<description> Code of key pressed.</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the AutoComplete instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the AutoComplete instance.</return-description>
		</method>
		<method name="doBeforeLoadData" scope="instance">
			<description>Overridable method called before container is loaded with result data.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue loading data, false to cancel.</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Nulls out the entire AutoComplete instance and related objects, removes attached event listeners, and clears out DOM elements inside the container. After calling this method, the instance reference should be expliclitly nulled by implementer, as in myAutoComplete = null. Use with caution!</description>
		</method>
		<method name="AutoComplete._cloneObject" scope="static" visibility="private">
			<description>Clones object literal or array of object literals.</description>
			<parameters>
			<parameter name="o" type="Object" usage="required">
				<description> Object.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doBeforeSendQuery" scope="instance">
		</method>
		<method name="getListItemData" scope="instance">
			<description>Public accessor to the result data associated with a given &amp;lt;li&amp;gt; result.</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> Reference to &amp;lt;LI&amp;gt; element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Result data.</return-description>
		</method>
		<method name="generateRequest" scope="instance">
			<description>A function that converts an AutoComplete query into a request value which is then passed to the DataSource's sendRequest method in order to retrieve data for the query. By default, returns a String with the syntax: &quot;query={query}&quot; Implementers can customize this method for custom request syntaxes.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="MIXED" />
			</return-types>
			<return-description>Request</return-description>
		</method>
		<method name="_initListEl" scope="instance" visibility="private">
			<description>Clears out contents of container body and creates up to YAHOO.widget.AutoComplete#maxResultsDisplayed &amp;lt;li&amp;gt; elements in an &amp;lt;ul&amp;gt; element.</description>
		</method>
		<method name="_onContainerClick" scope="instance" visibility="private">
			<description>Handles container click events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setFooter" scope="instance">
			<description>Sets HTML markup for the results container footer. This markup will be inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-ft&quot;.</description>
			<parameters>
			<parameter name="sFooter" type="String" usage="required">
				<description> HTML markup for results container footer.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_selectItem" scope="instance" visibility="private">
			<description>Selects a result item from the container</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> The selected &amp;lt;li&amp;gt; element item.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onWindowUnload" scope="instance" visibility="private">
			<description>Handles window unload event.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The unload event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="handleResponse" scope="instance">
			<description>Handles response for display. This is the callback function method passed to YAHOO.util.DataSourceBase#sendRequest so results from the DataSource are returned to the AutoComplete instance.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Original request.</description>
			</parameter>
			<parameter name="oResponse" type="Object" usage="required">
				<description> Response object.</description>
			</parameter>
			<parameter name="oPayload" type="MIXED" usage="optional">
				<description> (optional) Additional argument(s)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_enableIntervalDetection" scope="instance" visibility="private">
			<description>Enables interval detection for IME support.</description>
		</method>
		<method name="sendQuery" scope="instance">
			<description>Makes query request to the DataSource.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getContainerEl" scope="instance">
			<description>Returns DOM reference to container element.</description>
			<return-types>
			<return-type type="HTMLELement" />
			</return-types>
			<return-description>DOM reference to container element.</return-description>
		</method>
		<method name="_toggleContainerHelpers" scope="instance" visibility="private">
			<description>Syncs results container with its helpers.</description>
			<parameters>
			<parameter name="bShow" type="Boolean" usage="required">
				<description> True if container is expanded, false if collapsed</description>
			</parameter>
			</parameters>
		</method>
		<method name="_extractQuery" scope="instance" visibility="private">
			<description>Extracts rightmost query from delimited string.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> String to parse</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>Object literal containing properties &quot;query&quot; and &quot;previous&quot;.</return-description>
		</method>
		<method name="_jumpSelection" scope="instance" visibility="private">
			<description>If an item is highlighted in the container, the right arrow key jumps to the end of the textbox and selects the highlighted item, otherwise the container is closed.</description>
		</method>
		<method name="_onContainerScroll" scope="instance" visibility="private">
			<description>Handles container scroll events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The scroll event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="clearList" scope="instance">
			<description>Clears entire list of suggestions.</description>
		</method>
		<method name="_clearSelection" scope="instance" visibility="private">
			<description>When forceSelection is true and the user attempts leave the text input box without selecting an item from the query results, the user selection is cleared.</description>
		</method>
		<method name="__initProps" scope="instance" visibility="private">
			<description>Updates and validates latest public config properties.</description>
		</method>
		<method name="isContainerOpen" scope="instance">
			<description>Returns true if container is in an expanded state, false otherwise.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if container is in an expanded state, false otherwise.</return-description>
		</method>
		<method name="preparseRawResponse" scope="instance">
			<description>Executed by DataSource (within DataSource scope via doBeforeParseData()) to handle responseStripAfter cleanup.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>oParsedResponse or null.</return-description>
		</method>
		<method name="_toggleContainer" scope="instance" visibility="private">
			<description>Animates expansion or collapse of the container.</description>
			<parameters>
			<parameter name="bShow" type="Boolean" usage="required">
				<description> True if container should be expanded, false if container should be collapsed</description>
			</parameter>
			</parameters>
		</method>
		<method name="formatResult" scope="instance">
			<description>Overridable method that returns HTML markup for one result to be populated as innerHTML of an &amp;lt;LI&amp;gt; element.</description>
			<parameters>
			<parameter name="oResultData" type="Object" usage="required">
				<description> Result data object.</description>
			</parameter>
			<parameter name="sQuery" type="String" usage="required">
				<description> The corresponding query string.</description>
			</parameter>
			<parameter name="sResultMatch" type="HTMLElement" usage="required">
				<description> The current query string.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>HTML markup of formatted result data.</return-description>
		</method>
		<method name="_textMatchesOption" scope="instance" visibility="private">
			<description>Whether or not user-typed value in the text input box matches any of the query results.</description>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
			<return-description>Matching list item element if user-input text matches
a result, null otherwise.</return-description>
		</method>
		<method name="collapseContainer" scope="instance">
			<description>Collapses container.</description>
		</method>
		<method name="_onContainerMouseout" scope="instance" visibility="private">
			<description>Handles container mouseout events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The mouseout event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getSubsetMatches" scope="instance">
			<description>Handles subset matching for when queryMatchSubset is enabled.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Object" />
			</return-types>
			<return-description>oParsedResponse or null.</return-description>
		</method>
		<method name="_sendQuery" scope="instance" visibility="private">
			<description>Makes query request to the DataSource.</description>
			<parameters>
			<parameter name="sQuery" type="String" usage="required">
				<description> Query string.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onTextboxKeyDown" scope="instance" visibility="private">
			<description>Handles textbox keydown events of functional keys, mainly for UI behavior.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The keydown event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="isFocused" scope="instance">
			<description>Returns true if widget instance is currently active.</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Returns true if widget instance is currently active.</return-description>
		</method>
		<method name="_doBeforeExpandContainer" scope="instance" visibility="private">
			<description>Called before container expands, by default snaps container to the bottom-left corner of the input element, then calls public overrideable method.</description>
			<parameters>
			<parameter name="elTextbox" type="HTMLElement" usage="required">
				<description> The text input box.</description>
			</parameter>
			<parameter name="elContainer" type="HTMLElement" usage="required">
				<description> The container element.</description>
			</parameter>
			<parameter name="sQuery" type="String" usage="required">
				<description> The query string.</description>
			</parameter>
			<parameter name="aResults" type="Object[]" usage="required">
				<description>  An array of query results.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>Return true to continue expanding container, false to cancel the expand.</return-description>
		</method>
		<method name="getListItemMatch" scope="instance">
			<description>Public accessor to the matching string associated with a given &amp;lt;li&amp;gt; result.</description>
			<parameters>
			<parameter name="elListItem" type="HTMLElement" usage="required">
				<description> Reference to &amp;lt;LI&amp;gt; element.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Matching string.</return-description>
		</method>
		<method name="_initContainerEl" scope="instance" visibility="private">
			<description>Initializes the results container once at object creation</description>
		</method>
		<method name="getInputEl" scope="instance">
			<description>Returns DOM reference to input element.</description>
			<return-types>
			<return-type type="HTMLELement" />
			</return-types>
			<return-description>DOM reference to input element.</return-description>
		</method>
		<method name="_onContainerMouseover" scope="instance" visibility="private">
			<description>Handles container mouseover events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The mouseover event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="setHeader" scope="instance">
			<description>Sets HTML markup for the results container header. This markup will be inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-hd&quot;.</description>
			<parameters>
			<parameter name="sHeader" type="String" usage="required">
				<description> HTML markup for results container header.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onContainerResize" scope="instance" visibility="private">
			<description>Handles container resize events.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The resize event.</description>
			</parameter>
			<parameter name="oSelf" type="YAHOO.widget.AutoComplete" usage="required">
				<description> The AutoComplete instance.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Dom.IEStyle">
		<description>Internal methods used to add style management functionality to DOM.</description>
		<methods>
		<method name="getBorderWidth" scope="instance">
			<description>Try to determine the width of an elements border</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="property" type="String" usage="required">
				<description> The property to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The elements border width</return-description>
		</method>
		<method name="get" scope="instance">
			<description>Method used by DOM to get style information for IE</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="property" type="String" usage="required">
				<description> The property to check</description>
			</parameter>
			</parameters>
		</method>
		<method name="getColor" scope="instance">
			<description>Get the color of an element</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The attribute to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The value</return-description>
		</method>
		<method name="getMargin" scope="instance">
			<description>Get the margin value from a style property</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The attribute to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The margin value</return-description>
		</method>
		<method name="getBorderColor" scope="instance">
			<description>Get the bordercolor of an element</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The attribute to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The value</return-description>
		</method>
		<method name="getOffset" scope="instance">
			<description>Determine the offset of an element</description>
			<parameters>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="prop" type="String" usage="required">
				<description> The property to check.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The offset</return-description>
		</method>
		<method name="getPixel" scope="instance">
			<description>Get the pixel value from a style property</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The attribute to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The pixel value</return-description>
		</method>
		<method name="getVisibility" scope="instance">
			<description>Get the visibility of an element</description>
			<parameters>
			<parameter name="node" type="HTMLElement" usage="required">
				<description> The element to check</description>
			</parameter>
			<parameter name="att" type="String" usage="required">
				<description> The attribute to check</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The value</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.EditorInfo">
		<description>Singleton object used to track the open window objects and panels across the various open editors</description>
		<properties>
		<property name="blankImage" type="String" scope="instance" visibility="private">
			<description>A reference to the blankImage url</description>
		</property>
		<property name="_instances" type="Object" scope="instance" visibility="private">
			<description>A reference to all editors on the page.</description>
		</property>
		<property name="window" type="Object YAHOO.widget.EditorWindow" scope="instance" visibility="private">
			<description>A reference to the currently open window object in any editor on the page.</description>
		</property>
		<property name="panel" type="Object YAHOO.widget.Overlay" scope="instance" visibility="private">
			<description>A reference to the currently open panel in any editor on the page.</description>
		</property>
		</properties>
		<methods>
		<method name="saveAll" scope="instance">
			<description>Saves all Editor instances on the page. If a form reference is passed, only Editor's bound to this form will be saved.</description>
			<parameters>
			<parameter name="form" type="HTMLElement" usage="required">
				<description> The form to check if this Editor instance belongs to</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representing the EditorInfo.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
		</method>
		<method name="getEditorById" scope="instance">
			<description>Returns a reference to the Editor object associated with the given textarea</description>
			<parameters>
			<parameter name="id" type="String|HTMLElement" usage="required">
				<description> The id or reference of the textarea to return the Editor instance of</description>
			</parameter>
			</parameters>
			<return-description>Object &lt;a href=&quot;YAHOO.widget.Editor.html&quot;&gt;YAHOO.widget.Editor&lt;/a&gt;</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.UnexpectedValue" superclass="YAHOO.util.AssertionError">
		<description>UnexpectedValue is subclass of AssertionError that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
		<constructors>
		<constructor scope="instance">
			<description>UnexpectedValue is subclass of AssertionError that is thrown whenever
a value was unexpected in its scope. This typically means that a test
was performed to determine that a value was *not* equal to a certain
value.</description>
			<return-types>
				<return-type type="YAHOO.util.UnexpectedValue" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			<parameter name="unexpected" type="Object" usage="required">
				<description> The unexpected value.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="unexpected" type="Object" scope="instance">
			<description>The unexpected value.</description>
		</property>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="getMessage" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. The message contains information about the unexpected value that was encountered.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.ToolbarButtonAdvanced">
		<description>&lt;p&gt;Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar&lt;/p&gt;</description>
		<constructors>
		<constructor scope="instance">
			<description>&lt;p&gt;Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar&lt;/p&gt;</description>
			<return-types>
				<return-type type="YAHOO.widget.ToolbarButtonAdvanced" />
			</return-types>
			<parameters>
			<parameter name="el" type="String|HTMLElement" usage="required">
				<description> The element to turn into a button.</description>
			</parameter>
			<parameter name="attrs" type="Object" usage="required">
				<description> Object liternal containing configuration parameters.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="buttonType" type="undefined" scope="instance" visibility="private">
			<description>Tells if the Button is a Rich Button or a Simple Button</description>
		</property>
		</properties>
		<methods>
		<method name="checkValue" scope="instance">
			<description>Select an option by value</description>
			<parameters>
			<parameter name="value" type="String" usage="required">
				<description> The value of the option that we want to mark as selected</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.AssertionError" superclass="Error">
		<description>AssertionError is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
		<constructors>
		<constructor scope="instance">
			<description>AssertionError is thrown whenever an assertion fails. It provides methods
to more easily get at error information and also provides a base class
from which more specific assertion errors can be derived.</description>
			<return-types>
				<return-type type="YAHOO.util.AssertionError" />
			</return-types>
			<parameters>
			<parameter name="message" type="String" usage="required">
				<description> The message to display when the error occurs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="name" type="String" scope="instance">
			<description>The name of the error that occurred.</description>
		</property>
		</properties>
		<methods>
		<method name="getMessage" scope="instance">
			<description>Returns a fully formatted error for an assertion failure. This should be overridden by all subclasses to provide specific information.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string describing the error.</return-description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the error.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>A string representation of the error.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.tool.TestReporter">
		<description>An object capable of sending test results to a server.</description>
		<constructors>
		<constructor scope="instance">
			<description>An object capable of sending test results to a server.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestReporter" />
			</return-types>
			<parameters>
			<parameter name="url" type="String" usage="required">
				<description> The URL to submit the results to.</description>
			</parameter>
			<parameter name="format" type="Function" usage="required">
				<description> (Optiona) A function that outputs the results in a specific format.
Default is YAHOO.tool.TestFormat.XML.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="url" type="String" scope="instance">
			<description>The URL to submit the data to.</description>
		</property>
		<property name="_form" type="HTMLFormElement" scope="instance" visibility="private">
			<description>The form element used to submit the results.</description>
		</property>
		<property name="_fields" type="Object" scope="instance" visibility="private">
			<description>Extra fields to submit with the request.</description>
		</property>
		<property name="_iframe" type="HTMLIFrameElement" scope="instance" visibility="private">
			<description>Iframe used as a target for form submission.</description>
		</property>
		<property name="format" type="Function" scope="instance">
			<description>The formatting function to call when submitting the data.</description>
		</property>
		</properties>
		<methods>
		<method name="report" scope="instance">
			<description>Sends the report to the server.</description>
			<parameters>
			<parameter name="results" type="Object" usage="required">
				<description> The results object created by TestRunner.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="destroy" scope="instance">
			<description>Cleans up the memory associated with the TestReporter, removing DOM elements that were created.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_convertToISOString" scope="instance" visibility="private">
			<description>Convert a date into ISO format. From Douglas Crockford's json2.js</description>
			<parameters>
			<parameter name="date" type="Date" usage="required">
				<description> The date to convert.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>An ISO-formatted date string</return-description>
		</method>
		<method name="addField" scope="instance">
			<description>Adds a field to the form that submits the results.</description>
			<parameters>
			<parameter name="name" type="String" usage="required">
				<description> The name of the field.</description>
			</parameter>
			<parameter name="value" type="Variant" usage="required">
				<description> The value of the field.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="LogReader">
		<description>The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.</description>
		<constructors>
		<constructor scope="instance">
			<description>The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.</description>
			<return-types>
				<return-type type="LogReader" />
			</return-types>
			<parameters>
			<parameter name="elContainer" type="HTMLElement" usage="optional">
				<description>  (optional) DOM element reference of an existing DIV.</description>
			</parameter>
			<parameter name="elContainer" type="String" usage="optional">
				<description>  (optional) String ID of an existing DIV.</description>
			</parameter>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (optional) Object literal of configuration params.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="right" type="String" scope="instance">
			<description>Public member to access CSS right position of the LogReader container.</description>
		</property>
		<property name="entryFormat" type="String" scope="instance">
			<description>Custom output format for log messages. Defaults to null, which falls back to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE and LogReader.BASIC_TEMPLATE. Use bracketed place holders to mark where message info should go. Available place holder names include: &lt;ul&gt; &lt;li&gt;category&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;sourceAndDetail&lt;/li&gt; &lt;li&gt;message&lt;/li&gt; &lt;li&gt;localTime&lt;/li&gt; &lt;li&gt;elapsedTime&lt;/li&gt; &lt;li&gt;totalTime&lt;/li&gt; &lt;/ul&gt;</description>
		</property>
		<property name="height" type="String" scope="instance">
			<description>Public member to access CSS height of the LogReader container.</description>
		</property>
		<property name="newestOnTop" type="Boolean" scope="instance">
			<description>Whether or not newest message is printed on top.</description>
		</property>
		<property name="_elCollapse" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader collapse element.</description>
		</property>
		<property name="_elCategoryFilters" type="HTMLElement" scope="instance" visibility="private">
			<description>Container element for LogReader category filter checkboxes.</description>
		</property>
		<property name="_memberName" type="Number" scope="static" visibility="private">
			<description>Internal class member to index multiple LogReader instances.</description>
		</property>
		<property name="_sName" type="String" scope="instance" visibility="private">
			<description>Name of LogReader instance.</description>
		</property>
		<property name="isCollapsed" type="Boolean" scope="instance">
			<description>True when LogReader is in a collapsed state, false otherwise.</description>
		</property>
		<property name="_btnCollapse" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader collapse button element.</description>
		</property>
		<property name="logReaderEnabled" type="Boolean" scope="instance">
			<description>Whether or not LogReader is enabled to output log messages.</description>
		</property>
		<property name="_filterCheckboxes" type="Object" scope="instance" visibility="private">
			<description>Hash of filters and their related checkbox elements.</description>
		</property>
		<property name="thresholdMax" type="Number" scope="instance">
			<description>Maximum number of messages a LogReader console will display.</description>
		</property>
		<property name="_buffer" type="Object[]" scope="instance" visibility="private">
			<description>Buffer of log message objects for batch output.</description>
		</property>
		<property name="bottom" type="String" scope="instance">
			<description>Public member to access CSS bottom position of the LogReader container.</description>
		</property>
		<property name="_elBtns" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader buttons container element.</description>
		</property>
		<property name="_lastTime" type="Date" scope="instance" visibility="private">
			<description>Date of last output log message.</description>
		</property>
		<property name="top" type="String" scope="instance">
			<description>Public member to access CSS top position of the LogReader container.</description>
		</property>
		<property name="_btnPause" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader pause button element.</description>
		</property>
		<property name="_elContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader container element.</description>
		</property>
		<property name="width" type="String" scope="instance">
			<description>Public member to access CSS width of the LogReader container.</description>
		</property>
		<property name="VERBOSE_TEMPLATE" type="undefined" scope="static">
			<description>Template used for innerHTML of verbose entry output.</description>
		</property>
		<property name="fontSize" type="String" scope="instance">
			<description>Public member to access CSS font size of the LogReader container.</description>
		</property>
		<property name="footerEnabled" type="Boolean" scope="instance">
			<description>Whether or not the footer UI is enabled for the LogReader.</description>
		</property>
		<property name="verboseOutput" type="Boolean" scope="instance">
			<description>Whether or not output is verbose (more readable). Setting to true will make output more compact (less readable).</description>
		</property>
		<property name="_sourceFilters" type="String[]" scope="instance" visibility="private">
			<description>Array of filters for log message sources.</description>
		</property>
		<property name="_elHd" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader header element.</description>
		</property>
		<property name="_categoryFilters" type="String[]" scope="instance" visibility="private">
			<description>Array of filters for log message categories.</description>
		</property>
		<property name="_consoleMsgCount" type="Number" scope="instance" visibility="private">
			<description>Number of log messages output to console.</description>
		</property>
		<property name="_elSourceFilters" type="HTMLElement" scope="instance" visibility="private">
			<description>Container element for LogReader source filter checkboxes.</description>
		</property>
		<property name="thresholdMin" type="Number" scope="instance">
			<description>When a LogReader console reaches its thresholdMax, it will clear out messages and print out the latest thresholdMin number of messages.</description>
		</property>
		<property name="_title" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader title header element.</description>
		</property>
		<property name="_elDefaultContainer" type="HTMLElement" scope="instance" visibility="private">
			<description>A class member shared by all LogReaders if a container needs to be created during instantiation. Will be null if a container element never needs to be created on the fly, such as when the implementer passes in their own element.</description>
		</property>
		<property name="autoRender" type="{Boolean}" scope="instance">
			<description>Render the LogReader immediately upon instantiation. If set to false, you must call myLogReader.render() to generate the UI.</description>
		</property>
		<property name="_elFt" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader footer element.</description>
		</property>
		<property name="outputBuffer" type="Number" scope="instance">
			<description>Output timeout buffer in milliseconds.</description>
		</property>
		<property name="_elConsole" type="HTMLElement" scope="instance" visibility="private">
			<description>LogReader console element.</description>
		</property>
		<property name="draggable" type="Boolean" scope="instance">
			<description>Enables draggable LogReader if DragDrop Utility is present.</description>
		</property>
		<property name="ENTRY_TEMPLATE" type="{HTMLElement}" scope="static">
			<description>Node template for the log entries</description>
		</property>
		<property name="isPaused" type="Boolean" scope="instance">
			<description>True when LogReader is in a paused state, false otherwise.</description>
		</property>
		<property name="_btnClear" type="HTMLElement" scope="instance" visibility="private">
			<description>Clear button element.</description>
		</property>
		<property name="_timeout" type="Number" scope="instance" visibility="private">
			<description>Batched output timeout ID.</description>
		</property>
		<property name="BASIC_TEMPLATE" type="undefined" scope="static">
			<description>Template used for innerHTML of compact entry output.</description>
		</property>
		<property name="left" type="String" scope="instance">
			<description>Public member to access CSS left position of the LogReader container.</description>
		</property>
		</properties>
		<methods>
		<method name="getLastTime" scope="instance">
			<description>Gets timestamp of the last log.</description>
			<return-types>
			<return-type type="Date" />
			</return-types>
			<return-description>Timestamp of the last log.</return-description>
		</method>
		<method name="_onReset" scope="instance" visibility="private">
			<description>Handles Logger's resetEvent.</description>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description> The event.</description>
			</parameter>
			<parameter name="aArgs" type="Object[]" usage="required">
				<description> Data passed from event firer.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Adds the UI to the DOM, attaches event listeners, and bootstraps initial UI state.</description>
		</method>
		<method name="show" scope="instance">
			<description>Shows UI of LogReader. Logging functionality is not disrupted.</description>
		</method>
		<method name="setTitle" scope="instance">
			<description>Updates title to given string.</description>
			<parameters>
			<parameter name="sTitle" type="String" usage="required">
				<description> New title.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_init" scope="instance">
			<description>Initializes the instance's message buffer, start time, etc</description>
			<parameters>
			<parameter name="container" type="String|HTMLElement" usage="optional">
				<description> (optional) the render target</description>
			</parameter>
			<parameter name="config" type="Object" usage="optional">
				<description> (optional) instance configuration</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCategories" scope="instance">
			<description>Returns array of enabled categories.</description>
			<return-types>
			<return-type type="String[]" />
			</return-types>
			<return-description>Array of enabled categories.</return-description>
		</method>
		<method name="_createSourceCheckbox" scope="instance" visibility="private">
			<description>Creates a checkbox in the LogReader footer element to filter by source.</description>
			<parameters>
			<parameter name="sSource" type="String" usage="required">
				<description> Source name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onClickClearBtn" scope="instance" visibility="private">
			<description>Handles click events on the clear button.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initCategories" scope="instance" visibility="private">
			<description>Initializes category filters.</description>
		</method>
		<method name="pause" scope="instance">
			<description>Pauses output of log messages. While paused, log messages are not lost, but get saved to a buffer and then output upon resume of LogReader.</description>
		</method>
		<method name="hide" scope="instance">
			<description>Hides UI of LogReader. Logging functionality is not disrupted.</description>
		</method>
		<method name="_printToConsole" scope="instance" visibility="private">
			<description>Cycles through an array of log messages, and outputs each one to the console if its category has not been filtered out.</description>
			<parameters>
			<parameter name="aEntries" type="Object[]" usage="required">
				<description> Array of LogMsg objects to output to console.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initHeaderEl" scope="instance" visibility="private">
			<description>Initializes the header element.</description>
		</method>
		<method name="_initDragDrop" scope="instance" visibility="private">
			<description>Initializes Drag and Drop on the header element.</description>
		</method>
		<method name="_printBuffer" scope="instance" visibility="private">
			<description>Sends buffer of log messages to output and clears buffer.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Public accessor to the unique name of the LogReader instance.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>Unique name of the LogReader instance.</return-description>
		</method>
		<method name="showSource" scope="instance">
			<description>Shows log messages associated with given source.</description>
			<parameters>
			<parameter name="Source" type="String" usage="required">
				<description> name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the UI from the DOM entirely and detaches all event listeners. Implementers should note that Logger will still accumulate messages.</description>
		</method>
		<method name="showCategory" scope="instance">
			<description>Shows log messages associated with given category.</description>
			<parameters>
			<parameter name="Category" type="String" usage="required">
				<description> name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onClickCollapseBtn" scope="instance" visibility="private">
			<description>Handles click events on the collapse button.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onCategoryCreate" scope="instance" visibility="private">
			<description>Handles Logger's categoryCreateEvent.</description>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description> The event.</description>
			</parameter>
			<parameter name="aArgs" type="Object[]" usage="required">
				<description> Data passed from event firer.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="collapse" scope="instance">
			<description>Collapses UI of LogReader. Logging functionality is not disrupted.</description>
		</method>
		<method name="resume" scope="instance">
			<description>Resumes output of log messages, including outputting any log messages that have been saved to buffer while paused.</description>
		</method>
		<method name="_onSourceCreate" scope="instance" visibility="private">
			<description>Handles Logger's sourceCreateEvent.</description>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description> The event.</description>
			</parameter>
			<parameter name="aArgs" type="Object[]" usage="required">
				<description> Data passed from event firer.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onClickPauseBtn" scope="instance" visibility="private">
			<description>Handles click events on the pause button.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initFooterEl" scope="instance" visibility="private">
			<description>Initializes the footer element.</description>
		</method>
		<method name="_onNewLog" scope="instance" visibility="private">
			<description>Handles Logger's newLogEvent.</description>
			<parameters>
			<parameter name="sType" type="String" usage="required">
				<description> The event.</description>
			</parameter>
			<parameter name="aArgs" type="Object[]" usage="required">
				<description> Data passed from event firer.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="html2Text" scope="instance" visibility="private">
			<description>Converts input chars &quot;&lt;&quot;, &quot;&gt;&quot;, and &quot;&amp;&quot; to HTML entities.</description>
			<parameters>
			<parameter name="sHtml" type="String" usage="required">
				<description> String to convert.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_filterLogs" scope="instance" visibility="private">
			<description>Reprints all log messages in the stack through filters.</description>
		</method>
		<method name="_onCheckCategory" scope="instance" visibility="private">
			<description>Handles check events on the category filter checkboxes.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_onCheckSource" scope="instance" visibility="private">
			<description>Handles check events on the category filter checkboxes.</description>
			<parameters>
			<parameter name="v" type="HTMLEvent" usage="required">
				<description> The click event.</description>
			</parameter>
			<parameter name="oSelf" type="Object" usage="required">
				<description> The LogReader instance.</description>
			</parameter>
			</parameters>
		</method>
		<method name="expand" scope="instance">
			<description>Expands UI of LogReader. Logging functionality is not disrupted.</description>
		</method>
		<method name="getSources" scope="instance">
			<description>Returns array of enabled sources.</description>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Array of enabled sources.</return-description>
		</method>
		<method name="_initSources" scope="instance" visibility="private">
			<description>Initializes source filters.</description>
		</method>
		<method name="hideCategory" scope="instance">
			<description>Hides log messages associated with given category.</description>
			<parameters>
			<parameter name="Category" type="String" usage="required">
				<description> name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_createCategoryCheckbox" scope="instance" visibility="private">
			<description>Creates the UI for a category filter in the LogReader footer element.</description>
			<parameters>
			<parameter name="sCategory" type="String" usage="required">
				<description> Category name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_initConsoleEl" scope="instance" visibility="private">
			<description>Initializes the console element.</description>
		</method>
		<method name="_initContainerEl" scope="instance" visibility="private">
			<description>Initializes the primary container element.</description>
		</method>
		<method name="clearConsole" scope="instance">
			<description>Does not delete any log messages, but clears all printed log messages from the console. Log messages will be printed out again if user re-filters. The static method YAHOO.widget.Logger.reset() should be called in order to actually delete log messages.</description>
		</method>
		<method name="hideSource" scope="instance">
			<description>Hides log messages associated with given source.</description>
			<parameters>
			<parameter name="Source" type="String" usage="required">
				<description> name.</description>
			</parameter>
			</parameters>
		</method>
		<method name="getCheckbox" scope="instance">
			<description>Returns related checkbox element for given filter (i.e., category or source).</description>
			<parameters>
			<parameter name="Category" type="String" usage="required">
				<description> or source name.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>Array of all filter checkboxes.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.MenuNode" superclass="YAHOO.widget.TextNode">
		<description>A menu-specific implementation that differs from TextNode in that only 
one sibling can be expanded at a time.</description>
		<constructors>
		<constructor scope="instance">
			<description>A menu-specific implementation that differs from TextNode in that only 
one sibling can be expanded at a time.</description>
			<return-types>
				<return-type type="YAHOO.widget.MenuNode" />
			</return-types>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description>  a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private or functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
			</parameter>
			<parameter name="oParent" type="YAHOO.widget.Node" usage="required">
				<description>  this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description>  the initial expanded/collapsed state (deprecated; use oData.expanded)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_type" type="undefined" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.widget.Record">
		<description>The Record class defines a DataTable record.</description>
		<constructors>
		<constructor scope="instance">
			<description>The Record class defines a DataTable record.</description>
			<return-types>
				<return-type type="YAHOO.widget.Record" />
			</return-types>
			<parameters>
			<parameter name="oConfigs" type="Object" usage="optional">
				<description>  (optional) Object literal of key/value pairs.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_sId" type="String" scope="instance" visibility="private">
			<description>Immutable unique ID assigned at instantiation. Remains constant while a Record's position index can change from sorting.</description>
		</property>
		<property name="_nCount" type="Number" scope="instance" visibility="private">
			<description>Immutable unique count assigned at instantiation. Remains constant while a Record's position index can change from sorting.</description>
		</property>
		<property name="_oData" type="Object" scope="instance" visibility="private">
			<description>Holds data for the Record in an object literal.</description>
		</property>
		<property name="Record._nCount" type="Number" scope="instance" visibility="private">
			<description>Internal class variable to give unique IDs to Record instances.</description>
		</property>
		</properties>
		<methods>
		<method name="getCount" scope="instance">
			<description>Returns unique count assigned at instantiation.</description>
			<return-description>Number</return-description>
		</method>
		<method name="getData" scope="instance">
			<description>Returns data for the Record for a field if given, or the entire object literal otherwise.</description>
			<parameters>
			<parameter name="sField" type="String" usage="optional">
				<description> (Optional) The field from which to retrieve data value.</description>
			</parameter>
			</parameters>
			<return-description>Object</return-description>
		</method>
		<method name="getId" scope="instance">
			<description>Returns unique ID assigned at instantiation.</description>
			<return-description>String</return-description>
		</method>
		<method name="setData" scope="instance">
			<description>Sets given data at the given key. Use the RecordSet method updateRecordValue to trigger events.</description>
			<parameters>
			<parameter name="sKey" type="String" usage="required">
				<description> The key of the new value.</description>
			</parameter>
			<parameter name="oData" type="MIXED" usage="required">
				<description> The new value.</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.TabView" superclass="YAHOO.util.Element">
		<description>A widget to control tabbed views.</description>
		<constructors>
		<constructor scope="instance">
			<description>A widget to control tabbed views.</description>
			<return-types>
				<return-type type="YAHOO.widget.TabView" />
			</return-types>
			<parameters>
			<parameter name="el(optional)" type="HTMLElement | String | Object" usage="required">
				<description> The html 
element that represents the TabView, or the attribute object to use. 
An element will be created if none provided.</description>
			</parameter>
			<parameter name="attr" type="Object" usage="optional">
				<description> (optional) A key map of the tabView's 
initial attributes.  Ignored if first arg is attributes object.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="CLASSNAME" type="undefined" scope="instance">
			<description>The className to add when building from scratch.</description>
		</property>
		<property name="TAB_PARENT_CLASSNAME" type="undefined" scope="instance">
			<description>The className of the HTMLElement containing the TabView's tab elements to look for when building from existing markup, or to add when building from scratch. All childNodes of the tab container are treated as Tabs when building from existing markup.</description>
		</property>
		<property name="CONTENT_PARENT_CLASSNAME" type="undefined" scope="instance">
			<description>The className of the HTMLElement containing the TabView's label elements to look for when building from existing markup, or to add when building from scratch. All childNodes of the content container are treated as content elements when building from existing markup.</description>
		</property>
		<property name="_tabParent" type="HTMLElement" scope="instance" visibility="private">
			<description>The container of the tabView's label elements.</description>
		</property>
		<property name="_contentParent" type="HTMLElement" scope="instance" visibility="private">
			<description>The container of the tabView's content elements.</description>
		</property>
		</properties>
		<methods>
		<method name="getTabIndex" scope="instance">
			<description>Returns the index of given tab.</description>
			<parameters>
			<parameter name="tab" type="YAHOO.widget.Tab" usage="required">
				<description> The tab whose index will be returned.</description>
			</parameter>
			</parameters>
			<return-description>int</return-description>
		</method>
		<method name="removeTab" scope="instance">
			<description>Removes the specified Tab from the TabView.</description>
			<parameters>
			<parameter name="item" type="YAHOO.widget.Tab" usage="required">
				<description> The Tab instance to be removed.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="contentTransition" scope="instance">
			<description>The transiton to use when switching between tabs.</description>
		</method>
		<method name="_initTabs" scope="instance" visibility="private">
			<description>Creates Tab instances from a collection of HTMLElements.</description>
			<return-description>void</return-description>
		</method>
		<method name="deselectTab" scope="instance">
			<description>Removes selected state from the given tab if it is the activeTab</description>
			<parameters>
			<parameter name="index" type="Int" usage="required">
				<description> The tab index to deselect</description>
			</parameter>
			</parameters>
		</method>
		<method name="initAttributes" scope="instance">
			<description>setAttributeConfigs TabView specific properties.</description>
			<parameters>
			<parameter name="attr" type="Object" usage="required">
				<description> Hash of initial attributes</description>
			</parameter>
			</parameters>
		</method>
		<method name="toString" scope="instance">
			<description>Provides a readable name for the TabView instance.</description>
			<return-description>String</return-description>
		</method>
		<method name="DOMEventHandler" scope="instance">
			<description>Routes childNode events.</description>
			<parameters>
			<parameter name="e" type="event" usage="required">
				<description> The Dom event that is being handled.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="addTab" scope="instance">
			<description>Adds a Tab to the TabView instance.  If no index is specified, the tab is added to the end of the tab list.</description>
			<parameters>
			<parameter name="tab" type="YAHOO.widget.Tab" usage="required">
				<description> A Tab instance to add.</description>
			</parameter>
			<parameter name="index" type="Integer" usage="required">
				<description> The position to add the tab.</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="selectTab" scope="instance">
			<description>Makes the tab at the given index the active tab</description>
			<parameters>
			<parameter name="index" type="Int" usage="required">
				<description> The tab index to be made active</description>
			</parameter>
			</parameters>
		</method>
		<method name="getTab" scope="instance">
			<description>Returns the Tab instance at the specified index.</description>
			<parameters>
			<parameter name="index" type="Integer" usage="required">
				<description> The position of the Tab.</description>
			</parameter>
			</parameters>
			<return-description>YAHOO.widget.Tab</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.CalendarNavigator">
		<description>The CalendarNavigator is used along with a Calendar/CalendarGroup to 
provide a Month/Year popup navigation control, allowing the user to navigate 
to a specific month/year in the Calendar/CalendarGroup without having to 
scroll through months sequentially</description>
		<constructors>
		<constructor scope="instance">
			<description>The CalendarNavigator is used along with a Calendar/CalendarGroup to 
provide a Month/Year popup navigation control, allowing the user to navigate 
to a specific month/year in the Calendar/CalendarGroup without having to 
scroll through months sequentially</description>
			<return-types>
				<return-type type="YAHOO.widget.CalendarNavigator" />
			</return-types>
			<parameters>
			<parameter name="cal" type="Calendar|CalendarGroup" usage="required">
				<description> The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_DEFAULT_CFG" type="Object" scope="static">
			<description>Object literal containing the default configuration values for the CalendarNavigator</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.YR_PATTERN" type="RegExp" scope="static">
			<description>Regular expression used to validate the year input</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.UPDATE_DELAY" type="Number" scope="static">
			<description>Artificial delay (in ms) between the time the Navigator is hidden and the Calendar/CalendarGroup state is updated. Allows the user the see the Calendar/CalendarGroup page changing. If set to 0 the Calendar/CalendarGroup page will be updated instantly</description>
		</property>
		<property name="lastCtrl" type="HTMLElement" scope="instance">
			<description>Reference to the last focusable control in the navigator (by default cancelEl)</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.MONTH_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Navigator's ID, to generate a unique ID for the month control.</description>
		</property>
		<property name="errorEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to display validation errors</description>
		</property>
		<property name="submitEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to update the Calendar/Calendar group with the month/year values</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT" type="String" scope="static">
			<description>Class applied to default controls</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.ID_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Calendar/CalendarGroup's ID, to generate a unique ID for the Navigator and it's bounding box.</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE" type="String" scope="static">
			<description>Class applied to the Calendar/CalendarGroup's bounding box to indicate the Navigator is currently visible</description>
		</property>
		<property name="id" type="String" scope="instance">
			<description>The unique ID for this CalendarNavigator instance</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.YEAR_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Navigator's ID, to generate a unique ID for the year control.</description>
		</property>
		<property name="firstCtrl" type="HTMLElement" scope="instance">
			<description>Reference to the first focusable control in the navigator (by default monthEl)</description>
		</property>
		<property name="__isIEQuirks" type="undefined" scope="instance" visibility="private">
			<description>Private flag, to identify IE Quirks</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.TRIM" type="RegExp" scope="static">
			<description>Regular expression used to trim strings</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.MONTH" type="String" scope="static">
			<description>Class applied to the month label/control bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.YR_MINOR_INC" type="Number" scope="static">
			<description>The amount by which to increment the current year value, when the arrow up/down key is pressed on the year control</description>
		</property>
		<property name="yearEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to input the year</description>
		</property>
		<property name="navEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to render the navigator's bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.MASK" type="String" scope="static">
			<description>Class applied to the Navigator mask's bounding box</description>
		</property>
		<property name="monthEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to input the month</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.YR_MAJOR_INC" type="Number" scope="static">
			<description>The amount by which to increment the current year value, when the page up/down key is pressed on the year control</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES" type="Object" scope="static">
			<description>YAHOO.widget.CalendarNavigator.CLASSES contains constants for the class values applied to the CalendarNaviatgator's DOM elements</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.ERROR" type="String" scope="static">
			<description>Class applied to the validation error area's bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.NAV" type="String" scope="static">
			<description>Class applied to the Calendar Navigator's bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS" type="String" scope="static">
			<description>Class applied to the submit/cancel button's bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.INVALID" type="String" scope="static">
			<description>Class applied to controls with invalid data (e.g. a year input field with invalid an year)</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.ERROR_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Navigator's ID, to generate a unique ID for the error bounding box.</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.BUTTON" type="String" scope="static">
			<description>Class applied to buttons wrapping element</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL" type="String" scope="static">
			<description>Class applied to the year input control</description>
		</property>
		<property name="_year" type="Number" scope="instance">
			<description>Internal state property for the current year displayed in the navigator</description>
		</property>
		<property name="maskEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to render the navigator's mask</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="static">
			<description>Object literal containing the default configuration values for the CalendarNavigator The configuration object is expected to follow the format below, with the properties being case sensitive. &lt;dl&gt; &lt;dt&gt;strings&lt;/dt&gt; &lt;dd&gt;&lt;em&gt;Object&lt;/em&gt; : An object with the properties shown below, defining the string labels to use in the Navigator's UI &lt;dl&gt; &lt;dt&gt;month&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the month label. Defaults to &quot;Month&quot;.&lt;/dd&gt; &lt;dt&gt;year&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the year label. Defaults to &quot;Year&quot;.&lt;/dd&gt; &lt;dt&gt;submit&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the submit button label. Defaults to &quot;Okay&quot;.&lt;/dd&gt; &lt;dt&gt;cancel&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the cancel button label. Defaults to &quot;Cancel&quot;.&lt;/dd&gt; &lt;dt&gt;invalidYear&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for invalid year values. Defaults to &quot;Year needs to be a number&quot;.&lt;/dd&gt; &lt;/dl&gt; &lt;/dd&gt; &lt;dt&gt;monthFormat&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG&lt;/dd&gt; &lt;dt&gt;initialFocus&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : Either &quot;year&quot; or &quot;month&quot; specifying which input control should get initial focus. Defaults to &quot;year&quot;&lt;/dd&gt; &lt;/dl&gt;</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.YEAR" type="String" scope="static">
			<description>Class applied to the year label/control bounding box</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Navigator's ID, to generate a unique ID for the &quot;Cancel&quot; button.</description>
		</property>
		<property name="__isMac" type="undefined" scope="instance" visibility="private">
			<description>Private flag, to identify MacOS</description>
		</property>
		<property name="_doc" type="HTMLDocument" scope="instance">
			<description>The document containing the Calendar/Calendar group instance</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL" type="String" scope="static">
			<description>Class applied to the month input control</description>
		</property>
		<property name="_month" type="Number" scope="instance">
			<description>Internal state property for the current month index displayed in the navigator</description>
		</property>
		<property name="__rendered" type="Boolean" scope="instance" visibility="private">
			<description>Private internal state property which indicates whether or not the Navigator has been rendered.</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS" type="Number" scope="static">
			<description>The number of digits to which the year input control is to be limited.</description>
		</property>
		<property name="cal" type="{Calendar|CalendarGroup}" scope="instance">
			<description>The Calendar/CalendarGroup instance to which the navigator belongs</description>
		</property>
		<property name="cancelEl" type="HTMLElement" scope="instance">
			<description>Reference to the HTMLElement used to hide the navigator without updating the Calendar/Calendar group</description>
		</property>
		<property name="YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX" type="String" scope="static">
			<description>The suffix added to the Navigator's ID, to generate a unique ID for the &quot;Submit&quot; button.</description>
		</property>
		</properties>
		<methods>
		<method name="_getMonthFromUI" scope="instance">
			<description>Returns the month value (index), from the month UI element</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The month index, or 0 if a UI element for the month
is not found</return-description>
		</method>
		<method name="createNav" scope="instance">
			<description>Creates the navigator's containing HTMLElement, it's contents, and appends the containg element to the Calendar/CalendarGroup's container.</description>
		</method>
		<method name="_update" scope="instance">
			<description>Updates the Calendar rendered state, based on the state of the CalendarNavigator</description>
			<parameters>
			<parameter name="cal" type="" usage="required">
				<description> The Calendar instance to update</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleDirectionKeys" scope="instance">
			<description>Default Keyboard event handler to capture up/down/pgup/pgdown on the Navigator's year control (yearEl).</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM event being handled</description>
			</parameter>
			</parameters>
		</method>
		<method name="render" scope="instance">
			<description>Renders the HTML for the navigator, adding it to the document and attaches event listeners if it has not already been rendered.</description>
		</method>
		<method name="show" scope="instance">
			<description>Displays the navigator and mask, updating the input controls to reflect the currently set month and year. The show method will invoke the render method if the navigator has not been renderered already, allowing for lazy rendering of the control. The show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events</description>
		</method>
		<method name="erase" scope="instance">
			<description>Removes all renderered HTML elements for the Navigator from the DOM, purges event listeners and clears (nulls) any property references to HTML references</description>
		</method>
		<method name="_handleShiftTabKey" scope="instance">
			<description>Default Keyboard event handler to capture Shift-Tab on the first control (firstCtrl) in the Navigator.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM event being handled</description>
			</parameter>
			</parameters>
		</method>
		<method name="cancel" scope="instance">
			<description>Hides the navigator and mask, without updating the Calendar/CalendarGroup's state</description>
		</method>
		<method name="applyKeyListeners" scope="instance">
			<description>Attaches DOM listeners for keyboard support. Tab/Shift-Tab looping, Enter Key Submit on Year element, Up/Down/PgUp/PgDown year increment on Year element &lt;p&gt; NOTE: MacOSX Safari 2.x doesn't let you tab to buttons and MacOSX Gecko does not let you tab to buttons or select controls, so for these browsers, Tab/Shift-Tab looping is limited to the elements which can be reached using the tab key. &lt;/p&gt;</description>
		</method>
		<method name="setError" scope="instance">
			<description>Displays an error message in the Navigator's error panel</description>
			<parameters>
			<parameter name="msg" type="String" usage="required">
				<description> The error message to display</description>
			</parameter>
			</parameters>
		</method>
		<method name="hideMask" scope="instance">
			<description>Hides the navigator's mask element</description>
		</method>
		<method name="_updateMonthUI" scope="instance">
			<description>Updates the Navigator's month UI, based on the month value set on the Navigator object</description>
		</method>
		<method name="hide" scope="instance">
			<description>Hides the navigator and mask The show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events</description>
		</method>
		<method name="submit" scope="instance">
			<description>Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid. &lt;p&gt; If the currently set month/year is invalid, a validation error will be displayed and the Calendar/CalendarGroup's pagedate will not be updated. &lt;/p&gt;</description>
		</method>
		<method name="renderNavContents" scope="instance">
			<description>Renders the contents of the navigator</description>
			<parameters>
			<parameter name="html" type="Array" usage="required">
				<description> The HTML buffer to append the HTML to.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>A reference to the buffer passed in.</return-description>
		</method>
		<method name="init" scope="instance">
			<description>Init lifecycle method called as part of construction</description>
			<parameters>
			<parameter name="cal" type="Calendar" usage="required">
				<description> The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached</description>
			</parameter>
			</parameters>
		</method>
		<method name="setYearError" scope="instance">
			<description>Displays the validation error UI for the year control</description>
		</method>
		<method name="_getYearFromUI" scope="instance">
			<description>Returns the year value, from the Navitator's year UI element</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The year value set in the UI, if valid. null is returned if 
the UI does not contain a valid year value.</return-description>
		</method>
		<method name="_syncMask" scope="instance">
			<description>Used to set the width/height of the mask in pixels to match the Calendar Container. Currently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%). &lt;p&gt; The method is also registered as an HTMLElement resize listener on the Calendars container element. &lt;/p&gt;</description>
		</method>
		<method name="getYear" scope="instance">
			<description>Returns the current year set on the navigator Note: This may not be the year set in the UI, if the UI contains an invalid value.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The Navigator's current year value</return-description>
		</method>
		<method name="destroy" scope="instance">
			<description>Destroys the Navigator object and any HTML references</description>
		</method>
		<method name="getMonth" scope="instance">
			<description>Returns the current month set on the navigator Note: This may not be the month set in the UI, if the UI contains an invalid value.</description>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The Navigator's current month index</return-description>
		</method>
		<method name="showMask" scope="instance">
			<description>Displays the navigator's mask element</description>
		</method>
		<method name="renderButton" scope="instance">
			<description>Renders the submit/cancel buttons for the navigator</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The HTML created for the Button UI</return-description>
		</method>
		<method name="clearErrors" scope="instance">
			<description>Clears all validation and error messages in the UI</description>
		</method>
		<method name="applyListeners" scope="instance">
			<description>Attaches DOM event listeners to the rendered elements &lt;p&gt; The method will call applyKeyListeners, to setup keyboard specific listeners &lt;/p&gt;</description>
		</method>
		<method name="purgeListeners" scope="instance">
			<description>Removes/purges DOM event listeners from the rendered elements</description>
		</method>
		<method name="clearYearError" scope="instance">
			<description>Removes the validation error UI for the year control</description>
		</method>
		<method name="clearError" scope="instance">
			<description>Clears the navigator's error message and hides the error panel</description>
		</method>
		<method name="validate" scope="instance">
			<description>Validates the current state of the UI controls</description>
			<return-types>
			<return-type type="Boolean" />
			</return-types>
			<return-description>true, if the current UI state contains valid values, false if not</return-description>
		</method>
		<method name="setMonth" scope="instance">
			<description>Sets the current month on the Navigator, and updates the UI</description>
			<parameters>
			<parameter name="nMonth" type="Number" usage="required">
				<description> The month index, from 0 (Jan) through 11 (Dec).</description>
			</parameter>
			</parameters>
		</method>
		<method name="_setFirstLastElements" scope="instance">
			<description>Sets up references to the first and last focusable element in the Navigator's UI in terms of tab order (Naviagator's firstEl and lastEl properties). The references are used to control modality by looping around from the first to the last control and visa versa for tab/shift-tab navigation. &lt;p&gt; See applyKeyListeners &lt;/p&gt;</description>
		</method>
		<method name="_show" scope="instance">
			<description>Protected implementation to handle how UI elements are hidden/shown.</description>
		</method>
		<method name="setInitialFocus" scope="instance">
			<description>Sets the initial focus, based on the configured value</description>
		</method>
		<method name="_handleEnterKey" scope="instance">
			<description>Default Keyboard event handler to capture Enter on the Navigator's year control (yearEl)</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM event being handled</description>
			</parameter>
			</parameters>
		</method>
		<method name="__getCfg" scope="instance" visibility="private">
			<description>Retrieve Navigator configuration values from the parent Calendar/CalendarGroup's config value. &lt;p&gt; If it has not been set in the user provided configuration, the method will return the default value of the configuration property, as set in DEFAULT_CONFIG &lt;/p&gt;</description>
			<parameters>
			<parameter name="Case" type="String" usage="required">
				<description> sensitive property name.</description>
			</parameter>
			<parameter name="true," type="Boolean" usage="required">
				<description> if the property is a string property, false if not.</description>
			</parameter>
			</parameters>
			<return-description>The value of the configuration property</return-description>
		</method>
		<method name="setYear" scope="instance">
			<description>Sets the current year on the Navigator, and updates the UI. If the provided year is invalid, it will not be set.</description>
			<parameters>
			<parameter name="nYear" type="Number" usage="required">
				<description> The full year value to set the Navigator to.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_handleTabKey" scope="instance">
			<description>Default Keyboard event handler to capture Tab on the last control (lastCtrl) in the Navigator.</description>
			<parameters>
			<parameter name="e" type="Event" usage="required">
				<description> The DOM event being handled</description>
			</parameter>
			</parameters>
		</method>
		<method name="createMask" scope="instance">
			<description>Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups container.</description>
		</method>
		<method name="purgeKeyListeners" scope="instance">
			<description>Removes/purges DOM listeners for keyboard support</description>
		</method>
		<method name="renderYear" scope="instance">
			<description>Renders the year label and control for the navigator</description>
			<parameters>
			<parameter name="html" type="Array" usage="required">
				<description> The HTML buffer to append the HTML to.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>A reference to the buffer passed in.</return-description>
		</method>
		<method name="_updateYearUI" scope="instance">
			<description>Updates the Navigator's year UI, based on the year value set on the Navigator object</description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Selector">
		<description>Provides helper methods for collecting and filtering DOM elements.</description>
		<properties>
		<property name="attrAliases" type="object" scope="instance">
			<description>Mapping of attributes to aliases, normally to work around HTMLAttributes that conflict with JS reserved words.</description>
		</property>
		<property name="operators" type="object" scope="instance">
			<description>List of operators and corresponding boolean functions. These functions are passed the attribute and the current node's value of the attribute.</description>
		</property>
		<property name="document" type="object" scope="instance">
			<description>Default document for use queries</description>
		</property>
		<property name="shorthand" type="object" scope="instance">
			<description>Mapping of shorthand tokens to corresponding attribute selector</description>
		</property>
		<property name="pseudos" type="object" scope="instance">
			<description>List of pseudo-classes and corresponding boolean functions. These functions are called with the current node, and any value that was parsed with the pseudo regex.</description>
		</property>
		</properties>
		<methods>
		<method name="test" scope="static">
			<description>Test if the supplied node matches the supplied selector.</description>
			<parameters>
			<parameter name="node" type="HTMLElement | String" usage="required">
				<description> An id or node reference to the HTMLElement being tested.</description>
			</parameter>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS Selector to test the node against.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Whether or not the node matches the selector.</return-description>
		</method>
		<method name="filter" scope="static">
			<description>Filters a set of nodes based on a given CSS selector.</description>
			<parameters>
			<parameter name="nodes" type="array" usage="required">
				<description> A set of nodes/ids to filter.</description>
			</parameter>
			<parameter name="selector" type="string" usage="required">
				<description> The selector used to test each node.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="array" />
			</return-types>
			<return-description>An array of nodes from the supplied array that match the given selector.</return-description>
		</method>
		<method name="_tokenize" scope="instance">
			<description>Break selector into token units per simple selector. Combinator is attached to left-hand selector.</description>
		</method>
		<method name="query" scope="static">
			<description>Retrieves a set of nodes based on a given CSS selector.</description>
			<parameters>
			<parameter name="selector" type="string" usage="required">
				<description> The CSS Selector to test the node against.</description>
			</parameter>
			<parameter name="root" type="HTMLElement | String" usage="required">
				<description> optional An id or HTMLElement to start the query from. Defaults to Selector.document.</description>
			</parameter>
			<parameter name="firstOnly" type="Boolean" usage="required">
				<description> optional Whether or not to return only the first match.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Array" />
			</return-types>
			<return-description>An array of nodes that match the given selector.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.Paginator.ui.YourComponent">
		<description>Describe the ui Component</description>
		<constructors>
		<constructor scope="instance">
			<description>Describe the ui Component</description>
			<return-types>
				<return-type type="YAHOO.widget.Paginator.ui.YourComponent" />
			</return-types>
			<parameters>
			<parameter name="p" type="Pagintor" usage="required">
				<description>  Paginator instance to attach to</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="button" type="HTMLElement" scope="instance" visibility="private">
			<description>Describe the node that will be stored in this property</description>
		</property>
		</properties>
		<methods>
		<method name="initListeners" scope="instance">
			<description>Subscribe to the Paginator's events that will affect this component's ui</description>
		</method>
		<method name="render" scope="instance">
			<description>Generate the nodes and return the appropriate node given the current pagination state.</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="HTMLElement" />
			</return-types>
		</method>
		<method name="initUI" scope="instance" visibility="private">
			<description>Initialize the DOM nodes managed by this component</description>
			<parameters>
			<parameter name="id_base" type="string" usage="required">
				<description> used to create unique ids for generated nodes</description>
			</parameter>
			</parameters>
		</method>
		<method name="update" scope="instance">
			<description>Make any necessary changes to the component nodes</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> The calling change event</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="static">
			<description>Decorates Paginator instances with new attributes. Called during Paginator instantiation.</description>
			<parameters>
			<parameter name="p" type="Paginator" usage="required">
				<description> Paginator instance to decorate</description>
			</parameter>
			</parameters>
		</method>
		<method name="onClick" scope="instance">
			<description>Listener for a DOM event from a managed element. Pass new value to Paginator.setStartIndex(..), .setPage(..) etc to fire off changeRequest events. DO NOT modify the managed element's state here. That should happen in response to the Paginator's recordOffsetChange event (et al)</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The click event</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance" visibility="private">
			<description>Remove the generated DOM structure</description>
		</method>
		<method name="bindUI" scope="instance" visibility="private">
			<description>Attach DOM event listeners to the nodes managed by this component</description>
		</method>
		<method name="rebuild" scope="instance">
			<description>Make more substantial changes in a separate method if necessary</description>
			<parameters>
			<parameter name="e" type="CustomEvent" usage="required">
				<description> the calling change event</description>
			</parameter>
			</parameters>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.History">
		<description>The History class provides the ability to use the back/forward navigation
buttons in a DHTML application. It also allows a DHTML application to
be bookmarked in a specific state.</description>
		<constructors>
		<constructor scope="instance">
			<description>The History class provides the ability to use the back/forward navigation
buttons in a DHTML application. It also allows a DHTML application to
be bookmarked in a specific state.</description>
			<return-types>
				<return-type type="YAHOO.util.History" />
			</return-types>
		</constructor>
		</constructors>
		<properties>
		<property name="_histFrame" type="HTMLIFrameElement" scope="instance" visibility="private">
			<description>Our hidden IFrame used to store the browsing history.</description>
		</property>
		<property name="_initialized" type="boolean" scope="instance" visibility="private">
			<description>Flag used to tell whether YAHOO.util.History.initialize has been called.</description>
		</property>
		<property name="_stateField" type="HTMLInputElement|HTMLTextAreaElement" scope="instance" visibility="private">
			<description>INPUT field (with type=&quot;hidden&quot; or type=&quot;text&quot;) or TEXTAREA. This field keeps the value of the initial state, current state the list of all states across pages within a single browser session.</description>
		</property>
		<property name="_modules" type="array" scope="instance" visibility="private">
			<description>List of registered modules.</description>
		</property>
		<property name="_fqstates" type="array" scope="instance" visibility="private">
			<description>List of fully qualified states. This is used only by Safari.</description>
		</property>
		</properties>
		<methods>
		<method name="getCurrentState" scope="instance">
			<description>Returns the current state of the specified module.</description>
			<parameters>
			<parameter name="module" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The current state of the specified module.</return-description>
		</method>
		<method name="_updateIFrame" scope="instance" visibility="private">
			<description>Update the IFrame with our new state.</description>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>true if successful. false otherwise.</return-description>
		</method>
		<method name="_handleFQStateChange" scope="instance" visibility="private">
			<description>Sets the new currentState attribute of all modules depending on the new fully qualified state. Also notifies the modules which current state has changed.</description>
			<parameters>
			<parameter name="fqstate" type="string" usage="required">
				<description> Fully qualified state</description>
			</parameter>
			</parameters>
		</method>
		<method name="onReady" scope="instance">
			<description>Executes the supplied callback when the Browser History Manager is ready. This will execute immediately if called after the Browser History Manager onLoad event has fired.</description>
			<parameters>
			<parameter name="fn" type="function" usage="required">
				<description> what to execute when the Browser History Manager is ready.</description>
			</parameter>
			<parameter name="obj" type="object" usage="required">
				<description> an optional object to be passed back as a parameter to fn.</description>
			</parameter>
			<parameter name="overrideContext" type="boolean|object" usage="required">
				<description> If true, the obj passed in becomes fn's execution scope.</description>
			</parameter>
			</parameters>
		</method>
		<method name="navigate" scope="instance">
			<description>Call this method when you want to store a new entry in the browser's history.</description>
			<parameters>
			<parameter name="module" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			<parameter name="state" type="string" usage="required">
				<description> String representing the new state of the specified module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Indicates whether the new state was successfully added to the history.</return-description>
		</method>
		<method name="_initialize" scope="instance" visibility="private">
			<description>Finish up the initialization of the Browser History Manager.</description>
		</method>
		<method name="register" scope="instance">
			<description>Registers a new module.</description>
			<parameters>
			<parameter name="module" type="string" usage="required">
				<description> Non-empty string uniquely identifying the module you wish to register.</description>
			</parameter>
			<parameter name="initialState" type="string" usage="required">
				<description> The initial state of the specified module corresponding to its earliest history entry.</description>
			</parameter>
			<parameter name="onStateChange" type="function" usage="required">
				<description> Callback called when the state of the specified module has changed.</description>
			</parameter>
			<parameter name="obj" type="object" usage="required">
				<description> An arbitrary object that will be passed as a parameter to the handler.</description>
			</parameter>
			<parameter name="overrideContext" type="boolean" usage="required">
				<description> If true, the obj passed in becomes the execution scope of the listener.</description>
			</parameter>
			</parameters>
		</method>
		<method name="_checkIframeLoaded" scope="instance" visibility="private">
			<description>Periodically checks whether our internal IFrame is ready to be used.</description>
		</method>
		<method name="getBookmarkedState" scope="instance">
			<description>Returns the state of a module according to the URL fragment identifier. This method is useful to initialize your modules if your application was bookmarked from a particular state.</description>
			<parameters>
			<parameter name="module" type="string" usage="required">
				<description> Non-empty string representing your module.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The bookmarked state of the specified module.</return-description>
		</method>
		<method name="initialize" scope="instance">
			<description>Initializes the Browser History Manager. Call this method from a script block located right after the opening body tag.</description>
			<parameters>
			<parameter name="stateField" type="string|HTML Element" usage="required">
				<description> &lt;input type=&quot;hidden&quot;&gt; used to store application states. Must be in the static markup.</description>
			</parameter>
			<parameter name="histFrame" type="string|HTML Element" usage="required">
				<description> IFrame used to store the history (only required on Internet Explorer)</description>
			</parameter>
			</parameters>
		</method>
		<method name="_storeStates" scope="instance" visibility="private">
			<description>Stores all the registered modules' initial state and current state. On Safari, we also store all the fully qualified states visited by the application within a single browser session. The storage takes place in the form field specified during initialization.</description>
		</method>
		<method name="getQueryStringParameter" scope="instance">
			<description>Returns the value of the specified query string parameter. This method is not used internally by the Browser History Manager. However, it is provided here as a helper since many applications using the Browser History Manager will want to read the value of url parameters to initialize themselves.</description>
			<parameters>
			<parameter name="paramName" type="string" usage="required">
				<description> Name of the parameter we want to look up.</description>
			</parameter>
			<parameter name="queryString" type="string" usage="required">
				<description> Optional URL to look at. If not specified, this method uses the URL in the address bar.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The value of the specified parameter, or null.</return-description>
		</method>
		<method name="_getHash" scope="instance" visibility="private">
			<description>location.hash is a bit buggy on Opera. I have seen instances where navigating the history using the back/forward buttons, and hence changing the URL, would not change location.hash. That's ok, the implementation of an equivalent is trivial.</description>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>The hash portion of the document's location</return-description>
		</method>
		<method name="multiNavigate" scope="instance">
			<description>Call this method when you want to store a new entry in the browser's history.</description>
			<parameters>
			<parameter name="states" type="object" usage="required">
				<description> Associative array of module-state pairs to set simultaneously.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="boolean" />
			</return-types>
			<return-description>Indicates whether the new state was successfully added to the history.</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.DateNode" superclass="YAHOO.widget.TextNode">
		<description>A Date-specific implementation that differs from TextNode in that it uses 
YAHOO.widget.Calendar as an in-line editor, if available
If Calendar is not available, it behaves as a plain TextNode.</description>
		<constructors>
		<constructor scope="instance">
			<description>A Date-specific implementation that differs from TextNode in that it uses 
YAHOO.widget.Calendar as an in-line editor, if available
If Calendar is not available, it behaves as a plain TextNode.</description>
			<return-types>
				<return-type type="YAHOO.widget.DateNode" />
			</return-types>
			<parameters>
			<parameter name="oData" type="object" usage="required">
				<description>  a string or object containing the data that will
be used to render this node.
Providing a string is the same as providing an object with a single property named label.
All values in the oData will be used to set equally named properties in the node
as long as the node does have such properties, they are not undefined, private nor functions.
All attributes are made available in noderef.data, which
can be used to store custom attributes.  TreeView.getNode(s)ByProperty
can be used to retrieve a node by one of the attributes.</description>
			</parameter>
			<parameter name="oParent" type="YAHOO.widget.Node" usage="required">
				<description>  this node's parent node</description>
			</parameter>
			<parameter name="expanded" type="boolean" usage="required">
				<description>  the initial expanded/collapsed state (deprecated; use oData.expanded)</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="_type" type="string" scope="instance" visibility="private">
			<description>The node type</description>
		</property>
		<property name="calendarConfig" type="undefined" scope="instance">
			<description>Configuration object for the Calendar editor, if used. See &lt;a href=&quot;http://developer.yahoo.com/yui/calendar/#internationalization&quot;&gt;http://developer.yahoo.com/yui/calendar/#internationalization&lt;/a&gt;</description>
		</property>
		</properties>
		<methods>
		<method name="getEditorValue" scope="instance">
			<description>Returns the value from the input element. Overrides Node.getEditorValue.</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="string" />
			</return-types>
			<return-description>date entered</return-description>
		</method>
		<method name="fillEditorContainer" scope="instance">
			<description>If YAHOO.widget.Calendar is available, it will pop up a Calendar to enter a new date. Otherwise, it falls back to a plain &amp;lt;input&amp;gt; textbox</description>
			<parameters>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
			<return-description>void</return-description>
		</method>
		<method name="displayEditedValue" scope="instance">
			<description>Finally displays the newly entered date in the tree. Overrides Node.displayEditedValue.</description>
			<parameters>
			<parameter name="value" type="string" usage="required">
				<description> date to be displayed and stored in the node</description>
			</parameter>
			<parameter name="editorData" type="YAHOO.widget.TreeView.editorData" usage="required">
				<description>  a shortcut to the static object holding editing information</description>
			</parameter>
			</parameters>
		</method>
		<method name="getNodeDefinition" scope="instance">
			<description>Returns an object which could be used to build a tree out of this node and its children. It can be passed to the tree constructor to reproduce this node as a tree. It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.</description>
			<return-types>
			<return-type type="Object | false" />
			</return-types>
			<return-description>definition of the node or false if this node or any descendant is defined as dynamic</return-description>
		</method>
		</methods>
	</class>
	<class type="YAHOO.widget.BarSeries">
		<description>BarSeries class for the YUI Charts widget.</description>
		<constructors>
		<constructor scope="instance">
			<description>BarSeries class for the YUI Charts widget.</description>
			<return-types>
				<return-type type="YAHOO.widget.BarSeries" />
			</return-types>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.tool.TestLogger">
		<description>Displays test execution progress and results, providing filters based on
different key events.</description>
		<constructors>
		<constructor scope="instance">
			<description>Displays test execution progress and results, providing filters based on
different key events.</description>
			<return-types>
				<return-type type="YAHOO.tool.TestLogger" />
			</return-types>
			<parameters>
			<parameter name="element" type="HTMLElement" usage="required">
				<description> (Optional) The element to create the logger in.</description>
			</parameter>
			<parameter name="config" type="Object" usage="required">
				<description> (Optional) Configuration options for the logger.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<methods>
		<method name="_handleTestRunnerEvent" scope="instance" visibility="private">
			<description>Handles all TestRunner events, outputting appropriate data into the console.</description>
			<parameters>
			<parameter name="data" type="Object" usage="required">
				<description> The event data object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="formatMsg" scope="instance" visibility="private">
			<description>Formats message string to HTML for output to console.</description>
			<parameters>
			<parameter name="oLogMsg" type="Object" usage="required">
				<description> Log message object.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>HTML-formatted message for output to console.</return-description>
		</method>
		<method name="clearTestRunner" scope="static">
			<description>Clears the reference to the TestRunner from previous operations. This unsubscribes all events and removes the object reference.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setTestRunner" scope="static">
			<description>Sets the source test runner that the logger should monitor.</description>
			<parameters>
			<parameter name="testRunner" type="YAHOO.tool.TestRunner" usage="required">
				<description> The TestRunner to observe.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.StorageEvent">
		<description>The StorageEvent class manages the storage events by emulating the HTML 5 implementation.</description>
		<constructors>
		<constructor scope="instance">
			<description>The StorageEvent class manages the storage events by emulating the HTML 5 implementation.</description>
			<return-types>
				<return-type type="YAHOO.util.StorageEvent" />
			</return-types>
			<parameters>
			<parameter name="storageArea" type="Object" usage="required">
				<description>  Required. The Storage object that was affected.</description>
			</parameter>
			<parameter name="key" type="String" usage="required">
				<description>  Required. The key being changed; DOMString in HTML 5 spec.</description>
			</parameter>
			<parameter name="oldValue" type="String" usage="required">
				<description>  Required. The old value of the key being changed; DOMString in HTML 5 spec.</description>
			</parameter>
			<parameter name="newValue" type="String" usage="required">
				<description>  Required. The new value of the key being changed; DOMString in HTML 5 spec.</description>
			</parameter>
			<parameter name="type" type="String" usage="required">
				<description>  Required. The storage event type.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="key" type="{String}" scope="static">
			<description>The 'key' attribute represents the key being changed.</description>
		</property>
		<property name="url" type="{String}" scope="static">
			<description>The 'url' attribute represents the address of the document whose key changed.</description>
		</property>
		<property name="source" type="{Object}" scope="static">
			<description>The 'source' attribute represents the WindowProxy object of the browsing context of the document whose key changed.</description>
		</property>
		<property name="storageArea" type="{Object}" scope="static">
			<description>The 'storageArea' attribute represents the Storage object that was affected.</description>
		</property>
		<property name="oldValue" type="{String}" scope="static">
			<description>The 'oldValue' attribute represents the old value of the key being changed.</description>
		</property>
		<property name="type" type="{Object}" scope="static">
			<description>The 'type' attribute represents the Storage event type.</description>
		</property>
		<property name="newValue" type="{String}" scope="static">
			<description>The 'newValue' attribute represents the new value of the key being changed.</description>
		</property>
		</properties>
	</class>
	<class type="YAHOO.tool.TestManager">
		<description>Runs pages containing test suite definitions.</description>
		<properties>
		<property name="_pages" type="String[]" scope="static" visibility="private">
			<description>Array of pages to load.</description>
		</property>
		<property name="TEST_MANAGER_COMPLETE_EVENT" type="string" scope="static">
			<description>Constant for the testmanagercomplete custom event</description>
		</property>
		<property name="_timeoutId" type="int" scope="static" visibility="private">
			<description>The timeout ID for the next iteration through the tests.</description>
		</property>
		<property name="_logger" type="YAHOO.tool.TestLogger" scope="static" visibility="private">
			<description>The logger used to output results from the various tests.</description>
		</property>
		<property name="TEST_PAGE_BEGIN_EVENT" type="string" scope="static">
			<description>Constant for the testpagebegin custom event</description>
		</property>
		<property name="TEST_PAGE_COMPLETE_EVENT" type="string" scope="static">
			<description>Constant for the testpagecomplete custom event</description>
		</property>
		<property name="_curPage" type="String" scope="static" visibility="private">
			<description>The URL of the page currently being executed.</description>
		</property>
		<property name="_results" type="Object" scope="static" visibility="private">
			<description>Aggregated results</description>
		</property>
		<property name="TEST_MANAGER_BEGIN_EVENT" type="string" scope="static">
			<description>Constant for the testmanagerbegin custom event</description>
		</property>
		<property name="_frame" type="Window" scope="static" visibility="private">
			<description>The frame used to load and run tests.</description>
		</property>
		</properties>
		<methods>
		<method name="load" scope="static">
			<description>Signals that a test page has been loaded. This should be called from within the test page itself to notify the TestManager that it is ready.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_run" scope="static" visibility="private">
			<description>Loads the next test page into the iframe.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="stop" scope="static">
			<description>Stops the execution of tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="setPages" scope="static">
			<description>Sets the pages to be loaded.</description>
			<parameters>
			<parameter name="pages" type="String[]" usage="required">
				<description> An array of URLs to load.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="start" scope="static">
			<description>Begins the process of running the tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_processResults" scope="static" visibility="private">
			<description>Processes the results of a test page run, outputting log messages for failed tests.</description>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		<method name="_handleTestRunnerComplete" scope="static" visibility="private">
			<description>Handles TestRunner.COMPLETE_EVENT, storing the results and beginning the loop again.</description>
			<parameters>
			<parameter name="data" type="Object" usage="required">
				<description> Data about the event.</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Void" />
			</return-types>
		</method>
		</methods>
	</class>
	<class type="YAHOO.util.Point" superclass="YAHOO.util.Region">
		<description>A point is a region that is special in that it represents a single point on 
the grid.</description>
		<constructors>
		<constructor scope="instance">
			<description>A point is a region that is special in that it represents a single point on 
the grid.</description>
			<return-types>
				<return-type type="YAHOO.util.Point" />
			</return-types>
			<parameters>
			<parameter name="x" type="Int" usage="required">
				<description> The X position of the point</description>
			</parameter>
			<parameter name="y" type="Int" usage="required">
				<description> The Y position of the point</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
	</class>
	<class type="YAHOO.widget.Tooltip" superclass="YAHOO.widget.Overlay">
		<description>Tooltip is an implementation of Overlay that behaves like an OS tooltip, 
displaying when the user mouses over a particular element, and 
disappearing on mouse out.</description>
		<constructors>
		<constructor scope="instance">
			<description>Tooltip is an implementation of Overlay that behaves like an OS tooltip, 
displaying when the user mouses over a particular element, and 
disappearing on mouse out.</description>
			<return-types>
				<return-type type="YAHOO.widget.Tooltip" />
			</return-types>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Tooltip &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Tooltip</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing 
the configuration that should be set for this Overlay. See configuration 
documentation for more details.</description>
			</parameter>
			</parameters>
		</constructor>
		</constructors>
		<properties>
		<property name="showProcId" type="int" scope="instance">
			<description>The unique process ID associated with the thread responsible for showing the Tooltip.</description>
		</property>
		<property name="YAHOO.widget.Tooltip.CSS_TOOLTIP" type="String" scope="static">
			<description>Constant representing the Tooltip CSS class</description>
		</property>
		<property name="EVENT_TYPES" type="Object" scope="instance" visibility="private">
			<description>Constant representing the name of the Tooltip's events</description>
		</property>
		<property name="DEFAULT_CONFIG" type="Object" scope="instance" visibility="private">
			<description>Constant representing the Tooltip's configuration properties</description>
		</property>
		</properties>
		<methods>
		<method name="onContextMouseOver" scope="instance">
			<description>The default event handler fired when the user mouses over the context element.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The current DOM event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The object argument</description>
			</parameter>
			</parameters>
		</method>
		<method name="onRender" scope="instance">
			<description>&quot;render&quot; event handler for the Tooltip.</description>
			<parameters>
			<parameter name="p_sType" type="String" usage="required">
				<description> String representing the name of the event  that was fired.</description>
			</parameter>
			<parameter name="p_aArgs" type="Array" usage="required">
				<description> Array of arguments sent when the event was fired.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doShow" scope="instance">
			<description>Processes the showing of the Tooltip by setting the timeout delay and offset of the Tooltip.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The current DOM event</description>
			</parameter>
			<parameter name="context" type="HTMLElement" usage="required">
				<description> The current context element</description>
			</parameter>
			</parameters>
			<return-types>
			<return-type type="Number" />
			</return-types>
			<return-description>The process ID of the timeout function associated 
with doShow</return-description>
		</method>
		<method name="initEvents" scope="instance">
			<description>Initializes the custom events for Tooltip</description>
		</method>
		<method name="_removeEventListeners" scope="instance">
			<description>Removes all of the DOM event handlers from the HTML element(s) that trigger the display of the tooltip.</description>
		</method>
		<method name="configContext" scope="instance">
			<description>The default event handler fired when the &quot;context&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="doHide" scope="instance">
			<description>Sets the timeout for the auto-dismiss delay, which by default is 5 seconds, meaning that a tooltip will automatically dismiss itself after 5 seconds of being displayed.</description>
		</method>
		<method name="onContextMouseOut" scope="instance">
			<description>The default event handler fired when the user mouses out of the context element.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The current DOM event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The object argument</description>
			</parameter>
			</parameters>
		</method>
		<method name="forceUnderlayRedraw" scope="instance">
			<description>Forces the underlay element to be repainted, through the application/removal of a yui-force-redraw class to the underlay element.</description>
		</method>
		<method name="configContainer" scope="instance">
			<description>The default event handler fired when the &quot;container&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="init" scope="instance">
			<description>The Tooltip initialization method. This method is automatically called by the constructor. A Tooltip is automatically rendered by the init method, and it also is set to be invisible by default, and constrained to viewport by default as well.</description>
			<parameters>
			<parameter name="el" type="String" usage="required">
				<description> The element ID representing the Tooltip &lt;em&gt;OR&lt;/em&gt;</description>
			</parameter>
			<parameter name="el" type="HTMLElement" usage="required">
				<description> The element representing the Tooltip</description>
			</parameter>
			<parameter name="userConfig" type="Object" usage="optional">
				<description> The configuration object literal containing the configuration that should be set for this Tooltip. See configuration documentation for more details.</description>
			</parameter>
			</parameters>
		</method>
		<method name="onContextMouseMove" scope="instance">
			<description>The default event handler fired when the user moves the mouse while over the context element.</description>
			<parameters>
			<parameter name="e" type="DOMEvent" usage="required">
				<description> The current DOM event</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The object argument</description>
			</parameter>
			</parameters>
		</method>
		<method name="configText" scope="instance">
			<description>The default event handler fired when the &quot;text&quot; property is changed.</description>
			<parameters>
			<parameter name="type" type="String" usage="required">
				<description> The CustomEvent type (usually the property name)</description>
			</parameter>
			<parameter name="args" type="Object[]" usage="required">
				<description> The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</description>
			</parameter>
			<parameter name="obj" type="Object" usage="required">
				<description> The scope object. For configuration handlers, this will usually equal the owner.</description>
			</parameter>
			</parameters>
		</method>
		<method name="preventOverlay" scope="instance">
			<description>Fired when the Tooltip is moved, this event handler is used to prevent the Tooltip from overlapping with its context element.</description>
			<parameters>
			<parameter name="pageX" type="Number" usage="required">
				<description> The x coordinate position of the mouse pointer</description>
			</parameter>
			<parameter name="pageY" type="Number" usage="required">
				<description> The y coordinate position of the mouse pointer</description>
			</parameter>
			</parameters>
		</method>
		<method name="destroy" scope="instance">
			<description>Removes the Tooltip element from the DOM and sets all child elements to null.</description>
		</method>
		<method name="toString" scope="instance">
			<description>Returns a string representation of the object.</description>
			<return-types>
			<return-type type="String" />
			</return-types>
			<return-description>The string representation of the Tooltip</return-description>
		</method>
		<method name="initDefaultConfig" scope="instance">
			<description>Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).</description>
		</method>
		</methods>
	</class>
</javascript>

